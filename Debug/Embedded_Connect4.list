
Embedded_Connect4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068ec  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e8  08006a98  08006a98  00007a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c80  08007c80  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  08007c80  08007c80  00008c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c88  08007c88  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c88  08007c88  00008c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c8c  08007c8c  00008c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08007c90  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000901c  2**0
                  CONTENTS
 10 .bss          00025bf0  2000001c  2000001c  0000901c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025c0c  20025c0c  0000901c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013e65  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031b5  00000000  00000000  0001ceb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  00020068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001006  00000000  00000000  00021520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026cc6  00000000  00000000  00022526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018a93  00000000  00000000  000491ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3067  00000000  00000000  00061c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00144ce6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000566c  00000000  00000000  00144d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  0014a398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006a80 	.word	0x08006a80

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08006a80 	.word	0x08006a80

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f002 fe46 	bl	8003170 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 fa7e 	bl	80009e4 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 fa3b 	bl	8000964 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80004ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 fc58 	bl	8000da8 <LCD_Clear>

    buttonInit();
 80004f8:	f000 f83c 	bl	8000574 <buttonInit>
    addSchedulerEvent(START_MENU_EVENT);
 80004fc:	2001      	movs	r0, #1
 80004fe:	f001 f969 	bl	80017d4 <addSchedulerEvent>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 8000502:	f001 f943 	bl	800178c <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 8000506:	4b02      	ldr	r3, [pc, #8]	@ (8000510 <ApplicationInit+0x34>)
 8000508:	2201      	movs	r2, #1
 800050a:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000038 	.word	0x20000038

08000514 <LCD_Start_Screen>:
void LCD_Visual_Demo(void)
{
	visualDemo();
}

void LCD_Start_Screen(){
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	LCD_Draw_Start_Screen();
 8000518:	f000 ff66 	bl	80013e8 <LCD_Draw_Start_Screen>
	addSchedulerEvent(POLLING_MODE_SELECT_EVENT);
 800051c:	2002      	movs	r0, #2
 800051e:	f001 f959 	bl	80017d4 <addSchedulerEvent>
	removeSchedulerEvent(START_MENU_EVENT);
 8000522:	2001      	movs	r0, #1
 8000524:	f001 f968 	bl	80017f8 <removeSchedulerEvent>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}

0800052c <LCD_Select_Color_Screen>:

void LCD_Select_Color_Screen(){
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	LCD_Draw_Select_Color_Screen();
 8000530:	f000 ff96 	bl	8001460 <LCD_Draw_Select_Color_Screen>
	removeSchedulerEvent(COLOR_SELECT_EVENT);
 8000534:	2004      	movs	r0, #4
 8000536:	f001 f95f 	bl	80017f8 <removeSchedulerEvent>
	addSchedulerEvent(POLLING_COLOR_SELECT_EVENT);
 800053a:	2008      	movs	r0, #8
 800053c:	f001 f94a 	bl	80017d4 <addSchedulerEvent>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <LCD_Game_Screen>:

void LCD_Game_Screen(){
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	LCD_Draw_Game_Grid();
 8000548:	f000 ffdc 	bl	8001504 <LCD_Draw_Game_Grid>
	removeSchedulerEvent(BUILD_NEW_GAME_EVENT);
 800054c:	2010      	movs	r0, #16
 800054e:	f001 f953 	bl	80017f8 <removeSchedulerEvent>
	addSchedulerEvent(POLLING_GAME_EVENT);
 8000552:	2020      	movs	r0, #32
 8000554:	f001 f93e 	bl	80017d4 <addSchedulerEvent>
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}

0800055c <LCD_Score_Screen>:

void LCD_Score_Screen(){
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	LCD_Draw_Score_Screen();
 8000560:	f001 f852 	bl	8001608 <LCD_Draw_Score_Screen>
	removeSchedulerEvent(SCORE_SCREEN_EVENT);
 8000564:	2040      	movs	r0, #64	@ 0x40
 8000566:	f001 f947 	bl	80017f8 <removeSchedulerEvent>
	addSchedulerEvent(POLLING_RESTART_EVENT);
 800056a:	2080      	movs	r0, #128	@ 0x80
 800056c:	f001 f932 	bl	80017d4 <addSchedulerEvent>
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}

08000574 <buttonInit>:

void buttonInit(){
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	Button_Init();
 8000578:	f000 f880 	bl	800067c <Button_Init>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}

08000580 <LCD_Polling_Mode>:
			}
		}
}


void LCD_Polling_Mode(){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000584:	4808      	ldr	r0, [pc, #32]	@ (80005a8 <LCD_Polling_Mode+0x28>)
 8000586:	f001 f90c 	bl	80017a2 <returnTouchStateAndLocation>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d109      	bne.n	80005a4 <LCD_Polling_Mode+0x24>
		/* Touch valid */
		if(StaticTouchData.x < LCD_PIXEL_WIDTH/2){
 8000590:	4b05      	ldr	r3, [pc, #20]	@ (80005a8 <LCD_Polling_Mode+0x28>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	2b77      	cmp	r3, #119	@ 0x77
 8000596:	d805      	bhi.n	80005a4 <LCD_Polling_Mode+0x24>
			//Bottom half
			removeSchedulerEvent(POLLING_MODE_SELECT_EVENT);
 8000598:	2002      	movs	r0, #2
 800059a:	f001 f92d 	bl	80017f8 <removeSchedulerEvent>
			addSchedulerEvent(COLOR_SELECT_EVENT);
 800059e:	2004      	movs	r0, #4
 80005a0:	f001 f918 	bl	80017d4 <addSchedulerEvent>
		}
	}
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000038 	.word	0x20000038

080005ac <LCD_Polling_Color>:

void LCD_Polling_Color(){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80005b0:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <LCD_Polling_Color+0x38>)
 80005b2:	f001 f8f6 	bl	80017a2 <returnTouchStateAndLocation>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d110      	bne.n	80005de <LCD_Polling_Color+0x32>
			/* Touch valid */
			if(StaticTouchData.x < LCD_PIXEL_WIDTH/2){
 80005bc:	4b09      	ldr	r3, [pc, #36]	@ (80005e4 <LCD_Polling_Color+0x38>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	2b77      	cmp	r3, #119	@ 0x77
 80005c2:	d803      	bhi.n	80005cc <LCD_Polling_Color+0x20>
				//left side
				LCD_Set_Player(PLAYER_RED);
 80005c4:	2002      	movs	r0, #2
 80005c6:	f000 f889 	bl	80006dc <LCD_Set_Player>
 80005ca:	e002      	b.n	80005d2 <LCD_Polling_Color+0x26>
			}
			else{
				//right side
				LCD_Set_Player(PLAYER_YELLOW);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f000 f885 	bl	80006dc <LCD_Set_Player>
			}
			removeSchedulerEvent(POLLING_COLOR_SELECT_EVENT);
 80005d2:	2008      	movs	r0, #8
 80005d4:	f001 f910 	bl	80017f8 <removeSchedulerEvent>
			addSchedulerEvent(BUILD_NEW_GAME_EVENT);
 80005d8:	2010      	movs	r0, #16
 80005da:	f001 f8fb 	bl	80017d4 <addSchedulerEvent>
		}
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000038 	.word	0x20000038

080005e8 <LCD_Touch_Polling_Game>:

void LCD_Touch_Polling_Game(){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	/* If touch pressed */
	if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80005ec:	4809      	ldr	r0, [pc, #36]	@ (8000614 <LCD_Touch_Polling_Game+0x2c>)
 80005ee:	f001 f8d8 	bl	80017a2 <returnTouchStateAndLocation>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d10a      	bne.n	800060e <LCD_Touch_Polling_Game+0x26>
		/* Touch valid */
		if(StaticTouchData.x < LCD_PIXEL_WIDTH/2){
 80005f8:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <LCD_Touch_Polling_Game+0x2c>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	2b77      	cmp	r3, #119	@ 0x77
 80005fe:	d803      	bhi.n	8000608 <LCD_Touch_Polling_Game+0x20>
			//left side
			LCD_Update_Chip_To_Drop(LEFT);
 8000600:	2001      	movs	r0, #1
 8000602:	f000 fac5 	bl	8000b90 <LCD_Update_Chip_To_Drop>
			LCD_Update_Chip_To_Drop(RIGHT);
		}
	}
	/* Touch not pressed */
	//do nothing
}
 8000606:	e002      	b.n	800060e <LCD_Touch_Polling_Game+0x26>
			LCD_Update_Chip_To_Drop(RIGHT);
 8000608:	2000      	movs	r0, #0
 800060a:	f000 fac1 	bl	8000b90 <LCD_Update_Chip_To_Drop>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000038 	.word	0x20000038

08000618 <LCD_Polling_Restart>:

void LCD_Polling_Restart(){
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 800061c:	4808      	ldr	r0, [pc, #32]	@ (8000640 <LCD_Polling_Restart+0x28>)
 800061e:	f001 f8c0 	bl	80017a2 <returnTouchStateAndLocation>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d109      	bne.n	800063c <LCD_Polling_Restart+0x24>
		/* Touch valid */
		if(StaticTouchData.y < LCD_PIXEL_HEIGHT/2){
 8000628:	4b05      	ldr	r3, [pc, #20]	@ (8000640 <LCD_Polling_Restart+0x28>)
 800062a:	885b      	ldrh	r3, [r3, #2]
 800062c:	2b9f      	cmp	r3, #159	@ 0x9f
 800062e:	d805      	bhi.n	800063c <LCD_Polling_Restart+0x24>
			//Bottom half
			removeSchedulerEvent(POLLING_RESTART_EVENT);
 8000630:	2080      	movs	r0, #128	@ 0x80
 8000632:	f001 f8e1 	bl	80017f8 <removeSchedulerEvent>
			addSchedulerEvent(START_MENU_EVENT);
 8000636:	2001      	movs	r0, #1
 8000638:	f001 f8cc 	bl	80017d4 <addSchedulerEvent>
		}
	}
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000038 	.word	0x20000038

08000644 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(){
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800064a:	2006      	movs	r0, #6
 800064c:	f002 ff93 	bl	8003576 <HAL_NVIC_DisableIRQ>

	uint32_t eventsToRun = getScheduledEvents();
 8000650:	f001 f8b4 	bl	80017bc <getScheduledEvents>
 8000654:	6078      	str	r0, [r7, #4]
	//only want to do stuff if the game screen is active
	if(eventsToRun & POLLING_GAME_EVENT){
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f003 0320 	and.w	r3, r3, #32
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <EXTI0_IRQHandler+0x20>
		LCD_Insert_Chip_Game_Grid();
 8000660:	f000 fdf8 	bl	8001254 <LCD_Insert_Chip_Game_Grid>
		//allows for you to insert a chip if the game is active
    }
	__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_0);
 8000664:	4b04      	ldr	r3, [pc, #16]	@ (8000678 <EXTI0_IRQHandler+0x34>)
 8000666:	2201      	movs	r2, #1
 8000668:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800066a:	2006      	movs	r0, #6
 800066c:	f002 ff75 	bl	800355a <HAL_NVIC_EnableIRQ>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40013c00 	.word	0x40013c00

0800067c <Button_Init>:
#include "Button_Driver.h"

void Button_Init(){
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <Button_Init+0x54>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a11      	ldr	r2, [pc, #68]	@ (80006d0 <Button_Init+0x54>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <Button_Init+0x54>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
		GPIO_InitTypeDef buttonPin;
		buttonPin.Pin         = BUTTON_PIN;
 800069e:	2301      	movs	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
		buttonPin.Mode        = GPIO_MODE_IT_RISING;
 80006a2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006a6:	60bb      	str	r3, [r7, #8]
		buttonPin.Pull        = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
		buttonPin.Speed       = GPIO_SPEED_FREQ_HIGH;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
		//buttonPin.Alternate   = GPIO_AF1_TIM2;
		HAL_GPIO_Init(BUTTON_PORT, &buttonPin);
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4619      	mov	r1, r3
 80006b4:	4807      	ldr	r0, [pc, #28]	@ (80006d4 <Button_Init+0x58>)
 80006b6:	f002 ff79 	bl	80035ac <HAL_GPIO_Init>
		__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_0);
 80006ba:	4b07      	ldr	r3, [pc, #28]	@ (80006d8 <Button_Init+0x5c>)
 80006bc:	2201      	movs	r2, #1
 80006be:	615a      	str	r2, [r3, #20]

		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006c0:	2006      	movs	r0, #6
 80006c2:	f002 ff4a 	bl	800355a <HAL_NVIC_EnableIRQ>
}
 80006c6:	bf00      	nop
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40020000 	.word	0x40020000
 80006d8:	40013c00 	.word	0x40013c00

080006dc <LCD_Set_Player>:
static chip_to_drop_t chip;
uint8_t playerTurn        = PLAYER_RED;
uint8_t redScore          = 0;
uint8_t yellowScore       = 0;

void LCD_Set_Player(uint8_t color){
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	playerTurn = color;
 80006e6:	4a04      	ldr	r2, [pc, #16]	@ (80006f8 <LCD_Set_Player+0x1c>)
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	7013      	strb	r3, [r2, #0]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	20000002 	.word	0x20000002

080006fc <Init_Chip_To_Drop>:

void Init_Chip_To_Drop(){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	chip.yPos        = CHIP_Y_POS;
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <Init_Chip_To_Drop+0x20>)
 8000702:	223a      	movs	r2, #58	@ 0x3a
 8000704:	709a      	strb	r2, [r3, #2]
	chip.xPos        = CHIP_X_POS(CHIP_X_START_COLUMN);
 8000706:	4b05      	ldr	r3, [pc, #20]	@ (800071c <Init_Chip_To_Drop+0x20>)
 8000708:	2277      	movs	r2, #119	@ 0x77
 800070a:	705a      	strb	r2, [r3, #1]
	chip.column      = CHIP_X_START_COLUMN;
 800070c:	4b03      	ldr	r3, [pc, #12]	@ (800071c <Init_Chip_To_Drop+0x20>)
 800070e:	2203      	movs	r2, #3
 8000710:	701a      	strb	r2, [r3, #0]
	LCD_Draw_Chip_To_Drop();
 8000712:	f000 f9c5 	bl	8000aa0 <LCD_Draw_Chip_To_Drop>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2002599c 	.word	0x2002599c

08000720 <Init_Grid>:

void Init_Grid(){
 8000720:	b490      	push	{r4, r7}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<COLUMNS; i++){
 8000726:	2300      	movs	r3, #0
 8000728:	71fb      	strb	r3, [r7, #7]
 800072a:	e047      	b.n	80007bc <Init_Grid+0x9c>
		for(uint8_t j =0; j<ROWS; j++){
 800072c:	2300      	movs	r3, #0
 800072e:	71bb      	strb	r3, [r7, #6]
 8000730:	e03e      	b.n	80007b0 <Init_Grid+0x90>
			grid[i][j].xPos = SQUARE_SIZE/2+SQUARE_SIZE*i;
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	461a      	mov	r2, r3
 8000736:	0112      	lsls	r2, r2, #4
 8000738:	4413      	add	r3, r2
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	b2da      	uxtb	r2, r3
 800073e:	79f9      	ldrb	r1, [r7, #7]
 8000740:	79bb      	ldrb	r3, [r7, #6]
 8000742:	3211      	adds	r2, #17
 8000744:	b2d4      	uxtb	r4, r2
 8000746:	4822      	ldr	r0, [pc, #136]	@ (80007d0 <Init_Grid+0xb0>)
 8000748:	461a      	mov	r2, r3
 800074a:	0052      	lsls	r2, r2, #1
 800074c:	441a      	add	r2, r3
 800074e:	460b      	mov	r3, r1
 8000750:	00db      	lsls	r3, r3, #3
 8000752:	440b      	add	r3, r1
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	4413      	add	r3, r2
 8000758:	4403      	add	r3, r0
 800075a:	4622      	mov	r2, r4
 800075c:	701a      	strb	r2, [r3, #0]
			grid[i][j].yPos = SQUARE_SIZE/2 + SQUARE_SIZE*j;
 800075e:	79bb      	ldrb	r3, [r7, #6]
 8000760:	461a      	mov	r2, r3
 8000762:	0112      	lsls	r2, r2, #4
 8000764:	4413      	add	r3, r2
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	b2da      	uxtb	r2, r3
 800076a:	79f9      	ldrb	r1, [r7, #7]
 800076c:	79bb      	ldrb	r3, [r7, #6]
 800076e:	3211      	adds	r2, #17
 8000770:	b2d4      	uxtb	r4, r2
 8000772:	4817      	ldr	r0, [pc, #92]	@ (80007d0 <Init_Grid+0xb0>)
 8000774:	461a      	mov	r2, r3
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	441a      	add	r2, r3
 800077a:	460b      	mov	r3, r1
 800077c:	00db      	lsls	r3, r3, #3
 800077e:	440b      	add	r3, r1
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	4413      	add	r3, r2
 8000784:	4403      	add	r3, r0
 8000786:	3301      	adds	r3, #1
 8000788:	4622      	mov	r2, r4
 800078a:	701a      	strb	r2, [r3, #0]
			grid[i][j].playerColor = PLAYER_EMPTY;
 800078c:	79f9      	ldrb	r1, [r7, #7]
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	480f      	ldr	r0, [pc, #60]	@ (80007d0 <Init_Grid+0xb0>)
 8000792:	461a      	mov	r2, r3
 8000794:	0052      	lsls	r2, r2, #1
 8000796:	441a      	add	r2, r3
 8000798:	460b      	mov	r3, r1
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	440b      	add	r3, r1
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	4413      	add	r3, r2
 80007a2:	4403      	add	r3, r0
 80007a4:	3302      	adds	r3, #2
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
		for(uint8_t j =0; j<ROWS; j++){
 80007aa:	79bb      	ldrb	r3, [r7, #6]
 80007ac:	3301      	adds	r3, #1
 80007ae:	71bb      	strb	r3, [r7, #6]
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	2b05      	cmp	r3, #5
 80007b4:	d9bd      	bls.n	8000732 <Init_Grid+0x12>
	for(uint8_t i = 0; i<COLUMNS; i++){
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	3301      	adds	r3, #1
 80007ba:	71fb      	strb	r3, [r7, #7]
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	2b06      	cmp	r3, #6
 80007c0:	d9b4      	bls.n	800072c <Init_Grid+0xc>
			//this clears any old information about the colors from the previous game
		}
	}
}
 80007c2:	bf00      	nop
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc90      	pop	{r4, r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	2002591c 	.word	0x2002591c

080007d4 <LCD_GPIO_Init>:

void LCD_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08c      	sub	sp, #48	@ 0x30
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	4b5a      	ldr	r3, [pc, #360]	@ (8000948 <LCD_GPIO_Init+0x174>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e2:	4a59      	ldr	r2, [pc, #356]	@ (8000948 <LCD_GPIO_Init+0x174>)
 80007e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80007e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ea:	4b57      	ldr	r3, [pc, #348]	@ (8000948 <LCD_GPIO_Init+0x174>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	4b53      	ldr	r3, [pc, #332]	@ (8000948 <LCD_GPIO_Init+0x174>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a52      	ldr	r2, [pc, #328]	@ (8000948 <LCD_GPIO_Init+0x174>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b50      	ldr	r3, [pc, #320]	@ (8000948 <LCD_GPIO_Init+0x174>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b4c      	ldr	r3, [pc, #304]	@ (8000948 <LCD_GPIO_Init+0x174>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a4b      	ldr	r2, [pc, #300]	@ (8000948 <LCD_GPIO_Init+0x174>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b49      	ldr	r3, [pc, #292]	@ (8000948 <LCD_GPIO_Init+0x174>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b45      	ldr	r3, [pc, #276]	@ (8000948 <LCD_GPIO_Init+0x174>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a44      	ldr	r2, [pc, #272]	@ (8000948 <LCD_GPIO_Init+0x174>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b42      	ldr	r3, [pc, #264]	@ (8000948 <LCD_GPIO_Init+0x174>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b3e      	ldr	r3, [pc, #248]	@ (8000948 <LCD_GPIO_Init+0x174>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a3d      	ldr	r2, [pc, #244]	@ (8000948 <LCD_GPIO_Init+0x174>)
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b3b      	ldr	r3, [pc, #236]	@ (8000948 <LCD_GPIO_Init+0x174>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0308 	and.w	r3, r3, #8
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b37      	ldr	r3, [pc, #220]	@ (8000948 <LCD_GPIO_Init+0x174>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a36      	ldr	r2, [pc, #216]	@ (8000948 <LCD_GPIO_Init+0x174>)
 8000870:	f043 0320 	orr.w	r3, r3, #32
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b34      	ldr	r3, [pc, #208]	@ (8000948 <LCD_GPIO_Init+0x174>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0320 	and.w	r3, r3, #32
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b30      	ldr	r3, [pc, #192]	@ (8000948 <LCD_GPIO_Init+0x174>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a2f      	ldr	r2, [pc, #188]	@ (8000948 <LCD_GPIO_Init+0x174>)
 800088c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b2d      	ldr	r3, [pc, #180]	@ (8000948 <LCD_GPIO_Init+0x174>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800089e:	f641 0358 	movw	r3, #6232	@ 0x1858
 80008a2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80008ac:	2302      	movs	r3, #2
 80008ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80008b0:	230e      	movs	r3, #14
 80008b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4824      	ldr	r0, [pc, #144]	@ (800094c <LCD_GPIO_Init+0x178>)
 80008bc:	f002 fe76 	bl	80035ac <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80008c0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80008c4:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4820      	ldr	r0, [pc, #128]	@ (8000950 <LCD_GPIO_Init+0x17c>)
 80008ce:	f002 fe6d 	bl	80035ac <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80008d2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80008d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	481d      	ldr	r0, [pc, #116]	@ (8000954 <LCD_GPIO_Init+0x180>)
 80008e0:	f002 fe64 	bl	80035ac <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80008e4:	2348      	movs	r3, #72	@ 0x48
 80008e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	481a      	ldr	r0, [pc, #104]	@ (8000958 <LCD_GPIO_Init+0x184>)
 80008f0:	f002 fe5c 	bl	80035ac <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80008f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4816      	ldr	r0, [pc, #88]	@ (800095c <LCD_GPIO_Init+0x188>)
 8000902:	f002 fe53 	bl	80035ac <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000906:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800090a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4813      	ldr	r0, [pc, #76]	@ (8000960 <LCD_GPIO_Init+0x18c>)
 8000914:	f002 fe4a 	bl	80035ac <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000918:	2303      	movs	r3, #3
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800091c:	2309      	movs	r3, #9
 800091e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	480a      	ldr	r0, [pc, #40]	@ (8000950 <LCD_GPIO_Init+0x17c>)
 8000928:	f002 fe40 	bl	80035ac <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800092c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000930:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4809      	ldr	r0, [pc, #36]	@ (8000960 <LCD_GPIO_Init+0x18c>)
 800093a:	f002 fe37 	bl	80035ac <HAL_GPIO_Init>
}
 800093e:	bf00      	nop
 8000940:	3730      	adds	r7, #48	@ 0x30
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800
 800094c:	40020000 	.word	0x40020000
 8000950:	40020400 	.word	0x40020400
 8000954:	40020800 	.word	0x40020800
 8000958:	40020c00 	.word	0x40020c00
 800095c:	40021400 	.word	0x40021400
 8000960:	40021800 	.word	0x40021800

08000964 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b090      	sub	sp, #64	@ 0x40
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000972:	23f0      	movs	r3, #240	@ 0xf0
 8000974:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800097a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800097e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000980:	2302      	movs	r3, #2
 8000982:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000984:	23ff      	movs	r3, #255	@ 0xff
 8000986:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800098c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000992:	2305      	movs	r3, #5
 8000994:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d101      	bne.n	80009a0 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 800099c:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <LTCD_Layer_Init+0x78>)
 800099e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80009a0:	23f0      	movs	r3, #240	@ 0xf0
 80009a2:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80009a4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80009a8:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80009bc:	79fa      	ldrb	r2, [r7, #7]
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4619      	mov	r1, r3
 80009c4:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <LTCD_Layer_Init+0x7c>)
 80009c6:	f004 fa33 	bl	8004e30 <HAL_LTDC_ConfigLayer>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80009d0:	f000 fed6 	bl	8001780 <LCD_Error_Handler>
	}
}
 80009d4:	bf00      	nop
 80009d6:	3740      	adds	r7, #64	@ 0x40
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	2000011c 	.word	0x2000011c
 80009e0:	20000040 	.word	0x20000040

080009e4 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80009e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a94 <LTCD__Init+0xb0>)
 80009ea:	4a2b      	ldr	r2, [pc, #172]	@ (8000a98 <LTCD__Init+0xb4>)
 80009ec:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80009ee:	4b29      	ldr	r3, [pc, #164]	@ (8000a94 <LTCD__Init+0xb0>)
 80009f0:	2209      	movs	r2, #9
 80009f2:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80009f4:	4b27      	ldr	r3, [pc, #156]	@ (8000a94 <LTCD__Init+0xb0>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80009fa:	4b26      	ldr	r3, [pc, #152]	@ (8000a94 <LTCD__Init+0xb0>)
 80009fc:	221d      	movs	r2, #29
 80009fe:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000a00:	4b24      	ldr	r3, [pc, #144]	@ (8000a94 <LTCD__Init+0xb0>)
 8000a02:	2203      	movs	r2, #3
 8000a04:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000a06:	4b23      	ldr	r3, [pc, #140]	@ (8000a94 <LTCD__Init+0xb0>)
 8000a08:	f240 120d 	movw	r2, #269	@ 0x10d
 8000a0c:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	@ (8000a94 <LTCD__Init+0xb0>)
 8000a10:	f240 1243 	movw	r2, #323	@ 0x143
 8000a14:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000a16:	4b1f      	ldr	r3, [pc, #124]	@ (8000a94 <LTCD__Init+0xb0>)
 8000a18:	f240 1217 	movw	r2, #279	@ 0x117
 8000a1c:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a94 <LTCD__Init+0xb0>)
 8000a20:	f240 1247 	movw	r2, #327	@ 0x147
 8000a24:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000a26:	4b1b      	ldr	r3, [pc, #108]	@ (8000a94 <LTCD__Init+0xb0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <LTCD__Init+0xb0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000a36:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <LTCD__Init+0xb0>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000a3e:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <LTCD__Init+0xb8>)
 8000a40:	2208      	movs	r2, #8
 8000a42:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000a44:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <LTCD__Init+0xb8>)
 8000a46:	22c0      	movs	r2, #192	@ 0xc0
 8000a48:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <LTCD__Init+0xb8>)
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <LTCD__Init+0xb8>)
 8000a52:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a56:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000a58:	4810      	ldr	r0, [pc, #64]	@ (8000a9c <LTCD__Init+0xb8>)
 8000a5a:	f005 f843 	bl	8005ae4 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <LTCD__Init+0xb0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a64:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <LTCD__Init+0xb0>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <LTCD__Init+0xb0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a70:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <LTCD__Init+0xb0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000a76:	f7ff fead 	bl	80007d4 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a7a:	4806      	ldr	r0, [pc, #24]	@ (8000a94 <LTCD__Init+0xb0>)
 8000a7c:	f004 f908 	bl	8004c90 <HAL_LTDC_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000a86:	f000 fe7b 	bl	8001780 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000a8a:	f000 fec9 	bl	8001820 <ili9341_Init>
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000040 	.word	0x20000040
 8000a98:	40016800 	.word	0x40016800
 8000a9c:	200000e8 	.word	0x200000e8

08000aa0 <LCD_Draw_Chip_To_Drop>:
/*
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Chip_To_Drop(){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	if(playerTurn == PLAYER_RED){
 8000aa4:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <LCD_Draw_Chip_To_Drop+0x48>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d10b      	bne.n	8000ac4 <LCD_Draw_Chip_To_Drop+0x24>
		LCD_Draw_Circle_Fill(chip.xPos, chip.yPos, CIRCLE_RADIUS, LCD_COLOR_RED);
 8000aac:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <LCD_Draw_Chip_To_Drop+0x4c>)
 8000aae:	785b      	ldrb	r3, [r3, #1]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <LCD_Draw_Chip_To_Drop+0x4c>)
 8000ab4:	789b      	ldrb	r3, [r3, #2]
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000abc:	220c      	movs	r2, #12
 8000abe:	f000 f895 	bl	8000bec <LCD_Draw_Circle_Fill>
	}
	else if(playerTurn == PLAYER_YELLOW){
		LCD_Draw_Circle_Fill(chip.xPos, chip.yPos, CIRCLE_RADIUS, LCD_COLOR_YELLOW);
	}
	//if nothing is updating then there is an error with playerTurn
}
 8000ac2:	e00e      	b.n	8000ae2 <LCD_Draw_Chip_To_Drop+0x42>
	else if(playerTurn == PLAYER_YELLOW){
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <LCD_Draw_Chip_To_Drop+0x48>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d10a      	bne.n	8000ae2 <LCD_Draw_Chip_To_Drop+0x42>
		LCD_Draw_Circle_Fill(chip.xPos, chip.yPos, CIRCLE_RADIUS, LCD_COLOR_YELLOW);
 8000acc:	4b07      	ldr	r3, [pc, #28]	@ (8000aec <LCD_Draw_Chip_To_Drop+0x4c>)
 8000ace:	785b      	ldrb	r3, [r3, #1]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <LCD_Draw_Chip_To_Drop+0x4c>)
 8000ad4:	789b      	ldrb	r3, [r3, #2]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000adc:	220c      	movs	r2, #12
 8000ade:	f000 f885 	bl	8000bec <LCD_Draw_Circle_Fill>
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000002 	.word	0x20000002
 8000aec:	2002599c 	.word	0x2002599c

08000af0 <LCD_Clear_Chip_To_Drop>:

void LCD_Clear_Chip_To_Drop(){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	LCD_Draw_Circle_Fill(chip.xPos, chip.yPos, CIRCLE_RADIUS, LCD_COLOR_WHITE);
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <LCD_Clear_Chip_To_Drop+0x20>)
 8000af6:	785b      	ldrb	r3, [r3, #1]
 8000af8:	4618      	mov	r0, r3
 8000afa:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <LCD_Clear_Chip_To_Drop+0x20>)
 8000afc:	789b      	ldrb	r3, [r3, #2]
 8000afe:	4619      	mov	r1, r3
 8000b00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b04:	220c      	movs	r2, #12
 8000b06:	f000 f871 	bl	8000bec <LCD_Draw_Circle_Fill>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2002599c 	.word	0x2002599c

08000b14 <LCD_Update_Chip_To_Drop_Column>:

void LCD_Update_Chip_To_Drop_Column(int direction){
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	if(direction == RIGHT && chip.column != RIGHT_MOST_COLUMN){
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d115      	bne.n	8000b4e <LCD_Update_Chip_To_Drop_Column+0x3a>
 8000b22:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d011      	beq.n	8000b4e <LCD_Update_Chip_To_Drop_Column+0x3a>
		//if its the 7th most do nothing
		chip.column = chip.column + 1;
 8000b2a:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000b34:	701a      	strb	r2, [r3, #0]
		chip.xPos   = CHIP_X_POS(chip.column);
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	0112      	lsls	r2, r2, #4
 8000b3e:	4413      	add	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	3311      	adds	r3, #17
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000b4a:	705a      	strb	r2, [r3, #1]
	else if(direction == LEFT && chip.column != LEFT_MOST_COLUMN){
		//if its the 1st column do nothing
		chip.column = chip.column - 1;
		chip.xPos   = CHIP_X_POS(chip.column);
	}
}
 8000b4c:	e017      	b.n	8000b7e <LCD_Update_Chip_To_Drop_Column+0x6a>
	else if(direction == LEFT && chip.column != LEFT_MOST_COLUMN){
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d114      	bne.n	8000b7e <LCD_Update_Chip_To_Drop_Column+0x6a>
 8000b54:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d010      	beq.n	8000b7e <LCD_Update_Chip_To_Drop_Column+0x6a>
		chip.column = chip.column - 1;
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	3b01      	subs	r3, #1
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000b66:	701a      	strb	r2, [r3, #0]
		chip.xPos   = CHIP_X_POS(chip.column);
 8000b68:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	0112      	lsls	r2, r2, #4
 8000b70:	4413      	add	r3, r2
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	3311      	adds	r3, #17
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4b04      	ldr	r3, [pc, #16]	@ (8000b8c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000b7c:	705a      	strb	r2, [r3, #1]
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	2002599c 	.word	0x2002599c

08000b90 <LCD_Update_Chip_To_Drop>:

void LCD_Update_Chip_To_Drop(int dir){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	LCD_Clear_Chip_To_Drop();
 8000b98:	f7ff ffaa 	bl	8000af0 <LCD_Clear_Chip_To_Drop>
	//HAL_Delay(10);
	LCD_Update_Chip_To_Drop_Column(dir);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ffb9 	bl	8000b14 <LCD_Update_Chip_To_Drop_Column>
	LCD_Draw_Chip_To_Drop();
 8000ba2:	f7ff ff7d 	bl	8000aa0 <LCD_Draw_Chip_To_Drop>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <LCD_Draw_Pixel>:

void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	80fb      	strh	r3, [r7, #6]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	80bb      	strh	r3, [r7, #4]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000bc2:	88ba      	ldrh	r2, [r7, #4]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	011b      	lsls	r3, r3, #4
 8000bc8:	1a9b      	subs	r3, r3, r2
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	461a      	mov	r2, r3
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4905      	ldr	r1, [pc, #20]	@ (8000be8 <LCD_Draw_Pixel+0x38>)
 8000bd4:	887a      	ldrh	r2, [r7, #2]
 8000bd6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	2000011c 	.word	0x2000011c

08000bec <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4623      	mov	r3, r4
 8000bfc:	80fb      	strh	r3, [r7, #6]
 8000bfe:	4603      	mov	r3, r0
 8000c00:	80bb      	strh	r3, [r7, #4]
 8000c02:	460b      	mov	r3, r1
 8000c04:	807b      	strh	r3, [r7, #2]
 8000c06:	4613      	mov	r3, r2
 8000c08:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000c0a:	887b      	ldrh	r3, [r7, #2]
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	81fb      	strh	r3, [r7, #14]
 8000c12:	e034      	b.n	8000c7e <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000c14:	887b      	ldrh	r3, [r7, #2]
 8000c16:	425b      	negs	r3, r3
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	81bb      	strh	r3, [r7, #12]
 8000c1c:	e024      	b.n	8000c68 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000c1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c22:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c26:	fb03 f202 	mul.w	r2, r3, r2
 8000c2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c2e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000c32:	fb01 f303 	mul.w	r3, r1, r3
 8000c36:	441a      	add	r2, r3
 8000c38:	887b      	ldrh	r3, [r7, #2]
 8000c3a:	8879      	ldrh	r1, [r7, #2]
 8000c3c:	fb01 f303 	mul.w	r3, r1, r3
 8000c40:	429a      	cmp	r2, r3
 8000c42:	dc0b      	bgt.n	8000c5c <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000c44:	89ba      	ldrh	r2, [r7, #12]
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	4413      	add	r3, r2
 8000c4a:	b298      	uxth	r0, r3
 8000c4c:	89fa      	ldrh	r2, [r7, #14]
 8000c4e:	88bb      	ldrh	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	883a      	ldrh	r2, [r7, #0]
 8000c56:	4619      	mov	r1, r3
 8000c58:	f7ff ffaa 	bl	8000bb0 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000c5c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	3301      	adds	r3, #1
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	81bb      	strh	r3, [r7, #12]
 8000c68:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c6c:	887b      	ldrh	r3, [r7, #2]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	ddd5      	ble.n	8000c1e <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000c72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	3301      	adds	r3, #1
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	81fb      	strh	r3, [r7, #14]
 8000c7e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c82:	887b      	ldrh	r3, [r7, #2]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	ddc5      	ble.n	8000c14 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd90      	pop	{r4, r7, pc}

08000c92 <LCD_Draw_Rectangle_Fill>:

void LCD_Draw_Rectangle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint16_t Height, uint16_t color){
 8000c92:	b590      	push	{r4, r7, lr}
 8000c94:	b085      	sub	sp, #20
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	4604      	mov	r4, r0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4623      	mov	r3, r4
 8000ca2:	80fb      	strh	r3, [r7, #6]
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	80bb      	strh	r3, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	807b      	strh	r3, [r7, #2]
 8000cac:	4613      	mov	r3, r2
 8000cae:	803b      	strh	r3, [r7, #0]
	for(int16_t y=0; y<Height; y++){
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	81fb      	strh	r3, [r7, #14]
 8000cb4:	e01f      	b.n	8000cf6 <LCD_Draw_Rectangle_Fill+0x64>
		for(int16_t x=0; x<Length; x++){
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	81bb      	strh	r3, [r7, #12]
 8000cba:	e011      	b.n	8000ce0 <LCD_Draw_Rectangle_Fill+0x4e>
			LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000cbc:	89ba      	ldrh	r2, [r7, #12]
 8000cbe:	88fb      	ldrh	r3, [r7, #6]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	b298      	uxth	r0, r3
 8000cc4:	89fa      	ldrh	r2, [r7, #14]
 8000cc6:	88bb      	ldrh	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	8c3a      	ldrh	r2, [r7, #32]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f7ff ff6e 	bl	8000bb0 <LCD_Draw_Pixel>
		for(int16_t x=0; x<Length; x++){
 8000cd4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	3301      	adds	r3, #1
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	81bb      	strh	r3, [r7, #12]
 8000ce0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ce4:	887b      	ldrh	r3, [r7, #2]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	dbe8      	blt.n	8000cbc <LCD_Draw_Rectangle_Fill+0x2a>
	for(int16_t y=0; y<Height; y++){
 8000cea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	81fb      	strh	r3, [r7, #14]
 8000cf6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cfa:	883b      	ldrh	r3, [r7, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	dbda      	blt.n	8000cb6 <LCD_Draw_Rectangle_Fill+0x24>
		}
	}
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd90      	pop	{r4, r7, pc}

08000d0a <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000d0a:	b590      	push	{r4, r7, lr}
 8000d0c:	b085      	sub	sp, #20
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4604      	mov	r4, r0
 8000d12:	4608      	mov	r0, r1
 8000d14:	4611      	mov	r1, r2
 8000d16:	461a      	mov	r2, r3
 8000d18:	4623      	mov	r3, r4
 8000d1a:	80fb      	strh	r3, [r7, #6]
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	80bb      	strh	r3, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	807b      	strh	r3, [r7, #2]
 8000d24:	4613      	mov	r3, r2
 8000d26:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000d28:	2300      	movs	r3, #0
 8000d2a:	81fb      	strh	r3, [r7, #14]
 8000d2c:	e00b      	b.n	8000d46 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000d2e:	89fa      	ldrh	r2, [r7, #14]
 8000d30:	88bb      	ldrh	r3, [r7, #4]
 8000d32:	4413      	add	r3, r2
 8000d34:	b299      	uxth	r1, r3
 8000d36:	883a      	ldrh	r2, [r7, #0]
 8000d38:	88fb      	ldrh	r3, [r7, #6]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff38 	bl	8000bb0 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000d40:	89fb      	ldrh	r3, [r7, #14]
 8000d42:	3301      	adds	r3, #1
 8000d44:	81fb      	strh	r3, [r7, #14]
 8000d46:	89fa      	ldrh	r2, [r7, #14]
 8000d48:	887b      	ldrh	r3, [r7, #2]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d3ef      	bcc.n	8000d2e <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000d4e:	bf00      	nop
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd90      	pop	{r4, r7, pc}

08000d58 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	4608      	mov	r0, r1
 8000d62:	4611      	mov	r1, r2
 8000d64:	461a      	mov	r2, r3
 8000d66:	4623      	mov	r3, r4
 8000d68:	80fb      	strh	r3, [r7, #6]
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	80bb      	strh	r3, [r7, #4]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	807b      	strh	r3, [r7, #2]
 8000d72:	4613      	mov	r3, r2
 8000d74:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000d76:	2300      	movs	r3, #0
 8000d78:	81fb      	strh	r3, [r7, #14]
 8000d7a:	e00b      	b.n	8000d94 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8000d7c:	89fa      	ldrh	r2, [r7, #14]
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	4413      	add	r3, r2
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	883a      	ldrh	r2, [r7, #0]
 8000d86:	88b9      	ldrh	r1, [r7, #4]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff11 	bl	8000bb0 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000d8e:	89fb      	ldrh	r3, [r7, #14]
 8000d90:	3301      	adds	r3, #1
 8000d92:	81fb      	strh	r3, [r7, #14]
 8000d94:	89fa      	ldrh	r2, [r7, #14]
 8000d96:	887b      	ldrh	r3, [r7, #2]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d3ef      	bcc.n	8000d7c <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd90      	pop	{r4, r7, pc}
	...

08000da8 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	460a      	mov	r2, r1
 8000db2:	71fb      	strb	r3, [r7, #7]
 8000db4:	4613      	mov	r3, r2
 8000db6:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d10e      	bne.n	8000ddc <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	e007      	b.n	8000dd4 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000dc4:	4908      	ldr	r1, [pc, #32]	@ (8000de8 <LCD_Clear+0x40>)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	88ba      	ldrh	r2, [r7, #4]
 8000dca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000dda:	d3f3      	bcc.n	8000dc4 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	2000011c 	.word	0x2000011c

08000dec <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000df6:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <LCD_SetTextColor+0x1c>)
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	8013      	strh	r3, [r2, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	20000000 	.word	0x20000000

08000e0c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000e14:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <LCD_SetFont+0x1c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000118 	.word	0x20000118

08000e2c <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	603a      	str	r2, [r7, #0]
 8000e36:	80fb      	strh	r3, [r7, #6]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	e04c      	b.n	8000ee4 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	e03f      	b.n	8000ed0 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4b27      	ldr	r3, [pc, #156]	@ (8000efc <LCD_Draw_Char+0xd0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	889b      	ldrh	r3, [r3, #4]
 8000e62:	4a27      	ldr	r2, [pc, #156]	@ (8000f00 <LCD_Draw_Char+0xd4>)
 8000e64:	fba2 2303 	umull	r2, r3, r2, r3
 8000e68:	08db      	lsrs	r3, r3, #3
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	2280      	movs	r2, #128	@ 0x80
 8000e70:	409a      	lsls	r2, r3
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	fa42 f303 	asr.w	r3, r2, r3
 8000e78:	400b      	ands	r3, r1
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d104      	bne.n	8000e88 <LCD_Draw_Char+0x5c>
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <LCD_Draw_Char+0xd0>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	889b      	ldrh	r3, [r3, #4]
 8000e84:	2b0c      	cmp	r3, #12
 8000e86:	d920      	bls.n	8000eca <LCD_Draw_Char+0x9e>
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	fa42 f303 	asr.w	r3, r2, r3
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d104      	bne.n	8000eac <LCD_Draw_Char+0x80>
 8000ea2:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <LCD_Draw_Char+0xd0>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	889b      	ldrh	r3, [r3, #4]
 8000ea8:	2b0c      	cmp	r3, #12
 8000eaa:	d80e      	bhi.n	8000eca <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	b298      	uxth	r0, r3
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	88bb      	ldrh	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	4a10      	ldr	r2, [pc, #64]	@ (8000f04 <LCD_Draw_Char+0xd8>)
 8000ec2:	8812      	ldrh	r2, [r2, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f7ff fe73 	bl	8000bb0 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <LCD_Draw_Char+0xd0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	889b      	ldrh	r3, [r3, #4]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d3b8      	bcc.n	8000e50 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <LCD_Draw_Char+0xd0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	88db      	ldrh	r3, [r3, #6]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d3ab      	bcc.n	8000e4a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000118 	.word	0x20000118
 8000f00:	aaaaaaab 	.word	0xaaaaaaab
 8000f04:	20000000 	.word	0x20000000

08000f08 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	80fb      	strh	r3, [r7, #6]
 8000f12:	460b      	mov	r3, r1
 8000f14:	80bb      	strh	r3, [r7, #4]
 8000f16:	4613      	mov	r3, r2
 8000f18:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000f1a:	78fb      	ldrb	r3, [r7, #3]
 8000f1c:	3b20      	subs	r3, #32
 8000f1e:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000f20:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <LCD_DisplayChar+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	78fb      	ldrb	r3, [r7, #3]
 8000f28:	4907      	ldr	r1, [pc, #28]	@ (8000f48 <LCD_DisplayChar+0x40>)
 8000f2a:	6809      	ldr	r1, [r1, #0]
 8000f2c:	88c9      	ldrh	r1, [r1, #6]
 8000f2e:	fb01 f303 	mul.w	r3, r1, r3
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	441a      	add	r2, r3
 8000f36:	88b9      	ldrh	r1, [r7, #4]
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff76 	bl	8000e2c <LCD_Draw_Char>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000118 	.word	0x20000118

08000f4c <LCD_Space_Available_Game_Grid>:

bool LCD_Space_Available_Game_Grid(){
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
	if(grid[chip.column][5].playerColor != PLAYER_EMPTY){
 8000f50:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <LCD_Space_Available_Game_Grid+0x30>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	4a0a      	ldr	r2, [pc, #40]	@ (8000f80 <LCD_Space_Available_Game_Grid+0x34>)
 8000f58:	460b      	mov	r3, r1
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	440b      	add	r3, r1
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4413      	add	r3, r2
 8000f62:	3311      	adds	r3, #17
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <LCD_Space_Available_Game_Grid+0x22>
	//5 is the highest row so we need to see if its occupied and if it is false
		return false;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <LCD_Space_Available_Game_Grid+0x24>
	}
	//if there is space return true
	return true;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	2002599c 	.word	0x2002599c
 8000f80:	2002591c 	.word	0x2002591c

08000f84 <LCD_Get_Row_Game_Grid>:

uint8_t LCD_Get_Row_Game_Grid(){
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
	for(int j = 0; j<ROWS; j++){
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	e017      	b.n	8000fc0 <LCD_Get_Row_Game_Grid+0x3c>
		if(grid[chip.column][j].playerColor == PLAYER_EMPTY){
 8000f90:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <LCD_Get_Row_Game_Grid+0x50>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	4910      	ldr	r1, [pc, #64]	@ (8000fd8 <LCD_Get_Row_Game_Grid+0x54>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	0052      	lsls	r2, r2, #1
 8000f9e:	441a      	add	r2, r3
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	4403      	add	r3, r0
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	4413      	add	r3, r2
 8000faa:	440b      	add	r3, r1
 8000fac:	3302      	adds	r3, #2
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d102      	bne.n	8000fba <LCD_Get_Row_Game_Grid+0x36>
			//returns the first empty square
			return j;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	e006      	b.n	8000fc8 <LCD_Get_Row_Game_Grid+0x44>
	for(int j = 0; j<ROWS; j++){
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b05      	cmp	r3, #5
 8000fc4:	dde4      	ble.n	8000f90 <LCD_Get_Row_Game_Grid+0xc>
		}
	}
	return -1; //out of bounds but should not occur
 8000fc6:	23ff      	movs	r3, #255	@ 0xff
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	2002599c 	.word	0x2002599c
 8000fd8:	2002591c 	.word	0x2002591c

08000fdc <LCD_Game_Won_Check_Row>:


bool LCD_Game_Won_Check_Row(uint8_t row, uint8_t player){
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	460a      	mov	r2, r1
 8000fe6:	71fb      	strb	r3, [r7, #7]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	71bb      	strb	r3, [r7, #6]
	uint8_t Consecutive = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]
	//Resets consecutive
	for(int i=0; i<COLUMNS; i++){
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	e01e      	b.n	8001034 <LCD_Game_Won_Check_Row+0x58>
		if(grid[i][row].playerColor == player){
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	4813      	ldr	r0, [pc, #76]	@ (8001048 <LCD_Game_Won_Check_Row+0x6c>)
 8000ffa:	68b9      	ldr	r1, [r7, #8]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	0052      	lsls	r2, r2, #1
 8001000:	441a      	add	r2, r3
 8001002:	460b      	mov	r3, r1
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	440b      	add	r3, r1
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	4403      	add	r3, r0
 800100e:	3302      	adds	r3, #2
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	79ba      	ldrb	r2, [r7, #6]
 8001014:	429a      	cmp	r2, r3
 8001016:	d103      	bne.n	8001020 <LCD_Game_Won_Check_Row+0x44>
			Consecutive++;
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	3301      	adds	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e001      	b.n	8001024 <LCD_Game_Won_Check_Row+0x48>
		}
		else{
			Consecutive = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	73fb      	strb	r3, [r7, #15]
		}

		if(Consecutive == 4){
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	2b04      	cmp	r3, #4
 8001028:	d101      	bne.n	800102e <LCD_Game_Won_Check_Row+0x52>
			return true;
 800102a:	2301      	movs	r3, #1
 800102c:	e006      	b.n	800103c <LCD_Game_Won_Check_Row+0x60>
	for(int i=0; i<COLUMNS; i++){
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	3301      	adds	r3, #1
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	2b06      	cmp	r3, #6
 8001038:	dddd      	ble.n	8000ff6 <LCD_Game_Won_Check_Row+0x1a>
		}
	}

	return false;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	2002591c 	.word	0x2002591c

0800104c <LCD_Game_Won_Check_Column>:

bool LCD_Game_Won_Check_Column(uint8_t column, uint8_t player){
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	460a      	mov	r2, r1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4613      	mov	r3, r2
 800105a:	71bb      	strb	r3, [r7, #6]
	uint8_t Consecutive = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
	for(int j=0; j<ROWS; j++){
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	e01e      	b.n	80010a4 <LCD_Game_Won_Check_Column+0x58>
		if(grid[column][j].playerColor == player){
 8001066:	79f9      	ldrb	r1, [r7, #7]
 8001068:	4813      	ldr	r0, [pc, #76]	@ (80010b8 <LCD_Game_Won_Check_Column+0x6c>)
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	461a      	mov	r2, r3
 800106e:	0052      	lsls	r2, r2, #1
 8001070:	441a      	add	r2, r3
 8001072:	460b      	mov	r3, r1
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	440b      	add	r3, r1
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	4403      	add	r3, r0
 800107e:	3302      	adds	r3, #2
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	79ba      	ldrb	r2, [r7, #6]
 8001084:	429a      	cmp	r2, r3
 8001086:	d103      	bne.n	8001090 <LCD_Game_Won_Check_Column+0x44>
			Consecutive++;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	3301      	adds	r3, #1
 800108c:	73fb      	strb	r3, [r7, #15]
 800108e:	e001      	b.n	8001094 <LCD_Game_Won_Check_Column+0x48>
		}
		else{
			Consecutive = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]
		}

		if(Consecutive == 4){
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b04      	cmp	r3, #4
 8001098:	d101      	bne.n	800109e <LCD_Game_Won_Check_Column+0x52>
			return true;
 800109a:	2301      	movs	r3, #1
 800109c:	e006      	b.n	80010ac <LCD_Game_Won_Check_Column+0x60>
	for(int j=0; j<ROWS; j++){
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	3301      	adds	r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	2b05      	cmp	r3, #5
 80010a8:	dddd      	ble.n	8001066 <LCD_Game_Won_Check_Column+0x1a>
		}
	}

	return false;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	2002591c 	.word	0x2002591c

080010bc <LCD_Game_Won_Check_Up_Right_Diagonal>:


bool LCD_Game_Won_Check_Up_Right_Diagonal(uint8_t column, uint8_t row, uint8_t player){
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	460b      	mov	r3, r1
 80010c8:	71bb      	strb	r3, [r7, #6]
 80010ca:	4613      	mov	r3, r2
 80010cc:	717b      	strb	r3, [r7, #5]
	uint8_t Consecutive = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	73fb      	strb	r3, [r7, #15]
	//need to find the bottom left spot and will go up right from there
	while( (row  > 0) && (column > 0) ){
 80010d2:	e005      	b.n	80010e0 <LCD_Game_Won_Check_Up_Right_Diagonal+0x24>
		//look until we get to the bottom left
		row--;
 80010d4:	79bb      	ldrb	r3, [r7, #6]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	71bb      	strb	r3, [r7, #6]
		column--;
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	3b01      	subs	r3, #1
 80010de:	71fb      	strb	r3, [r7, #7]
	while( (row  > 0) && (column > 0) ){
 80010e0:	79bb      	ldrb	r3, [r7, #6]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d025      	beq.n	8001132 <LCD_Game_Won_Check_Up_Right_Diagonal+0x76>
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1f3      	bne.n	80010d4 <LCD_Game_Won_Check_Up_Right_Diagonal+0x18>
	}

	while(row < ROWS && column < COLUMNS){
 80010ec:	e021      	b.n	8001132 <LCD_Game_Won_Check_Up_Right_Diagonal+0x76>
		//keep going until we encounter top right edge
		if(grid[column][row].playerColor == player){
 80010ee:	79f9      	ldrb	r1, [r7, #7]
 80010f0:	79bb      	ldrb	r3, [r7, #6]
 80010f2:	4816      	ldr	r0, [pc, #88]	@ (800114c <LCD_Game_Won_Check_Up_Right_Diagonal+0x90>)
 80010f4:	461a      	mov	r2, r3
 80010f6:	0052      	lsls	r2, r2, #1
 80010f8:	441a      	add	r2, r3
 80010fa:	460b      	mov	r3, r1
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	440b      	add	r3, r1
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	4403      	add	r3, r0
 8001106:	3302      	adds	r3, #2
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	797a      	ldrb	r2, [r7, #5]
 800110c:	429a      	cmp	r2, r3
 800110e:	d103      	bne.n	8001118 <LCD_Game_Won_Check_Up_Right_Diagonal+0x5c>
			Consecutive++;
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	3301      	adds	r3, #1
 8001114:	73fb      	strb	r3, [r7, #15]
 8001116:	e001      	b.n	800111c <LCD_Game_Won_Check_Up_Right_Diagonal+0x60>
		}
		else{
			Consecutive = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
		}

		if(Consecutive == 4){
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	2b04      	cmp	r3, #4
 8001120:	d101      	bne.n	8001126 <LCD_Game_Won_Check_Up_Right_Diagonal+0x6a>
			return true;
 8001122:	2301      	movs	r3, #1
 8001124:	e00c      	b.n	8001140 <LCD_Game_Won_Check_Up_Right_Diagonal+0x84>
		}
		row++;
 8001126:	79bb      	ldrb	r3, [r7, #6]
 8001128:	3301      	adds	r3, #1
 800112a:	71bb      	strb	r3, [r7, #6]
		column++;
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	3301      	adds	r3, #1
 8001130:	71fb      	strb	r3, [r7, #7]
	while(row < ROWS && column < COLUMNS){
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	2b05      	cmp	r3, #5
 8001136:	d802      	bhi.n	800113e <LCD_Game_Won_Check_Up_Right_Diagonal+0x82>
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2b06      	cmp	r3, #6
 800113c:	d9d7      	bls.n	80010ee <LCD_Game_Won_Check_Up_Right_Diagonal+0x32>
	}
	return false;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	2002591c 	.word	0x2002591c

08001150 <LCD_Game_Won_Check_Up_Left_Diagonal>:

bool LCD_Game_Won_Check_Up_Left_Diagonal(uint8_t column, uint8_t row, uint8_t player){
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
 800115a:	460b      	mov	r3, r1
 800115c:	71bb      	strb	r3, [r7, #6]
 800115e:	4613      	mov	r3, r2
 8001160:	717b      	strb	r3, [r7, #5]
	uint8_t Consecutive = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	73fb      	strb	r3, [r7, #15]
	//need to find the bottom left spot and will go up right from there
	while( (row > 0) && (column + 1 < COLUMNS) ){
 8001166:	e005      	b.n	8001174 <LCD_Game_Won_Check_Up_Left_Diagonal+0x24>
		//loop until bottom right, stop once we might go out of bounds (-1 or COLUMNS)
		row--;
 8001168:	79bb      	ldrb	r3, [r7, #6]
 800116a:	3b01      	subs	r3, #1
 800116c:	71bb      	strb	r3, [r7, #6]
		column++;
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	3301      	adds	r3, #1
 8001172:	71fb      	strb	r3, [r7, #7]
	while( (row > 0) && (column + 1 < COLUMNS) ){
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d025      	beq.n	80011c6 <LCD_Game_Won_Check_Up_Left_Diagonal+0x76>
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2b05      	cmp	r3, #5
 800117e:	d9f3      	bls.n	8001168 <LCD_Game_Won_Check_Up_Left_Diagonal+0x18>
	}

	while(row < ROWS && column >= 0){
 8001180:	e021      	b.n	80011c6 <LCD_Game_Won_Check_Up_Left_Diagonal+0x76>
		//keep going until we encounter top right edge
		if(grid[column][row].playerColor == player){
 8001182:	79f9      	ldrb	r1, [r7, #7]
 8001184:	79bb      	ldrb	r3, [r7, #6]
 8001186:	4815      	ldr	r0, [pc, #84]	@ (80011dc <LCD_Game_Won_Check_Up_Left_Diagonal+0x8c>)
 8001188:	461a      	mov	r2, r3
 800118a:	0052      	lsls	r2, r2, #1
 800118c:	441a      	add	r2, r3
 800118e:	460b      	mov	r3, r1
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	440b      	add	r3, r1
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	4403      	add	r3, r0
 800119a:	3302      	adds	r3, #2
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	797a      	ldrb	r2, [r7, #5]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d103      	bne.n	80011ac <LCD_Game_Won_Check_Up_Left_Diagonal+0x5c>
			Consecutive++;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	3301      	adds	r3, #1
 80011a8:	73fb      	strb	r3, [r7, #15]
 80011aa:	e001      	b.n	80011b0 <LCD_Game_Won_Check_Up_Left_Diagonal+0x60>
		}
		else{
			Consecutive = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]
		}

		if(Consecutive == 4){
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d101      	bne.n	80011ba <LCD_Game_Won_Check_Up_Left_Diagonal+0x6a>
			return true;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e009      	b.n	80011ce <LCD_Game_Won_Check_Up_Left_Diagonal+0x7e>
		}
		row++;
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	3301      	adds	r3, #1
 80011be:	71bb      	strb	r3, [r7, #6]
		column--;
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	71fb      	strb	r3, [r7, #7]
	while(row < ROWS && column >= 0){
 80011c6:	79bb      	ldrb	r3, [r7, #6]
 80011c8:	2b05      	cmp	r3, #5
 80011ca:	d9da      	bls.n	8001182 <LCD_Game_Won_Check_Up_Left_Diagonal+0x32>
	}
	return false;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	2002591c 	.word	0x2002591c

080011e0 <LCD_Game_Won>:

bool LCD_Game_Won(uint8_t column, uint8_t row, uint8_t player){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
 80011ea:	460b      	mov	r3, r1
 80011ec:	71bb      	strb	r3, [r7, #6]
 80011ee:	4613      	mov	r3, r2
 80011f0:	717b      	strb	r3, [r7, #5]
	//check all adjacent pieces colors
	if(LCD_Game_Won_Check_Row(row, player)){
 80011f2:	797a      	ldrb	r2, [r7, #5]
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff feef 	bl	8000fdc <LCD_Game_Won_Check_Row>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <LCD_Game_Won+0x28>
		return true;
 8001204:	2301      	movs	r3, #1
 8001206:	e021      	b.n	800124c <LCD_Game_Won+0x6c>
	}
	else if(LCD_Game_Won_Check_Column(column, player)){
 8001208:	797a      	ldrb	r2, [r7, #5]
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff1c 	bl	800104c <LCD_Game_Won_Check_Column>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <LCD_Game_Won+0x3e>
		return true;
 800121a:	2301      	movs	r3, #1
 800121c:	e016      	b.n	800124c <LCD_Game_Won+0x6c>
	}
	else if(LCD_Game_Won_Check_Up_Right_Diagonal(column, row, player)){
 800121e:	797a      	ldrb	r2, [r7, #5]
 8001220:	79b9      	ldrb	r1, [r7, #6]
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff49 	bl	80010bc <LCD_Game_Won_Check_Up_Right_Diagonal>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <LCD_Game_Won+0x54>
		return true;
 8001230:	2301      	movs	r3, #1
 8001232:	e00b      	b.n	800124c <LCD_Game_Won+0x6c>
	}
	else if(LCD_Game_Won_Check_Up_Left_Diagonal(column, row, player)){
 8001234:	797a      	ldrb	r2, [r7, #5]
 8001236:	79b9      	ldrb	r1, [r7, #6]
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff88 	bl	8001150 <LCD_Game_Won_Check_Up_Left_Diagonal>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <LCD_Game_Won+0x6a>
		return true;
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <LCD_Game_Won+0x6c>
	}
return false;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <LCD_Insert_Chip_Game_Grid>:

void LCD_Insert_Chip_Game_Grid(){
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
	if((LCD_Space_Available_Game_Grid())){
 800125a:	f7ff fe77 	bl	8000f4c <LCD_Space_Available_Game_Grid>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80b3 	beq.w	80013cc <LCD_Insert_Chip_Game_Grid+0x178>
		//check for space
		uint8_t row = LCD_Get_Row_Game_Grid();
 8001266:	f7ff fe8d 	bl	8000f84 <LCD_Get_Row_Game_Grid>
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
		//returns the highest row for a column
		if(playerTurn == PLAYER_RED){
 800126e:	4b59      	ldr	r3, [pc, #356]	@ (80013d4 <LCD_Insert_Chip_Game_Grid+0x180>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d155      	bne.n	8001322 <LCD_Insert_Chip_Game_Grid+0xce>
			//if its Reds turn it will draw red
			LCD_Draw_Circle_Fill(grid[chip.column][row].xPos, LCD_PIXEL_HEIGHT-grid[chip.column][row].yPos, CIRCLE_RADIUS, LCD_COLOR_RED);
 8001276:	4b58      	ldr	r3, [pc, #352]	@ (80013d8 <LCD_Insert_Chip_Game_Grid+0x184>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	4957      	ldr	r1, [pc, #348]	@ (80013dc <LCD_Insert_Chip_Game_Grid+0x188>)
 8001280:	461a      	mov	r2, r3
 8001282:	0052      	lsls	r2, r2, #1
 8001284:	441a      	add	r2, r3
 8001286:	4603      	mov	r3, r0
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	4403      	add	r3, r0
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	440b      	add	r3, r1
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461c      	mov	r4, r3
 8001296:	4b50      	ldr	r3, [pc, #320]	@ (80013d8 <LCD_Insert_Chip_Game_Grid+0x184>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	494f      	ldr	r1, [pc, #316]	@ (80013dc <LCD_Insert_Chip_Game_Grid+0x188>)
 80012a0:	461a      	mov	r2, r3
 80012a2:	0052      	lsls	r2, r2, #1
 80012a4:	441a      	add	r2, r3
 80012a6:	4603      	mov	r3, r0
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	4403      	add	r3, r0
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	3301      	adds	r3, #1
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80012ba:	b299      	uxth	r1, r3
 80012bc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80012c0:	220c      	movs	r2, #12
 80012c2:	4620      	mov	r0, r4
 80012c4:	f7ff fc92 	bl	8000bec <LCD_Draw_Circle_Fill>
			grid[chip.column][row].playerColor = PLAYER_RED;
 80012c8:	4b43      	ldr	r3, [pc, #268]	@ (80013d8 <LCD_Insert_Chip_Game_Grid+0x184>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	4942      	ldr	r1, [pc, #264]	@ (80013dc <LCD_Insert_Chip_Game_Grid+0x188>)
 80012d2:	461a      	mov	r2, r3
 80012d4:	0052      	lsls	r2, r2, #1
 80012d6:	441a      	add	r2, r3
 80012d8:	4603      	mov	r3, r0
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	4403      	add	r3, r0
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	3302      	adds	r3, #2
 80012e6:	2202      	movs	r2, #2
 80012e8:	701a      	strb	r2, [r3, #0]
			playerTurn = PLAYER_YELLOW;
 80012ea:	4b3a      	ldr	r3, [pc, #232]	@ (80013d4 <LCD_Insert_Chip_Game_Grid+0x180>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
			//update playerTurn to be other player
			LCD_Draw_Chip_To_Drop();
 80012f0:	f7ff fbd6 	bl	8000aa0 <LCD_Draw_Chip_To_Drop>
			//Update the display for the chip to drop
			if(LCD_Game_Won(chip.column, row, PLAYER_RED)){
 80012f4:	4b38      	ldr	r3, [pc, #224]	@ (80013d8 <LCD_Insert_Chip_Game_Grid+0x184>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	79f9      	ldrb	r1, [r7, #7]
 80012fa:	2202      	movs	r2, #2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff6f 	bl	80011e0 <LCD_Game_Won>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d061      	beq.n	80013cc <LCD_Insert_Chip_Game_Grid+0x178>
				redScore++;
 8001308:	4b35      	ldr	r3, [pc, #212]	@ (80013e0 <LCD_Insert_Chip_Game_Grid+0x18c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	3301      	adds	r3, #1
 800130e:	b2da      	uxtb	r2, r3
 8001310:	4b33      	ldr	r3, [pc, #204]	@ (80013e0 <LCD_Insert_Chip_Game_Grid+0x18c>)
 8001312:	701a      	strb	r2, [r3, #0]
				removeSchedulerEvent(POLLING_GAME_EVENT);
 8001314:	2020      	movs	r0, #32
 8001316:	f000 fa6f 	bl	80017f8 <removeSchedulerEvent>
				addSchedulerEvent(SCORE_SCREEN_EVENT);
 800131a:	2040      	movs	r0, #64	@ 0x40
 800131c:	f000 fa5a 	bl	80017d4 <addSchedulerEvent>
				addSchedulerEvent(SCORE_SCREEN_EVENT);
			}			//Check if game is over
		}
	}

}
 8001320:	e054      	b.n	80013cc <LCD_Insert_Chip_Game_Grid+0x178>
			LCD_Draw_Circle_Fill(grid[chip.column][row].xPos, LCD_PIXEL_HEIGHT-grid[chip.column][row].yPos, CIRCLE_RADIUS, LCD_COLOR_YELLOW);
 8001322:	4b2d      	ldr	r3, [pc, #180]	@ (80013d8 <LCD_Insert_Chip_Game_Grid+0x184>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	492c      	ldr	r1, [pc, #176]	@ (80013dc <LCD_Insert_Chip_Game_Grid+0x188>)
 800132c:	461a      	mov	r2, r3
 800132e:	0052      	lsls	r2, r2, #1
 8001330:	441a      	add	r2, r3
 8001332:	4603      	mov	r3, r0
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4403      	add	r3, r0
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	440b      	add	r3, r1
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461c      	mov	r4, r3
 8001342:	4b25      	ldr	r3, [pc, #148]	@ (80013d8 <LCD_Insert_Chip_Game_Grid+0x184>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	4924      	ldr	r1, [pc, #144]	@ (80013dc <LCD_Insert_Chip_Game_Grid+0x188>)
 800134c:	461a      	mov	r2, r3
 800134e:	0052      	lsls	r2, r2, #1
 8001350:	441a      	add	r2, r3
 8001352:	4603      	mov	r3, r0
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	4403      	add	r3, r0
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	440b      	add	r3, r1
 800135e:	3301      	adds	r3, #1
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001366:	b299      	uxth	r1, r3
 8001368:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800136c:	220c      	movs	r2, #12
 800136e:	4620      	mov	r0, r4
 8001370:	f7ff fc3c 	bl	8000bec <LCD_Draw_Circle_Fill>
			grid[chip.column][row].playerColor = PLAYER_YELLOW;
 8001374:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <LCD_Insert_Chip_Game_Grid+0x184>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	4917      	ldr	r1, [pc, #92]	@ (80013dc <LCD_Insert_Chip_Game_Grid+0x188>)
 800137e:	461a      	mov	r2, r3
 8001380:	0052      	lsls	r2, r2, #1
 8001382:	441a      	add	r2, r3
 8001384:	4603      	mov	r3, r0
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	4403      	add	r3, r0
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	4413      	add	r3, r2
 800138e:	440b      	add	r3, r1
 8001390:	3302      	adds	r3, #2
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
			playerTurn = PLAYER_RED;
 8001396:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <LCD_Insert_Chip_Game_Grid+0x180>)
 8001398:	2202      	movs	r2, #2
 800139a:	701a      	strb	r2, [r3, #0]
			LCD_Draw_Chip_To_Drop();
 800139c:	f7ff fb80 	bl	8000aa0 <LCD_Draw_Chip_To_Drop>
			if(LCD_Game_Won(chip.column, row, PLAYER_YELLOW)){
 80013a0:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <LCD_Insert_Chip_Game_Grid+0x184>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	79f9      	ldrb	r1, [r7, #7]
 80013a6:	2201      	movs	r2, #1
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff19 	bl	80011e0 <LCD_Game_Won>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00b      	beq.n	80013cc <LCD_Insert_Chip_Game_Grid+0x178>
				yellowScore++;
 80013b4:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <LCD_Insert_Chip_Game_Grid+0x190>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <LCD_Insert_Chip_Game_Grid+0x190>)
 80013be:	701a      	strb	r2, [r3, #0]
				removeSchedulerEvent(POLLING_GAME_EVENT);
 80013c0:	2020      	movs	r0, #32
 80013c2:	f000 fa19 	bl	80017f8 <removeSchedulerEvent>
				addSchedulerEvent(SCORE_SCREEN_EVENT);
 80013c6:	2040      	movs	r0, #64	@ 0x40
 80013c8:	f000 fa04 	bl	80017d4 <addSchedulerEvent>
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd90      	pop	{r4, r7, pc}
 80013d4:	20000002 	.word	0x20000002
 80013d8:	2002599c 	.word	0x2002599c
 80013dc:	2002591c 	.word	0x2002591c
 80013e0:	2002599f 	.word	0x2002599f
 80013e4:	200259a0 	.word	0x200259a0

080013e8 <LCD_Draw_Start_Screen>:
void LCD_Draw_Start_Screen(){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_WHITE);
 80013ec:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff fcd9 	bl	8000da8 <LCD_Clear>

	LCD_Draw_Vertical_Line(LCD_PIXEL_WIDTH/2,40,LCD_PIXEL_HEIGHT-40,LCD_COLOR_BLACK);
 80013f6:	2300      	movs	r3, #0
 80013f8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80013fc:	2128      	movs	r1, #40	@ 0x28
 80013fe:	2078      	movs	r0, #120	@ 0x78
 8001400:	f7ff fc83 	bl	8000d0a <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(0,40,LCD_PIXEL_WIDTH,LCD_COLOR_BLACK);
 8001404:	2300      	movs	r3, #0
 8001406:	22f0      	movs	r2, #240	@ 0xf0
 8001408:	2128      	movs	r1, #40	@ 0x28
 800140a:	2000      	movs	r0, #0
 800140c:	f7ff fca4 	bl	8000d58 <LCD_Draw_Horizontal_Line>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 8001410:	2000      	movs	r0, #0
 8001412:	f7ff fceb 	bl	8000dec <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001416:	4811      	ldr	r0, [pc, #68]	@ (800145c <LCD_Draw_Start_Screen+0x74>)
 8001418:	f7ff fcf8 	bl	8000e0c <LCD_SetFont>

	LCD_DisplayChar(80+2,  MODE_YPOS,'M');
 800141c:	224d      	movs	r2, #77	@ 0x4d
 800141e:	2114      	movs	r1, #20
 8001420:	2052      	movs	r0, #82	@ 0x52
 8001422:	f7ff fd71 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(100, MODE_YPOS,'O');
 8001426:	224f      	movs	r2, #79	@ 0x4f
 8001428:	2114      	movs	r1, #20
 800142a:	2064      	movs	r0, #100	@ 0x64
 800142c:	f7ff fd6c 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(120-2, MODE_YPOS,'D');
 8001430:	2244      	movs	r2, #68	@ 0x44
 8001432:	2114      	movs	r1, #20
 8001434:	2076      	movs	r0, #118	@ 0x76
 8001436:	f7ff fd67 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(135-2, MODE_YPOS,'E');
 800143a:	2245      	movs	r2, #69	@ 0x45
 800143c:	2114      	movs	r1, #20
 800143e:	2085      	movs	r0, #133	@ 0x85
 8001440:	f7ff fd62 	bl	8000f08 <LCD_DisplayChar>

	LCD_DisplayChar(50, 160,'1');
 8001444:	2231      	movs	r2, #49	@ 0x31
 8001446:	21a0      	movs	r1, #160	@ 0xa0
 8001448:	2032      	movs	r0, #50	@ 0x32
 800144a:	f7ff fd5d 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(180, 160,'2');
 800144e:	2232      	movs	r2, #50	@ 0x32
 8001450:	21a0      	movs	r1, #160	@ 0xa0
 8001452:	20b4      	movs	r0, #180	@ 0xb4
 8001454:	f7ff fd58 	bl	8000f08 <LCD_DisplayChar>
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000004 	.word	0x20000004

08001460 <LCD_Draw_Select_Color_Screen>:

void LCD_Draw_Select_Color_Screen(){
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af02      	add	r7, sp, #8
	LCD_Clear(0, LCD_COLOR_RED);
 8001466:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff fc9c 	bl	8000da8 <LCD_Clear>

	LCD_Draw_Vertical_Line(LCD_PIXEL_WIDTH/2,0,LCD_PIXEL_HEIGHT,LCD_COLOR_BLACK);
 8001470:	2300      	movs	r3, #0
 8001472:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001476:	2100      	movs	r1, #0
 8001478:	2078      	movs	r0, #120	@ 0x78
 800147a:	f7ff fc46 	bl	8000d0a <LCD_Draw_Vertical_Line>

	LCD_Draw_Rectangle_Fill(LCD_PIXEL_WIDTH/2, 0, LCD_PIXEL_WIDTH/2, LCD_PIXEL_HEIGHT, LCD_COLOR_YELLOW);
 800147e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001488:	2278      	movs	r2, #120	@ 0x78
 800148a:	2100      	movs	r1, #0
 800148c:	2078      	movs	r0, #120	@ 0x78
 800148e:	f7ff fc00 	bl	8000c92 <LCD_Draw_Rectangle_Fill>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 8001492:	2000      	movs	r0, #0
 8001494:	f7ff fcaa 	bl	8000dec <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001498:	4819      	ldr	r0, [pc, #100]	@ (8001500 <LCD_Draw_Select_Color_Screen+0xa0>)
 800149a:	f7ff fcb7 	bl	8000e0c <LCD_SetFont>

	LCD_DisplayChar(95,  PICK_YPOS,'P');
 800149e:	2250      	movs	r2, #80	@ 0x50
 80014a0:	2114      	movs	r1, #20
 80014a2:	205f      	movs	r0, #95	@ 0x5f
 80014a4:	f7ff fd30 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(110, PICK_YPOS,'I');
 80014a8:	2249      	movs	r2, #73	@ 0x49
 80014aa:	2114      	movs	r1, #20
 80014ac:	206e      	movs	r0, #110	@ 0x6e
 80014ae:	f7ff fd2b 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(125, PICK_YPOS,'C');
 80014b2:	2243      	movs	r2, #67	@ 0x43
 80014b4:	2114      	movs	r1, #20
 80014b6:	207d      	movs	r0, #125	@ 0x7d
 80014b8:	f7ff fd26 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(140, PICK_YPOS,'K');
 80014bc:	224b      	movs	r2, #75	@ 0x4b
 80014be:	2114      	movs	r1, #20
 80014c0:	208c      	movs	r0, #140	@ 0x8c
 80014c2:	f7ff fd21 	bl	8000f08 <LCD_DisplayChar>

	LCD_DisplayChar(90,  COLOR_YPOS,'C');
 80014c6:	2243      	movs	r2, #67	@ 0x43
 80014c8:	2128      	movs	r1, #40	@ 0x28
 80014ca:	205a      	movs	r0, #90	@ 0x5a
 80014cc:	f7ff fd1c 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(105, COLOR_YPOS,'O');
 80014d0:	224f      	movs	r2, #79	@ 0x4f
 80014d2:	2128      	movs	r1, #40	@ 0x28
 80014d4:	2069      	movs	r0, #105	@ 0x69
 80014d6:	f7ff fd17 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(120, COLOR_YPOS,'L');
 80014da:	224c      	movs	r2, #76	@ 0x4c
 80014dc:	2128      	movs	r1, #40	@ 0x28
 80014de:	2078      	movs	r0, #120	@ 0x78
 80014e0:	f7ff fd12 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(135, COLOR_YPOS,'O');
 80014e4:	224f      	movs	r2, #79	@ 0x4f
 80014e6:	2128      	movs	r1, #40	@ 0x28
 80014e8:	2087      	movs	r0, #135	@ 0x87
 80014ea:	f7ff fd0d 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(150, COLOR_YPOS,'R');
 80014ee:	2252      	movs	r2, #82	@ 0x52
 80014f0:	2128      	movs	r1, #40	@ 0x28
 80014f2:	2096      	movs	r0, #150	@ 0x96
 80014f4:	f7ff fd08 	bl	8000f08 <LCD_DisplayChar>

}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000004 	.word	0x20000004

08001504 <LCD_Draw_Game_Grid>:

void LCD_Draw_Game_Grid(){
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b085      	sub	sp, #20
 8001508:	af02      	add	r7, sp, #8
	LCD_Clear(0, LCD_COLOR_WHITE);
 800150a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800150e:	2000      	movs	r0, #0
 8001510:	f7ff fc4a 	bl	8000da8 <LCD_Clear>
	//Clears screen

	Init_Grid();
 8001514:	f7ff f904 	bl	8000720 <Init_Grid>
	Init_Chip_To_Drop();
 8001518:	f7ff f8f0 	bl	80006fc <Init_Chip_To_Drop>

	LCD_Draw_Rectangle_Fill(0, GRID_BACKGROUND_YPOS, LCD_PIXEL_WIDTH, SQUARE_SIZE*ROWS, LCD_COLOR_BLUE);
 800151c:	231f      	movs	r3, #31
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	23cc      	movs	r3, #204	@ 0xcc
 8001522:	22f0      	movs	r2, #240	@ 0xf0
 8001524:	2174      	movs	r1, #116	@ 0x74
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff fbb3 	bl	8000c92 <LCD_Draw_Rectangle_Fill>

	for(uint8_t i=1; i<7; i++){
 800152c:	2301      	movs	r3, #1
 800152e:	71fb      	strb	r3, [r7, #7]
 8001530:	e00e      	b.n	8001550 <LCD_Draw_Game_Grid+0x4c>
		LCD_Draw_Vertical_Line(SQUARE_SIZE*i,GRID_OFFSET_HORIZONTAL,SQUARE_SIZE*ROWS,LCD_COLOR_BLACK);
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	b29b      	uxth	r3, r3
 8001536:	461a      	mov	r2, r3
 8001538:	0112      	lsls	r2, r2, #4
 800153a:	4413      	add	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	b298      	uxth	r0, r3
 8001540:	2300      	movs	r3, #0
 8001542:	22cc      	movs	r2, #204	@ 0xcc
 8001544:	2174      	movs	r1, #116	@ 0x74
 8001546:	f7ff fbe0 	bl	8000d0a <LCD_Draw_Vertical_Line>
	for(uint8_t i=1; i<7; i++){
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	3301      	adds	r3, #1
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	2b06      	cmp	r3, #6
 8001554:	d9ed      	bls.n	8001532 <LCD_Draw_Game_Grid+0x2e>
		//each tile is 34x34 so 180 is 6 height
		//15 is the offset from the edge, 34 is the size
	}
	for(uint8_t i =1; i<7; i++){
 8001556:	2301      	movs	r3, #1
 8001558:	71bb      	strb	r3, [r7, #6]
 800155a:	e013      	b.n	8001584 <LCD_Draw_Game_Grid+0x80>
		LCD_Draw_Horizontal_Line(0,LCD_PIXEL_HEIGHT-(SQUARE_SIZE*i),LCD_PIXEL_WIDTH,LCD_COLOR_BLACK);
 800155c:	79bb      	ldrb	r3, [r7, #6]
 800155e:	b29b      	uxth	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	02d2      	lsls	r2, r2, #11
 8001564:	1ad2      	subs	r2, r2, r3
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	b29b      	uxth	r3, r3
 800156e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8001572:	b299      	uxth	r1, r3
 8001574:	2300      	movs	r3, #0
 8001576:	22f0      	movs	r2, #240	@ 0xf0
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff fbed 	bl	8000d58 <LCD_Draw_Horizontal_Line>
	for(uint8_t i =1; i<7; i++){
 800157e:	79bb      	ldrb	r3, [r7, #6]
 8001580:	3301      	adds	r3, #1
 8001582:	71bb      	strb	r3, [r7, #6]
 8001584:	79bb      	ldrb	r3, [r7, #6]
 8001586:	2b06      	cmp	r3, #6
 8001588:	d9e8      	bls.n	800155c <LCD_Draw_Game_Grid+0x58>
		//want each horizontal line to go across the screen
	}
	for(uint8_t i = 0; i<COLUMNS; i++){
 800158a:	2300      	movs	r3, #0
 800158c:	717b      	strb	r3, [r7, #5]
 800158e:	e030      	b.n	80015f2 <LCD_Draw_Game_Grid+0xee>
		for(uint8_t j =0; j<ROWS; j++){
 8001590:	2300      	movs	r3, #0
 8001592:	713b      	strb	r3, [r7, #4]
 8001594:	e027      	b.n	80015e6 <LCD_Draw_Game_Grid+0xe2>
			LCD_Draw_Circle_Fill(grid[i][j].xPos, LCD_PIXEL_HEIGHT-grid[i][j].yPos, CIRCLE_RADIUS, LCD_COLOR_WHITE);
 8001596:	7979      	ldrb	r1, [r7, #5]
 8001598:	793b      	ldrb	r3, [r7, #4]
 800159a:	481a      	ldr	r0, [pc, #104]	@ (8001604 <LCD_Draw_Game_Grid+0x100>)
 800159c:	461a      	mov	r2, r3
 800159e:	0052      	lsls	r2, r2, #1
 80015a0:	441a      	add	r2, r3
 80015a2:	460b      	mov	r3, r1
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	440b      	add	r3, r1
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4413      	add	r3, r2
 80015ac:	4403      	add	r3, r0
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461c      	mov	r4, r3
 80015b2:	7979      	ldrb	r1, [r7, #5]
 80015b4:	793b      	ldrb	r3, [r7, #4]
 80015b6:	4813      	ldr	r0, [pc, #76]	@ (8001604 <LCD_Draw_Game_Grid+0x100>)
 80015b8:	461a      	mov	r2, r3
 80015ba:	0052      	lsls	r2, r2, #1
 80015bc:	441a      	add	r2, r3
 80015be:	460b      	mov	r3, r1
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	4403      	add	r3, r0
 80015ca:	3301      	adds	r3, #1
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80015d2:	b299      	uxth	r1, r3
 80015d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015d8:	220c      	movs	r2, #12
 80015da:	4620      	mov	r0, r4
 80015dc:	f7ff fb06 	bl	8000bec <LCD_Draw_Circle_Fill>
		for(uint8_t j =0; j<ROWS; j++){
 80015e0:	793b      	ldrb	r3, [r7, #4]
 80015e2:	3301      	adds	r3, #1
 80015e4:	713b      	strb	r3, [r7, #4]
 80015e6:	793b      	ldrb	r3, [r7, #4]
 80015e8:	2b05      	cmp	r3, #5
 80015ea:	d9d4      	bls.n	8001596 <LCD_Draw_Game_Grid+0x92>
	for(uint8_t i = 0; i<COLUMNS; i++){
 80015ec:	797b      	ldrb	r3, [r7, #5]
 80015ee:	3301      	adds	r3, #1
 80015f0:	717b      	strb	r3, [r7, #5]
 80015f2:	797b      	ldrb	r3, [r7, #5]
 80015f4:	2b06      	cmp	r3, #6
 80015f6:	d9cb      	bls.n	8001590 <LCD_Draw_Game_Grid+0x8c>
		}
	}
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd90      	pop	{r4, r7, pc}
 8001602:	bf00      	nop
 8001604:	2002591c 	.word	0x2002591c

08001608 <LCD_Draw_Score_Screen>:

void LCD_Draw_Score_Screen(){
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af02      	add	r7, sp, #8
	LCD_Clear(0, LCD_COLOR_GREY);
 800160e:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8001612:	2000      	movs	r0, #0
 8001614:	f7ff fbc8 	bl	8000da8 <LCD_Clear>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff fbe7 	bl	8000dec <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 800161e:	4855      	ldr	r0, [pc, #340]	@ (8001774 <LCD_Draw_Score_Screen+0x16c>)
 8001620:	f7ff fbf4 	bl	8000e0c <LCD_SetFont>

	LCD_DisplayChar(95,TIMER_YPOS,'T');
 8001624:	2254      	movs	r2, #84	@ 0x54
 8001626:	2114      	movs	r1, #20
 8001628:	205f      	movs	r0, #95	@ 0x5f
 800162a:	f7ff fc6d 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(105,TIMER_YPOS,'i');
 800162e:	2269      	movs	r2, #105	@ 0x69
 8001630:	2114      	movs	r1, #20
 8001632:	2069      	movs	r0, #105	@ 0x69
 8001634:	f7ff fc68 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(115,TIMER_YPOS,'m');
 8001638:	226d      	movs	r2, #109	@ 0x6d
 800163a:	2114      	movs	r1, #20
 800163c:	2073      	movs	r0, #115	@ 0x73
 800163e:	f7ff fc63 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(130,TIMER_YPOS,'e');
 8001642:	2265      	movs	r2, #101	@ 0x65
 8001644:	2114      	movs	r1, #20
 8001646:	2082      	movs	r0, #130	@ 0x82
 8001648:	f7ff fc5e 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(140,TIMER_YPOS,'r');
 800164c:	2272      	movs	r2, #114	@ 0x72
 800164e:	2114      	movs	r1, #20
 8001650:	208c      	movs	r0, #140	@ 0x8c
 8001652:	f7ff fc59 	bl	8000f08 <LCD_DisplayChar>

	LCD_DisplayChar(95,SCORE_YPOS,'S');
 8001656:	2253      	movs	r2, #83	@ 0x53
 8001658:	2150      	movs	r1, #80	@ 0x50
 800165a:	205f      	movs	r0, #95	@ 0x5f
 800165c:	f7ff fc54 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(107,SCORE_YPOS,'c');
 8001660:	2263      	movs	r2, #99	@ 0x63
 8001662:	2150      	movs	r1, #80	@ 0x50
 8001664:	206b      	movs	r0, #107	@ 0x6b
 8001666:	f7ff fc4f 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(117,SCORE_YPOS,'o');
 800166a:	226f      	movs	r2, #111	@ 0x6f
 800166c:	2150      	movs	r1, #80	@ 0x50
 800166e:	2075      	movs	r0, #117	@ 0x75
 8001670:	f7ff fc4a 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(127,SCORE_YPOS,'r');
 8001674:	2272      	movs	r2, #114	@ 0x72
 8001676:	2150      	movs	r1, #80	@ 0x50
 8001678:	207f      	movs	r0, #127	@ 0x7f
 800167a:	f7ff fc45 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(135,SCORE_YPOS,'e');
 800167e:	2265      	movs	r2, #101	@ 0x65
 8001680:	2150      	movs	r1, #80	@ 0x50
 8001682:	2087      	movs	r0, #135	@ 0x87
 8001684:	f7ff fc40 	bl	8000f08 <LCD_DisplayChar>

	LCD_Draw_Circle_Fill(103, SCORE_YPOS+60, 16, LCD_COLOR_BLACK);
 8001688:	2300      	movs	r3, #0
 800168a:	2210      	movs	r2, #16
 800168c:	218c      	movs	r1, #140	@ 0x8c
 800168e:	2067      	movs	r0, #103	@ 0x67
 8001690:	f7ff faac 	bl	8000bec <LCD_Draw_Circle_Fill>
	LCD_Draw_Circle_Fill(144, SCORE_YPOS+60, 16, LCD_COLOR_BLACK);
 8001694:	2300      	movs	r3, #0
 8001696:	2210      	movs	r2, #16
 8001698:	218c      	movs	r1, #140	@ 0x8c
 800169a:	2090      	movs	r0, #144	@ 0x90
 800169c:	f7ff faa6 	bl	8000bec <LCD_Draw_Circle_Fill>
	//Outlines for the circles

	LCD_Draw_Circle_Fill(103, SCORE_YPOS+60, 15, LCD_COLOR_RED);
 80016a0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80016a4:	220f      	movs	r2, #15
 80016a6:	218c      	movs	r1, #140	@ 0x8c
 80016a8:	2067      	movs	r0, #103	@ 0x67
 80016aa:	f7ff fa9f 	bl	8000bec <LCD_Draw_Circle_Fill>
	LCD_Draw_Circle_Fill(144, SCORE_YPOS+60, 15, LCD_COLOR_YELLOW);
 80016ae:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80016b2:	220f      	movs	r2, #15
 80016b4:	218c      	movs	r1, #140	@ 0x8c
 80016b6:	2090      	movs	r0, #144	@ 0x90
 80016b8:	f7ff fa98 	bl	8000bec <LCD_Draw_Circle_Fill>

	uint16_t redScoreToDisplay = '0' + redScore;
 80016bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001778 <LCD_Draw_Score_Screen+0x170>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	3330      	adds	r3, #48	@ 0x30
 80016c2:	80fb      	strh	r3, [r7, #6]
	uint16_t yellowScoreToDisplay = '0' + yellowScore;
 80016c4:	4b2d      	ldr	r3, [pc, #180]	@ (800177c <LCD_Draw_Score_Screen+0x174>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	3330      	adds	r3, #48	@ 0x30
 80016ca:	80bb      	strh	r3, [r7, #4]

	LCD_DisplayChar(97, SCORE_YPOS+51, redScoreToDisplay);
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	461a      	mov	r2, r3
 80016d2:	2183      	movs	r1, #131	@ 0x83
 80016d4:	2061      	movs	r0, #97	@ 0x61
 80016d6:	f7ff fc17 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(137, SCORE_YPOS+51, yellowScoreToDisplay);
 80016da:	88bb      	ldrh	r3, [r7, #4]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	461a      	mov	r2, r3
 80016e0:	2183      	movs	r1, #131	@ 0x83
 80016e2:	2089      	movs	r0, #137	@ 0x89
 80016e4:	f7ff fc10 	bl	8000f08 <LCD_DisplayChar>
	//RIGHT NOW ONLY CAN DISPLAY UP TO 9 FOR BOTH SIDES OTHERWISE OVERFLOW
	LCD_DisplayChar(116, SCORE_YPOS+48, '-');
 80016e8:	222d      	movs	r2, #45	@ 0x2d
 80016ea:	2180      	movs	r1, #128	@ 0x80
 80016ec:	2074      	movs	r0, #116	@ 0x74
 80016ee:	f7ff fc0b 	bl	8000f08 <LCD_DisplayChar>

	LCD_Draw_Rectangle_Fill(18, RESTART_BUTTON_YPOS-2, 204, 104, LCD_COLOR_BLACK);
 80016f2:	2300      	movs	r3, #0
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2368      	movs	r3, #104	@ 0x68
 80016f8:	22cc      	movs	r2, #204	@ 0xcc
 80016fa:	21c6      	movs	r1, #198	@ 0xc6
 80016fc:	2012      	movs	r0, #18
 80016fe:	f7ff fac8 	bl	8000c92 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(20, RESTART_BUTTON_YPOS, 200, 100, LCD_COLOR_CYAN);
 8001702:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2364      	movs	r3, #100	@ 0x64
 800170a:	22c8      	movs	r2, #200	@ 0xc8
 800170c:	21c8      	movs	r1, #200	@ 0xc8
 800170e:	2014      	movs	r0, #20
 8001710:	f7ff fabf 	bl	8000c92 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(25, RESTART_BUTTON_YPOS+5, 190, 90, LCD_COLOR_BLUE2);
 8001714:	f240 531f 	movw	r3, #1311	@ 0x51f
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	235a      	movs	r3, #90	@ 0x5a
 800171c:	22be      	movs	r2, #190	@ 0xbe
 800171e:	21cd      	movs	r1, #205	@ 0xcd
 8001720:	2019      	movs	r0, #25
 8001722:	f7ff fab6 	bl	8000c92 <LCD_Draw_Rectangle_Fill>

	LCD_DisplayChar(95,  NEW_YPOS,'N');
 8001726:	224e      	movs	r2, #78	@ 0x4e
 8001728:	21e6      	movs	r1, #230	@ 0xe6
 800172a:	205f      	movs	r0, #95	@ 0x5f
 800172c:	f7ff fbec 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(110, NEW_YPOS,'E');
 8001730:	2245      	movs	r2, #69	@ 0x45
 8001732:	21e6      	movs	r1, #230	@ 0xe6
 8001734:	206e      	movs	r0, #110	@ 0x6e
 8001736:	f7ff fbe7 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(125, NEW_YPOS,'W');
 800173a:	2257      	movs	r2, #87	@ 0x57
 800173c:	21e6      	movs	r1, #230	@ 0xe6
 800173e:	207d      	movs	r0, #125	@ 0x7d
 8001740:	f7ff fbe2 	bl	8000f08 <LCD_DisplayChar>

	LCD_DisplayChar(90,  GAME_YPOS,'G');
 8001744:	2247      	movs	r2, #71	@ 0x47
 8001746:	21fa      	movs	r1, #250	@ 0xfa
 8001748:	205a      	movs	r0, #90	@ 0x5a
 800174a:	f7ff fbdd 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(105, GAME_YPOS,'A');
 800174e:	2241      	movs	r2, #65	@ 0x41
 8001750:	21fa      	movs	r1, #250	@ 0xfa
 8001752:	2069      	movs	r0, #105	@ 0x69
 8001754:	f7ff fbd8 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(120, GAME_YPOS,'M');
 8001758:	224d      	movs	r2, #77	@ 0x4d
 800175a:	21fa      	movs	r1, #250	@ 0xfa
 800175c:	2078      	movs	r0, #120	@ 0x78
 800175e:	f7ff fbd3 	bl	8000f08 <LCD_DisplayChar>
	LCD_DisplayChar(135, GAME_YPOS,'E');
 8001762:	2245      	movs	r2, #69	@ 0x45
 8001764:	21fa      	movs	r1, #250	@ 0xfa
 8001766:	2087      	movs	r0, #135	@ 0x87
 8001768:	f7ff fbce 	bl	8000f08 <LCD_DisplayChar>
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000004 	.word	0x20000004
 8001778:	2002599f 	.word	0x2002599f
 800177c:	200259a0 	.word	0x200259a0

08001780 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001784:	b672      	cpsid	i
}
 8001786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <LCD_Error_Handler+0x8>

0800178c <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001790:	f001 f9a5 	bl	8002ade <STMPE811_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b02      	cmp	r3, #2
 8001798:	d001      	beq.n	800179e <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 800179a:	bf00      	nop
 800179c:	e7fd      	b.n	800179a <InitializeLCDTouch+0xe>
  }
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f001 fa4f 	bl	8002c4e <STMPE811_ReadTouch>
 80017b0:	4603      	mov	r3, r0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <getScheduledEvents>:
#include "Scheduler.h"

static uint32_t scheduledEvents;

uint32_t getScheduledEvents(){
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
	return scheduledEvents;
 80017c0:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <getScheduledEvents+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	200259a4 	.word	0x200259a4

080017d4 <addSchedulerEvent>:

void addSchedulerEvent(uint32_t event_to_schedule){
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event_to_schedule;
 80017dc:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <addSchedulerEvent+0x20>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	4a03      	ldr	r2, [pc, #12]	@ (80017f4 <addSchedulerEvent+0x20>)
 80017e6:	6013      	str	r3, [r2, #0]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	200259a4 	.word	0x200259a4

080017f8 <removeSchedulerEvent>:


void removeSchedulerEvent(uint32_t event_to_remove){
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~event_to_remove;//this might be wrong
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	43da      	mvns	r2, r3
 8001804:	4b05      	ldr	r3, [pc, #20]	@ (800181c <removeSchedulerEvent+0x24>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4013      	ands	r3, r2
 800180a:	4a04      	ldr	r2, [pc, #16]	@ (800181c <removeSchedulerEvent+0x24>)
 800180c:	6013      	str	r3, [r2, #0]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	200259a4 	.word	0x200259a4

08001820 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001824:	f000 f9fe 	bl	8001c24 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001828:	20ca      	movs	r0, #202	@ 0xca
 800182a:	f000 f943 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 800182e:	20c3      	movs	r0, #195	@ 0xc3
 8001830:	f000 f94d 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001834:	2008      	movs	r0, #8
 8001836:	f000 f94a 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800183a:	2050      	movs	r0, #80	@ 0x50
 800183c:	f000 f947 	bl	8001ace <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001840:	20cf      	movs	r0, #207	@ 0xcf
 8001842:	f000 f937 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001846:	2000      	movs	r0, #0
 8001848:	f000 f941 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 800184c:	20c1      	movs	r0, #193	@ 0xc1
 800184e:	f000 f93e 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001852:	2030      	movs	r0, #48	@ 0x30
 8001854:	f000 f93b 	bl	8001ace <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001858:	20ed      	movs	r0, #237	@ 0xed
 800185a:	f000 f92b 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 800185e:	2064      	movs	r0, #100	@ 0x64
 8001860:	f000 f935 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001864:	2003      	movs	r0, #3
 8001866:	f000 f932 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800186a:	2012      	movs	r0, #18
 800186c:	f000 f92f 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001870:	2081      	movs	r0, #129	@ 0x81
 8001872:	f000 f92c 	bl	8001ace <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001876:	20e8      	movs	r0, #232	@ 0xe8
 8001878:	f000 f91c 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 800187c:	2085      	movs	r0, #133	@ 0x85
 800187e:	f000 f926 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001882:	2000      	movs	r0, #0
 8001884:	f000 f923 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001888:	2078      	movs	r0, #120	@ 0x78
 800188a:	f000 f920 	bl	8001ace <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 800188e:	20cb      	movs	r0, #203	@ 0xcb
 8001890:	f000 f910 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001894:	2039      	movs	r0, #57	@ 0x39
 8001896:	f000 f91a 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800189a:	202c      	movs	r0, #44	@ 0x2c
 800189c:	f000 f917 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80018a0:	2000      	movs	r0, #0
 80018a2:	f000 f914 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80018a6:	2034      	movs	r0, #52	@ 0x34
 80018a8:	f000 f911 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80018ac:	2002      	movs	r0, #2
 80018ae:	f000 f90e 	bl	8001ace <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80018b2:	20f7      	movs	r0, #247	@ 0xf7
 80018b4:	f000 f8fe 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80018b8:	2020      	movs	r0, #32
 80018ba:	f000 f908 	bl	8001ace <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80018be:	20ea      	movs	r0, #234	@ 0xea
 80018c0:	f000 f8f8 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80018c4:	2000      	movs	r0, #0
 80018c6:	f000 f902 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 f8ff 	bl	8001ace <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80018d0:	20b1      	movs	r0, #177	@ 0xb1
 80018d2:	f000 f8ef 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80018d6:	2000      	movs	r0, #0
 80018d8:	f000 f8f9 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80018dc:	201b      	movs	r0, #27
 80018de:	f000 f8f6 	bl	8001ace <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80018e2:	20b6      	movs	r0, #182	@ 0xb6
 80018e4:	f000 f8e6 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80018e8:	200a      	movs	r0, #10
 80018ea:	f000 f8f0 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80018ee:	20a2      	movs	r0, #162	@ 0xa2
 80018f0:	f000 f8ed 	bl	8001ace <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80018f4:	20c0      	movs	r0, #192	@ 0xc0
 80018f6:	f000 f8dd 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80018fa:	2010      	movs	r0, #16
 80018fc:	f000 f8e7 	bl	8001ace <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001900:	20c1      	movs	r0, #193	@ 0xc1
 8001902:	f000 f8d7 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001906:	2010      	movs	r0, #16
 8001908:	f000 f8e1 	bl	8001ace <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 800190c:	20c5      	movs	r0, #197	@ 0xc5
 800190e:	f000 f8d1 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001912:	2045      	movs	r0, #69	@ 0x45
 8001914:	f000 f8db 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001918:	2015      	movs	r0, #21
 800191a:	f000 f8d8 	bl	8001ace <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 800191e:	20c7      	movs	r0, #199	@ 0xc7
 8001920:	f000 f8c8 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001924:	2090      	movs	r0, #144	@ 0x90
 8001926:	f000 f8d2 	bl	8001ace <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800192a:	2036      	movs	r0, #54	@ 0x36
 800192c:	f000 f8c2 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001930:	20c8      	movs	r0, #200	@ 0xc8
 8001932:	f000 f8cc 	bl	8001ace <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001936:	20f2      	movs	r0, #242	@ 0xf2
 8001938:	f000 f8bc 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800193c:	2000      	movs	r0, #0
 800193e:	f000 f8c6 	bl	8001ace <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001942:	20b0      	movs	r0, #176	@ 0xb0
 8001944:	f000 f8b6 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001948:	20c2      	movs	r0, #194	@ 0xc2
 800194a:	f000 f8c0 	bl	8001ace <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800194e:	20b6      	movs	r0, #182	@ 0xb6
 8001950:	f000 f8b0 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001954:	200a      	movs	r0, #10
 8001956:	f000 f8ba 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800195a:	20a7      	movs	r0, #167	@ 0xa7
 800195c:	f000 f8b7 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001960:	2027      	movs	r0, #39	@ 0x27
 8001962:	f000 f8b4 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001966:	2004      	movs	r0, #4
 8001968:	f000 f8b1 	bl	8001ace <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 800196c:	202a      	movs	r0, #42	@ 0x2a
 800196e:	f000 f8a1 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001972:	2000      	movs	r0, #0
 8001974:	f000 f8ab 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001978:	2000      	movs	r0, #0
 800197a:	f000 f8a8 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800197e:	2000      	movs	r0, #0
 8001980:	f000 f8a5 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001984:	20ef      	movs	r0, #239	@ 0xef
 8001986:	f000 f8a2 	bl	8001ace <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800198a:	202b      	movs	r0, #43	@ 0x2b
 800198c:	f000 f892 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001990:	2000      	movs	r0, #0
 8001992:	f000 f89c 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001996:	2000      	movs	r0, #0
 8001998:	f000 f899 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 800199c:	2001      	movs	r0, #1
 800199e:	f000 f896 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80019a2:	203f      	movs	r0, #63	@ 0x3f
 80019a4:	f000 f893 	bl	8001ace <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80019a8:	20f6      	movs	r0, #246	@ 0xf6
 80019aa:	f000 f883 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80019ae:	2001      	movs	r0, #1
 80019b0:	f000 f88d 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80019b4:	2000      	movs	r0, #0
 80019b6:	f000 f88a 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80019ba:	2006      	movs	r0, #6
 80019bc:	f000 f887 	bl	8001ace <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80019c0:	202c      	movs	r0, #44	@ 0x2c
 80019c2:	f000 f877 	bl	8001ab4 <ili9341_Write_Reg>
  LCD_Delay(200);
 80019c6:	20c8      	movs	r0, #200	@ 0xc8
 80019c8:	f000 f9e8 	bl	8001d9c <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80019cc:	2026      	movs	r0, #38	@ 0x26
 80019ce:	f000 f871 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80019d2:	2001      	movs	r0, #1
 80019d4:	f000 f87b 	bl	8001ace <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80019d8:	20e0      	movs	r0, #224	@ 0xe0
 80019da:	f000 f86b 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80019de:	200f      	movs	r0, #15
 80019e0:	f000 f875 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80019e4:	2029      	movs	r0, #41	@ 0x29
 80019e6:	f000 f872 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80019ea:	2024      	movs	r0, #36	@ 0x24
 80019ec:	f000 f86f 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80019f0:	200c      	movs	r0, #12
 80019f2:	f000 f86c 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80019f6:	200e      	movs	r0, #14
 80019f8:	f000 f869 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80019fc:	2009      	movs	r0, #9
 80019fe:	f000 f866 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001a02:	204e      	movs	r0, #78	@ 0x4e
 8001a04:	f000 f863 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001a08:	2078      	movs	r0, #120	@ 0x78
 8001a0a:	f000 f860 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001a0e:	203c      	movs	r0, #60	@ 0x3c
 8001a10:	f000 f85d 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001a14:	2009      	movs	r0, #9
 8001a16:	f000 f85a 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001a1a:	2013      	movs	r0, #19
 8001a1c:	f000 f857 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001a20:	2005      	movs	r0, #5
 8001a22:	f000 f854 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001a26:	2017      	movs	r0, #23
 8001a28:	f000 f851 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001a2c:	2011      	movs	r0, #17
 8001a2e:	f000 f84e 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a32:	2000      	movs	r0, #0
 8001a34:	f000 f84b 	bl	8001ace <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001a38:	20e1      	movs	r0, #225	@ 0xe1
 8001a3a:	f000 f83b 	bl	8001ab4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f000 f845 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001a44:	2016      	movs	r0, #22
 8001a46:	f000 f842 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001a4a:	201b      	movs	r0, #27
 8001a4c:	f000 f83f 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001a50:	2004      	movs	r0, #4
 8001a52:	f000 f83c 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001a56:	2011      	movs	r0, #17
 8001a58:	f000 f839 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001a5c:	2007      	movs	r0, #7
 8001a5e:	f000 f836 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001a62:	2031      	movs	r0, #49	@ 0x31
 8001a64:	f000 f833 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001a68:	2033      	movs	r0, #51	@ 0x33
 8001a6a:	f000 f830 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001a6e:	2042      	movs	r0, #66	@ 0x42
 8001a70:	f000 f82d 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001a74:	2005      	movs	r0, #5
 8001a76:	f000 f82a 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001a7a:	200c      	movs	r0, #12
 8001a7c:	f000 f827 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001a80:	200a      	movs	r0, #10
 8001a82:	f000 f824 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001a86:	2028      	movs	r0, #40	@ 0x28
 8001a88:	f000 f821 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001a8c:	202f      	movs	r0, #47	@ 0x2f
 8001a8e:	f000 f81e 	bl	8001ace <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001a92:	200f      	movs	r0, #15
 8001a94:	f000 f81b 	bl	8001ace <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001a98:	2011      	movs	r0, #17
 8001a9a:	f000 f80b 	bl	8001ab4 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001a9e:	20c8      	movs	r0, #200	@ 0xc8
 8001aa0:	f000 f97c 	bl	8001d9c <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001aa4:	2029      	movs	r0, #41	@ 0x29
 8001aa6:	f000 f805 	bl	8001ab4 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001aaa:	202c      	movs	r0, #44	@ 0x2c
 8001aac:	f000 f802 	bl	8001ab4 <ili9341_Write_Reg>
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 f949 	bl	8001d58 <LCD_IO_WriteReg>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f91a 	bl	8001d14 <LCD_IO_WriteData>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001aec:	4819      	ldr	r0, [pc, #100]	@ (8001b54 <SPI_Init+0x6c>)
 8001aee:	f004 fbd8 	bl	80062a2 <HAL_SPI_GetState>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d12b      	bne.n	8001b50 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001af8:	4b16      	ldr	r3, [pc, #88]	@ (8001b54 <SPI_Init+0x6c>)
 8001afa:	4a17      	ldr	r2, [pc, #92]	@ (8001b58 <SPI_Init+0x70>)
 8001afc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001afe:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <SPI_Init+0x6c>)
 8001b00:	2218      	movs	r2, #24
 8001b02:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001b04:	4b13      	ldr	r3, [pc, #76]	@ (8001b54 <SPI_Init+0x6c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001b0a:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <SPI_Init+0x6c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001b10:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <SPI_Init+0x6c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001b16:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <SPI_Init+0x6c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b54 <SPI_Init+0x6c>)
 8001b1e:	2207      	movs	r2, #7
 8001b20:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001b22:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <SPI_Init+0x6c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001b28:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <SPI_Init+0x6c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001b2e:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <SPI_Init+0x6c>)
 8001b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b34:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001b36:	4b07      	ldr	r3, [pc, #28]	@ (8001b54 <SPI_Init+0x6c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <SPI_Init+0x6c>)
 8001b3e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b42:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001b44:	4803      	ldr	r0, [pc, #12]	@ (8001b54 <SPI_Init+0x6c>)
 8001b46:	f000 f833 	bl	8001bb0 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001b4a:	4802      	ldr	r0, [pc, #8]	@ (8001b54 <SPI_Init+0x6c>)
 8001b4c:	f004 f9b4 	bl	8005eb8 <HAL_SPI_Init>
  }
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	200259a8 	.word	0x200259a8
 8001b58:	40015000 	.word	0x40015000

08001b5c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001b6a:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <SPI_Write+0x34>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	1db9      	adds	r1, r7, #6
 8001b70:	2201      	movs	r2, #1
 8001b72:	4808      	ldr	r0, [pc, #32]	@ (8001b94 <SPI_Write+0x38>)
 8001b74:	f004 fa51 	bl	800601a <HAL_SPI_Transmit>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001b82:	f000 f809 	bl	8001b98 <SPI_Error>
  }
}
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	2000000c 	.word	0x2000000c
 8001b94:	200259a8 	.word	0x200259a8

08001b98 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001b9c:	4803      	ldr	r0, [pc, #12]	@ (8001bac <SPI_Error+0x14>)
 8001b9e:	f004 fa14 	bl	8005fca <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001ba2:	f7ff ffa1 	bl	8001ae8 <SPI_Init>
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200259a8 	.word	0x200259a8

08001bb0 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	@ 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	4b17      	ldr	r3, [pc, #92]	@ (8001c1c <SPI_MspInit+0x6c>)
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc0:	4a16      	ldr	r2, [pc, #88]	@ (8001c1c <SPI_MspInit+0x6c>)
 8001bc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bc6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bc8:	4b14      	ldr	r3, [pc, #80]	@ (8001c1c <SPI_MspInit+0x6c>)
 8001bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <SPI_MspInit+0x6c>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bdc:	4a0f      	ldr	r2, [pc, #60]	@ (8001c1c <SPI_MspInit+0x6c>)
 8001bde:	f043 0320 	orr.w	r3, r3, #32
 8001be2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c1c <SPI_MspInit+0x6c>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be8:	f003 0320 	and.w	r3, r3, #32
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001bf0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001c02:	2305      	movs	r3, #5
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4804      	ldr	r0, [pc, #16]	@ (8001c20 <SPI_MspInit+0x70>)
 8001c0e:	f001 fccd 	bl	80035ac <HAL_GPIO_Init>
}
 8001c12:	bf00      	nop
 8001c14:	3728      	adds	r7, #40	@ 0x28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40021400 	.word	0x40021400

08001c24 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001c2a:	4b36      	ldr	r3, [pc, #216]	@ (8001d04 <LCD_IO_Init+0xe0>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d164      	bne.n	8001cfc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001c32:	4b34      	ldr	r3, [pc, #208]	@ (8001d04 <LCD_IO_Init+0xe0>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	4b32      	ldr	r3, [pc, #200]	@ (8001d08 <LCD_IO_Init+0xe4>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c40:	4a31      	ldr	r2, [pc, #196]	@ (8001d08 <LCD_IO_Init+0xe4>)
 8001c42:	f043 0308 	orr.w	r3, r3, #8
 8001c46:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c48:	4b2f      	ldr	r3, [pc, #188]	@ (8001d08 <LCD_IO_Init+0xe4>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001c54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001c62:	2302      	movs	r3, #2
 8001c64:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4827      	ldr	r0, [pc, #156]	@ (8001d0c <LCD_IO_Init+0xe8>)
 8001c6e:	f001 fc9d 	bl	80035ac <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	4b24      	ldr	r3, [pc, #144]	@ (8001d08 <LCD_IO_Init+0xe4>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	4a23      	ldr	r2, [pc, #140]	@ (8001d08 <LCD_IO_Init+0xe4>)
 8001c7c:	f043 0308 	orr.w	r3, r3, #8
 8001c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c82:	4b21      	ldr	r3, [pc, #132]	@ (8001d08 <LCD_IO_Init+0xe4>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001c8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001c94:	2301      	movs	r3, #1
 8001c96:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4819      	ldr	r0, [pc, #100]	@ (8001d0c <LCD_IO_Init+0xe8>)
 8001ca8:	f001 fc80 	bl	80035ac <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001cac:	2300      	movs	r3, #0
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <LCD_IO_Init+0xe4>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb4:	4a14      	ldr	r2, [pc, #80]	@ (8001d08 <LCD_IO_Init+0xe4>)
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cbc:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <LCD_IO_Init+0xe4>)
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001cc8:	2304      	movs	r3, #4
 8001cca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	4619      	mov	r1, r3
 8001cde:	480c      	ldr	r0, [pc, #48]	@ (8001d10 <LCD_IO_Init+0xec>)
 8001ce0:	f001 fc64 	bl	80035ac <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	4809      	ldr	r0, [pc, #36]	@ (8001d10 <LCD_IO_Init+0xec>)
 8001cea:	f001 ff17 	bl	8003b1c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001cee:	2201      	movs	r2, #1
 8001cf0:	2104      	movs	r1, #4
 8001cf2:	4807      	ldr	r0, [pc, #28]	@ (8001d10 <LCD_IO_Init+0xec>)
 8001cf4:	f001 ff12 	bl	8003b1c <HAL_GPIO_WritePin>

    SPI_Init();
 8001cf8:	f7ff fef6 	bl	8001ae8 <SPI_Init>
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20025a00 	.word	0x20025a00
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40020c00 	.word	0x40020c00
 8001d10:	40020800 	.word	0x40020800

08001d14 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d24:	480a      	ldr	r0, [pc, #40]	@ (8001d50 <LCD_IO_WriteData+0x3c>)
 8001d26:	f001 fef9 	bl	8003b1c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	4809      	ldr	r0, [pc, #36]	@ (8001d54 <LCD_IO_WriteData+0x40>)
 8001d30:	f001 fef4 	bl	8003b1c <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff10 	bl	8001b5c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	2104      	movs	r1, #4
 8001d40:	4804      	ldr	r0, [pc, #16]	@ (8001d54 <LCD_IO_WriteData+0x40>)
 8001d42:	f001 feeb 	bl	8003b1c <HAL_GPIO_WritePin>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40020c00 	.word	0x40020c00
 8001d54:	40020800 	.word	0x40020800

08001d58 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001d62:	2200      	movs	r2, #0
 8001d64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d68:	480a      	ldr	r0, [pc, #40]	@ (8001d94 <LCD_IO_WriteReg+0x3c>)
 8001d6a:	f001 fed7 	bl	8003b1c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2104      	movs	r1, #4
 8001d72:	4809      	ldr	r0, [pc, #36]	@ (8001d98 <LCD_IO_WriteReg+0x40>)
 8001d74:	f001 fed2 	bl	8003b1c <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff feed 	bl	8001b5c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001d82:	2201      	movs	r2, #1
 8001d84:	2104      	movs	r1, #4
 8001d86:	4804      	ldr	r0, [pc, #16]	@ (8001d98 <LCD_IO_WriteReg+0x40>)
 8001d88:	f001 fec8 	bl	8003b1c <HAL_GPIO_WritePin>
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40020c00 	.word	0x40020c00
 8001d98:	40020800 	.word	0x40020800

08001d9c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f001 fa99 	bl	80032dc <HAL_Delay>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001db8:	f001 fa1e 	bl	80031f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dbc:	f000 f858 	bl	8001e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc0:	f000 fa48 	bl	8002254 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001dc4:	f000 f8fe 	bl	8001fc4 <MX_LTDC_Init>
  MX_RNG_Init();
 8001dc8:	f000 f9ae 	bl	8002128 <MX_RNG_Init>
  MX_TIM2_Init();
 8001dcc:	f000 f9f6 	bl	80021bc <MX_TIM2_Init>
  MX_SPI5_Init();
 8001dd0:	f000 f9be 	bl	8002150 <MX_SPI5_Init>
  MX_I2C3_Init();
 8001dd4:	f000 f8b6 	bl	8001f44 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8001dd8:	f7fe fb80 	bl	80004dc <ApplicationInit>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  eventsToRun = getScheduledEvents();
 8001ddc:	f7ff fcee 	bl	80017bc <getScheduledEvents>
 8001de0:	6078      	str	r0, [r7, #4]

	  if(eventsToRun & START_MENU_EVENT){
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <main+0x3e>
		  LCD_Start_Screen();
 8001dec:	f7fe fb92 	bl	8000514 <LCD_Start_Screen>
	  }
	  if(eventsToRun & POLLING_MODE_SELECT_EVENT){
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d004      	beq.n	8001e04 <main+0x52>
		  LCD_Polling_Mode();
 8001dfa:	f7fe fbc1 	bl	8000580 <LCD_Polling_Mode>
		  HAL_Delay(200);
 8001dfe:	20c8      	movs	r0, #200	@ 0xc8
 8001e00:	f001 fa6c 	bl	80032dc <HAL_Delay>
	  }
	  if(eventsToRun & COLOR_SELECT_EVENT){
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <main+0x60>
		  LCD_Select_Color_Screen();
 8001e0e:	f7fe fb8d 	bl	800052c <LCD_Select_Color_Screen>
	  }
	  if(eventsToRun & POLLING_COLOR_SELECT_EVENT){
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d004      	beq.n	8001e26 <main+0x74>
		  LCD_Polling_Color();
 8001e1c:	f7fe fbc6 	bl	80005ac <LCD_Polling_Color>
		  HAL_Delay(200);
 8001e20:	20c8      	movs	r0, #200	@ 0xc8
 8001e22:	f001 fa5b 	bl	80032dc <HAL_Delay>
	  }
	  if(eventsToRun & BUILD_NEW_GAME_EVENT){
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <main+0x82>
		  LCD_Game_Screen();
 8001e30:	f7fe fb88 	bl	8000544 <LCD_Game_Screen>
	  }
	  if(eventsToRun & POLLING_GAME_EVENT){
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d004      	beq.n	8001e48 <main+0x96>
		  LCD_Touch_Polling_Game();
 8001e3e:	f7fe fbd3 	bl	80005e8 <LCD_Touch_Polling_Game>
		  HAL_Delay(100);
 8001e42:	2064      	movs	r0, #100	@ 0x64
 8001e44:	f001 fa4a 	bl	80032dc <HAL_Delay>
	  }
	  if(eventsToRun & SCORE_SCREEN_EVENT){
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d005      	beq.n	8001e5e <main+0xac>
		  LCD_Score_Screen();
 8001e52:	f7fe fb83 	bl	800055c <LCD_Score_Screen>
		  HAL_Delay(1000);
 8001e56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e5a:	f001 fa3f 	bl	80032dc <HAL_Delay>
	  }
	  if(eventsToRun & POLLING_RESTART_EVENT){
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0b9      	beq.n	8001ddc <main+0x2a>
		  LCD_Polling_Restart();
 8001e68:	f7fe fbd6 	bl	8000618 <LCD_Polling_Restart>
	  eventsToRun = getScheduledEvents();
 8001e6c:	e7b6      	b.n	8001ddc <main+0x2a>
	...

08001e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b094      	sub	sp, #80	@ 0x50
 8001e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e76:	f107 0320 	add.w	r3, r7, #32
 8001e7a:	2230      	movs	r2, #48	@ 0x30
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f004 fdd2 	bl	8006a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	4b28      	ldr	r3, [pc, #160]	@ (8001f3c <SystemClock_Config+0xcc>)
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9c:	4a27      	ldr	r2, [pc, #156]	@ (8001f3c <SystemClock_Config+0xcc>)
 8001e9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ea2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea4:	4b25      	ldr	r3, [pc, #148]	@ (8001f3c <SystemClock_Config+0xcc>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	4b22      	ldr	r3, [pc, #136]	@ (8001f40 <SystemClock_Config+0xd0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a21      	ldr	r2, [pc, #132]	@ (8001f40 <SystemClock_Config+0xd0>)
 8001eba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f40 <SystemClock_Config+0xd0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ed0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eda:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ee4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001ee8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eea:	2302      	movs	r3, #2
 8001eec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001eee:	2307      	movs	r3, #7
 8001ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ef2:	f107 0320 	add.w	r3, r7, #32
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f003 f970 	bl	80051dc <HAL_RCC_OscConfig>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001f02:	f000 fb55 	bl	80025b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f06:	230f      	movs	r3, #15
 8001f08:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f12:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f1e:	f107 030c 	add.w	r3, r7, #12
 8001f22:	2105      	movs	r1, #5
 8001f24:	4618      	mov	r0, r3
 8001f26:	f003 fbd1 	bl	80056cc <HAL_RCC_ClockConfig>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001f30:	f000 fb3e 	bl	80025b0 <Error_Handler>
  }
}
 8001f34:	bf00      	nop
 8001f36:	3750      	adds	r7, #80	@ 0x50
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40007000 	.word	0x40007000

08001f44 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001f48:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb8 <MX_I2C3_Init+0x74>)
 8001f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001fbc <MX_I2C3_Init+0x78>)
 8001f4c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb8 <MX_I2C3_Init+0x74>)
 8001f50:	4a1b      	ldr	r2, [pc, #108]	@ (8001fc0 <MX_I2C3_Init+0x7c>)
 8001f52:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f54:	4b18      	ldr	r3, [pc, #96]	@ (8001fb8 <MX_I2C3_Init+0x74>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001f5a:	4b17      	ldr	r3, [pc, #92]	@ (8001fb8 <MX_I2C3_Init+0x74>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f60:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <MX_I2C3_Init+0x74>)
 8001f62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f66:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f68:	4b13      	ldr	r3, [pc, #76]	@ (8001fb8 <MX_I2C3_Init+0x74>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001f6e:	4b12      	ldr	r3, [pc, #72]	@ (8001fb8 <MX_I2C3_Init+0x74>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f74:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <MX_I2C3_Init+0x74>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb8 <MX_I2C3_Init+0x74>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f80:	480d      	ldr	r0, [pc, #52]	@ (8001fb8 <MX_I2C3_Init+0x74>)
 8001f82:	f001 fde5 	bl	8003b50 <HAL_I2C_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001f8c:	f000 fb10 	bl	80025b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f90:	2100      	movs	r1, #0
 8001f92:	4809      	ldr	r0, [pc, #36]	@ (8001fb8 <MX_I2C3_Init+0x74>)
 8001f94:	f002 fe00 	bl	8004b98 <HAL_I2CEx_ConfigAnalogFilter>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001f9e:	f000 fb07 	bl	80025b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4804      	ldr	r0, [pc, #16]	@ (8001fb8 <MX_I2C3_Init+0x74>)
 8001fa6:	f002 fe33 	bl	8004c10 <HAL_I2CEx_ConfigDigitalFilter>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001fb0:	f000 fafe 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20025a04 	.word	0x20025a04
 8001fbc:	40005c00 	.word	0x40005c00
 8001fc0:	000186a0 	.word	0x000186a0

08001fc4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b09a      	sub	sp, #104	@ 0x68
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001fca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001fce:	2234      	movs	r2, #52	@ 0x34
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f004 fd28 	bl	8006a28 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001fd8:	463b      	mov	r3, r7
 8001fda:	2234      	movs	r2, #52	@ 0x34
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f004 fd22 	bl	8006a28 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001fe4:	4b4e      	ldr	r3, [pc, #312]	@ (8002120 <MX_LTDC_Init+0x15c>)
 8001fe6:	4a4f      	ldr	r2, [pc, #316]	@ (8002124 <MX_LTDC_Init+0x160>)
 8001fe8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001fea:	4b4d      	ldr	r3, [pc, #308]	@ (8002120 <MX_LTDC_Init+0x15c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001ff0:	4b4b      	ldr	r3, [pc, #300]	@ (8002120 <MX_LTDC_Init+0x15c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8002120 <MX_LTDC_Init+0x15c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001ffc:	4b48      	ldr	r3, [pc, #288]	@ (8002120 <MX_LTDC_Init+0x15c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8002002:	4b47      	ldr	r3, [pc, #284]	@ (8002120 <MX_LTDC_Init+0x15c>)
 8002004:	2207      	movs	r2, #7
 8002006:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8002008:	4b45      	ldr	r3, [pc, #276]	@ (8002120 <MX_LTDC_Init+0x15c>)
 800200a:	2203      	movs	r2, #3
 800200c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800200e:	4b44      	ldr	r3, [pc, #272]	@ (8002120 <MX_LTDC_Init+0x15c>)
 8002010:	220e      	movs	r2, #14
 8002012:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8002014:	4b42      	ldr	r3, [pc, #264]	@ (8002120 <MX_LTDC_Init+0x15c>)
 8002016:	2205      	movs	r2, #5
 8002018:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800201a:	4b41      	ldr	r3, [pc, #260]	@ (8002120 <MX_LTDC_Init+0x15c>)
 800201c:	f240 228e 	movw	r2, #654	@ 0x28e
 8002020:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8002022:	4b3f      	ldr	r3, [pc, #252]	@ (8002120 <MX_LTDC_Init+0x15c>)
 8002024:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8002028:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 800202a:	4b3d      	ldr	r3, [pc, #244]	@ (8002120 <MX_LTDC_Init+0x15c>)
 800202c:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8002030:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8002032:	4b3b      	ldr	r3, [pc, #236]	@ (8002120 <MX_LTDC_Init+0x15c>)
 8002034:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8002038:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800203a:	4b39      	ldr	r3, [pc, #228]	@ (8002120 <MX_LTDC_Init+0x15c>)
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002042:	4b37      	ldr	r3, [pc, #220]	@ (8002120 <MX_LTDC_Init+0x15c>)
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800204a:	4b35      	ldr	r3, [pc, #212]	@ (8002120 <MX_LTDC_Init+0x15c>)
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002052:	4833      	ldr	r0, [pc, #204]	@ (8002120 <MX_LTDC_Init+0x15c>)
 8002054:	f002 fe1c 	bl	8004c90 <HAL_LTDC_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800205e:	f000 faa7 	bl	80025b0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002072:	2300      	movs	r3, #0
 8002074:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800207e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002082:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002084:	2305      	movs	r3, #5
 8002086:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80020a6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020aa:	2200      	movs	r2, #0
 80020ac:	4619      	mov	r1, r3
 80020ae:	481c      	ldr	r0, [pc, #112]	@ (8002120 <MX_LTDC_Init+0x15c>)
 80020b0:	f002 febe 	bl	8004e30 <HAL_LTDC_ConfigLayer>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80020ba:	f000 fa79 	bl	80025b0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80020da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020de:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80020e0:	2305      	movs	r3, #5
 80020e2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002102:	463b      	mov	r3, r7
 8002104:	2201      	movs	r2, #1
 8002106:	4619      	mov	r1, r3
 8002108:	4805      	ldr	r0, [pc, #20]	@ (8002120 <MX_LTDC_Init+0x15c>)
 800210a:	f002 fe91 	bl	8004e30 <HAL_LTDC_ConfigLayer>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8002114:	f000 fa4c 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002118:	bf00      	nop
 800211a:	3768      	adds	r7, #104	@ 0x68
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20025a58 	.word	0x20025a58
 8002124:	40016800 	.word	0x40016800

08002128 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800212c:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <MX_RNG_Init+0x20>)
 800212e:	4a07      	ldr	r2, [pc, #28]	@ (800214c <MX_RNG_Init+0x24>)
 8002130:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002132:	4805      	ldr	r0, [pc, #20]	@ (8002148 <MX_RNG_Init+0x20>)
 8002134:	f003 fe96 	bl	8005e64 <HAL_RNG_Init>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800213e:	f000 fa37 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20025b00 	.word	0x20025b00
 800214c:	50060800 	.word	0x50060800

08002150 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002154:	4b17      	ldr	r3, [pc, #92]	@ (80021b4 <MX_SPI5_Init+0x64>)
 8002156:	4a18      	ldr	r2, [pc, #96]	@ (80021b8 <MX_SPI5_Init+0x68>)
 8002158:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800215a:	4b16      	ldr	r3, [pc, #88]	@ (80021b4 <MX_SPI5_Init+0x64>)
 800215c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002160:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002162:	4b14      	ldr	r3, [pc, #80]	@ (80021b4 <MX_SPI5_Init+0x64>)
 8002164:	2200      	movs	r2, #0
 8002166:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002168:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <MX_SPI5_Init+0x64>)
 800216a:	2200      	movs	r2, #0
 800216c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800216e:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <MX_SPI5_Init+0x64>)
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002174:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <MX_SPI5_Init+0x64>)
 8002176:	2200      	movs	r2, #0
 8002178:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800217a:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <MX_SPI5_Init+0x64>)
 800217c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002180:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002182:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <MX_SPI5_Init+0x64>)
 8002184:	2200      	movs	r2, #0
 8002186:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002188:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <MX_SPI5_Init+0x64>)
 800218a:	2200      	movs	r2, #0
 800218c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800218e:	4b09      	ldr	r3, [pc, #36]	@ (80021b4 <MX_SPI5_Init+0x64>)
 8002190:	2200      	movs	r2, #0
 8002192:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002194:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <MX_SPI5_Init+0x64>)
 8002196:	2200      	movs	r2, #0
 8002198:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <MX_SPI5_Init+0x64>)
 800219c:	220a      	movs	r2, #10
 800219e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80021a0:	4804      	ldr	r0, [pc, #16]	@ (80021b4 <MX_SPI5_Init+0x64>)
 80021a2:	f003 fe89 	bl	8005eb8 <HAL_SPI_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80021ac:	f000 fa00 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20025b10 	.word	0x20025b10
 80021b8:	40015000 	.word	0x40015000

080021bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021c2:	f107 0308 	add.w	r3, r7, #8
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d0:	463b      	mov	r3, r7
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002250 <MX_TIM2_Init+0x94>)
 80021da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002250 <MX_TIM2_Init+0x94>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002250 <MX_TIM2_Init+0x94>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80021ec:	4b18      	ldr	r3, [pc, #96]	@ (8002250 <MX_TIM2_Init+0x94>)
 80021ee:	f04f 32ff 	mov.w	r2, #4294967295
 80021f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f4:	4b16      	ldr	r3, [pc, #88]	@ (8002250 <MX_TIM2_Init+0x94>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021fa:	4b15      	ldr	r3, [pc, #84]	@ (8002250 <MX_TIM2_Init+0x94>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002200:	4813      	ldr	r0, [pc, #76]	@ (8002250 <MX_TIM2_Init+0x94>)
 8002202:	f004 f939 	bl	8006478 <HAL_TIM_Base_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800220c:	f000 f9d0 	bl	80025b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002210:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002214:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002216:	f107 0308 	add.w	r3, r7, #8
 800221a:	4619      	mov	r1, r3
 800221c:	480c      	ldr	r0, [pc, #48]	@ (8002250 <MX_TIM2_Init+0x94>)
 800221e:	f004 f97a 	bl	8006516 <HAL_TIM_ConfigClockSource>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002228:	f000 f9c2 	bl	80025b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222c:	2300      	movs	r3, #0
 800222e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002234:	463b      	mov	r3, r7
 8002236:	4619      	mov	r1, r3
 8002238:	4805      	ldr	r0, [pc, #20]	@ (8002250 <MX_TIM2_Init+0x94>)
 800223a:	f004 fb79 	bl	8006930 <HAL_TIMEx_MasterConfigSynchronization>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002244:	f000 f9b4 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002248:	bf00      	nop
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20025b68 	.word	0x20025b68

08002254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08e      	sub	sp, #56	@ 0x38
 8002258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]
 8002264:	609a      	str	r2, [r3, #8]
 8002266:	60da      	str	r2, [r3, #12]
 8002268:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	623b      	str	r3, [r7, #32]
 800226e:	4bb2      	ldr	r3, [pc, #712]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	4ab1      	ldr	r2, [pc, #708]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 8002274:	f043 0304 	orr.w	r3, r3, #4
 8002278:	6313      	str	r3, [r2, #48]	@ 0x30
 800227a:	4baf      	ldr	r3, [pc, #700]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	623b      	str	r3, [r7, #32]
 8002284:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
 800228a:	4bab      	ldr	r3, [pc, #684]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	4aaa      	ldr	r2, [pc, #680]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 8002290:	f043 0320 	orr.w	r3, r3, #32
 8002294:	6313      	str	r3, [r2, #48]	@ 0x30
 8002296:	4ba8      	ldr	r3, [pc, #672]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	61bb      	str	r3, [r7, #24]
 80022a6:	4ba4      	ldr	r3, [pc, #656]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	4aa3      	ldr	r2, [pc, #652]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 80022ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b2:	4ba1      	ldr	r3, [pc, #644]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ba:	61bb      	str	r3, [r7, #24]
 80022bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	4b9d      	ldr	r3, [pc, #628]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	4a9c      	ldr	r2, [pc, #624]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ce:	4b9a      	ldr	r3, [pc, #616]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	4b96      	ldr	r3, [pc, #600]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	4a95      	ldr	r2, [pc, #596]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ea:	4b93      	ldr	r3, [pc, #588]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b8f      	ldr	r3, [pc, #572]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	4a8e      	ldr	r2, [pc, #568]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 8002300:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002304:	6313      	str	r3, [r2, #48]	@ 0x30
 8002306:	4b8c      	ldr	r3, [pc, #560]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	4b88      	ldr	r3, [pc, #544]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	4a87      	ldr	r2, [pc, #540]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 800231c:	f043 0310 	orr.w	r3, r3, #16
 8002320:	6313      	str	r3, [r2, #48]	@ 0x30
 8002322:	4b85      	ldr	r3, [pc, #532]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
 8002332:	4b81      	ldr	r3, [pc, #516]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	4a80      	ldr	r2, [pc, #512]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 8002338:	f043 0308 	orr.w	r3, r3, #8
 800233c:	6313      	str	r3, [r2, #48]	@ 0x30
 800233e:	4b7e      	ldr	r3, [pc, #504]	@ (8002538 <MX_GPIO_Init+0x2e4>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800234a:	2200      	movs	r2, #0
 800234c:	2116      	movs	r1, #22
 800234e:	487b      	ldr	r0, [pc, #492]	@ (800253c <MX_GPIO_Init+0x2e8>)
 8002350:	f001 fbe4 	bl	8003b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002354:	2200      	movs	r2, #0
 8002356:	2180      	movs	r1, #128	@ 0x80
 8002358:	4879      	ldr	r0, [pc, #484]	@ (8002540 <MX_GPIO_Init+0x2ec>)
 800235a:	f001 fbdf 	bl	8003b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800235e:	2200      	movs	r2, #0
 8002360:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002364:	4877      	ldr	r0, [pc, #476]	@ (8002544 <MX_GPIO_Init+0x2f0>)
 8002366:	f001 fbd9 	bl	8003b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800236a:	2200      	movs	r2, #0
 800236c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002370:	4875      	ldr	r0, [pc, #468]	@ (8002548 <MX_GPIO_Init+0x2f4>)
 8002372:	f001 fbd3 	bl	8003b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002376:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800237a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	2302      	movs	r3, #2
 800237e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002384:	2303      	movs	r3, #3
 8002386:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002388:	230c      	movs	r3, #12
 800238a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800238c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002390:	4619      	mov	r1, r3
 8002392:	486e      	ldr	r0, [pc, #440]	@ (800254c <MX_GPIO_Init+0x2f8>)
 8002394:	f001 f90a 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002398:	2301      	movs	r3, #1
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	2302      	movs	r3, #2
 800239e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a4:	2303      	movs	r3, #3
 80023a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023a8:	230c      	movs	r3, #12
 80023aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80023ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023b0:	4619      	mov	r1, r3
 80023b2:	4862      	ldr	r0, [pc, #392]	@ (800253c <MX_GPIO_Init+0x2e8>)
 80023b4:	f001 f8fa 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80023b8:	2316      	movs	r3, #22
 80023ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023bc:	2301      	movs	r3, #1
 80023be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023cc:	4619      	mov	r1, r3
 80023ce:	485b      	ldr	r0, [pc, #364]	@ (800253c <MX_GPIO_Init+0x2e8>)
 80023d0:	f001 f8ec 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80023d4:	f248 0307 	movw	r3, #32775	@ 0x8007
 80023d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80023da:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80023de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023e8:	4619      	mov	r1, r3
 80023ea:	4855      	ldr	r0, [pc, #340]	@ (8002540 <MX_GPIO_Init+0x2ec>)
 80023ec:	f001 f8de 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80023f0:	2380      	movs	r3, #128	@ 0x80
 80023f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f4:	2301      	movs	r3, #1
 80023f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fc:	2300      	movs	r3, #0
 80023fe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002400:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002404:	4619      	mov	r1, r3
 8002406:	484e      	ldr	r0, [pc, #312]	@ (8002540 <MX_GPIO_Init+0x2ec>)
 8002408:	f001 f8d0 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800240c:	2320      	movs	r3, #32
 800240e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002410:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002414:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800241a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800241e:	4619      	mov	r1, r3
 8002420:	4846      	ldr	r0, [pc, #280]	@ (800253c <MX_GPIO_Init+0x2e8>)
 8002422:	f001 f8c3 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002426:	2304      	movs	r3, #4
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800242a:	2300      	movs	r3, #0
 800242c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002436:	4619      	mov	r1, r3
 8002438:	4845      	ldr	r0, [pc, #276]	@ (8002550 <MX_GPIO_Init+0x2fc>)
 800243a:	f001 f8b7 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800243e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002442:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244c:	2303      	movs	r3, #3
 800244e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002450:	230c      	movs	r3, #12
 8002452:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002454:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002458:	4619      	mov	r1, r3
 800245a:	483b      	ldr	r0, [pc, #236]	@ (8002548 <MX_GPIO_Init+0x2f4>)
 800245c:	f001 f8a6 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002460:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002464:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246e:	2303      	movs	r3, #3
 8002470:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002472:	230c      	movs	r3, #12
 8002474:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800247a:	4619      	mov	r1, r3
 800247c:	4835      	ldr	r0, [pc, #212]	@ (8002554 <MX_GPIO_Init+0x300>)
 800247e:	f001 f895 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002482:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002494:	230c      	movs	r3, #12
 8002496:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002498:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800249c:	4619      	mov	r1, r3
 800249e:	482c      	ldr	r0, [pc, #176]	@ (8002550 <MX_GPIO_Init+0x2fc>)
 80024a0:	f001 f884 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80024a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024aa:	2300      	movs	r3, #0
 80024ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80024b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024b6:	4619      	mov	r1, r3
 80024b8:	4825      	ldr	r0, [pc, #148]	@ (8002550 <MX_GPIO_Init+0x2fc>)
 80024ba:	f001 f877 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80024be:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80024c2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c4:	2302      	movs	r3, #2
 80024c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024cc:	2303      	movs	r3, #3
 80024ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024d0:	230c      	movs	r3, #12
 80024d2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024d8:	4619      	mov	r1, r3
 80024da:	481a      	ldr	r0, [pc, #104]	@ (8002544 <MX_GPIO_Init+0x2f0>)
 80024dc:	f001 f866 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80024e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e6:	2300      	movs	r3, #0
 80024e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80024ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024f2:	4619      	mov	r1, r3
 80024f4:	4813      	ldr	r0, [pc, #76]	@ (8002544 <MX_GPIO_Init+0x2f0>)
 80024f6:	f001 f859 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80024fa:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80024fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002500:	2301      	movs	r3, #1
 8002502:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002508:	2300      	movs	r3, #0
 800250a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800250c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002510:	4619      	mov	r1, r3
 8002512:	480c      	ldr	r0, [pc, #48]	@ (8002544 <MX_GPIO_Init+0x2f0>)
 8002514:	f001 f84a 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002518:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800251c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	2302      	movs	r3, #2
 8002520:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002526:	2303      	movs	r3, #3
 8002528:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800252a:	2307      	movs	r3, #7
 800252c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002532:	4619      	mov	r1, r3
 8002534:	e010      	b.n	8002558 <MX_GPIO_Init+0x304>
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800
 800253c:	40020800 	.word	0x40020800
 8002540:	40020000 	.word	0x40020000
 8002544:	40020c00 	.word	0x40020c00
 8002548:	40021800 	.word	0x40021800
 800254c:	40021400 	.word	0x40021400
 8002550:	40020400 	.word	0x40020400
 8002554:	40021000 	.word	0x40021000
 8002558:	4812      	ldr	r0, [pc, #72]	@ (80025a4 <MX_GPIO_Init+0x350>)
 800255a:	f001 f827 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800255e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002562:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002564:	2301      	movs	r3, #1
 8002566:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256c:	2300      	movs	r3, #0
 800256e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002570:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002574:	4619      	mov	r1, r3
 8002576:	480c      	ldr	r0, [pc, #48]	@ (80025a8 <MX_GPIO_Init+0x354>)
 8002578:	f001 f818 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800257c:	2360      	movs	r3, #96	@ 0x60
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002588:	2303      	movs	r3, #3
 800258a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800258c:	230c      	movs	r3, #12
 800258e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002594:	4619      	mov	r1, r3
 8002596:	4805      	ldr	r0, [pc, #20]	@ (80025ac <MX_GPIO_Init+0x358>)
 8002598:	f001 f808 	bl	80035ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800259c:	bf00      	nop
 800259e:	3738      	adds	r7, #56	@ 0x38
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40021800 	.word	0x40021800
 80025ac:	40020400 	.word	0x40020400

080025b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80025b4:	b672      	cpsid	i
}
 80025b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025b8:	bf00      	nop
 80025ba:	e7fd      	b.n	80025b8 <Error_Handler+0x8>

080025bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <HAL_MspInit+0x4c>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002608 <HAL_MspInit+0x4c>)
 80025cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002608 <HAL_MspInit+0x4c>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025da:	607b      	str	r3, [r7, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <HAL_MspInit+0x4c>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	4a08      	ldr	r2, [pc, #32]	@ (8002608 <HAL_MspInit+0x4c>)
 80025e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ee:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <HAL_MspInit+0x4c>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025fa:	2007      	movs	r0, #7
 80025fc:	f000 ff86 	bl	800350c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40023800 	.word	0x40023800

0800260c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	@ 0x28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a29      	ldr	r2, [pc, #164]	@ (80026d0 <HAL_I2C_MspInit+0xc4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d14b      	bne.n	80026c6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	4b28      	ldr	r3, [pc, #160]	@ (80026d4 <HAL_I2C_MspInit+0xc8>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002636:	4a27      	ldr	r2, [pc, #156]	@ (80026d4 <HAL_I2C_MspInit+0xc8>)
 8002638:	f043 0304 	orr.w	r3, r3, #4
 800263c:	6313      	str	r3, [r2, #48]	@ 0x30
 800263e:	4b25      	ldr	r3, [pc, #148]	@ (80026d4 <HAL_I2C_MspInit+0xc8>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	4b21      	ldr	r3, [pc, #132]	@ (80026d4 <HAL_I2C_MspInit+0xc8>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	4a20      	ldr	r2, [pc, #128]	@ (80026d4 <HAL_I2C_MspInit+0xc8>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6313      	str	r3, [r2, #48]	@ 0x30
 800265a:	4b1e      	ldr	r3, [pc, #120]	@ (80026d4 <HAL_I2C_MspInit+0xc8>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002666:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800266a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800266c:	2312      	movs	r3, #18
 800266e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002674:	2300      	movs	r3, #0
 8002676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002678:	2304      	movs	r3, #4
 800267a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	4619      	mov	r1, r3
 8002682:	4815      	ldr	r0, [pc, #84]	@ (80026d8 <HAL_I2C_MspInit+0xcc>)
 8002684:	f000 ff92 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002688:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800268c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800268e:	2312      	movs	r3, #18
 8002690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	2300      	movs	r3, #0
 8002698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800269a:	2304      	movs	r3, #4
 800269c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800269e:	f107 0314 	add.w	r3, r7, #20
 80026a2:	4619      	mov	r1, r3
 80026a4:	480d      	ldr	r0, [pc, #52]	@ (80026dc <HAL_I2C_MspInit+0xd0>)
 80026a6:	f000 ff81 	bl	80035ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	4b09      	ldr	r3, [pc, #36]	@ (80026d4 <HAL_I2C_MspInit+0xc8>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	4a08      	ldr	r2, [pc, #32]	@ (80026d4 <HAL_I2C_MspInit+0xc8>)
 80026b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ba:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <HAL_I2C_MspInit+0xc8>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80026c6:	bf00      	nop
 80026c8:	3728      	adds	r7, #40	@ 0x28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40005c00 	.word	0x40005c00
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40020800 	.word	0x40020800
 80026dc:	40020000 	.word	0x40020000

080026e0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b09a      	sub	sp, #104	@ 0x68
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026fc:	2230      	movs	r2, #48	@ 0x30
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f004 f991 	bl	8006a28 <memset>
  if(hltdc->Instance==LTDC)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a81      	ldr	r2, [pc, #516]	@ (8002910 <HAL_LTDC_MspInit+0x230>)
 800270c:	4293      	cmp	r3, r2
 800270e:	f040 80fb 	bne.w	8002908 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002712:	2308      	movs	r3, #8
 8002714:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8002716:	23c8      	movs	r3, #200	@ 0xc8
 8002718:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800271a:	2302      	movs	r3, #2
 800271c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 800271e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002722:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002728:	4618      	mov	r0, r3
 800272a:	f003 f9db 	bl	8005ae4 <HAL_RCCEx_PeriphCLKConfig>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002734:	f7ff ff3c 	bl	80025b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002738:	2300      	movs	r3, #0
 800273a:	623b      	str	r3, [r7, #32]
 800273c:	4b75      	ldr	r3, [pc, #468]	@ (8002914 <HAL_LTDC_MspInit+0x234>)
 800273e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002740:	4a74      	ldr	r2, [pc, #464]	@ (8002914 <HAL_LTDC_MspInit+0x234>)
 8002742:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002746:	6453      	str	r3, [r2, #68]	@ 0x44
 8002748:	4b72      	ldr	r3, [pc, #456]	@ (8002914 <HAL_LTDC_MspInit+0x234>)
 800274a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002750:	623b      	str	r3, [r7, #32]
 8002752:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002754:	2300      	movs	r3, #0
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	4b6e      	ldr	r3, [pc, #440]	@ (8002914 <HAL_LTDC_MspInit+0x234>)
 800275a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275c:	4a6d      	ldr	r2, [pc, #436]	@ (8002914 <HAL_LTDC_MspInit+0x234>)
 800275e:	f043 0320 	orr.w	r3, r3, #32
 8002762:	6313      	str	r3, [r2, #48]	@ 0x30
 8002764:	4b6b      	ldr	r3, [pc, #428]	@ (8002914 <HAL_LTDC_MspInit+0x234>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002770:	2300      	movs	r3, #0
 8002772:	61bb      	str	r3, [r7, #24]
 8002774:	4b67      	ldr	r3, [pc, #412]	@ (8002914 <HAL_LTDC_MspInit+0x234>)
 8002776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002778:	4a66      	ldr	r2, [pc, #408]	@ (8002914 <HAL_LTDC_MspInit+0x234>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002780:	4b64      	ldr	r3, [pc, #400]	@ (8002914 <HAL_LTDC_MspInit+0x234>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	61bb      	str	r3, [r7, #24]
 800278a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	4b60      	ldr	r3, [pc, #384]	@ (8002914 <HAL_LTDC_MspInit+0x234>)
 8002792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002794:	4a5f      	ldr	r2, [pc, #380]	@ (8002914 <HAL_LTDC_MspInit+0x234>)
 8002796:	f043 0302 	orr.w	r3, r3, #2
 800279a:	6313      	str	r3, [r2, #48]	@ 0x30
 800279c:	4b5d      	ldr	r3, [pc, #372]	@ (8002914 <HAL_LTDC_MspInit+0x234>)
 800279e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027a8:	2300      	movs	r3, #0
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	4b59      	ldr	r3, [pc, #356]	@ (8002914 <HAL_LTDC_MspInit+0x234>)
 80027ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b0:	4a58      	ldr	r2, [pc, #352]	@ (8002914 <HAL_LTDC_MspInit+0x234>)
 80027b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b8:	4b56      	ldr	r3, [pc, #344]	@ (8002914 <HAL_LTDC_MspInit+0x234>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	4b52      	ldr	r3, [pc, #328]	@ (8002914 <HAL_LTDC_MspInit+0x234>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027cc:	4a51      	ldr	r2, [pc, #324]	@ (8002914 <HAL_LTDC_MspInit+0x234>)
 80027ce:	f043 0304 	orr.w	r3, r3, #4
 80027d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002914 <HAL_LTDC_MspInit+0x234>)
 80027d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027e0:	2300      	movs	r3, #0
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002914 <HAL_LTDC_MspInit+0x234>)
 80027e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002914 <HAL_LTDC_MspInit+0x234>)
 80027ea:	f043 0308 	orr.w	r3, r3, #8
 80027ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f0:	4b48      	ldr	r3, [pc, #288]	@ (8002914 <HAL_LTDC_MspInit+0x234>)
 80027f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80027fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002800:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002802:	2302      	movs	r3, #2
 8002804:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280a:	2300      	movs	r3, #0
 800280c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800280e:	230e      	movs	r3, #14
 8002810:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002812:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002816:	4619      	mov	r1, r3
 8002818:	483f      	ldr	r0, [pc, #252]	@ (8002918 <HAL_LTDC_MspInit+0x238>)
 800281a:	f000 fec7 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800281e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002822:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	2300      	movs	r3, #0
 800282e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002830:	230e      	movs	r3, #14
 8002832:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002834:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002838:	4619      	mov	r1, r3
 800283a:	4838      	ldr	r0, [pc, #224]	@ (800291c <HAL_LTDC_MspInit+0x23c>)
 800283c:	f000 feb6 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002840:	2303      	movs	r3, #3
 8002842:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002844:	2302      	movs	r3, #2
 8002846:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284c:	2300      	movs	r3, #0
 800284e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002850:	2309      	movs	r3, #9
 8002852:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002854:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002858:	4619      	mov	r1, r3
 800285a:	4831      	ldr	r0, [pc, #196]	@ (8002920 <HAL_LTDC_MspInit+0x240>)
 800285c:	f000 fea6 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002860:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002864:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002866:	2302      	movs	r3, #2
 8002868:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286e:	2300      	movs	r3, #0
 8002870:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002872:	230e      	movs	r3, #14
 8002874:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002876:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800287a:	4619      	mov	r1, r3
 800287c:	4828      	ldr	r0, [pc, #160]	@ (8002920 <HAL_LTDC_MspInit+0x240>)
 800287e:	f000 fe95 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002882:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002886:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002894:	230e      	movs	r3, #14
 8002896:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002898:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800289c:	4619      	mov	r1, r3
 800289e:	4821      	ldr	r0, [pc, #132]	@ (8002924 <HAL_LTDC_MspInit+0x244>)
 80028a0:	f000 fe84 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80028a4:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80028a8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028aa:	2302      	movs	r3, #2
 80028ac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b2:	2300      	movs	r3, #0
 80028b4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028b6:	230e      	movs	r3, #14
 80028b8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028be:	4619      	mov	r1, r3
 80028c0:	4819      	ldr	r0, [pc, #100]	@ (8002928 <HAL_LTDC_MspInit+0x248>)
 80028c2:	f000 fe73 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80028c6:	2348      	movs	r3, #72	@ 0x48
 80028c8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d2:	2300      	movs	r3, #0
 80028d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028d6:	230e      	movs	r3, #14
 80028d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028de:	4619      	mov	r1, r3
 80028e0:	4812      	ldr	r0, [pc, #72]	@ (800292c <HAL_LTDC_MspInit+0x24c>)
 80028e2:	f000 fe63 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80028e6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80028ea:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ec:	2302      	movs	r3, #2
 80028ee:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f4:	2300      	movs	r3, #0
 80028f6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80028f8:	2309      	movs	r3, #9
 80028fa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002900:	4619      	mov	r1, r3
 8002902:	4808      	ldr	r0, [pc, #32]	@ (8002924 <HAL_LTDC_MspInit+0x244>)
 8002904:	f000 fe52 	bl	80035ac <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002908:	bf00      	nop
 800290a:	3768      	adds	r7, #104	@ 0x68
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40016800 	.word	0x40016800
 8002914:	40023800 	.word	0x40023800
 8002918:	40021400 	.word	0x40021400
 800291c:	40020000 	.word	0x40020000
 8002920:	40020400 	.word	0x40020400
 8002924:	40021800 	.word	0x40021800
 8002928:	40020800 	.word	0x40020800
 800292c:	40020c00 	.word	0x40020c00

08002930 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0b      	ldr	r2, [pc, #44]	@ (800296c <HAL_RNG_MspInit+0x3c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d10d      	bne.n	800295e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <HAL_RNG_MspInit+0x40>)
 8002948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800294a:	4a09      	ldr	r2, [pc, #36]	@ (8002970 <HAL_RNG_MspInit+0x40>)
 800294c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002950:	6353      	str	r3, [r2, #52]	@ 0x34
 8002952:	4b07      	ldr	r3, [pc, #28]	@ (8002970 <HAL_RNG_MspInit+0x40>)
 8002954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	50060800 	.word	0x50060800
 8002970:	40023800 	.word	0x40023800

08002974 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	@ 0x28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a19      	ldr	r2, [pc, #100]	@ (80029f8 <HAL_SPI_MspInit+0x84>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d12c      	bne.n	80029f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	4b18      	ldr	r3, [pc, #96]	@ (80029fc <HAL_SPI_MspInit+0x88>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	4a17      	ldr	r2, [pc, #92]	@ (80029fc <HAL_SPI_MspInit+0x88>)
 80029a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029a6:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <HAL_SPI_MspInit+0x88>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <HAL_SPI_MspInit+0x88>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	4a10      	ldr	r2, [pc, #64]	@ (80029fc <HAL_SPI_MspInit+0x88>)
 80029bc:	f043 0320 	orr.w	r3, r3, #32
 80029c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c2:	4b0e      	ldr	r3, [pc, #56]	@ (80029fc <HAL_SPI_MspInit+0x88>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80029ce:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80029d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d4:	2302      	movs	r3, #2
 80029d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029dc:	2300      	movs	r3, #0
 80029de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80029e0:	2305      	movs	r3, #5
 80029e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	4619      	mov	r1, r3
 80029ea:	4805      	ldr	r0, [pc, #20]	@ (8002a00 <HAL_SPI_MspInit+0x8c>)
 80029ec:	f000 fdde 	bl	80035ac <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80029f0:	bf00      	nop
 80029f2:	3728      	adds	r7, #40	@ 0x28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40015000 	.word	0x40015000
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40021400 	.word	0x40021400

08002a04 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a08      	ldr	r2, [pc, #32]	@ (8002a34 <HAL_SPI_MspDeInit+0x30>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d10a      	bne.n	8002a2c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002a16:	4b08      	ldr	r3, [pc, #32]	@ (8002a38 <HAL_SPI_MspDeInit+0x34>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1a:	4a07      	ldr	r2, [pc, #28]	@ (8002a38 <HAL_SPI_MspDeInit+0x34>)
 8002a1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002a20:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002a22:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002a26:	4805      	ldr	r0, [pc, #20]	@ (8002a3c <HAL_SPI_MspDeInit+0x38>)
 8002a28:	f000 ff6c 	bl	8003904 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40015000 	.word	0x40015000
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40021400 	.word	0x40021400

08002a40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a50:	d10d      	bne.n	8002a6e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <HAL_TIM_Base_MspInit+0x3c>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	4a08      	ldr	r2, [pc, #32]	@ (8002a7c <HAL_TIM_Base_MspInit+0x3c>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a62:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <HAL_TIM_Base_MspInit+0x3c>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002a6e:	bf00      	nop
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800

08002a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a84:	bf00      	nop
 8002a86:	e7fd      	b.n	8002a84 <NMI_Handler+0x4>

08002a88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a8c:	bf00      	nop
 8002a8e:	e7fd      	b.n	8002a8c <HardFault_Handler+0x4>

08002a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a94:	bf00      	nop
 8002a96:	e7fd      	b.n	8002a94 <MemManage_Handler+0x4>

08002a98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a9c:	bf00      	nop
 8002a9e:	e7fd      	b.n	8002a9c <BusFault_Handler+0x4>

08002aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aa4:	bf00      	nop
 8002aa6:	e7fd      	b.n	8002aa4 <UsageFault_Handler+0x4>

08002aa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ad6:	f000 fbe1 	bl	800329c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}

08002ade <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002ae4:	f000 f9ce 	bl	8002e84 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002ae8:	f000 f98e 	bl	8002e08 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002aec:	2202      	movs	r2, #2
 8002aee:	2103      	movs	r1, #3
 8002af0:	2082      	movs	r0, #130	@ 0x82
 8002af2:	f000 fa1b 	bl	8002f2c <I2C3_Write>
    HAL_Delay(5);
 8002af6:	2005      	movs	r0, #5
 8002af8:	f000 fbf0 	bl	80032dc <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002afc:	2200      	movs	r2, #0
 8002afe:	2103      	movs	r1, #3
 8002b00:	2082      	movs	r0, #130	@ 0x82
 8002b02:	f000 fa13 	bl	8002f2c <I2C3_Write>
    HAL_Delay(2);
 8002b06:	2002      	movs	r0, #2
 8002b08:	f000 fbe8 	bl	80032dc <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002b0c:	1cba      	adds	r2, r7, #2
 8002b0e:	2302      	movs	r3, #2
 8002b10:	2100      	movs	r1, #0
 8002b12:	2082      	movs	r0, #130	@ 0x82
 8002b14:	f000 fa5a 	bl	8002fcc <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002b18:	887b      	ldrh	r3, [r7, #2]
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002b1e:	887b      	ldrh	r3, [r7, #2]
 8002b20:	0a1b      	lsrs	r3, r3, #8
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	f640 0211 	movw	r2, #2065	@ 0x811
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d001      	beq.n	8002b38 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e075      	b.n	8002c24 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002b38:	2202      	movs	r2, #2
 8002b3a:	2103      	movs	r1, #3
 8002b3c:	2082      	movs	r0, #130	@ 0x82
 8002b3e:	f000 f9f5 	bl	8002f2c <I2C3_Write>
    HAL_Delay(5);
 8002b42:	2005      	movs	r0, #5
 8002b44:	f000 fbca 	bl	80032dc <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2103      	movs	r1, #3
 8002b4c:	2082      	movs	r0, #130	@ 0x82
 8002b4e:	f000 f9ed 	bl	8002f2c <I2C3_Write>
    HAL_Delay(2);
 8002b52:	2002      	movs	r0, #2
 8002b54:	f000 fbc2 	bl	80032dc <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002b58:	2004      	movs	r0, #4
 8002b5a:	f000 f867 	bl	8002c2c <STMPE811_Read>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002b62:	797b      	ldrb	r3, [r7, #5]
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002b6a:	797b      	ldrb	r3, [r7, #5]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	2104      	movs	r1, #4
 8002b70:	2082      	movs	r0, #130	@ 0x82
 8002b72:	f000 f9db 	bl	8002f2c <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002b76:	2004      	movs	r0, #4
 8002b78:	f000 f858 	bl	8002c2c <STMPE811_Read>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002b80:	797b      	ldrb	r3, [r7, #5]
 8002b82:	f023 0302 	bic.w	r3, r3, #2
 8002b86:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002b88:	797b      	ldrb	r3, [r7, #5]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2104      	movs	r1, #4
 8002b8e:	2082      	movs	r0, #130	@ 0x82
 8002b90:	f000 f9cc 	bl	8002f2c <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002b94:	2249      	movs	r2, #73	@ 0x49
 8002b96:	2120      	movs	r1, #32
 8002b98:	2082      	movs	r0, #130	@ 0x82
 8002b9a:	f000 f9c7 	bl	8002f2c <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002b9e:	2002      	movs	r0, #2
 8002ba0:	f000 fb9c 	bl	80032dc <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	2121      	movs	r1, #33	@ 0x21
 8002ba8:	2082      	movs	r0, #130	@ 0x82
 8002baa:	f000 f9bf 	bl	8002f2c <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002bae:	2017      	movs	r0, #23
 8002bb0:	f000 f83c 	bl	8002c2c <STMPE811_Read>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002bb8:	797b      	ldrb	r3, [r7, #5]
 8002bba:	f043 031e 	orr.w	r3, r3, #30
 8002bbe:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002bc0:	797b      	ldrb	r3, [r7, #5]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2117      	movs	r1, #23
 8002bc6:	2082      	movs	r0, #130	@ 0x82
 8002bc8:	f000 f9b0 	bl	8002f2c <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002bcc:	229a      	movs	r2, #154	@ 0x9a
 8002bce:	2141      	movs	r1, #65	@ 0x41
 8002bd0:	2082      	movs	r0, #130	@ 0x82
 8002bd2:	f000 f9ab 	bl	8002f2c <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	214a      	movs	r1, #74	@ 0x4a
 8002bda:	2082      	movs	r0, #130	@ 0x82
 8002bdc:	f000 f9a6 	bl	8002f2c <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002be0:	2201      	movs	r2, #1
 8002be2:	214b      	movs	r1, #75	@ 0x4b
 8002be4:	2082      	movs	r0, #130	@ 0x82
 8002be6:	f000 f9a1 	bl	8002f2c <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002bea:	2200      	movs	r2, #0
 8002bec:	214b      	movs	r1, #75	@ 0x4b
 8002bee:	2082      	movs	r0, #130	@ 0x82
 8002bf0:	f000 f99c 	bl	8002f2c <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	2156      	movs	r1, #86	@ 0x56
 8002bf8:	2082      	movs	r0, #130	@ 0x82
 8002bfa:	f000 f997 	bl	8002f2c <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002bfe:	2201      	movs	r2, #1
 8002c00:	2158      	movs	r1, #88	@ 0x58
 8002c02:	2082      	movs	r0, #130	@ 0x82
 8002c04:	f000 f992 	bl	8002f2c <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002c08:	2203      	movs	r2, #3
 8002c0a:	2140      	movs	r1, #64	@ 0x40
 8002c0c:	2082      	movs	r0, #130	@ 0x82
 8002c0e:	f000 f98d 	bl	8002f2c <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002c12:	22ff      	movs	r2, #255	@ 0xff
 8002c14:	210b      	movs	r1, #11
 8002c16:	2082      	movs	r0, #130	@ 0x82
 8002c18:	f000 f988 	bl	8002f2c <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002c1c:	20c8      	movs	r0, #200	@ 0xc8
 8002c1e:	f000 fb5d 	bl	80032dc <HAL_Delay>

    return STMPE811_State_Ok;
 8002c22:	2302      	movs	r3, #2

}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002c36:	f107 020f 	add.w	r2, r7, #15
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	2082      	movs	r0, #130	@ 0x82
 8002c40:	f000 f99e 	bl	8002f80 <I2C3_Read>

    return readData;
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	791a      	ldrb	r2, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002c5e:	2040      	movs	r0, #64	@ 0x40
 8002c60:	f7ff ffe4 	bl	8002c2c <STMPE811_Read>
 8002c64:	4603      	mov	r3, r0
 8002c66:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	db0e      	blt.n	8002c8e <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002c76:	2201      	movs	r2, #1
 8002c78:	214b      	movs	r1, #75	@ 0x4b
 8002c7a:	2082      	movs	r0, #130	@ 0x82
 8002c7c:	f000 f956 	bl	8002f2c <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002c80:	2200      	movs	r2, #0
 8002c82:	214b      	movs	r1, #75	@ 0x4b
 8002c84:	2082      	movs	r0, #130	@ 0x82
 8002c86:	f000 f951 	bl	8002f2c <I2C3_Write>

        return STMPE811_State_Released;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e0a7      	b.n	8002dde <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	799b      	ldrb	r3, [r3, #6]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d117      	bne.n	8002cc6 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f9b8 	bl	8003010 <TM_STMPE811_ReadX>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	885b      	ldrh	r3, [r3, #2]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fa0b 	bl	80030cc <TM_STMPE811_ReadY>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	805a      	strh	r2, [r3, #2]
 8002cc4:	e048      	b.n	8002d58 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	799b      	ldrb	r3, [r3, #6]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d112      	bne.n	8002cf4 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 f99c 	bl	8003010 <TM_STMPE811_ReadX>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	461a      	mov	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	885b      	ldrh	r3, [r3, #2]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 f9f1 	bl	80030cc <TM_STMPE811_ReadY>
 8002cea:	4603      	mov	r3, r0
 8002cec:	461a      	mov	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	805a      	strh	r2, [r3, #2]
 8002cf2:	e031      	b.n	8002d58 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	799b      	ldrb	r3, [r3, #6]
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d115      	bne.n	8002d28 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	885b      	ldrh	r3, [r3, #2]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 f985 	bl	8003010 <TM_STMPE811_ReadX>
 8002d06:	4603      	mov	r3, r0
 8002d08:	461a      	mov	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 f9da 	bl	80030cc <TM_STMPE811_ReadY>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002d1e:	3301      	adds	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	801a      	strh	r2, [r3, #0]
 8002d26:	e017      	b.n	8002d58 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	799b      	ldrb	r3, [r3, #6]
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d113      	bne.n	8002d58 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 f96b 	bl	8003010 <TM_STMPE811_ReadX>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f9be 	bl	80030cc <TM_STMPE811_ReadY>
 8002d50:	4603      	mov	r3, r0
 8002d52:	461a      	mov	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002d58:	2201      	movs	r2, #1
 8002d5a:	214b      	movs	r1, #75	@ 0x4b
 8002d5c:	2082      	movs	r0, #130	@ 0x82
 8002d5e:	f000 f8e5 	bl	8002f2c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002d62:	2200      	movs	r2, #0
 8002d64:	214b      	movs	r1, #75	@ 0x4b
 8002d66:	2082      	movs	r0, #130	@ 0x82
 8002d68:	f000 f8e0 	bl	8002f2c <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	799b      	ldrb	r3, [r3, #6]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <STMPE811_ReadTouch+0x12e>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	799b      	ldrb	r3, [r3, #6]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d115      	bne.n	8002da8 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d027      	beq.n	8002dd4 <STMPE811_ReadTouch+0x186>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	2bee      	cmp	r3, #238	@ 0xee
 8002d8a:	d823      	bhi.n	8002dd4 <STMPE811_ReadTouch+0x186>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	885b      	ldrh	r3, [r3, #2]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01f      	beq.n	8002dd4 <STMPE811_ReadTouch+0x186>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	885b      	ldrh	r3, [r3, #2]
 8002d98:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002d9c:	d81a      	bhi.n	8002dd4 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e01a      	b.n	8002dde <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d012      	beq.n	8002dd6 <STMPE811_ReadTouch+0x188>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002db8:	d80d      	bhi.n	8002dd6 <STMPE811_ReadTouch+0x188>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	885b      	ldrh	r3, [r3, #2]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <STMPE811_ReadTouch+0x188>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	885b      	ldrh	r3, [r3, #2]
 8002dc6:	2bee      	cmp	r3, #238	@ 0xee
 8002dc8:	d805      	bhi.n	8002dd6 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e004      	b.n	8002dde <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002dd4:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002ddc:	2301      	movs	r3, #1
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002dec:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002df4:	bf00      	nop
 8002df6:	e7fd      	b.n	8002df4 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20025c04 	.word	0x20025c04

08002e08 <I2C3_Init>:

static void I2C3_Init()
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	603b      	str	r3, [r7, #0]
 8002e12:	4b18      	ldr	r3, [pc, #96]	@ (8002e74 <I2C3_Init+0x6c>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	4a17      	ldr	r2, [pc, #92]	@ (8002e74 <I2C3_Init+0x6c>)
 8002e18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e1e:	4b15      	ldr	r3, [pc, #84]	@ (8002e74 <I2C3_Init+0x6c>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002e2a:	4b13      	ldr	r3, [pc, #76]	@ (8002e78 <I2C3_Init+0x70>)
 8002e2c:	4a13      	ldr	r2, [pc, #76]	@ (8002e7c <I2C3_Init+0x74>)
 8002e2e:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002e30:	4b11      	ldr	r3, [pc, #68]	@ (8002e78 <I2C3_Init+0x70>)
 8002e32:	4a13      	ldr	r2, [pc, #76]	@ (8002e80 <I2C3_Init+0x78>)
 8002e34:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e36:	4b10      	ldr	r3, [pc, #64]	@ (8002e78 <I2C3_Init+0x70>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e78 <I2C3_Init+0x70>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e42:	4b0d      	ldr	r3, [pc, #52]	@ (8002e78 <I2C3_Init+0x70>)
 8002e44:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e48:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e78 <I2C3_Init+0x70>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e50:	4b09      	ldr	r3, [pc, #36]	@ (8002e78 <I2C3_Init+0x70>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002e56:	4808      	ldr	r0, [pc, #32]	@ (8002e78 <I2C3_Init+0x70>)
 8002e58:	f000 fe7a 	bl	8003b50 <HAL_I2C_Init>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002e66:	bf00      	nop
 8002e68:	e7fd      	b.n	8002e66 <I2C3_Init+0x5e>
    }
    return;
 8002e6a:	bf00      	nop
}
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800
 8002e78:	20025bb0 	.word	0x20025bb0
 8002e7c:	40005c00 	.word	0x40005c00
 8002e80:	000186a0 	.word	0x000186a0

08002e84 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8a:	f107 030c 	add.w	r3, r7, #12
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	605a      	str	r2, [r3, #4]
 8002e94:	609a      	str	r2, [r3, #8]
 8002e96:	60da      	str	r2, [r3, #12]
 8002e98:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	4b20      	ldr	r3, [pc, #128]	@ (8002f20 <I2C3_MspInit+0x9c>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea2:	4a1f      	ldr	r2, [pc, #124]	@ (8002f20 <I2C3_MspInit+0x9c>)
 8002ea4:	f043 0304 	orr.w	r3, r3, #4
 8002ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8002f20 <I2C3_MspInit+0x9c>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	607b      	str	r3, [r7, #4]
 8002eba:	4b19      	ldr	r3, [pc, #100]	@ (8002f20 <I2C3_MspInit+0x9c>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebe:	4a18      	ldr	r2, [pc, #96]	@ (8002f20 <I2C3_MspInit+0x9c>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ec6:	4b16      	ldr	r3, [pc, #88]	@ (8002f20 <I2C3_MspInit+0x9c>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002ed2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ed6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ed8:	2312      	movs	r3, #18
 8002eda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ee4:	2304      	movs	r3, #4
 8002ee6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002ee8:	f107 030c 	add.w	r3, r7, #12
 8002eec:	4619      	mov	r1, r3
 8002eee:	480d      	ldr	r0, [pc, #52]	@ (8002f24 <I2C3_MspInit+0xa0>)
 8002ef0:	f000 fb5c 	bl	80035ac <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002ef4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ef8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002efa:	2312      	movs	r3, #18
 8002efc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f06:	2304      	movs	r3, #4
 8002f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002f0a:	f107 030c 	add.w	r3, r7, #12
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4805      	ldr	r0, [pc, #20]	@ (8002f28 <I2C3_MspInit+0xa4>)
 8002f12:	f000 fb4b 	bl	80035ac <HAL_GPIO_Init>
    
}
 8002f16:	bf00      	nop
 8002f18:	3720      	adds	r7, #32
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40020800 	.word	0x40020800
 8002f28:	40020000 	.word	0x40020000

08002f2c <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af04      	add	r7, sp, #16
 8002f32:	4603      	mov	r3, r0
 8002f34:	80fb      	strh	r3, [r7, #6]
 8002f36:	460b      	mov	r3, r1
 8002f38:	717b      	strb	r3, [r7, #5]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002f3e:	793b      	ldrb	r3, [r7, #4]
 8002f40:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002f42:	797b      	ldrb	r3, [r7, #5]
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	88f9      	ldrh	r1, [r7, #6]
 8002f48:	4b0a      	ldr	r3, [pc, #40]	@ (8002f74 <I2C3_Write+0x48>)
 8002f4a:	9302      	str	r3, [sp, #8]
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	9301      	str	r3, [sp, #4]
 8002f50:	f107 030f 	add.w	r3, r7, #15
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	2301      	movs	r3, #1
 8002f58:	4807      	ldr	r0, [pc, #28]	@ (8002f78 <I2C3_Write+0x4c>)
 8002f5a:	f000 ff3d 	bl	8003dd8 <HAL_I2C_Mem_Write>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	461a      	mov	r2, r3
 8002f62:	4b06      	ldr	r3, [pc, #24]	@ (8002f7c <I2C3_Write+0x50>)
 8002f64:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002f66:	f7ff ff3f 	bl	8002de8 <verifyHAL_I2C_IS_OKAY>
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	0003d090 	.word	0x0003d090
 8002f78:	20025bb0 	.word	0x20025bb0
 8002f7c:	20025c04 	.word	0x20025c04

08002f80 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af04      	add	r7, sp, #16
 8002f86:	4603      	mov	r3, r0
 8002f88:	603a      	str	r2, [r7, #0]
 8002f8a:	71fb      	strb	r3, [r7, #7]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	b299      	uxth	r1, r3
 8002f94:	79bb      	ldrb	r3, [r7, #6]
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	4b09      	ldr	r3, [pc, #36]	@ (8002fc0 <I2C3_Read+0x40>)
 8002f9a:	9302      	str	r3, [sp, #8]
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	9301      	str	r3, [sp, #4]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	4807      	ldr	r0, [pc, #28]	@ (8002fc4 <I2C3_Read+0x44>)
 8002fa8:	f001 f810 	bl	8003fcc <HAL_I2C_Mem_Read>
 8002fac:	4603      	mov	r3, r0
 8002fae:	461a      	mov	r2, r3
 8002fb0:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <I2C3_Read+0x48>)
 8002fb2:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002fb4:	f7ff ff18 	bl	8002de8 <verifyHAL_I2C_IS_OKAY>
}
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	0003d090 	.word	0x0003d090
 8002fc4:	20025bb0 	.word	0x20025bb0
 8002fc8:	20025c04 	.word	0x20025c04

08002fcc <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af04      	add	r7, sp, #16
 8002fd2:	603a      	str	r2, [r7, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	71bb      	strb	r3, [r7, #6]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	b299      	uxth	r1, r3
 8002fe6:	79bb      	ldrb	r3, [r7, #6]
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	4b07      	ldr	r3, [pc, #28]	@ (8003008 <I2C3_MulitByteRead+0x3c>)
 8002fec:	9302      	str	r3, [sp, #8]
 8002fee:	88bb      	ldrh	r3, [r7, #4]
 8002ff0:	9301      	str	r3, [sp, #4]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	4804      	ldr	r0, [pc, #16]	@ (800300c <I2C3_MulitByteRead+0x40>)
 8002ffa:	f000 ffe7 	bl	8003fcc <HAL_I2C_Mem_Read>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	0003d090 	.word	0x0003d090
 800300c:	20025bb0 	.word	0x20025bb0

08003010 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800301a:	204d      	movs	r0, #77	@ 0x4d
 800301c:	f7ff fe06 	bl	8002c2c <STMPE811_Read>
 8003020:	4603      	mov	r3, r0
 8003022:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8003024:	204e      	movs	r0, #78	@ 0x4e
 8003026:	f7ff fe01 	bl	8002c2c <STMPE811_Read>
 800302a:	4603      	mov	r3, r0
 800302c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800302e:	7a7b      	ldrb	r3, [r7, #9]
 8003030:	021b      	lsls	r3, r3, #8
 8003032:	b21a      	sxth	r2, r3
 8003034:	7a3b      	ldrb	r3, [r7, #8]
 8003036:	b21b      	sxth	r3, r3
 8003038:	4313      	orrs	r3, r2
 800303a:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 800303c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003040:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003044:	4293      	cmp	r3, r2
 8003046:	dc06      	bgt.n	8003056 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8003048:	89fb      	ldrh	r3, [r7, #14]
 800304a:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800304e:	330c      	adds	r3, #12
 8003050:	b29b      	uxth	r3, r3
 8003052:	81fb      	strh	r3, [r7, #14]
 8003054:	e005      	b.n	8003062 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8003056:	89fb      	ldrh	r3, [r7, #14]
 8003058:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800305c:	3308      	adds	r3, #8
 800305e:	b29b      	uxth	r3, r3
 8003060:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8003062:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003066:	4a18      	ldr	r2, [pc, #96]	@ (80030c8 <TM_STMPE811_ReadX+0xb8>)
 8003068:	fb82 1203 	smull	r1, r2, r2, r3
 800306c:	441a      	add	r2, r3
 800306e:	10d2      	asrs	r2, r2, #3
 8003070:	17db      	asrs	r3, r3, #31
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8003076:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800307a:	2bef      	cmp	r3, #239	@ 0xef
 800307c:	dd02      	ble.n	8003084 <TM_STMPE811_ReadX+0x74>
        val = 239;
 800307e:	23ef      	movs	r3, #239	@ 0xef
 8003080:	81fb      	strh	r3, [r7, #14]
 8003082:	e005      	b.n	8003090 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8003084:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003088:	2b00      	cmp	r3, #0
 800308a:	da01      	bge.n	8003090 <TM_STMPE811_ReadX+0x80>
        val = 0;
 800308c:	2300      	movs	r3, #0
 800308e:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8003090:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	429a      	cmp	r2, r3
 8003098:	dd05      	ble.n	80030a6 <TM_STMPE811_ReadX+0x96>
 800309a:	89fa      	ldrh	r2, [r7, #14]
 800309c:	88fb      	ldrh	r3, [r7, #6]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	b21b      	sxth	r3, r3
 80030a4:	e004      	b.n	80030b0 <TM_STMPE811_ReadX+0xa0>
 80030a6:	89fb      	ldrh	r3, [r7, #14]
 80030a8:	88fa      	ldrh	r2, [r7, #6]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	b21b      	sxth	r3, r3
 80030b0:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80030b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	dd01      	ble.n	80030be <TM_STMPE811_ReadX+0xae>
        return val;
 80030ba:	89fb      	ldrh	r3, [r7, #14]
 80030bc:	e000      	b.n	80030c0 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 80030be:	88fb      	ldrh	r3, [r7, #6]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	88888889 	.word	0x88888889

080030cc <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80030d6:	204f      	movs	r0, #79	@ 0x4f
 80030d8:	f7ff fda8 	bl	8002c2c <STMPE811_Read>
 80030dc:	4603      	mov	r3, r0
 80030de:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80030e0:	2050      	movs	r0, #80	@ 0x50
 80030e2:	f7ff fda3 	bl	8002c2c <STMPE811_Read>
 80030e6:	4603      	mov	r3, r0
 80030e8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80030ea:	7a7b      	ldrb	r3, [r7, #9]
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	b21a      	sxth	r2, r3
 80030f0:	7a3b      	ldrb	r3, [r7, #8]
 80030f2:	b21b      	sxth	r3, r3
 80030f4:	4313      	orrs	r3, r2
 80030f6:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80030f8:	89fb      	ldrh	r3, [r7, #14]
 80030fa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80030fe:	b29b      	uxth	r3, r3
 8003100:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003102:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003106:	4a19      	ldr	r2, [pc, #100]	@ (800316c <TM_STMPE811_ReadY+0xa0>)
 8003108:	fb82 1203 	smull	r1, r2, r2, r3
 800310c:	1052      	asrs	r2, r2, #1
 800310e:	17db      	asrs	r3, r3, #31
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003114:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003118:	2b00      	cmp	r3, #0
 800311a:	dc02      	bgt.n	8003122 <TM_STMPE811_ReadY+0x56>
        val = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	81fb      	strh	r3, [r7, #14]
 8003120:	e007      	b.n	8003132 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8003122:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003126:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800312a:	db02      	blt.n	8003132 <TM_STMPE811_ReadY+0x66>
        val = 319;
 800312c:	f240 133f 	movw	r3, #319	@ 0x13f
 8003130:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003132:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	429a      	cmp	r2, r3
 800313a:	dd05      	ble.n	8003148 <TM_STMPE811_ReadY+0x7c>
 800313c:	89fa      	ldrh	r2, [r7, #14]
 800313e:	88fb      	ldrh	r3, [r7, #6]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	b29b      	uxth	r3, r3
 8003144:	b21b      	sxth	r3, r3
 8003146:	e004      	b.n	8003152 <TM_STMPE811_ReadY+0x86>
 8003148:	89fb      	ldrh	r3, [r7, #14]
 800314a:	88fa      	ldrh	r2, [r7, #6]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	b29b      	uxth	r3, r3
 8003150:	b21b      	sxth	r3, r3
 8003152:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003154:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003158:	2b04      	cmp	r3, #4
 800315a:	dd01      	ble.n	8003160 <TM_STMPE811_ReadY+0x94>
        return val;
 800315c:	89fb      	ldrh	r3, [r7, #14]
 800315e:	e000      	b.n	8003162 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8003160:	88fb      	ldrh	r3, [r7, #6]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	2e8ba2e9 	.word	0x2e8ba2e9

08003170 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003184:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <SystemInit+0x20>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318a:	4a05      	ldr	r2, [pc, #20]	@ (80031a0 <SystemInit+0x20>)
 800318c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003190:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	e000ed00 	.word	0xe000ed00

080031a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80031a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80031dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031a8:	f7ff ffea 	bl	8003180 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031ac:	480c      	ldr	r0, [pc, #48]	@ (80031e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031ae:	490d      	ldr	r1, [pc, #52]	@ (80031e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031b0:	4a0d      	ldr	r2, [pc, #52]	@ (80031e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b4:	e002      	b.n	80031bc <LoopCopyDataInit>

080031b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ba:	3304      	adds	r3, #4

080031bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031c0:	d3f9      	bcc.n	80031b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031c2:	4a0a      	ldr	r2, [pc, #40]	@ (80031ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031c4:	4c0a      	ldr	r4, [pc, #40]	@ (80031f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031c8:	e001      	b.n	80031ce <LoopFillZerobss>

080031ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031cc:	3204      	adds	r2, #4

080031ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031d0:	d3fb      	bcc.n	80031ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80031d2:	f003 fc31 	bl	8006a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031d6:	f7fe fdec 	bl	8001db2 <main>
  bx  lr    
 80031da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80031dc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80031e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031e4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80031e8:	08007c90 	.word	0x08007c90
  ldr r2, =_sbss
 80031ec:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80031f0:	20025c0c 	.word	0x20025c0c

080031f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031f4:	e7fe      	b.n	80031f4 <ADC_IRQHandler>
	...

080031f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003238 <HAL_Init+0x40>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0d      	ldr	r2, [pc, #52]	@ (8003238 <HAL_Init+0x40>)
 8003202:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003206:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003208:	4b0b      	ldr	r3, [pc, #44]	@ (8003238 <HAL_Init+0x40>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a0a      	ldr	r2, [pc, #40]	@ (8003238 <HAL_Init+0x40>)
 800320e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003212:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003214:	4b08      	ldr	r3, [pc, #32]	@ (8003238 <HAL_Init+0x40>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a07      	ldr	r2, [pc, #28]	@ (8003238 <HAL_Init+0x40>)
 800321a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800321e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003220:	2003      	movs	r0, #3
 8003222:	f000 f973 	bl	800350c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003226:	2000      	movs	r0, #0
 8003228:	f000 f808 	bl	800323c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800322c:	f7ff f9c6 	bl	80025bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40023c00 	.word	0x40023c00

0800323c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003244:	4b12      	ldr	r3, [pc, #72]	@ (8003290 <HAL_InitTick+0x54>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b12      	ldr	r3, [pc, #72]	@ (8003294 <HAL_InitTick+0x58>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	4619      	mov	r1, r3
 800324e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003252:	fbb3 f3f1 	udiv	r3, r3, r1
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f999 	bl	8003592 <HAL_SYSTICK_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e00e      	b.n	8003288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b0f      	cmp	r3, #15
 800326e:	d80a      	bhi.n	8003286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003270:	2200      	movs	r2, #0
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	f04f 30ff 	mov.w	r0, #4294967295
 8003278:	f000 f953 	bl	8003522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800327c:	4a06      	ldr	r2, [pc, #24]	@ (8003298 <HAL_InitTick+0x5c>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	e000      	b.n	8003288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20000010 	.word	0x20000010
 8003294:	20000018 	.word	0x20000018
 8003298:	20000014 	.word	0x20000014

0800329c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032a0:	4b06      	ldr	r3, [pc, #24]	@ (80032bc <HAL_IncTick+0x20>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <HAL_IncTick+0x24>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4413      	add	r3, r2
 80032ac:	4a04      	ldr	r2, [pc, #16]	@ (80032c0 <HAL_IncTick+0x24>)
 80032ae:	6013      	str	r3, [r2, #0]
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	20000018 	.word	0x20000018
 80032c0:	20025c08 	.word	0x20025c08

080032c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return uwTick;
 80032c8:	4b03      	ldr	r3, [pc, #12]	@ (80032d8 <HAL_GetTick+0x14>)
 80032ca:	681b      	ldr	r3, [r3, #0]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20025c08 	.word	0x20025c08

080032dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032e4:	f7ff ffee 	bl	80032c4 <HAL_GetTick>
 80032e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d005      	beq.n	8003302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003320 <HAL_Delay+0x44>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4413      	add	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003302:	bf00      	nop
 8003304:	f7ff ffde 	bl	80032c4 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	429a      	cmp	r2, r3
 8003312:	d8f7      	bhi.n	8003304 <HAL_Delay+0x28>
  {
  }
}
 8003314:	bf00      	nop
 8003316:	bf00      	nop
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000018 	.word	0x20000018

08003324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003334:	4b0c      	ldr	r3, [pc, #48]	@ (8003368 <__NVIC_SetPriorityGrouping+0x44>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003340:	4013      	ands	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800334c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003356:	4a04      	ldr	r2, [pc, #16]	@ (8003368 <__NVIC_SetPriorityGrouping+0x44>)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	60d3      	str	r3, [r2, #12]
}
 800335c:	bf00      	nop
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003370:	4b04      	ldr	r3, [pc, #16]	@ (8003384 <__NVIC_GetPriorityGrouping+0x18>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	f003 0307 	and.w	r3, r3, #7
}
 800337a:	4618      	mov	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	2b00      	cmp	r3, #0
 8003398:	db0b      	blt.n	80033b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	4907      	ldr	r1, [pc, #28]	@ (80033c0 <__NVIC_EnableIRQ+0x38>)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	2001      	movs	r0, #1
 80033aa:	fa00 f202 	lsl.w	r2, r0, r2
 80033ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000e100 	.word	0xe000e100

080033c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	db12      	blt.n	80033fc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	f003 021f 	and.w	r2, r3, #31
 80033dc:	490a      	ldr	r1, [pc, #40]	@ (8003408 <__NVIC_DisableIRQ+0x44>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	2001      	movs	r0, #1
 80033e6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ea:	3320      	adds	r3, #32
 80033ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80033f0:	f3bf 8f4f 	dsb	sy
}
 80033f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80033f6:	f3bf 8f6f 	isb	sy
}
 80033fa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	e000e100 	.word	0xe000e100

0800340c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	6039      	str	r1, [r7, #0]
 8003416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341c:	2b00      	cmp	r3, #0
 800341e:	db0a      	blt.n	8003436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	b2da      	uxtb	r2, r3
 8003424:	490c      	ldr	r1, [pc, #48]	@ (8003458 <__NVIC_SetPriority+0x4c>)
 8003426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342a:	0112      	lsls	r2, r2, #4
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	440b      	add	r3, r1
 8003430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003434:	e00a      	b.n	800344c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	b2da      	uxtb	r2, r3
 800343a:	4908      	ldr	r1, [pc, #32]	@ (800345c <__NVIC_SetPriority+0x50>)
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	3b04      	subs	r3, #4
 8003444:	0112      	lsls	r2, r2, #4
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	440b      	add	r3, r1
 800344a:	761a      	strb	r2, [r3, #24]
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000e100 	.word	0xe000e100
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003460:	b480      	push	{r7}
 8003462:	b089      	sub	sp, #36	@ 0x24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f1c3 0307 	rsb	r3, r3, #7
 800347a:	2b04      	cmp	r3, #4
 800347c:	bf28      	it	cs
 800347e:	2304      	movcs	r3, #4
 8003480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	3304      	adds	r3, #4
 8003486:	2b06      	cmp	r3, #6
 8003488:	d902      	bls.n	8003490 <NVIC_EncodePriority+0x30>
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3b03      	subs	r3, #3
 800348e:	e000      	b.n	8003492 <NVIC_EncodePriority+0x32>
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003494:	f04f 32ff 	mov.w	r2, #4294967295
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43da      	mvns	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	401a      	ands	r2, r3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034a8:	f04f 31ff 	mov.w	r1, #4294967295
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	fa01 f303 	lsl.w	r3, r1, r3
 80034b2:	43d9      	mvns	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b8:	4313      	orrs	r3, r2
         );
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3724      	adds	r7, #36	@ 0x24
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
	...

080034c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034d8:	d301      	bcc.n	80034de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034da:	2301      	movs	r3, #1
 80034dc:	e00f      	b.n	80034fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034de:	4a0a      	ldr	r2, [pc, #40]	@ (8003508 <SysTick_Config+0x40>)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034e6:	210f      	movs	r1, #15
 80034e8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ec:	f7ff ff8e 	bl	800340c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f0:	4b05      	ldr	r3, [pc, #20]	@ (8003508 <SysTick_Config+0x40>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034f6:	4b04      	ldr	r3, [pc, #16]	@ (8003508 <SysTick_Config+0x40>)
 80034f8:	2207      	movs	r2, #7
 80034fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	e000e010 	.word	0xe000e010

0800350c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff ff05 	bl	8003324 <__NVIC_SetPriorityGrouping>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003522:	b580      	push	{r7, lr}
 8003524:	b086      	sub	sp, #24
 8003526:	af00      	add	r7, sp, #0
 8003528:	4603      	mov	r3, r0
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003534:	f7ff ff1a 	bl	800336c <__NVIC_GetPriorityGrouping>
 8003538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	6978      	ldr	r0, [r7, #20]
 8003540:	f7ff ff8e 	bl	8003460 <NVIC_EncodePriority>
 8003544:	4602      	mov	r2, r0
 8003546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff ff5d 	bl	800340c <__NVIC_SetPriority>
}
 8003552:	bf00      	nop
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	4603      	mov	r3, r0
 8003562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff ff0d 	bl	8003388 <__NVIC_EnableIRQ>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	4603      	mov	r3, r0
 800357e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ff1d 	bl	80033c4 <__NVIC_DisableIRQ>
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff ff94 	bl	80034c8 <SysTick_Config>
 80035a0:	4603      	mov	r3, r0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b089      	sub	sp, #36	@ 0x24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035be:	2300      	movs	r3, #0
 80035c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	e177      	b.n	80038b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035c8:	2201      	movs	r2, #1
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4013      	ands	r3, r2
 80035da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	f040 8166 	bne.w	80038b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d005      	beq.n	80035fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d130      	bne.n	8003660 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	2203      	movs	r2, #3
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4313      	orrs	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003634:	2201      	movs	r2, #1
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 0201 	and.w	r2, r3, #1
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4313      	orrs	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	2b03      	cmp	r3, #3
 800366a:	d017      	beq.n	800369c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	2203      	movs	r2, #3
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d123      	bne.n	80036f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	08da      	lsrs	r2, r3, #3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3208      	adds	r2, #8
 80036b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	220f      	movs	r2, #15
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	08da      	lsrs	r2, r3, #3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3208      	adds	r2, #8
 80036ea:	69b9      	ldr	r1, [r7, #24]
 80036ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	2203      	movs	r2, #3
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 0203 	and.w	r2, r3, #3
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80c0 	beq.w	80038b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	4b66      	ldr	r3, [pc, #408]	@ (80038d0 <HAL_GPIO_Init+0x324>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373a:	4a65      	ldr	r2, [pc, #404]	@ (80038d0 <HAL_GPIO_Init+0x324>)
 800373c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003740:	6453      	str	r3, [r2, #68]	@ 0x44
 8003742:	4b63      	ldr	r3, [pc, #396]	@ (80038d0 <HAL_GPIO_Init+0x324>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003746:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800374e:	4a61      	ldr	r2, [pc, #388]	@ (80038d4 <HAL_GPIO_Init+0x328>)
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	089b      	lsrs	r3, r3, #2
 8003754:	3302      	adds	r3, #2
 8003756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	220f      	movs	r2, #15
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43db      	mvns	r3, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4013      	ands	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a58      	ldr	r2, [pc, #352]	@ (80038d8 <HAL_GPIO_Init+0x32c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d037      	beq.n	80037ea <HAL_GPIO_Init+0x23e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a57      	ldr	r2, [pc, #348]	@ (80038dc <HAL_GPIO_Init+0x330>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d031      	beq.n	80037e6 <HAL_GPIO_Init+0x23a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a56      	ldr	r2, [pc, #344]	@ (80038e0 <HAL_GPIO_Init+0x334>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d02b      	beq.n	80037e2 <HAL_GPIO_Init+0x236>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a55      	ldr	r2, [pc, #340]	@ (80038e4 <HAL_GPIO_Init+0x338>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d025      	beq.n	80037de <HAL_GPIO_Init+0x232>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a54      	ldr	r2, [pc, #336]	@ (80038e8 <HAL_GPIO_Init+0x33c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d01f      	beq.n	80037da <HAL_GPIO_Init+0x22e>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a53      	ldr	r2, [pc, #332]	@ (80038ec <HAL_GPIO_Init+0x340>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d019      	beq.n	80037d6 <HAL_GPIO_Init+0x22a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a52      	ldr	r2, [pc, #328]	@ (80038f0 <HAL_GPIO_Init+0x344>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <HAL_GPIO_Init+0x226>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a51      	ldr	r2, [pc, #324]	@ (80038f4 <HAL_GPIO_Init+0x348>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00d      	beq.n	80037ce <HAL_GPIO_Init+0x222>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a50      	ldr	r2, [pc, #320]	@ (80038f8 <HAL_GPIO_Init+0x34c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d007      	beq.n	80037ca <HAL_GPIO_Init+0x21e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a4f      	ldr	r2, [pc, #316]	@ (80038fc <HAL_GPIO_Init+0x350>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d101      	bne.n	80037c6 <HAL_GPIO_Init+0x21a>
 80037c2:	2309      	movs	r3, #9
 80037c4:	e012      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037c6:	230a      	movs	r3, #10
 80037c8:	e010      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037ca:	2308      	movs	r3, #8
 80037cc:	e00e      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037ce:	2307      	movs	r3, #7
 80037d0:	e00c      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037d2:	2306      	movs	r3, #6
 80037d4:	e00a      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037d6:	2305      	movs	r3, #5
 80037d8:	e008      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037da:	2304      	movs	r3, #4
 80037dc:	e006      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037de:	2303      	movs	r3, #3
 80037e0:	e004      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e002      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037ea:	2300      	movs	r3, #0
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	f002 0203 	and.w	r2, r2, #3
 80037f2:	0092      	lsls	r2, r2, #2
 80037f4:	4093      	lsls	r3, r2
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037fc:	4935      	ldr	r1, [pc, #212]	@ (80038d4 <HAL_GPIO_Init+0x328>)
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	089b      	lsrs	r3, r3, #2
 8003802:	3302      	adds	r3, #2
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800380a:	4b3d      	ldr	r3, [pc, #244]	@ (8003900 <HAL_GPIO_Init+0x354>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800382e:	4a34      	ldr	r2, [pc, #208]	@ (8003900 <HAL_GPIO_Init+0x354>)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003834:	4b32      	ldr	r3, [pc, #200]	@ (8003900 <HAL_GPIO_Init+0x354>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	43db      	mvns	r3, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4013      	ands	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003858:	4a29      	ldr	r2, [pc, #164]	@ (8003900 <HAL_GPIO_Init+0x354>)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800385e:	4b28      	ldr	r3, [pc, #160]	@ (8003900 <HAL_GPIO_Init+0x354>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003882:	4a1f      	ldr	r2, [pc, #124]	@ (8003900 <HAL_GPIO_Init+0x354>)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003888:	4b1d      	ldr	r3, [pc, #116]	@ (8003900 <HAL_GPIO_Init+0x354>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038ac:	4a14      	ldr	r2, [pc, #80]	@ (8003900 <HAL_GPIO_Init+0x354>)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3301      	adds	r3, #1
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b0f      	cmp	r3, #15
 80038bc:	f67f ae84 	bls.w	80035c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3724      	adds	r7, #36	@ 0x24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40023800 	.word	0x40023800
 80038d4:	40013800 	.word	0x40013800
 80038d8:	40020000 	.word	0x40020000
 80038dc:	40020400 	.word	0x40020400
 80038e0:	40020800 	.word	0x40020800
 80038e4:	40020c00 	.word	0x40020c00
 80038e8:	40021000 	.word	0x40021000
 80038ec:	40021400 	.word	0x40021400
 80038f0:	40021800 	.word	0x40021800
 80038f4:	40021c00 	.word	0x40021c00
 80038f8:	40022000 	.word	0x40022000
 80038fc:	40022400 	.word	0x40022400
 8003900:	40013c00 	.word	0x40013c00

08003904 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003912:	2300      	movs	r3, #0
 8003914:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003916:	2300      	movs	r3, #0
 8003918:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	e0d9      	b.n	8003ad4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003920:	2201      	movs	r2, #1
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4013      	ands	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	429a      	cmp	r2, r3
 8003938:	f040 80c9 	bne.w	8003ace <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800393c:	4a6b      	ldr	r2, [pc, #428]	@ (8003aec <HAL_GPIO_DeInit+0x1e8>)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	089b      	lsrs	r3, r3, #2
 8003942:	3302      	adds	r3, #2
 8003944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003948:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	220f      	movs	r2, #15
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	4013      	ands	r3, r2
 800395c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a63      	ldr	r2, [pc, #396]	@ (8003af0 <HAL_GPIO_DeInit+0x1ec>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d037      	beq.n	80039d6 <HAL_GPIO_DeInit+0xd2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a62      	ldr	r2, [pc, #392]	@ (8003af4 <HAL_GPIO_DeInit+0x1f0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d031      	beq.n	80039d2 <HAL_GPIO_DeInit+0xce>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a61      	ldr	r2, [pc, #388]	@ (8003af8 <HAL_GPIO_DeInit+0x1f4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d02b      	beq.n	80039ce <HAL_GPIO_DeInit+0xca>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a60      	ldr	r2, [pc, #384]	@ (8003afc <HAL_GPIO_DeInit+0x1f8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d025      	beq.n	80039ca <HAL_GPIO_DeInit+0xc6>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a5f      	ldr	r2, [pc, #380]	@ (8003b00 <HAL_GPIO_DeInit+0x1fc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d01f      	beq.n	80039c6 <HAL_GPIO_DeInit+0xc2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a5e      	ldr	r2, [pc, #376]	@ (8003b04 <HAL_GPIO_DeInit+0x200>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d019      	beq.n	80039c2 <HAL_GPIO_DeInit+0xbe>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a5d      	ldr	r2, [pc, #372]	@ (8003b08 <HAL_GPIO_DeInit+0x204>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d013      	beq.n	80039be <HAL_GPIO_DeInit+0xba>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a5c      	ldr	r2, [pc, #368]	@ (8003b0c <HAL_GPIO_DeInit+0x208>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00d      	beq.n	80039ba <HAL_GPIO_DeInit+0xb6>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a5b      	ldr	r2, [pc, #364]	@ (8003b10 <HAL_GPIO_DeInit+0x20c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d007      	beq.n	80039b6 <HAL_GPIO_DeInit+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a5a      	ldr	r2, [pc, #360]	@ (8003b14 <HAL_GPIO_DeInit+0x210>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d101      	bne.n	80039b2 <HAL_GPIO_DeInit+0xae>
 80039ae:	2309      	movs	r3, #9
 80039b0:	e012      	b.n	80039d8 <HAL_GPIO_DeInit+0xd4>
 80039b2:	230a      	movs	r3, #10
 80039b4:	e010      	b.n	80039d8 <HAL_GPIO_DeInit+0xd4>
 80039b6:	2308      	movs	r3, #8
 80039b8:	e00e      	b.n	80039d8 <HAL_GPIO_DeInit+0xd4>
 80039ba:	2307      	movs	r3, #7
 80039bc:	e00c      	b.n	80039d8 <HAL_GPIO_DeInit+0xd4>
 80039be:	2306      	movs	r3, #6
 80039c0:	e00a      	b.n	80039d8 <HAL_GPIO_DeInit+0xd4>
 80039c2:	2305      	movs	r3, #5
 80039c4:	e008      	b.n	80039d8 <HAL_GPIO_DeInit+0xd4>
 80039c6:	2304      	movs	r3, #4
 80039c8:	e006      	b.n	80039d8 <HAL_GPIO_DeInit+0xd4>
 80039ca:	2303      	movs	r3, #3
 80039cc:	e004      	b.n	80039d8 <HAL_GPIO_DeInit+0xd4>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e002      	b.n	80039d8 <HAL_GPIO_DeInit+0xd4>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <HAL_GPIO_DeInit+0xd4>
 80039d6:	2300      	movs	r3, #0
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	f002 0203 	and.w	r2, r2, #3
 80039de:	0092      	lsls	r2, r2, #2
 80039e0:	4093      	lsls	r3, r2
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d132      	bne.n	8003a4e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80039e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003b18 <HAL_GPIO_DeInit+0x214>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	4949      	ldr	r1, [pc, #292]	@ (8003b18 <HAL_GPIO_DeInit+0x214>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80039f6:	4b48      	ldr	r3, [pc, #288]	@ (8003b18 <HAL_GPIO_DeInit+0x214>)
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	43db      	mvns	r3, r3
 80039fe:	4946      	ldr	r1, [pc, #280]	@ (8003b18 <HAL_GPIO_DeInit+0x214>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003a04:	4b44      	ldr	r3, [pc, #272]	@ (8003b18 <HAL_GPIO_DeInit+0x214>)
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	4942      	ldr	r1, [pc, #264]	@ (8003b18 <HAL_GPIO_DeInit+0x214>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003a12:	4b41      	ldr	r3, [pc, #260]	@ (8003b18 <HAL_GPIO_DeInit+0x214>)
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	493f      	ldr	r1, [pc, #252]	@ (8003b18 <HAL_GPIO_DeInit+0x214>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	220f      	movs	r2, #15
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003a30:	4a2e      	ldr	r2, [pc, #184]	@ (8003aec <HAL_GPIO_DeInit+0x1e8>)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	089b      	lsrs	r3, r3, #2
 8003a36:	3302      	adds	r3, #2
 8003a38:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	482a      	ldr	r0, [pc, #168]	@ (8003aec <HAL_GPIO_DeInit+0x1e8>)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	400a      	ands	r2, r1
 8003a48:	3302      	adds	r3, #2
 8003a4a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	2103      	movs	r1, #3
 8003a58:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	401a      	ands	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	08da      	lsrs	r2, r3, #3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3208      	adds	r2, #8
 8003a6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	220f      	movs	r2, #15
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	08d2      	lsrs	r2, r2, #3
 8003a84:	4019      	ands	r1, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3208      	adds	r2, #8
 8003a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	2103      	movs	r1, #3
 8003a98:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	401a      	ands	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	401a      	ands	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	2103      	movs	r1, #3
 8003ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	401a      	ands	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2b0f      	cmp	r3, #15
 8003ad8:	f67f af22 	bls.w	8003920 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003adc:	bf00      	nop
 8003ade:	bf00      	nop
 8003ae0:	371c      	adds	r7, #28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40013800 	.word	0x40013800
 8003af0:	40020000 	.word	0x40020000
 8003af4:	40020400 	.word	0x40020400
 8003af8:	40020800 	.word	0x40020800
 8003afc:	40020c00 	.word	0x40020c00
 8003b00:	40021000 	.word	0x40021000
 8003b04:	40021400 	.word	0x40021400
 8003b08:	40021800 	.word	0x40021800
 8003b0c:	40021c00 	.word	0x40021c00
 8003b10:	40022000 	.word	0x40022000
 8003b14:	40022400 	.word	0x40022400
 8003b18:	40013c00 	.word	0x40013c00

08003b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	807b      	strh	r3, [r7, #2]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b2c:	787b      	ldrb	r3, [r7, #1]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b32:	887a      	ldrh	r2, [r7, #2]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b38:	e003      	b.n	8003b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b3a:	887b      	ldrh	r3, [r7, #2]
 8003b3c:	041a      	lsls	r2, r3, #16
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	619a      	str	r2, [r3, #24]
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e12b      	b.n	8003dba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fe fd48 	bl	800260c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2224      	movs	r2, #36	@ 0x24
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ba2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bb4:	f001 ff82 	bl	8005abc <HAL_RCC_GetPCLK1Freq>
 8003bb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	4a81      	ldr	r2, [pc, #516]	@ (8003dc4 <HAL_I2C_Init+0x274>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d807      	bhi.n	8003bd4 <HAL_I2C_Init+0x84>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4a80      	ldr	r2, [pc, #512]	@ (8003dc8 <HAL_I2C_Init+0x278>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	bf94      	ite	ls
 8003bcc:	2301      	movls	r3, #1
 8003bce:	2300      	movhi	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	e006      	b.n	8003be2 <HAL_I2C_Init+0x92>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4a7d      	ldr	r2, [pc, #500]	@ (8003dcc <HAL_I2C_Init+0x27c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	bf94      	ite	ls
 8003bdc:	2301      	movls	r3, #1
 8003bde:	2300      	movhi	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0e7      	b.n	8003dba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4a78      	ldr	r2, [pc, #480]	@ (8003dd0 <HAL_I2C_Init+0x280>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	0c9b      	lsrs	r3, r3, #18
 8003bf4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4a6a      	ldr	r2, [pc, #424]	@ (8003dc4 <HAL_I2C_Init+0x274>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d802      	bhi.n	8003c24 <HAL_I2C_Init+0xd4>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	3301      	adds	r3, #1
 8003c22:	e009      	b.n	8003c38 <HAL_I2C_Init+0xe8>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
 8003c2e:	4a69      	ldr	r2, [pc, #420]	@ (8003dd4 <HAL_I2C_Init+0x284>)
 8003c30:	fba2 2303 	umull	r2, r3, r2, r3
 8003c34:	099b      	lsrs	r3, r3, #6
 8003c36:	3301      	adds	r3, #1
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6812      	ldr	r2, [r2, #0]
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c4a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	495c      	ldr	r1, [pc, #368]	@ (8003dc4 <HAL_I2C_Init+0x274>)
 8003c54:	428b      	cmp	r3, r1
 8003c56:	d819      	bhi.n	8003c8c <HAL_I2C_Init+0x13c>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1e59      	subs	r1, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c66:	1c59      	adds	r1, r3, #1
 8003c68:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c6c:	400b      	ands	r3, r1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_I2C_Init+0x138>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1e59      	subs	r1, r3, #1
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c80:	3301      	adds	r3, #1
 8003c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c86:	e051      	b.n	8003d2c <HAL_I2C_Init+0x1dc>
 8003c88:	2304      	movs	r3, #4
 8003c8a:	e04f      	b.n	8003d2c <HAL_I2C_Init+0x1dc>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d111      	bne.n	8003cb8 <HAL_I2C_Init+0x168>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1e58      	subs	r0, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6859      	ldr	r1, [r3, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	440b      	add	r3, r1
 8003ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bf0c      	ite	eq
 8003cb0:	2301      	moveq	r3, #1
 8003cb2:	2300      	movne	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	e012      	b.n	8003cde <HAL_I2C_Init+0x18e>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	1e58      	subs	r0, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6859      	ldr	r1, [r3, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	0099      	lsls	r1, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cce:	3301      	adds	r3, #1
 8003cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_I2C_Init+0x196>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e022      	b.n	8003d2c <HAL_I2C_Init+0x1dc>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10e      	bne.n	8003d0c <HAL_I2C_Init+0x1bc>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1e58      	subs	r0, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6859      	ldr	r1, [r3, #4]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	440b      	add	r3, r1
 8003cfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d00:	3301      	adds	r3, #1
 8003d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d0a:	e00f      	b.n	8003d2c <HAL_I2C_Init+0x1dc>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	1e58      	subs	r0, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6859      	ldr	r1, [r3, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	0099      	lsls	r1, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d22:	3301      	adds	r3, #1
 8003d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	6809      	ldr	r1, [r1, #0]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69da      	ldr	r2, [r3, #28]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6911      	ldr	r1, [r2, #16]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	68d2      	ldr	r2, [r2, #12]
 8003d66:	4311      	orrs	r1, r2
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0201 	orr.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	000186a0 	.word	0x000186a0
 8003dc8:	001e847f 	.word	0x001e847f
 8003dcc:	003d08ff 	.word	0x003d08ff
 8003dd0:	431bde83 	.word	0x431bde83
 8003dd4:	10624dd3 	.word	0x10624dd3

08003dd8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b088      	sub	sp, #32
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	4608      	mov	r0, r1
 8003de2:	4611      	mov	r1, r2
 8003de4:	461a      	mov	r2, r3
 8003de6:	4603      	mov	r3, r0
 8003de8:	817b      	strh	r3, [r7, #10]
 8003dea:	460b      	mov	r3, r1
 8003dec:	813b      	strh	r3, [r7, #8]
 8003dee:	4613      	mov	r3, r2
 8003df0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003df2:	f7ff fa67 	bl	80032c4 <HAL_GetTick>
 8003df6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	f040 80d9 	bne.w	8003fb8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	2319      	movs	r3, #25
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	496d      	ldr	r1, [pc, #436]	@ (8003fc4 <HAL_I2C_Mem_Write+0x1ec>)
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 fc8b 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e0cc      	b.n	8003fba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d101      	bne.n	8003e2e <HAL_I2C_Mem_Write+0x56>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e0c5      	b.n	8003fba <HAL_I2C_Mem_Write+0x1e2>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d007      	beq.n	8003e54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2221      	movs	r2, #33	@ 0x21
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2240      	movs	r2, #64	@ 0x40
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a3a      	ldr	r2, [r7, #32]
 8003e7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4a4d      	ldr	r2, [pc, #308]	@ (8003fc8 <HAL_I2C_Mem_Write+0x1f0>)
 8003e94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e96:	88f8      	ldrh	r0, [r7, #6]
 8003e98:	893a      	ldrh	r2, [r7, #8]
 8003e9a:	8979      	ldrh	r1, [r7, #10]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	9301      	str	r3, [sp, #4]
 8003ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 fac2 	bl	8004430 <I2C_RequestMemoryWrite>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d052      	beq.n	8003f58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e081      	b.n	8003fba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fd50 	bl	8004960 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00d      	beq.n	8003ee2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d107      	bne.n	8003ede <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003edc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e06b      	b.n	8003fba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee6:	781a      	ldrb	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d11b      	bne.n	8003f58 <HAL_I2C_Mem_Write+0x180>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d017      	beq.n	8003f58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	781a      	ldrb	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1aa      	bne.n	8003eb6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 fd43 	bl	80049f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00d      	beq.n	8003f8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d107      	bne.n	8003f88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e016      	b.n	8003fba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e000      	b.n	8003fba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003fb8:	2302      	movs	r3, #2
  }
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	00100002 	.word	0x00100002
 8003fc8:	ffff0000 	.word	0xffff0000

08003fcc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08c      	sub	sp, #48	@ 0x30
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	4608      	mov	r0, r1
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4603      	mov	r3, r0
 8003fdc:	817b      	strh	r3, [r7, #10]
 8003fde:	460b      	mov	r3, r1
 8003fe0:	813b      	strh	r3, [r7, #8]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fe6:	f7ff f96d 	bl	80032c4 <HAL_GetTick>
 8003fea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	f040 8214 	bne.w	8004422 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	2319      	movs	r3, #25
 8004000:	2201      	movs	r2, #1
 8004002:	497b      	ldr	r1, [pc, #492]	@ (80041f0 <HAL_I2C_Mem_Read+0x224>)
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 fb91 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
 8004012:	e207      	b.n	8004424 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_I2C_Mem_Read+0x56>
 800401e:	2302      	movs	r3, #2
 8004020:	e200      	b.n	8004424 <HAL_I2C_Mem_Read+0x458>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b01      	cmp	r3, #1
 8004036:	d007      	beq.n	8004048 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0201 	orr.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004056:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2222      	movs	r2, #34	@ 0x22
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2240      	movs	r2, #64	@ 0x40
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004072:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004078:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4a5b      	ldr	r2, [pc, #364]	@ (80041f4 <HAL_I2C_Mem_Read+0x228>)
 8004088:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800408a:	88f8      	ldrh	r0, [r7, #6]
 800408c:	893a      	ldrh	r2, [r7, #8]
 800408e:	8979      	ldrh	r1, [r7, #10]
 8004090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	4603      	mov	r3, r0
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 fa5e 	bl	800455c <I2C_RequestMemoryRead>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e1bc      	b.n	8004424 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d113      	bne.n	80040da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b2:	2300      	movs	r3, #0
 80040b4:	623b      	str	r3, [r7, #32]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	623b      	str	r3, [r7, #32]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	623b      	str	r3, [r7, #32]
 80040c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	e190      	b.n	80043fc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d11b      	bne.n	800411a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	61fb      	str	r3, [r7, #28]
 8004106:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	e170      	b.n	80043fc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411e:	2b02      	cmp	r3, #2
 8004120:	d11b      	bne.n	800415a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004130:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004140:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	61bb      	str	r3, [r7, #24]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	e150      	b.n	80043fc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004170:	e144      	b.n	80043fc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004176:	2b03      	cmp	r3, #3
 8004178:	f200 80f1 	bhi.w	800435e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004180:	2b01      	cmp	r3, #1
 8004182:	d123      	bne.n	80041cc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004186:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 fc79 	bl	8004a80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e145      	b.n	8004424 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041ca:	e117      	b.n	80043fc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d14e      	bne.n	8004272 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041da:	2200      	movs	r2, #0
 80041dc:	4906      	ldr	r1, [pc, #24]	@ (80041f8 <HAL_I2C_Mem_Read+0x22c>)
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 faa4 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d008      	beq.n	80041fc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e11a      	b.n	8004424 <HAL_I2C_Mem_Read+0x458>
 80041ee:	bf00      	nop
 80041f0:	00100002 	.word	0x00100002
 80041f4:	ffff0000 	.word	0xffff0000
 80041f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800420a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800425a:	3b01      	subs	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004270:	e0c4      	b.n	80043fc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004278:	2200      	movs	r2, #0
 800427a:	496c      	ldr	r1, [pc, #432]	@ (800442c <HAL_I2C_Mem_Read+0x460>)
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 fa55 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0cb      	b.n	8004424 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800429a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d4:	2200      	movs	r2, #0
 80042d6:	4955      	ldr	r1, [pc, #340]	@ (800442c <HAL_I2C_Mem_Read+0x460>)
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fa27 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e09d      	b.n	8004424 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800435c:	e04e      	b.n	80043fc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800435e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004360:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 fb8c 	bl	8004a80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e058      	b.n	8004424 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d124      	bne.n	80043fc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d107      	bne.n	80043ca <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004400:	2b00      	cmp	r3, #0
 8004402:	f47f aeb6 	bne.w	8004172 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	e000      	b.n	8004424 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004422:	2302      	movs	r3, #2
  }
}
 8004424:	4618      	mov	r0, r3
 8004426:	3728      	adds	r7, #40	@ 0x28
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	00010004 	.word	0x00010004

08004430 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af02      	add	r7, sp, #8
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	4608      	mov	r0, r1
 800443a:	4611      	mov	r1, r2
 800443c:	461a      	mov	r2, r3
 800443e:	4603      	mov	r3, r0
 8004440:	817b      	strh	r3, [r7, #10]
 8004442:	460b      	mov	r3, r1
 8004444:	813b      	strh	r3, [r7, #8]
 8004446:	4613      	mov	r3, r2
 8004448:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004458:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	2200      	movs	r2, #0
 8004462:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 f960 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00d      	beq.n	800448e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800447c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004480:	d103      	bne.n	800448a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004488:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e05f      	b.n	800454e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800448e:	897b      	ldrh	r3, [r7, #10]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	461a      	mov	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800449c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	6a3a      	ldr	r2, [r7, #32]
 80044a2:	492d      	ldr	r1, [pc, #180]	@ (8004558 <I2C_RequestMemoryWrite+0x128>)
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f9bb 	bl	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e04c      	b.n	800454e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044cc:	6a39      	ldr	r1, [r7, #32]
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 fa46 	bl	8004960 <I2C_WaitOnTXEFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00d      	beq.n	80044f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d107      	bne.n	80044f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e02b      	b.n	800454e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044f6:	88fb      	ldrh	r3, [r7, #6]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d105      	bne.n	8004508 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044fc:	893b      	ldrh	r3, [r7, #8]
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	611a      	str	r2, [r3, #16]
 8004506:	e021      	b.n	800454c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004508:	893b      	ldrh	r3, [r7, #8]
 800450a:	0a1b      	lsrs	r3, r3, #8
 800450c:	b29b      	uxth	r3, r3
 800450e:	b2da      	uxtb	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004518:	6a39      	ldr	r1, [r7, #32]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 fa20 	bl	8004960 <I2C_WaitOnTXEFlagUntilTimeout>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00d      	beq.n	8004542 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452a:	2b04      	cmp	r3, #4
 800452c:	d107      	bne.n	800453e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800453c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e005      	b.n	800454e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004542:	893b      	ldrh	r3, [r7, #8]
 8004544:	b2da      	uxtb	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	00010002 	.word	0x00010002

0800455c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af02      	add	r7, sp, #8
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	4608      	mov	r0, r1
 8004566:	4611      	mov	r1, r2
 8004568:	461a      	mov	r2, r3
 800456a:	4603      	mov	r3, r0
 800456c:	817b      	strh	r3, [r7, #10]
 800456e:	460b      	mov	r3, r1
 8004570:	813b      	strh	r3, [r7, #8]
 8004572:	4613      	mov	r3, r2
 8004574:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004584:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004594:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	2200      	movs	r2, #0
 800459e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 f8c2 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00d      	beq.n	80045ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045bc:	d103      	bne.n	80045c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e0aa      	b.n	8004720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045ca:	897b      	ldrh	r3, [r7, #10]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	6a3a      	ldr	r2, [r7, #32]
 80045de:	4952      	ldr	r1, [pc, #328]	@ (8004728 <I2C_RequestMemoryRead+0x1cc>)
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 f91d 	bl	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e097      	b.n	8004720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004608:	6a39      	ldr	r1, [r7, #32]
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f9a8 	bl	8004960 <I2C_WaitOnTXEFlagUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00d      	beq.n	8004632 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	2b04      	cmp	r3, #4
 800461c:	d107      	bne.n	800462e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800462c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e076      	b.n	8004720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004632:	88fb      	ldrh	r3, [r7, #6]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d105      	bne.n	8004644 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004638:	893b      	ldrh	r3, [r7, #8]
 800463a:	b2da      	uxtb	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	611a      	str	r2, [r3, #16]
 8004642:	e021      	b.n	8004688 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004644:	893b      	ldrh	r3, [r7, #8]
 8004646:	0a1b      	lsrs	r3, r3, #8
 8004648:	b29b      	uxth	r3, r3
 800464a:	b2da      	uxtb	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004654:	6a39      	ldr	r1, [r7, #32]
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f982 	bl	8004960 <I2C_WaitOnTXEFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00d      	beq.n	800467e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	2b04      	cmp	r3, #4
 8004668:	d107      	bne.n	800467a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004678:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e050      	b.n	8004720 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800467e:	893b      	ldrh	r3, [r7, #8]
 8004680:	b2da      	uxtb	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800468a:	6a39      	ldr	r1, [r7, #32]
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 f967 	bl	8004960 <I2C_WaitOnTXEFlagUntilTimeout>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00d      	beq.n	80046b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469c:	2b04      	cmp	r3, #4
 800469e:	d107      	bne.n	80046b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e035      	b.n	8004720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f82b 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00d      	beq.n	80046f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046ea:	d103      	bne.n	80046f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e013      	b.n	8004720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046f8:	897b      	ldrh	r3, [r7, #10]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	f043 0301 	orr.w	r3, r3, #1
 8004700:	b2da      	uxtb	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470a:	6a3a      	ldr	r2, [r7, #32]
 800470c:	4906      	ldr	r1, [pc, #24]	@ (8004728 <I2C_RequestMemoryRead+0x1cc>)
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f886 	bl	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	00010002 	.word	0x00010002

0800472c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	4613      	mov	r3, r2
 800473a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800473c:	e048      	b.n	80047d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004744:	d044      	beq.n	80047d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004746:	f7fe fdbd 	bl	80032c4 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d302      	bcc.n	800475c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d139      	bne.n	80047d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	0c1b      	lsrs	r3, r3, #16
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b01      	cmp	r3, #1
 8004764:	d10d      	bne.n	8004782 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	43da      	mvns	r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4013      	ands	r3, r2
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	bf0c      	ite	eq
 8004778:	2301      	moveq	r3, #1
 800477a:	2300      	movne	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	461a      	mov	r2, r3
 8004780:	e00c      	b.n	800479c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	43da      	mvns	r2, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	4013      	ands	r3, r2
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	bf0c      	ite	eq
 8004794:	2301      	moveq	r3, #1
 8004796:	2300      	movne	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	461a      	mov	r2, r3
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d116      	bne.n	80047d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047bc:	f043 0220 	orr.w	r2, r3, #32
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e023      	b.n	8004818 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	0c1b      	lsrs	r3, r3, #16
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d10d      	bne.n	80047f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	43da      	mvns	r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4013      	ands	r3, r2
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	e00c      	b.n	8004810 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	43da      	mvns	r2, r3
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4013      	ands	r3, r2
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	bf0c      	ite	eq
 8004808:	2301      	moveq	r3, #1
 800480a:	2300      	movne	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	461a      	mov	r2, r3
 8004810:	79fb      	ldrb	r3, [r7, #7]
 8004812:	429a      	cmp	r2, r3
 8004814:	d093      	beq.n	800473e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800482e:	e071      	b.n	8004914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800483a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800483e:	d123      	bne.n	8004888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800484e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004858:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004874:	f043 0204 	orr.w	r2, r3, #4
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e067      	b.n	8004958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488e:	d041      	beq.n	8004914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004890:	f7fe fd18 	bl	80032c4 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	429a      	cmp	r2, r3
 800489e:	d302      	bcc.n	80048a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d136      	bne.n	8004914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	0c1b      	lsrs	r3, r3, #16
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d10c      	bne.n	80048ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	43da      	mvns	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4013      	ands	r3, r2
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bf14      	ite	ne
 80048c2:	2301      	movne	r3, #1
 80048c4:	2300      	moveq	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	e00b      	b.n	80048e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	43da      	mvns	r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4013      	ands	r3, r2
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d016      	beq.n	8004914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004900:	f043 0220 	orr.w	r2, r3, #32
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e021      	b.n	8004958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	0c1b      	lsrs	r3, r3, #16
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b01      	cmp	r3, #1
 800491c:	d10c      	bne.n	8004938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	43da      	mvns	r2, r3
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	4013      	ands	r3, r2
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	bf14      	ite	ne
 8004930:	2301      	movne	r3, #1
 8004932:	2300      	moveq	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	e00b      	b.n	8004950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	43da      	mvns	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4013      	ands	r3, r2
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	bf14      	ite	ne
 800494a:	2301      	movne	r3, #1
 800494c:	2300      	moveq	r3, #0
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	f47f af6d 	bne.w	8004830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800496c:	e034      	b.n	80049d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f8e3 	bl	8004b3a <I2C_IsAcknowledgeFailed>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e034      	b.n	80049e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004984:	d028      	beq.n	80049d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004986:	f7fe fc9d 	bl	80032c4 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	429a      	cmp	r2, r3
 8004994:	d302      	bcc.n	800499c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d11d      	bne.n	80049d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a6:	2b80      	cmp	r3, #128	@ 0x80
 80049a8:	d016      	beq.n	80049d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c4:	f043 0220 	orr.w	r2, r3, #32
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e007      	b.n	80049e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e2:	2b80      	cmp	r3, #128	@ 0x80
 80049e4:	d1c3      	bne.n	800496e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049fc:	e034      	b.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f89b 	bl	8004b3a <I2C_IsAcknowledgeFailed>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e034      	b.n	8004a78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a14:	d028      	beq.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a16:	f7fe fc55 	bl	80032c4 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d302      	bcc.n	8004a2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d11d      	bne.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d016      	beq.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a54:	f043 0220 	orr.w	r2, r3, #32
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e007      	b.n	8004a78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d1c3      	bne.n	80049fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a8c:	e049      	b.n	8004b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d119      	bne.n	8004ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0210 	mvn.w	r2, #16
 8004aa4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e030      	b.n	8004b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad0:	f7fe fbf8 	bl	80032c4 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d302      	bcc.n	8004ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d11d      	bne.n	8004b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af0:	2b40      	cmp	r3, #64	@ 0x40
 8004af2:	d016      	beq.n	8004b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0e:	f043 0220 	orr.w	r2, r3, #32
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e007      	b.n	8004b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b2c:	2b40      	cmp	r3, #64	@ 0x40
 8004b2e:	d1ae      	bne.n	8004a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b50:	d11b      	bne.n	8004b8a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b5a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b76:	f043 0204 	orr.w	r2, r3, #4
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	d129      	bne.n	8004c02 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2224      	movs	r2, #36	@ 0x24
 8004bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0201 	bic.w	r2, r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0210 	bic.w	r2, r2, #16
 8004bd4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f042 0201 	orr.w	r2, r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e000      	b.n	8004c04 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004c02:	2302      	movs	r3, #2
  }
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b20      	cmp	r3, #32
 8004c28:	d12a      	bne.n	8004c80 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2224      	movs	r2, #36	@ 0x24
 8004c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0201 	bic.w	r2, r2, #1
 8004c40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c48:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004c4a:	89fb      	ldrh	r3, [r7, #14]
 8004c4c:	f023 030f 	bic.w	r3, r3, #15
 8004c50:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	89fb      	ldrh	r3, [r7, #14]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	89fa      	ldrh	r2, [r7, #14]
 8004c62:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0201 	orr.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	e000      	b.n	8004c82 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004c80:	2302      	movs	r3, #2
  }
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
	...

08004c90 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e0bf      	b.n	8004e22 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d106      	bne.n	8004cbc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fd fd12 	bl	80026e0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004cd2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6999      	ldr	r1, [r3, #24]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ce8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6899      	ldr	r1, [r3, #8]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	4b4a      	ldr	r3, [pc, #296]	@ (8004e2c <HAL_LTDC_Init+0x19c>)
 8004d04:	400b      	ands	r3, r1
 8004d06:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	041b      	lsls	r3, r3, #16
 8004d0e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6899      	ldr	r1, [r3, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699a      	ldr	r2, [r3, #24]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68d9      	ldr	r1, [r3, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	4b3e      	ldr	r3, [pc, #248]	@ (8004e2c <HAL_LTDC_Init+0x19c>)
 8004d32:	400b      	ands	r3, r1
 8004d34:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	041b      	lsls	r3, r3, #16
 8004d3c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68d9      	ldr	r1, [r3, #12]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1a      	ldr	r2, [r3, #32]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6919      	ldr	r1, [r3, #16]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	4b33      	ldr	r3, [pc, #204]	@ (8004e2c <HAL_LTDC_Init+0x19c>)
 8004d60:	400b      	ands	r3, r1
 8004d62:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	041b      	lsls	r3, r3, #16
 8004d6a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6919      	ldr	r1, [r3, #16]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6959      	ldr	r1, [r3, #20]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	4b27      	ldr	r3, [pc, #156]	@ (8004e2c <HAL_LTDC_Init+0x19c>)
 8004d8e:	400b      	ands	r3, r1
 8004d90:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d96:	041b      	lsls	r3, r3, #16
 8004d98:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6959      	ldr	r1, [r3, #20]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004dc0:	041b      	lsls	r3, r3, #16
 8004dc2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0206 	orr.w	r2, r2, #6
 8004dfe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	f000f800 	.word	0xf000f800

08004e30 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004e30:	b5b0      	push	{r4, r5, r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_LTDC_ConfigLayer+0x1a>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e02c      	b.n	8004ea4 <HAL_LTDC_ConfigLayer+0x74>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2202      	movs	r2, #2
 8004e56:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2134      	movs	r1, #52	@ 0x34
 8004e60:	fb01 f303 	mul.w	r3, r1, r3
 8004e64:	4413      	add	r3, r2
 8004e66:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	4614      	mov	r4, r2
 8004e6e:	461d      	mov	r5, r3
 8004e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e7c:	682b      	ldr	r3, [r5, #0]
 8004e7e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f811 	bl	8004eac <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bdb0      	pop	{r4, r5, r7, pc}

08004eac <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b089      	sub	sp, #36	@ 0x24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	0c1b      	lsrs	r3, r3, #16
 8004ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ec8:	4413      	add	r3, r2
 8004eca:	041b      	lsls	r3, r3, #16
 8004ecc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	01db      	lsls	r3, r3, #7
 8004ed8:	4413      	add	r3, r2
 8004eda:	3384      	adds	r3, #132	@ 0x84
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	6812      	ldr	r2, [r2, #0]
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	01d2      	lsls	r2, r2, #7
 8004ee8:	440a      	add	r2, r1
 8004eea:	3284      	adds	r2, #132	@ 0x84
 8004eec:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004ef0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	0c1b      	lsrs	r3, r3, #16
 8004efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f02:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f04:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	01db      	lsls	r3, r3, #7
 8004f10:	440b      	add	r3, r1
 8004f12:	3384      	adds	r3, #132	@ 0x84
 8004f14:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f1a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f2a:	4413      	add	r3, r2
 8004f2c:	041b      	lsls	r3, r3, #16
 8004f2e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	01db      	lsls	r3, r3, #7
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3384      	adds	r3, #132	@ 0x84
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	4611      	mov	r1, r2
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	01d2      	lsls	r2, r2, #7
 8004f4a:	440a      	add	r2, r1
 8004f4c:	3284      	adds	r2, #132	@ 0x84
 8004f4e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004f52:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f62:	4413      	add	r3, r2
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	01db      	lsls	r3, r3, #7
 8004f70:	440b      	add	r3, r1
 8004f72:	3384      	adds	r3, #132	@ 0x84
 8004f74:	4619      	mov	r1, r3
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	01db      	lsls	r3, r3, #7
 8004f86:	4413      	add	r3, r2
 8004f88:	3384      	adds	r3, #132	@ 0x84
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	6812      	ldr	r2, [r2, #0]
 8004f90:	4611      	mov	r1, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	01d2      	lsls	r2, r2, #7
 8004f96:	440a      	add	r2, r1
 8004f98:	3284      	adds	r2, #132	@ 0x84
 8004f9a:	f023 0307 	bic.w	r3, r3, #7
 8004f9e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	01db      	lsls	r3, r3, #7
 8004faa:	4413      	add	r3, r2
 8004fac:	3384      	adds	r3, #132	@ 0x84
 8004fae:	461a      	mov	r2, r3
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004fc6:	041b      	lsls	r3, r3, #16
 8004fc8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	061b      	lsls	r3, r3, #24
 8004fd0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	01db      	lsls	r3, r3, #7
 8004fdc:	4413      	add	r3, r2
 8004fde:	3384      	adds	r3, #132	@ 0x84
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	01db      	lsls	r3, r3, #7
 8004fec:	4413      	add	r3, r2
 8004fee:	3384      	adds	r3, #132	@ 0x84
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	431a      	orrs	r2, r3
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	431a      	orrs	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4619      	mov	r1, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	01db      	lsls	r3, r3, #7
 8005010:	440b      	add	r3, r1
 8005012:	3384      	adds	r3, #132	@ 0x84
 8005014:	4619      	mov	r1, r3
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	4313      	orrs	r3, r2
 800501a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	01db      	lsls	r3, r3, #7
 8005026:	4413      	add	r3, r2
 8005028:	3384      	adds	r3, #132	@ 0x84
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	6812      	ldr	r2, [r2, #0]
 8005030:	4611      	mov	r1, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	01d2      	lsls	r2, r2, #7
 8005036:	440a      	add	r2, r1
 8005038:	3284      	adds	r2, #132	@ 0x84
 800503a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800503e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	01db      	lsls	r3, r3, #7
 800504a:	4413      	add	r3, r2
 800504c:	3384      	adds	r3, #132	@ 0x84
 800504e:	461a      	mov	r2, r3
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	01db      	lsls	r3, r3, #7
 8005060:	4413      	add	r3, r2
 8005062:	3384      	adds	r3, #132	@ 0x84
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	4611      	mov	r1, r2
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	01d2      	lsls	r2, r2, #7
 8005070:	440a      	add	r2, r1
 8005072:	3284      	adds	r2, #132	@ 0x84
 8005074:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005078:	f023 0307 	bic.w	r3, r3, #7
 800507c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	69da      	ldr	r2, [r3, #28]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	68f9      	ldr	r1, [r7, #12]
 8005088:	6809      	ldr	r1, [r1, #0]
 800508a:	4608      	mov	r0, r1
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	01c9      	lsls	r1, r1, #7
 8005090:	4401      	add	r1, r0
 8005092:	3184      	adds	r1, #132	@ 0x84
 8005094:	4313      	orrs	r3, r2
 8005096:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	01db      	lsls	r3, r3, #7
 80050a2:	4413      	add	r3, r2
 80050a4:	3384      	adds	r3, #132	@ 0x84
 80050a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	461a      	mov	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	01db      	lsls	r3, r3, #7
 80050b2:	4413      	add	r3, r2
 80050b4:	3384      	adds	r3, #132	@ 0x84
 80050b6:	461a      	mov	r2, r3
 80050b8:	2300      	movs	r3, #0
 80050ba:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	461a      	mov	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	01db      	lsls	r3, r3, #7
 80050c6:	4413      	add	r3, r2
 80050c8:	3384      	adds	r3, #132	@ 0x84
 80050ca:	461a      	mov	r2, r3
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d102      	bne.n	80050e0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80050da:	2304      	movs	r3, #4
 80050dc:	61fb      	str	r3, [r7, #28]
 80050de:	e01b      	b.n	8005118 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d102      	bne.n	80050ee <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80050e8:	2303      	movs	r3, #3
 80050ea:	61fb      	str	r3, [r7, #28]
 80050ec:	e014      	b.n	8005118 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d00b      	beq.n	800510e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d007      	beq.n	800510e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005102:	2b03      	cmp	r3, #3
 8005104:	d003      	beq.n	800510e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800510a:	2b07      	cmp	r3, #7
 800510c:	d102      	bne.n	8005114 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800510e:	2302      	movs	r3, #2
 8005110:	61fb      	str	r3, [r7, #28]
 8005112:	e001      	b.n	8005118 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005114:	2301      	movs	r3, #1
 8005116:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	461a      	mov	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	01db      	lsls	r3, r3, #7
 8005122:	4413      	add	r3, r2
 8005124:	3384      	adds	r3, #132	@ 0x84
 8005126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	6812      	ldr	r2, [r2, #0]
 800512c:	4611      	mov	r1, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	01d2      	lsls	r2, r2, #7
 8005132:	440a      	add	r2, r1
 8005134:	3284      	adds	r2, #132	@ 0x84
 8005136:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800513a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005140:	69fa      	ldr	r2, [r7, #28]
 8005142:	fb02 f303 	mul.w	r3, r2, r3
 8005146:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	6859      	ldr	r1, [r3, #4]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	1acb      	subs	r3, r1, r3
 8005152:	69f9      	ldr	r1, [r7, #28]
 8005154:	fb01 f303 	mul.w	r3, r1, r3
 8005158:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800515a:	68f9      	ldr	r1, [r7, #12]
 800515c:	6809      	ldr	r1, [r1, #0]
 800515e:	4608      	mov	r0, r1
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	01c9      	lsls	r1, r1, #7
 8005164:	4401      	add	r1, r0
 8005166:	3184      	adds	r1, #132	@ 0x84
 8005168:	4313      	orrs	r3, r2
 800516a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	01db      	lsls	r3, r3, #7
 8005176:	4413      	add	r3, r2
 8005178:	3384      	adds	r3, #132	@ 0x84
 800517a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	4611      	mov	r1, r2
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	01d2      	lsls	r2, r2, #7
 8005186:	440a      	add	r2, r1
 8005188:	3284      	adds	r2, #132	@ 0x84
 800518a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800518e:	f023 0307 	bic.w	r3, r3, #7
 8005192:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	461a      	mov	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	01db      	lsls	r3, r3, #7
 800519e:	4413      	add	r3, r2
 80051a0:	3384      	adds	r3, #132	@ 0x84
 80051a2:	461a      	mov	r2, r3
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	01db      	lsls	r3, r3, #7
 80051b4:	4413      	add	r3, r2
 80051b6:	3384      	adds	r3, #132	@ 0x84
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	4611      	mov	r1, r2
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	01d2      	lsls	r2, r2, #7
 80051c4:	440a      	add	r2, r1
 80051c6:	3284      	adds	r2, #132	@ 0x84
 80051c8:	f043 0301 	orr.w	r3, r3, #1
 80051cc:	6013      	str	r3, [r2, #0]
}
 80051ce:	bf00      	nop
 80051d0:	3724      	adds	r7, #36	@ 0x24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
	...

080051dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e267      	b.n	80056be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d075      	beq.n	80052e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80051fa:	4b88      	ldr	r3, [pc, #544]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 030c 	and.w	r3, r3, #12
 8005202:	2b04      	cmp	r3, #4
 8005204:	d00c      	beq.n	8005220 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005206:	4b85      	ldr	r3, [pc, #532]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800520e:	2b08      	cmp	r3, #8
 8005210:	d112      	bne.n	8005238 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005212:	4b82      	ldr	r3, [pc, #520]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800521a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800521e:	d10b      	bne.n	8005238 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005220:	4b7e      	ldr	r3, [pc, #504]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d05b      	beq.n	80052e4 <HAL_RCC_OscConfig+0x108>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d157      	bne.n	80052e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e242      	b.n	80056be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005240:	d106      	bne.n	8005250 <HAL_RCC_OscConfig+0x74>
 8005242:	4b76      	ldr	r3, [pc, #472]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a75      	ldr	r2, [pc, #468]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 8005248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	e01d      	b.n	800528c <HAL_RCC_OscConfig+0xb0>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005258:	d10c      	bne.n	8005274 <HAL_RCC_OscConfig+0x98>
 800525a:	4b70      	ldr	r3, [pc, #448]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a6f      	ldr	r2, [pc, #444]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 8005260:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	4b6d      	ldr	r3, [pc, #436]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a6c      	ldr	r2, [pc, #432]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 800526c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	e00b      	b.n	800528c <HAL_RCC_OscConfig+0xb0>
 8005274:	4b69      	ldr	r3, [pc, #420]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a68      	ldr	r2, [pc, #416]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 800527a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800527e:	6013      	str	r3, [r2, #0]
 8005280:	4b66      	ldr	r3, [pc, #408]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a65      	ldr	r2, [pc, #404]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 8005286:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800528a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d013      	beq.n	80052bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005294:	f7fe f816 	bl	80032c4 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800529c:	f7fe f812 	bl	80032c4 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b64      	cmp	r3, #100	@ 0x64
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e207      	b.n	80056be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ae:	4b5b      	ldr	r3, [pc, #364]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0f0      	beq.n	800529c <HAL_RCC_OscConfig+0xc0>
 80052ba:	e014      	b.n	80052e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052bc:	f7fe f802 	bl	80032c4 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052c4:	f7fd fffe 	bl	80032c4 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b64      	cmp	r3, #100	@ 0x64
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e1f3      	b.n	80056be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052d6:	4b51      	ldr	r3, [pc, #324]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1f0      	bne.n	80052c4 <HAL_RCC_OscConfig+0xe8>
 80052e2:	e000      	b.n	80052e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d063      	beq.n	80053ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80052f2:	4b4a      	ldr	r3, [pc, #296]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 030c 	and.w	r3, r3, #12
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00b      	beq.n	8005316 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052fe:	4b47      	ldr	r3, [pc, #284]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005306:	2b08      	cmp	r3, #8
 8005308:	d11c      	bne.n	8005344 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800530a:	4b44      	ldr	r3, [pc, #272]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d116      	bne.n	8005344 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005316:	4b41      	ldr	r3, [pc, #260]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d005      	beq.n	800532e <HAL_RCC_OscConfig+0x152>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d001      	beq.n	800532e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e1c7      	b.n	80056be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800532e:	4b3b      	ldr	r3, [pc, #236]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	4937      	ldr	r1, [pc, #220]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 800533e:	4313      	orrs	r3, r2
 8005340:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005342:	e03a      	b.n	80053ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d020      	beq.n	800538e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800534c:	4b34      	ldr	r3, [pc, #208]	@ (8005420 <HAL_RCC_OscConfig+0x244>)
 800534e:	2201      	movs	r2, #1
 8005350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005352:	f7fd ffb7 	bl	80032c4 <HAL_GetTick>
 8005356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800535a:	f7fd ffb3 	bl	80032c4 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e1a8      	b.n	80056be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800536c:	4b2b      	ldr	r3, [pc, #172]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0f0      	beq.n	800535a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005378:	4b28      	ldr	r3, [pc, #160]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	4925      	ldr	r1, [pc, #148]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 8005388:	4313      	orrs	r3, r2
 800538a:	600b      	str	r3, [r1, #0]
 800538c:	e015      	b.n	80053ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800538e:	4b24      	ldr	r3, [pc, #144]	@ (8005420 <HAL_RCC_OscConfig+0x244>)
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005394:	f7fd ff96 	bl	80032c4 <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800539c:	f7fd ff92 	bl	80032c4 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e187      	b.n	80056be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ae:	4b1b      	ldr	r3, [pc, #108]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1f0      	bne.n	800539c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0308 	and.w	r3, r3, #8
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d036      	beq.n	8005434 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d016      	beq.n	80053fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ce:	4b15      	ldr	r3, [pc, #84]	@ (8005424 <HAL_RCC_OscConfig+0x248>)
 80053d0:	2201      	movs	r2, #1
 80053d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d4:	f7fd ff76 	bl	80032c4 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053dc:	f7fd ff72 	bl	80032c4 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e167      	b.n	80056be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ee:	4b0b      	ldr	r3, [pc, #44]	@ (800541c <HAL_RCC_OscConfig+0x240>)
 80053f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0f0      	beq.n	80053dc <HAL_RCC_OscConfig+0x200>
 80053fa:	e01b      	b.n	8005434 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053fc:	4b09      	ldr	r3, [pc, #36]	@ (8005424 <HAL_RCC_OscConfig+0x248>)
 80053fe:	2200      	movs	r2, #0
 8005400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005402:	f7fd ff5f 	bl	80032c4 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005408:	e00e      	b.n	8005428 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800540a:	f7fd ff5b 	bl	80032c4 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d907      	bls.n	8005428 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e150      	b.n	80056be <HAL_RCC_OscConfig+0x4e2>
 800541c:	40023800 	.word	0x40023800
 8005420:	42470000 	.word	0x42470000
 8005424:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005428:	4b88      	ldr	r3, [pc, #544]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 800542a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1ea      	bne.n	800540a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 8097 	beq.w	8005570 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005442:	2300      	movs	r3, #0
 8005444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005446:	4b81      	ldr	r3, [pc, #516]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 8005448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10f      	bne.n	8005472 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005452:	2300      	movs	r3, #0
 8005454:	60bb      	str	r3, [r7, #8]
 8005456:	4b7d      	ldr	r3, [pc, #500]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 8005458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545a:	4a7c      	ldr	r2, [pc, #496]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 800545c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005460:	6413      	str	r3, [r2, #64]	@ 0x40
 8005462:	4b7a      	ldr	r3, [pc, #488]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800546a:	60bb      	str	r3, [r7, #8]
 800546c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800546e:	2301      	movs	r3, #1
 8005470:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005472:	4b77      	ldr	r3, [pc, #476]	@ (8005650 <HAL_RCC_OscConfig+0x474>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800547a:	2b00      	cmp	r3, #0
 800547c:	d118      	bne.n	80054b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800547e:	4b74      	ldr	r3, [pc, #464]	@ (8005650 <HAL_RCC_OscConfig+0x474>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a73      	ldr	r2, [pc, #460]	@ (8005650 <HAL_RCC_OscConfig+0x474>)
 8005484:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800548a:	f7fd ff1b 	bl	80032c4 <HAL_GetTick>
 800548e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005490:	e008      	b.n	80054a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005492:	f7fd ff17 	bl	80032c4 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e10c      	b.n	80056be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005650 <HAL_RCC_OscConfig+0x474>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0f0      	beq.n	8005492 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d106      	bne.n	80054c6 <HAL_RCC_OscConfig+0x2ea>
 80054b8:	4b64      	ldr	r3, [pc, #400]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 80054ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054bc:	4a63      	ldr	r2, [pc, #396]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 80054be:	f043 0301 	orr.w	r3, r3, #1
 80054c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80054c4:	e01c      	b.n	8005500 <HAL_RCC_OscConfig+0x324>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	2b05      	cmp	r3, #5
 80054cc:	d10c      	bne.n	80054e8 <HAL_RCC_OscConfig+0x30c>
 80054ce:	4b5f      	ldr	r3, [pc, #380]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 80054d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d2:	4a5e      	ldr	r2, [pc, #376]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 80054d4:	f043 0304 	orr.w	r3, r3, #4
 80054d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80054da:	4b5c      	ldr	r3, [pc, #368]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 80054dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054de:	4a5b      	ldr	r2, [pc, #364]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 80054e0:	f043 0301 	orr.w	r3, r3, #1
 80054e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80054e6:	e00b      	b.n	8005500 <HAL_RCC_OscConfig+0x324>
 80054e8:	4b58      	ldr	r3, [pc, #352]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 80054ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ec:	4a57      	ldr	r2, [pc, #348]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 80054ee:	f023 0301 	bic.w	r3, r3, #1
 80054f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80054f4:	4b55      	ldr	r3, [pc, #340]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 80054f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f8:	4a54      	ldr	r2, [pc, #336]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 80054fa:	f023 0304 	bic.w	r3, r3, #4
 80054fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d015      	beq.n	8005534 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005508:	f7fd fedc 	bl	80032c4 <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800550e:	e00a      	b.n	8005526 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005510:	f7fd fed8 	bl	80032c4 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800551e:	4293      	cmp	r3, r2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e0cb      	b.n	80056be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005526:	4b49      	ldr	r3, [pc, #292]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 8005528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0ee      	beq.n	8005510 <HAL_RCC_OscConfig+0x334>
 8005532:	e014      	b.n	800555e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005534:	f7fd fec6 	bl	80032c4 <HAL_GetTick>
 8005538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800553a:	e00a      	b.n	8005552 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800553c:	f7fd fec2 	bl	80032c4 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800554a:	4293      	cmp	r3, r2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e0b5      	b.n	80056be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005552:	4b3e      	ldr	r3, [pc, #248]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 8005554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1ee      	bne.n	800553c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800555e:	7dfb      	ldrb	r3, [r7, #23]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d105      	bne.n	8005570 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005564:	4b39      	ldr	r3, [pc, #228]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 8005566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005568:	4a38      	ldr	r2, [pc, #224]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 800556a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800556e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 80a1 	beq.w	80056bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800557a:	4b34      	ldr	r3, [pc, #208]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 030c 	and.w	r3, r3, #12
 8005582:	2b08      	cmp	r3, #8
 8005584:	d05c      	beq.n	8005640 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d141      	bne.n	8005612 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800558e:	4b31      	ldr	r3, [pc, #196]	@ (8005654 <HAL_RCC_OscConfig+0x478>)
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005594:	f7fd fe96 	bl	80032c4 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800559c:	f7fd fe92 	bl	80032c4 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e087      	b.n	80056be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ae:	4b27      	ldr	r3, [pc, #156]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1f0      	bne.n	800559c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69da      	ldr	r2, [r3, #28]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c8:	019b      	lsls	r3, r3, #6
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d0:	085b      	lsrs	r3, r3, #1
 80055d2:	3b01      	subs	r3, #1
 80055d4:	041b      	lsls	r3, r3, #16
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055dc:	061b      	lsls	r3, r3, #24
 80055de:	491b      	ldr	r1, [pc, #108]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005654 <HAL_RCC_OscConfig+0x478>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ea:	f7fd fe6b 	bl	80032c4 <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f0:	e008      	b.n	8005604 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f2:	f7fd fe67 	bl	80032c4 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e05c      	b.n	80056be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005604:	4b11      	ldr	r3, [pc, #68]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0f0      	beq.n	80055f2 <HAL_RCC_OscConfig+0x416>
 8005610:	e054      	b.n	80056bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005612:	4b10      	ldr	r3, [pc, #64]	@ (8005654 <HAL_RCC_OscConfig+0x478>)
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005618:	f7fd fe54 	bl	80032c4 <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005620:	f7fd fe50 	bl	80032c4 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e045      	b.n	80056be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005632:	4b06      	ldr	r3, [pc, #24]	@ (800564c <HAL_RCC_OscConfig+0x470>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f0      	bne.n	8005620 <HAL_RCC_OscConfig+0x444>
 800563e:	e03d      	b.n	80056bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d107      	bne.n	8005658 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e038      	b.n	80056be <HAL_RCC_OscConfig+0x4e2>
 800564c:	40023800 	.word	0x40023800
 8005650:	40007000 	.word	0x40007000
 8005654:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005658:	4b1b      	ldr	r3, [pc, #108]	@ (80056c8 <HAL_RCC_OscConfig+0x4ec>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d028      	beq.n	80056b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005670:	429a      	cmp	r2, r3
 8005672:	d121      	bne.n	80056b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800567e:	429a      	cmp	r2, r3
 8005680:	d11a      	bne.n	80056b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005688:	4013      	ands	r3, r2
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800568e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005690:	4293      	cmp	r3, r2
 8005692:	d111      	bne.n	80056b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569e:	085b      	lsrs	r3, r3, #1
 80056a0:	3b01      	subs	r3, #1
 80056a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d107      	bne.n	80056b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d001      	beq.n	80056bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e000      	b.n	80056be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	40023800 	.word	0x40023800

080056cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e0cc      	b.n	800587a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056e0:	4b68      	ldr	r3, [pc, #416]	@ (8005884 <HAL_RCC_ClockConfig+0x1b8>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d90c      	bls.n	8005708 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ee:	4b65      	ldr	r3, [pc, #404]	@ (8005884 <HAL_RCC_ClockConfig+0x1b8>)
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f6:	4b63      	ldr	r3, [pc, #396]	@ (8005884 <HAL_RCC_ClockConfig+0x1b8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	429a      	cmp	r2, r3
 8005702:	d001      	beq.n	8005708 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e0b8      	b.n	800587a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d020      	beq.n	8005756 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0304 	and.w	r3, r3, #4
 800571c:	2b00      	cmp	r3, #0
 800571e:	d005      	beq.n	800572c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005720:	4b59      	ldr	r3, [pc, #356]	@ (8005888 <HAL_RCC_ClockConfig+0x1bc>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	4a58      	ldr	r2, [pc, #352]	@ (8005888 <HAL_RCC_ClockConfig+0x1bc>)
 8005726:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800572a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b00      	cmp	r3, #0
 8005736:	d005      	beq.n	8005744 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005738:	4b53      	ldr	r3, [pc, #332]	@ (8005888 <HAL_RCC_ClockConfig+0x1bc>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	4a52      	ldr	r2, [pc, #328]	@ (8005888 <HAL_RCC_ClockConfig+0x1bc>)
 800573e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005742:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005744:	4b50      	ldr	r3, [pc, #320]	@ (8005888 <HAL_RCC_ClockConfig+0x1bc>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	494d      	ldr	r1, [pc, #308]	@ (8005888 <HAL_RCC_ClockConfig+0x1bc>)
 8005752:	4313      	orrs	r3, r2
 8005754:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d044      	beq.n	80057ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d107      	bne.n	800577a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800576a:	4b47      	ldr	r3, [pc, #284]	@ (8005888 <HAL_RCC_ClockConfig+0x1bc>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d119      	bne.n	80057aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e07f      	b.n	800587a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b02      	cmp	r3, #2
 8005780:	d003      	beq.n	800578a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005786:	2b03      	cmp	r3, #3
 8005788:	d107      	bne.n	800579a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800578a:	4b3f      	ldr	r3, [pc, #252]	@ (8005888 <HAL_RCC_ClockConfig+0x1bc>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d109      	bne.n	80057aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e06f      	b.n	800587a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800579a:	4b3b      	ldr	r3, [pc, #236]	@ (8005888 <HAL_RCC_ClockConfig+0x1bc>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e067      	b.n	800587a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057aa:	4b37      	ldr	r3, [pc, #220]	@ (8005888 <HAL_RCC_ClockConfig+0x1bc>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f023 0203 	bic.w	r2, r3, #3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	4934      	ldr	r1, [pc, #208]	@ (8005888 <HAL_RCC_ClockConfig+0x1bc>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057bc:	f7fd fd82 	bl	80032c4 <HAL_GetTick>
 80057c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057c2:	e00a      	b.n	80057da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057c4:	f7fd fd7e 	bl	80032c4 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e04f      	b.n	800587a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057da:	4b2b      	ldr	r3, [pc, #172]	@ (8005888 <HAL_RCC_ClockConfig+0x1bc>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 020c 	and.w	r2, r3, #12
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d1eb      	bne.n	80057c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057ec:	4b25      	ldr	r3, [pc, #148]	@ (8005884 <HAL_RCC_ClockConfig+0x1b8>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d20c      	bcs.n	8005814 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057fa:	4b22      	ldr	r3, [pc, #136]	@ (8005884 <HAL_RCC_ClockConfig+0x1b8>)
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005802:	4b20      	ldr	r3, [pc, #128]	@ (8005884 <HAL_RCC_ClockConfig+0x1b8>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d001      	beq.n	8005814 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e032      	b.n	800587a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b00      	cmp	r3, #0
 800581e:	d008      	beq.n	8005832 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005820:	4b19      	ldr	r3, [pc, #100]	@ (8005888 <HAL_RCC_ClockConfig+0x1bc>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	4916      	ldr	r1, [pc, #88]	@ (8005888 <HAL_RCC_ClockConfig+0x1bc>)
 800582e:	4313      	orrs	r3, r2
 8005830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b00      	cmp	r3, #0
 800583c:	d009      	beq.n	8005852 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800583e:	4b12      	ldr	r3, [pc, #72]	@ (8005888 <HAL_RCC_ClockConfig+0x1bc>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	490e      	ldr	r1, [pc, #56]	@ (8005888 <HAL_RCC_ClockConfig+0x1bc>)
 800584e:	4313      	orrs	r3, r2
 8005850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005852:	f000 f821 	bl	8005898 <HAL_RCC_GetSysClockFreq>
 8005856:	4602      	mov	r2, r0
 8005858:	4b0b      	ldr	r3, [pc, #44]	@ (8005888 <HAL_RCC_ClockConfig+0x1bc>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	091b      	lsrs	r3, r3, #4
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	490a      	ldr	r1, [pc, #40]	@ (800588c <HAL_RCC_ClockConfig+0x1c0>)
 8005864:	5ccb      	ldrb	r3, [r1, r3]
 8005866:	fa22 f303 	lsr.w	r3, r2, r3
 800586a:	4a09      	ldr	r2, [pc, #36]	@ (8005890 <HAL_RCC_ClockConfig+0x1c4>)
 800586c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800586e:	4b09      	ldr	r3, [pc, #36]	@ (8005894 <HAL_RCC_ClockConfig+0x1c8>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	f7fd fce2 	bl	800323c <HAL_InitTick>

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	40023c00 	.word	0x40023c00
 8005888:	40023800 	.word	0x40023800
 800588c:	08007c68 	.word	0x08007c68
 8005890:	20000010 	.word	0x20000010
 8005894:	20000014 	.word	0x20000014

08005898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800589c:	b094      	sub	sp, #80	@ 0x50
 800589e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058b0:	4b79      	ldr	r3, [pc, #484]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f003 030c 	and.w	r3, r3, #12
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d00d      	beq.n	80058d8 <HAL_RCC_GetSysClockFreq+0x40>
 80058bc:	2b08      	cmp	r3, #8
 80058be:	f200 80e1 	bhi.w	8005a84 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <HAL_RCC_GetSysClockFreq+0x34>
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d003      	beq.n	80058d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80058ca:	e0db      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058cc:	4b73      	ldr	r3, [pc, #460]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x204>)
 80058ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058d0:	e0db      	b.n	8005a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058d2:	4b73      	ldr	r3, [pc, #460]	@ (8005aa0 <HAL_RCC_GetSysClockFreq+0x208>)
 80058d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058d6:	e0d8      	b.n	8005a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058d8:	4b6f      	ldr	r3, [pc, #444]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058e2:	4b6d      	ldr	r3, [pc, #436]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d063      	beq.n	80059b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	099b      	lsrs	r3, r3, #6
 80058f4:	2200      	movs	r2, #0
 80058f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80058fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005900:	633b      	str	r3, [r7, #48]	@ 0x30
 8005902:	2300      	movs	r3, #0
 8005904:	637b      	str	r3, [r7, #52]	@ 0x34
 8005906:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800590a:	4622      	mov	r2, r4
 800590c:	462b      	mov	r3, r5
 800590e:	f04f 0000 	mov.w	r0, #0
 8005912:	f04f 0100 	mov.w	r1, #0
 8005916:	0159      	lsls	r1, r3, #5
 8005918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800591c:	0150      	lsls	r0, r2, #5
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4621      	mov	r1, r4
 8005924:	1a51      	subs	r1, r2, r1
 8005926:	6139      	str	r1, [r7, #16]
 8005928:	4629      	mov	r1, r5
 800592a:	eb63 0301 	sbc.w	r3, r3, r1
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	f04f 0200 	mov.w	r2, #0
 8005934:	f04f 0300 	mov.w	r3, #0
 8005938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800593c:	4659      	mov	r1, fp
 800593e:	018b      	lsls	r3, r1, #6
 8005940:	4651      	mov	r1, sl
 8005942:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005946:	4651      	mov	r1, sl
 8005948:	018a      	lsls	r2, r1, #6
 800594a:	4651      	mov	r1, sl
 800594c:	ebb2 0801 	subs.w	r8, r2, r1
 8005950:	4659      	mov	r1, fp
 8005952:	eb63 0901 	sbc.w	r9, r3, r1
 8005956:	f04f 0200 	mov.w	r2, #0
 800595a:	f04f 0300 	mov.w	r3, #0
 800595e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800596a:	4690      	mov	r8, r2
 800596c:	4699      	mov	r9, r3
 800596e:	4623      	mov	r3, r4
 8005970:	eb18 0303 	adds.w	r3, r8, r3
 8005974:	60bb      	str	r3, [r7, #8]
 8005976:	462b      	mov	r3, r5
 8005978:	eb49 0303 	adc.w	r3, r9, r3
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	f04f 0200 	mov.w	r2, #0
 8005982:	f04f 0300 	mov.w	r3, #0
 8005986:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800598a:	4629      	mov	r1, r5
 800598c:	024b      	lsls	r3, r1, #9
 800598e:	4621      	mov	r1, r4
 8005990:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005994:	4621      	mov	r1, r4
 8005996:	024a      	lsls	r2, r1, #9
 8005998:	4610      	mov	r0, r2
 800599a:	4619      	mov	r1, r3
 800599c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800599e:	2200      	movs	r2, #0
 80059a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059a8:	f7fa fc20 	bl	80001ec <__aeabi_uldivmod>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	4613      	mov	r3, r2
 80059b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059b4:	e058      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059b6:	4b38      	ldr	r3, [pc, #224]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	099b      	lsrs	r3, r3, #6
 80059bc:	2200      	movs	r2, #0
 80059be:	4618      	mov	r0, r3
 80059c0:	4611      	mov	r1, r2
 80059c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059c6:	623b      	str	r3, [r7, #32]
 80059c8:	2300      	movs	r3, #0
 80059ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80059cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059d0:	4642      	mov	r2, r8
 80059d2:	464b      	mov	r3, r9
 80059d4:	f04f 0000 	mov.w	r0, #0
 80059d8:	f04f 0100 	mov.w	r1, #0
 80059dc:	0159      	lsls	r1, r3, #5
 80059de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059e2:	0150      	lsls	r0, r2, #5
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	4641      	mov	r1, r8
 80059ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80059ee:	4649      	mov	r1, r9
 80059f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a08:	ebb2 040a 	subs.w	r4, r2, sl
 8005a0c:	eb63 050b 	sbc.w	r5, r3, fp
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	f04f 0300 	mov.w	r3, #0
 8005a18:	00eb      	lsls	r3, r5, #3
 8005a1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a1e:	00e2      	lsls	r2, r4, #3
 8005a20:	4614      	mov	r4, r2
 8005a22:	461d      	mov	r5, r3
 8005a24:	4643      	mov	r3, r8
 8005a26:	18e3      	adds	r3, r4, r3
 8005a28:	603b      	str	r3, [r7, #0]
 8005a2a:	464b      	mov	r3, r9
 8005a2c:	eb45 0303 	adc.w	r3, r5, r3
 8005a30:	607b      	str	r3, [r7, #4]
 8005a32:	f04f 0200 	mov.w	r2, #0
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a3e:	4629      	mov	r1, r5
 8005a40:	028b      	lsls	r3, r1, #10
 8005a42:	4621      	mov	r1, r4
 8005a44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a48:	4621      	mov	r1, r4
 8005a4a:	028a      	lsls	r2, r1, #10
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a52:	2200      	movs	r2, #0
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	61fa      	str	r2, [r7, #28]
 8005a58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a5c:	f7fa fbc6 	bl	80001ec <__aeabi_uldivmod>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4613      	mov	r3, r2
 8005a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005a68:	4b0b      	ldr	r3, [pc, #44]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	0c1b      	lsrs	r3, r3, #16
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	3301      	adds	r3, #1
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005a78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a82:	e002      	b.n	8005a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a84:	4b05      	ldr	r3, [pc, #20]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x204>)
 8005a86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3750      	adds	r7, #80	@ 0x50
 8005a90:	46bd      	mov	sp, r7
 8005a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a96:	bf00      	nop
 8005a98:	40023800 	.word	0x40023800
 8005a9c:	00f42400 	.word	0x00f42400
 8005aa0:	007a1200 	.word	0x007a1200

08005aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005aa8:	4b03      	ldr	r3, [pc, #12]	@ (8005ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	20000010 	.word	0x20000010

08005abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ac0:	f7ff fff0 	bl	8005aa4 <HAL_RCC_GetHCLKFreq>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	4b05      	ldr	r3, [pc, #20]	@ (8005adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	0a9b      	lsrs	r3, r3, #10
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	4903      	ldr	r1, [pc, #12]	@ (8005ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ad2:	5ccb      	ldrb	r3, [r1, r3]
 8005ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	40023800 	.word	0x40023800
 8005ae0:	08007c78 	.word	0x08007c78

08005ae4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10b      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d105      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d075      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b18:	4b91      	ldr	r3, [pc, #580]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b1e:	f7fd fbd1 	bl	80032c4 <HAL_GetTick>
 8005b22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b24:	e008      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b26:	f7fd fbcd 	bl	80032c4 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e189      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b38:	4b8a      	ldr	r3, [pc, #552]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1f0      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d009      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	019a      	lsls	r2, r3, #6
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	071b      	lsls	r3, r3, #28
 8005b5c:	4981      	ldr	r1, [pc, #516]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01f      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b70:	4b7c      	ldr	r3, [pc, #496]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b76:	0f1b      	lsrs	r3, r3, #28
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	019a      	lsls	r2, r3, #6
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	061b      	lsls	r3, r3, #24
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	071b      	lsls	r3, r3, #28
 8005b90:	4974      	ldr	r1, [pc, #464]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b98:	4b72      	ldr	r3, [pc, #456]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b9e:	f023 021f 	bic.w	r2, r3, #31
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	496e      	ldr	r1, [pc, #440]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00d      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	019a      	lsls	r2, r3, #6
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	061b      	lsls	r3, r3, #24
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	071b      	lsls	r3, r3, #28
 8005bd0:	4964      	ldr	r1, [pc, #400]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bd8:	4b61      	ldr	r3, [pc, #388]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005bda:	2201      	movs	r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bde:	f7fd fb71 	bl	80032c4 <HAL_GetTick>
 8005be2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005be4:	e008      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005be6:	f7fd fb6d 	bl	80032c4 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e129      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bf8:	4b5a      	ldr	r3, [pc, #360]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0f0      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d105      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d079      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c1c:	4b52      	ldr	r3, [pc, #328]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c22:	f7fd fb4f 	bl	80032c4 <HAL_GetTick>
 8005c26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c28:	e008      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c2a:	f7fd fb4b 	bl	80032c4 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e107      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c3c:	4b49      	ldr	r3, [pc, #292]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c48:	d0ef      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d020      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c56:	4b43      	ldr	r3, [pc, #268]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c5c:	0f1b      	lsrs	r3, r3, #28
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	019a      	lsls	r2, r3, #6
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	061b      	lsls	r3, r3, #24
 8005c70:	431a      	orrs	r2, r3
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	071b      	lsls	r3, r3, #28
 8005c76:	493b      	ldr	r1, [pc, #236]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c7e:	4b39      	ldr	r3, [pc, #228]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c84:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	021b      	lsls	r3, r3, #8
 8005c90:	4934      	ldr	r1, [pc, #208]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0308 	and.w	r3, r3, #8
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d01e      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005caa:	0e1b      	lsrs	r3, r3, #24
 8005cac:	f003 030f 	and.w	r3, r3, #15
 8005cb0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	019a      	lsls	r2, r3, #6
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	061b      	lsls	r3, r3, #24
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	071b      	lsls	r3, r3, #28
 8005cc4:	4927      	ldr	r1, [pc, #156]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ccc:	4b25      	ldr	r3, [pc, #148]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cd2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cda:	4922      	ldr	r1, [pc, #136]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ce2:	4b21      	ldr	r3, [pc, #132]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ce8:	f7fd faec 	bl	80032c4 <HAL_GetTick>
 8005cec:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cee:	e008      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005cf0:	f7fd fae8 	bl	80032c4 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e0a4      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d02:	4b18      	ldr	r3, [pc, #96]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d0e:	d1ef      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0320 	and.w	r3, r3, #32
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 808b 	beq.w	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60fb      	str	r3, [r7, #12]
 8005d22:	4b10      	ldr	r3, [pc, #64]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d26:	4a0f      	ldr	r2, [pc, #60]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a0b      	ldr	r2, [pc, #44]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d44:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d46:	f7fd fabd 	bl	80032c4 <HAL_GetTick>
 8005d4a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d4c:	e010      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d4e:	f7fd fab9 	bl	80032c4 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d909      	bls.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e075      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005d60:	42470068 	.word	0x42470068
 8005d64:	40023800 	.word	0x40023800
 8005d68:	42470070 	.word	0x42470070
 8005d6c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d70:	4b38      	ldr	r3, [pc, #224]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0e8      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d7c:	4b36      	ldr	r3, [pc, #216]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d84:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d02f      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d028      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005da2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005da4:	4b2d      	ldr	r3, [pc, #180]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005da6:	2201      	movs	r2, #1
 8005da8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005daa:	4b2c      	ldr	r3, [pc, #176]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005db0:	4a29      	ldr	r2, [pc, #164]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005db6:	4b28      	ldr	r3, [pc, #160]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d114      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005dc2:	f7fd fa7f 	bl	80032c4 <HAL_GetTick>
 8005dc6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dc8:	e00a      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dca:	f7fd fa7b 	bl	80032c4 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d901      	bls.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e035      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de0:	4b1d      	ldr	r3, [pc, #116]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d0ee      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005df4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005df8:	d10d      	bne.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005dfa:	4b17      	ldr	r3, [pc, #92]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e06:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005e0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e0e:	4912      	ldr	r1, [pc, #72]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	608b      	str	r3, [r1, #8]
 8005e14:	e005      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005e16:	4b10      	ldr	r3, [pc, #64]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e1c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005e20:	6093      	str	r3, [r2, #8]
 8005e22:	4b0d      	ldr	r3, [pc, #52]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e24:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e2e:	490a      	ldr	r1, [pc, #40]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0310 	and.w	r3, r3, #16
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d004      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005e46:	4b06      	ldr	r3, [pc, #24]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005e48:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	40007000 	.word	0x40007000
 8005e58:	40023800 	.word	0x40023800
 8005e5c:	42470e40 	.word	0x42470e40
 8005e60:	424711e0 	.word	0x424711e0

08005e64 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e01c      	b.n	8005eb0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	795b      	ldrb	r3, [r3, #5]
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d105      	bne.n	8005e8c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7fc fd52 	bl	8002930 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0204 	orr.w	r2, r2, #4
 8005ea0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e07b      	b.n	8005fc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d108      	bne.n	8005ee4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005eda:	d009      	beq.n	8005ef0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	61da      	str	r2, [r3, #28]
 8005ee2:	e005      	b.n	8005ef0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d106      	bne.n	8005f10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7fc fd32 	bl	8002974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f42:	431a      	orrs	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f60:	431a      	orrs	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f74:	ea42 0103 	orr.w	r1, r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	0c1b      	lsrs	r3, r3, #16
 8005f8e:	f003 0104 	and.w	r1, r3, #4
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f96:	f003 0210 	and.w	r2, r3, #16
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69da      	ldr	r2, [r3, #28]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005fb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b082      	sub	sp, #8
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e01a      	b.n	8006012 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ff2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7fc fd05 	bl	8002a04 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b088      	sub	sp, #32
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	603b      	str	r3, [r7, #0]
 8006026:	4613      	mov	r3, r2
 8006028:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800602a:	f7fd f94b 	bl	80032c4 <HAL_GetTick>
 800602e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006030:	88fb      	ldrh	r3, [r7, #6]
 8006032:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b01      	cmp	r3, #1
 800603e:	d001      	beq.n	8006044 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006040:	2302      	movs	r3, #2
 8006042:	e12a      	b.n	800629a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <HAL_SPI_Transmit+0x36>
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e122      	b.n	800629a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_SPI_Transmit+0x48>
 800605e:	2302      	movs	r3, #2
 8006060:	e11b      	b.n	800629a <HAL_SPI_Transmit+0x280>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2203      	movs	r2, #3
 800606e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	88fa      	ldrh	r2, [r7, #6]
 8006082:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	88fa      	ldrh	r2, [r7, #6]
 8006088:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060b0:	d10f      	bne.n	80060d2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060dc:	2b40      	cmp	r3, #64	@ 0x40
 80060de:	d007      	beq.n	80060f0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060f8:	d152      	bne.n	80061a0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <HAL_SPI_Transmit+0xee>
 8006102:	8b7b      	ldrh	r3, [r7, #26]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d145      	bne.n	8006194 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800610c:	881a      	ldrh	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006118:	1c9a      	adds	r2, r3, #2
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006122:	b29b      	uxth	r3, r3
 8006124:	3b01      	subs	r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800612c:	e032      	b.n	8006194 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b02      	cmp	r3, #2
 800613a:	d112      	bne.n	8006162 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006140:	881a      	ldrh	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614c:	1c9a      	adds	r2, r3, #2
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006156:	b29b      	uxth	r3, r3
 8006158:	3b01      	subs	r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006160:	e018      	b.n	8006194 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006162:	f7fd f8af 	bl	80032c4 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	429a      	cmp	r2, r3
 8006170:	d803      	bhi.n	800617a <HAL_SPI_Transmit+0x160>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006178:	d102      	bne.n	8006180 <HAL_SPI_Transmit+0x166>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d109      	bne.n	8006194 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e082      	b.n	800629a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006198:	b29b      	uxth	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1c7      	bne.n	800612e <HAL_SPI_Transmit+0x114>
 800619e:	e053      	b.n	8006248 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <HAL_SPI_Transmit+0x194>
 80061a8:	8b7b      	ldrh	r3, [r7, #26]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d147      	bne.n	800623e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	330c      	adds	r3, #12
 80061b8:	7812      	ldrb	r2, [r2, #0]
 80061ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80061d4:	e033      	b.n	800623e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d113      	bne.n	800620c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	330c      	adds	r3, #12
 80061ee:	7812      	ldrb	r2, [r2, #0]
 80061f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006200:	b29b      	uxth	r3, r3
 8006202:	3b01      	subs	r3, #1
 8006204:	b29a      	uxth	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	86da      	strh	r2, [r3, #54]	@ 0x36
 800620a:	e018      	b.n	800623e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800620c:	f7fd f85a 	bl	80032c4 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	429a      	cmp	r2, r3
 800621a:	d803      	bhi.n	8006224 <HAL_SPI_Transmit+0x20a>
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006222:	d102      	bne.n	800622a <HAL_SPI_Transmit+0x210>
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d109      	bne.n	800623e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e02d      	b.n	800629a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006242:	b29b      	uxth	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1c6      	bne.n	80061d6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006248:	69fa      	ldr	r2, [r7, #28]
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 f8bf 	bl	80063d0 <SPI_EndRxTxTransaction>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10a      	bne.n	800627c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006266:	2300      	movs	r3, #0
 8006268:	617b      	str	r3, [r7, #20]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	617b      	str	r3, [r7, #20]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e000      	b.n	800629a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006298:	2300      	movs	r3, #0
  }
}
 800629a:	4618      	mov	r0, r3
 800629c:	3720      	adds	r7, #32
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b083      	sub	sp, #12
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062b0:	b2db      	uxtb	r3, r3
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
	...

080062c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b088      	sub	sp, #32
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	603b      	str	r3, [r7, #0]
 80062cc:	4613      	mov	r3, r2
 80062ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062d0:	f7fc fff8 	bl	80032c4 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d8:	1a9b      	subs	r3, r3, r2
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	4413      	add	r3, r2
 80062de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062e0:	f7fc fff0 	bl	80032c4 <HAL_GetTick>
 80062e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062e6:	4b39      	ldr	r3, [pc, #228]	@ (80063cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	015b      	lsls	r3, r3, #5
 80062ec:	0d1b      	lsrs	r3, r3, #20
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	fb02 f303 	mul.w	r3, r2, r3
 80062f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062f6:	e054      	b.n	80063a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fe:	d050      	beq.n	80063a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006300:	f7fc ffe0 	bl	80032c4 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	69fa      	ldr	r2, [r7, #28]
 800630c:	429a      	cmp	r2, r3
 800630e:	d902      	bls.n	8006316 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d13d      	bne.n	8006392 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006324:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800632e:	d111      	bne.n	8006354 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006338:	d004      	beq.n	8006344 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006342:	d107      	bne.n	8006354 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006352:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006358:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800635c:	d10f      	bne.n	800637e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800637c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e017      	b.n	80063c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	3b01      	subs	r3, #1
 80063a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4013      	ands	r3, r2
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	bf0c      	ite	eq
 80063b2:	2301      	moveq	r3, #1
 80063b4:	2300      	movne	r3, #0
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d19b      	bne.n	80062f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3720      	adds	r7, #32
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	20000010 	.word	0x20000010

080063d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2201      	movs	r2, #1
 80063e4:	2102      	movs	r1, #2
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f7ff ff6a 	bl	80062c0 <SPI_WaitFlagStateUntilTimeout>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d007      	beq.n	8006402 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063f6:	f043 0220 	orr.w	r2, r3, #32
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e032      	b.n	8006468 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006402:	4b1b      	ldr	r3, [pc, #108]	@ (8006470 <SPI_EndRxTxTransaction+0xa0>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a1b      	ldr	r2, [pc, #108]	@ (8006474 <SPI_EndRxTxTransaction+0xa4>)
 8006408:	fba2 2303 	umull	r2, r3, r2, r3
 800640c:	0d5b      	lsrs	r3, r3, #21
 800640e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006412:	fb02 f303 	mul.w	r3, r2, r3
 8006416:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006420:	d112      	bne.n	8006448 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2200      	movs	r2, #0
 800642a:	2180      	movs	r1, #128	@ 0x80
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f7ff ff47 	bl	80062c0 <SPI_WaitFlagStateUntilTimeout>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d016      	beq.n	8006466 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800643c:	f043 0220 	orr.w	r2, r3, #32
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e00f      	b.n	8006468 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	3b01      	subs	r3, #1
 8006452:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645e:	2b80      	cmp	r3, #128	@ 0x80
 8006460:	d0f2      	beq.n	8006448 <SPI_EndRxTxTransaction+0x78>
 8006462:	e000      	b.n	8006466 <SPI_EndRxTxTransaction+0x96>
        break;
 8006464:	bf00      	nop
  }

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	20000010 	.word	0x20000010
 8006474:	165e9f81 	.word	0x165e9f81

08006478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e041      	b.n	800650e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d106      	bne.n	80064a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7fc face 	bl	8002a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3304      	adds	r3, #4
 80064b4:	4619      	mov	r1, r3
 80064b6:	4610      	mov	r0, r2
 80064b8:	f000 f8f4 	bl	80066a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b084      	sub	sp, #16
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006520:	2300      	movs	r3, #0
 8006522:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800652a:	2b01      	cmp	r3, #1
 800652c:	d101      	bne.n	8006532 <HAL_TIM_ConfigClockSource+0x1c>
 800652e:	2302      	movs	r3, #2
 8006530:	e0b4      	b.n	800669c <HAL_TIM_ConfigClockSource+0x186>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2202      	movs	r2, #2
 800653e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006550:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006558:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800656a:	d03e      	beq.n	80065ea <HAL_TIM_ConfigClockSource+0xd4>
 800656c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006570:	f200 8087 	bhi.w	8006682 <HAL_TIM_ConfigClockSource+0x16c>
 8006574:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006578:	f000 8086 	beq.w	8006688 <HAL_TIM_ConfigClockSource+0x172>
 800657c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006580:	d87f      	bhi.n	8006682 <HAL_TIM_ConfigClockSource+0x16c>
 8006582:	2b70      	cmp	r3, #112	@ 0x70
 8006584:	d01a      	beq.n	80065bc <HAL_TIM_ConfigClockSource+0xa6>
 8006586:	2b70      	cmp	r3, #112	@ 0x70
 8006588:	d87b      	bhi.n	8006682 <HAL_TIM_ConfigClockSource+0x16c>
 800658a:	2b60      	cmp	r3, #96	@ 0x60
 800658c:	d050      	beq.n	8006630 <HAL_TIM_ConfigClockSource+0x11a>
 800658e:	2b60      	cmp	r3, #96	@ 0x60
 8006590:	d877      	bhi.n	8006682 <HAL_TIM_ConfigClockSource+0x16c>
 8006592:	2b50      	cmp	r3, #80	@ 0x50
 8006594:	d03c      	beq.n	8006610 <HAL_TIM_ConfigClockSource+0xfa>
 8006596:	2b50      	cmp	r3, #80	@ 0x50
 8006598:	d873      	bhi.n	8006682 <HAL_TIM_ConfigClockSource+0x16c>
 800659a:	2b40      	cmp	r3, #64	@ 0x40
 800659c:	d058      	beq.n	8006650 <HAL_TIM_ConfigClockSource+0x13a>
 800659e:	2b40      	cmp	r3, #64	@ 0x40
 80065a0:	d86f      	bhi.n	8006682 <HAL_TIM_ConfigClockSource+0x16c>
 80065a2:	2b30      	cmp	r3, #48	@ 0x30
 80065a4:	d064      	beq.n	8006670 <HAL_TIM_ConfigClockSource+0x15a>
 80065a6:	2b30      	cmp	r3, #48	@ 0x30
 80065a8:	d86b      	bhi.n	8006682 <HAL_TIM_ConfigClockSource+0x16c>
 80065aa:	2b20      	cmp	r3, #32
 80065ac:	d060      	beq.n	8006670 <HAL_TIM_ConfigClockSource+0x15a>
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	d867      	bhi.n	8006682 <HAL_TIM_ConfigClockSource+0x16c>
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d05c      	beq.n	8006670 <HAL_TIM_ConfigClockSource+0x15a>
 80065b6:	2b10      	cmp	r3, #16
 80065b8:	d05a      	beq.n	8006670 <HAL_TIM_ConfigClockSource+0x15a>
 80065ba:	e062      	b.n	8006682 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065cc:	f000 f990 	bl	80068f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80065de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	609a      	str	r2, [r3, #8]
      break;
 80065e8:	e04f      	b.n	800668a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065fa:	f000 f979 	bl	80068f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800660c:	609a      	str	r2, [r3, #8]
      break;
 800660e:	e03c      	b.n	800668a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800661c:	461a      	mov	r2, r3
 800661e:	f000 f8ed 	bl	80067fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2150      	movs	r1, #80	@ 0x50
 8006628:	4618      	mov	r0, r3
 800662a:	f000 f946 	bl	80068ba <TIM_ITRx_SetConfig>
      break;
 800662e:	e02c      	b.n	800668a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800663c:	461a      	mov	r2, r3
 800663e:	f000 f90c 	bl	800685a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2160      	movs	r1, #96	@ 0x60
 8006648:	4618      	mov	r0, r3
 800664a:	f000 f936 	bl	80068ba <TIM_ITRx_SetConfig>
      break;
 800664e:	e01c      	b.n	800668a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800665c:	461a      	mov	r2, r3
 800665e:	f000 f8cd 	bl	80067fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2140      	movs	r1, #64	@ 0x40
 8006668:	4618      	mov	r0, r3
 800666a:	f000 f926 	bl	80068ba <TIM_ITRx_SetConfig>
      break;
 800666e:	e00c      	b.n	800668a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4619      	mov	r1, r3
 800667a:	4610      	mov	r0, r2
 800667c:	f000 f91d 	bl	80068ba <TIM_ITRx_SetConfig>
      break;
 8006680:	e003      	b.n	800668a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	73fb      	strb	r3, [r7, #15]
      break;
 8006686:	e000      	b.n	800668a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006688:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800669a:	7bfb      	ldrb	r3, [r7, #15]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a46      	ldr	r2, [pc, #280]	@ (80067d0 <TIM_Base_SetConfig+0x12c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d013      	beq.n	80066e4 <TIM_Base_SetConfig+0x40>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066c2:	d00f      	beq.n	80066e4 <TIM_Base_SetConfig+0x40>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a43      	ldr	r2, [pc, #268]	@ (80067d4 <TIM_Base_SetConfig+0x130>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d00b      	beq.n	80066e4 <TIM_Base_SetConfig+0x40>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a42      	ldr	r2, [pc, #264]	@ (80067d8 <TIM_Base_SetConfig+0x134>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d007      	beq.n	80066e4 <TIM_Base_SetConfig+0x40>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a41      	ldr	r2, [pc, #260]	@ (80067dc <TIM_Base_SetConfig+0x138>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d003      	beq.n	80066e4 <TIM_Base_SetConfig+0x40>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a40      	ldr	r2, [pc, #256]	@ (80067e0 <TIM_Base_SetConfig+0x13c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d108      	bne.n	80066f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a35      	ldr	r2, [pc, #212]	@ (80067d0 <TIM_Base_SetConfig+0x12c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d02b      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006704:	d027      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a32      	ldr	r2, [pc, #200]	@ (80067d4 <TIM_Base_SetConfig+0x130>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d023      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a31      	ldr	r2, [pc, #196]	@ (80067d8 <TIM_Base_SetConfig+0x134>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d01f      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a30      	ldr	r2, [pc, #192]	@ (80067dc <TIM_Base_SetConfig+0x138>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d01b      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a2f      	ldr	r2, [pc, #188]	@ (80067e0 <TIM_Base_SetConfig+0x13c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d017      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a2e      	ldr	r2, [pc, #184]	@ (80067e4 <TIM_Base_SetConfig+0x140>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d013      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a2d      	ldr	r2, [pc, #180]	@ (80067e8 <TIM_Base_SetConfig+0x144>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00f      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a2c      	ldr	r2, [pc, #176]	@ (80067ec <TIM_Base_SetConfig+0x148>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d00b      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a2b      	ldr	r2, [pc, #172]	@ (80067f0 <TIM_Base_SetConfig+0x14c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d007      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a2a      	ldr	r2, [pc, #168]	@ (80067f4 <TIM_Base_SetConfig+0x150>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d003      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a29      	ldr	r2, [pc, #164]	@ (80067f8 <TIM_Base_SetConfig+0x154>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d108      	bne.n	8006768 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800675c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a10      	ldr	r2, [pc, #64]	@ (80067d0 <TIM_Base_SetConfig+0x12c>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d003      	beq.n	800679c <TIM_Base_SetConfig+0xf8>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a12      	ldr	r2, [pc, #72]	@ (80067e0 <TIM_Base_SetConfig+0x13c>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d103      	bne.n	80067a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	691a      	ldr	r2, [r3, #16]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d105      	bne.n	80067c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f023 0201 	bic.w	r2, r3, #1
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	611a      	str	r2, [r3, #16]
  }
}
 80067c2:	bf00      	nop
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	40010000 	.word	0x40010000
 80067d4:	40000400 	.word	0x40000400
 80067d8:	40000800 	.word	0x40000800
 80067dc:	40000c00 	.word	0x40000c00
 80067e0:	40010400 	.word	0x40010400
 80067e4:	40014000 	.word	0x40014000
 80067e8:	40014400 	.word	0x40014400
 80067ec:	40014800 	.word	0x40014800
 80067f0:	40001800 	.word	0x40001800
 80067f4:	40001c00 	.word	0x40001c00
 80067f8:	40002000 	.word	0x40002000

080067fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	f023 0201 	bic.w	r2, r3, #1
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	011b      	lsls	r3, r3, #4
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	4313      	orrs	r3, r2
 8006830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f023 030a 	bic.w	r3, r3, #10
 8006838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	621a      	str	r2, [r3, #32]
}
 800684e:	bf00      	nop
 8006850:	371c      	adds	r7, #28
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800685a:	b480      	push	{r7}
 800685c:	b087      	sub	sp, #28
 800685e:	af00      	add	r7, sp, #0
 8006860:	60f8      	str	r0, [r7, #12]
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	f023 0210 	bic.w	r2, r3, #16
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006884:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	031b      	lsls	r3, r3, #12
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	4313      	orrs	r3, r2
 800688e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006896:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	4313      	orrs	r3, r2
 80068a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	621a      	str	r2, [r3, #32]
}
 80068ae:	bf00      	nop
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b085      	sub	sp, #20
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	f043 0307 	orr.w	r3, r3, #7
 80068dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	609a      	str	r2, [r3, #8]
}
 80068e4:	bf00      	nop
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800690a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	021a      	lsls	r2, r3, #8
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	431a      	orrs	r2, r3
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	4313      	orrs	r3, r2
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	4313      	orrs	r3, r2
 800691c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	609a      	str	r2, [r3, #8]
}
 8006924:	bf00      	nop
 8006926:	371c      	adds	r7, #28
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006940:	2b01      	cmp	r3, #1
 8006942:	d101      	bne.n	8006948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006944:	2302      	movs	r3, #2
 8006946:	e05a      	b.n	80069fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800696e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	4313      	orrs	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a21      	ldr	r2, [pc, #132]	@ (8006a0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d022      	beq.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006994:	d01d      	beq.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a1d      	ldr	r2, [pc, #116]	@ (8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d018      	beq.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006a14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d013      	beq.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a1a      	ldr	r2, [pc, #104]	@ (8006a18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d00e      	beq.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a18      	ldr	r2, [pc, #96]	@ (8006a1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d009      	beq.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a17      	ldr	r2, [pc, #92]	@ (8006a20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d004      	beq.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a15      	ldr	r2, [pc, #84]	@ (8006a24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d10c      	bne.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	40010000 	.word	0x40010000
 8006a10:	40000400 	.word	0x40000400
 8006a14:	40000800 	.word	0x40000800
 8006a18:	40000c00 	.word	0x40000c00
 8006a1c:	40010400 	.word	0x40010400
 8006a20:	40014000 	.word	0x40014000
 8006a24:	40001800 	.word	0x40001800

08006a28 <memset>:
 8006a28:	4402      	add	r2, r0
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d100      	bne.n	8006a32 <memset+0xa>
 8006a30:	4770      	bx	lr
 8006a32:	f803 1b01 	strb.w	r1, [r3], #1
 8006a36:	e7f9      	b.n	8006a2c <memset+0x4>

08006a38 <__libc_init_array>:
 8006a38:	b570      	push	{r4, r5, r6, lr}
 8006a3a:	4d0d      	ldr	r5, [pc, #52]	@ (8006a70 <__libc_init_array+0x38>)
 8006a3c:	4c0d      	ldr	r4, [pc, #52]	@ (8006a74 <__libc_init_array+0x3c>)
 8006a3e:	1b64      	subs	r4, r4, r5
 8006a40:	10a4      	asrs	r4, r4, #2
 8006a42:	2600      	movs	r6, #0
 8006a44:	42a6      	cmp	r6, r4
 8006a46:	d109      	bne.n	8006a5c <__libc_init_array+0x24>
 8006a48:	4d0b      	ldr	r5, [pc, #44]	@ (8006a78 <__libc_init_array+0x40>)
 8006a4a:	4c0c      	ldr	r4, [pc, #48]	@ (8006a7c <__libc_init_array+0x44>)
 8006a4c:	f000 f818 	bl	8006a80 <_init>
 8006a50:	1b64      	subs	r4, r4, r5
 8006a52:	10a4      	asrs	r4, r4, #2
 8006a54:	2600      	movs	r6, #0
 8006a56:	42a6      	cmp	r6, r4
 8006a58:	d105      	bne.n	8006a66 <__libc_init_array+0x2e>
 8006a5a:	bd70      	pop	{r4, r5, r6, pc}
 8006a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a60:	4798      	blx	r3
 8006a62:	3601      	adds	r6, #1
 8006a64:	e7ee      	b.n	8006a44 <__libc_init_array+0xc>
 8006a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a6a:	4798      	blx	r3
 8006a6c:	3601      	adds	r6, #1
 8006a6e:	e7f2      	b.n	8006a56 <__libc_init_array+0x1e>
 8006a70:	08007c88 	.word	0x08007c88
 8006a74:	08007c88 	.word	0x08007c88
 8006a78:	08007c88 	.word	0x08007c88
 8006a7c:	08007c8c 	.word	0x08007c8c

08006a80 <_init>:
 8006a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a82:	bf00      	nop
 8006a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a86:	bc08      	pop	{r3}
 8006a88:	469e      	mov	lr, r3
 8006a8a:	4770      	bx	lr

08006a8c <_fini>:
 8006a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8e:	bf00      	nop
 8006a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a92:	bc08      	pop	{r3}
 8006a94:	469e      	mov	lr, r3
 8006a96:	4770      	bx	lr
