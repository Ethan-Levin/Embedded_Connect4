
Embedded_Connect4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006740  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e8  080068ec  080068ec  000078ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ad4  08007ad4  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  08007ad4  08007ad4  00008ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007adc  08007adc  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007adc  08007adc  00008adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ae0  08007ae0  00008ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08007ae4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000901c  2**0
                  CONTENTS
 10 .bss          00025bf0  2000001c  2000001c  0000901c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025c0c  20025c0c  0000901c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013df2  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031ca  00000000  00000000  0001ce3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  00020008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fed  00000000  00000000  000214a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c9c  00000000  00000000  0002248d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000189fb  00000000  00000000  00049129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2fa9  00000000  00000000  00061b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00144acd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055e8  00000000  00000000  00144b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  0014a0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080068d4 	.word	0x080068d4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	080068d4 	.word	0x080068d4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f002 fd70 	bl	8002fc4 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 fa30 	bl	8000948 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 f9ed 	bl	80008c8 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80004ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 fc0a 	bl	8000d0c <LCD_Clear>

    buttonInit();
 80004f8:	f000 f81c 	bl	8000534 <buttonInit>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80004fc:	f001 f882 	bl	8001604 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 8000500:	4b02      	ldr	r3, [pc, #8]	@ (800050c <ApplicationInit+0x30>)
 8000502:	2201      	movs	r2, #1
 8000504:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000038 	.word	0x20000038

08000510 <LCD_Start_Screen>:
void LCD_Visual_Demo(void)
{
	visualDemo();
}

void LCD_Start_Screen(){
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	LCD_Draw_Start_Screen();
 8000514:	f000 ff1a 	bl	800134c <LCD_Draw_Start_Screen>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}

0800051c <LCD_Game_Screen>:

void LCD_Game_Screen(){
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	LCD_Draw_Game_Grid();
 8000520:	f000 ff22 	bl	8001368 <LCD_Draw_Game_Grid>
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}

08000528 <LCD_Score_Screen>:


void LCD_Score_Screen(){
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	LCD_Draw_Score_Screen();
 800052c:	f000 ffa2 	bl	8001474 <LCD_Draw_Score_Screen>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <buttonInit>:

void buttonInit(){
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	Button_Init();
 8000538:	f000 f862 	bl	8000600 <Button_Init>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}

08000540 <LCD_Touch_Polling_Game>:
				LCD_Clear(0, LCD_COLOR_GREEN);
			}
		}
}

void LCD_Touch_Polling_Game(){
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	/* If touch pressed */
	if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000544:	4809      	ldr	r0, [pc, #36]	@ (800056c <LCD_Touch_Polling_Game+0x2c>)
 8000546:	f001 f868 	bl	800161a <returnTouchStateAndLocation>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d10a      	bne.n	8000566 <LCD_Touch_Polling_Game+0x26>
		/* Touch valid */
		if(StaticTouchData.x < LCD_PIXEL_WIDTH/2){
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <LCD_Touch_Polling_Game+0x2c>)
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	2b77      	cmp	r3, #119	@ 0x77
 8000556:	d803      	bhi.n	8000560 <LCD_Touch_Polling_Game+0x20>
			//left side
			LCD_Update_Chip_To_Drop(LEFT);
 8000558:	2001      	movs	r0, #1
 800055a:	f000 facb 	bl	8000af4 <LCD_Update_Chip_To_Drop>
		}
	} else {
		/* Touch not pressed */
		//do nothing
	}
}
 800055e:	e002      	b.n	8000566 <LCD_Touch_Polling_Game+0x26>
			LCD_Update_Chip_To_Drop(RIGHT);
 8000560:	2000      	movs	r0, #0
 8000562:	f000 fac7 	bl	8000af4 <LCD_Update_Chip_To_Drop>
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000038 	.word	0x20000038

08000570 <LCD_Polling_Restart>:

void LCD_Polling_Restart(){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000574:	4808      	ldr	r0, [pc, #32]	@ (8000598 <LCD_Polling_Restart+0x28>)
 8000576:	f001 f850 	bl	800161a <returnTouchStateAndLocation>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d109      	bne.n	8000594 <LCD_Polling_Restart+0x24>
		/* Touch valid */
		if(StaticTouchData.y < LCD_PIXEL_HEIGHT/2){
 8000580:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <LCD_Polling_Restart+0x28>)
 8000582:	885b      	ldrh	r3, [r3, #2]
 8000584:	2b9f      	cmp	r3, #159	@ 0x9f
 8000586:	d805      	bhi.n	8000594 <LCD_Polling_Restart+0x24>
			//Bottom half
			addSchedulerEvent(START_MENU_EVENT);
 8000588:	2001      	movs	r0, #1
 800058a:	f001 f85f 	bl	800164c <addSchedulerEvent>
			removeSchedulerEvent(POLLING_RESTART_EVENT);
 800058e:	2020      	movs	r0, #32
 8000590:	f001 f86e 	bl	8001670 <removeSchedulerEvent>
		}
	}
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000038 	.word	0x20000038

0800059c <LCD_Polling_Mode>:

void LCD_Polling_Mode(){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80005a0:	4808      	ldr	r0, [pc, #32]	@ (80005c4 <LCD_Polling_Mode+0x28>)
 80005a2:	f001 f83a 	bl	800161a <returnTouchStateAndLocation>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d109      	bne.n	80005c0 <LCD_Polling_Mode+0x24>
		/* Touch valid */
		if(StaticTouchData.x < LCD_PIXEL_WIDTH/2){
 80005ac:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <LCD_Polling_Mode+0x28>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	2b77      	cmp	r3, #119	@ 0x77
 80005b2:	d805      	bhi.n	80005c0 <LCD_Polling_Mode+0x24>
			//Bottom half
			addSchedulerEvent(BUILD_NEW_GAME_EVENT);
 80005b4:	2004      	movs	r0, #4
 80005b6:	f001 f849 	bl	800164c <addSchedulerEvent>
			removeSchedulerEvent(POLLING_MODE_SELECT_EVENT);
 80005ba:	2002      	movs	r0, #2
 80005bc:	f001 f858 	bl	8001670 <removeSchedulerEvent>
		}
	}
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000038 	.word	0x20000038

080005c8 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80005ce:	2006      	movs	r0, #6
 80005d0:	f002 fefb 	bl	80033ca <HAL_NVIC_DisableIRQ>

	uint32_t eventsToRun = getScheduledEvents();
 80005d4:	f001 f82e 	bl	8001634 <getScheduledEvents>
 80005d8:	6078      	str	r0, [r7, #4]
	//only want to do stuff if the game screen is active
	if(eventsToRun & POLLING_GAME_EVENT){
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f003 0308 	and.w	r3, r3, #8
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <EXTI0_IRQHandler+0x20>
		LCD_Insert_Chip_Game_Grid();
 80005e4:	f000 fde8 	bl	80011b8 <LCD_Insert_Chip_Game_Grid>
		//allows for you to insert a chip if the game is active
    }
	__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_0);
 80005e8:	4b04      	ldr	r3, [pc, #16]	@ (80005fc <EXTI0_IRQHandler+0x34>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005ee:	2006      	movs	r0, #6
 80005f0:	f002 fedd 	bl	80033ae <HAL_NVIC_EnableIRQ>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40013c00 	.word	0x40013c00

08000600 <Button_Init>:
#include "Button_Driver.h"

void Button_Init(){
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <Button_Init+0x54>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	4a11      	ldr	r2, [pc, #68]	@ (8000654 <Button_Init+0x54>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6313      	str	r3, [r2, #48]	@ 0x30
 8000616:	4b0f      	ldr	r3, [pc, #60]	@ (8000654 <Button_Init+0x54>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	683b      	ldr	r3, [r7, #0]
		GPIO_InitTypeDef buttonPin;
		buttonPin.Pin         = BUTTON_PIN;
 8000622:	2301      	movs	r3, #1
 8000624:	607b      	str	r3, [r7, #4]
		buttonPin.Mode        = GPIO_MODE_IT_RISING;
 8000626:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800062a:	60bb      	str	r3, [r7, #8]
		buttonPin.Pull        = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
		buttonPin.Speed       = GPIO_SPEED_FREQ_HIGH;
 8000630:	2302      	movs	r3, #2
 8000632:	613b      	str	r3, [r7, #16]
		//buttonPin.Alternate   = GPIO_AF1_TIM2;
		HAL_GPIO_Init(BUTTON_PORT, &buttonPin);
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	4619      	mov	r1, r3
 8000638:	4807      	ldr	r0, [pc, #28]	@ (8000658 <Button_Init+0x58>)
 800063a:	f002 fee1 	bl	8003400 <HAL_GPIO_Init>
		__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_0);
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <Button_Init+0x5c>)
 8000640:	2201      	movs	r2, #1
 8000642:	615a      	str	r2, [r3, #20]

		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000644:	2006      	movs	r0, #6
 8000646:	f002 feb2 	bl	80033ae <HAL_NVIC_EnableIRQ>
}
 800064a:	bf00      	nop
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40020000 	.word	0x40020000
 800065c:	40013c00 	.word	0x40013c00

08000660 <Init_Chip_To_Drop>:
static chip_to_drop_t chip;
uint8_t playerTurn         = PLAYER_RED;
uint8_t redScore          = 0;
uint8_t yellowScore       = 0;

void Init_Chip_To_Drop(){
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	chip.yPos        = CHIP_Y_POS;
 8000664:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <Init_Chip_To_Drop+0x20>)
 8000666:	223a      	movs	r2, #58	@ 0x3a
 8000668:	709a      	strb	r2, [r3, #2]
	chip.xPos        = CHIP_X_POS(CHIP_X_START_COLUMN);
 800066a:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <Init_Chip_To_Drop+0x20>)
 800066c:	2277      	movs	r2, #119	@ 0x77
 800066e:	705a      	strb	r2, [r3, #1]
	chip.column      = CHIP_X_START_COLUMN;
 8000670:	4b03      	ldr	r3, [pc, #12]	@ (8000680 <Init_Chip_To_Drop+0x20>)
 8000672:	2203      	movs	r2, #3
 8000674:	701a      	strb	r2, [r3, #0]
	LCD_Draw_Chip_To_Drop();
 8000676:	f000 f9c5 	bl	8000a04 <LCD_Draw_Chip_To_Drop>
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2002599c 	.word	0x2002599c

08000684 <Init_Grid>:

void Init_Grid(){
 8000684:	b490      	push	{r4, r7}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<COLUMNS; i++){
 800068a:	2300      	movs	r3, #0
 800068c:	71fb      	strb	r3, [r7, #7]
 800068e:	e047      	b.n	8000720 <Init_Grid+0x9c>
		for(uint8_t j =0; j<ROWS; j++){
 8000690:	2300      	movs	r3, #0
 8000692:	71bb      	strb	r3, [r7, #6]
 8000694:	e03e      	b.n	8000714 <Init_Grid+0x90>
			grid[i][j].xPos = SQUARE_SIZE/2+SQUARE_SIZE*i;
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	461a      	mov	r2, r3
 800069a:	0112      	lsls	r2, r2, #4
 800069c:	4413      	add	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	79f9      	ldrb	r1, [r7, #7]
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	3211      	adds	r2, #17
 80006a8:	b2d4      	uxtb	r4, r2
 80006aa:	4822      	ldr	r0, [pc, #136]	@ (8000734 <Init_Grid+0xb0>)
 80006ac:	461a      	mov	r2, r3
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	441a      	add	r2, r3
 80006b2:	460b      	mov	r3, r1
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	440b      	add	r3, r1
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	4413      	add	r3, r2
 80006bc:	4403      	add	r3, r0
 80006be:	4622      	mov	r2, r4
 80006c0:	701a      	strb	r2, [r3, #0]
			grid[i][j].yPos = SQUARE_SIZE/2 + SQUARE_SIZE*j;
 80006c2:	79bb      	ldrb	r3, [r7, #6]
 80006c4:	461a      	mov	r2, r3
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	4413      	add	r3, r2
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	79f9      	ldrb	r1, [r7, #7]
 80006d0:	79bb      	ldrb	r3, [r7, #6]
 80006d2:	3211      	adds	r2, #17
 80006d4:	b2d4      	uxtb	r4, r2
 80006d6:	4817      	ldr	r0, [pc, #92]	@ (8000734 <Init_Grid+0xb0>)
 80006d8:	461a      	mov	r2, r3
 80006da:	0052      	lsls	r2, r2, #1
 80006dc:	441a      	add	r2, r3
 80006de:	460b      	mov	r3, r1
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	440b      	add	r3, r1
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	4413      	add	r3, r2
 80006e8:	4403      	add	r3, r0
 80006ea:	3301      	adds	r3, #1
 80006ec:	4622      	mov	r2, r4
 80006ee:	701a      	strb	r2, [r3, #0]
			grid[i][j].playerColor = PLAYER_EMPTY;
 80006f0:	79f9      	ldrb	r1, [r7, #7]
 80006f2:	79bb      	ldrb	r3, [r7, #6]
 80006f4:	480f      	ldr	r0, [pc, #60]	@ (8000734 <Init_Grid+0xb0>)
 80006f6:	461a      	mov	r2, r3
 80006f8:	0052      	lsls	r2, r2, #1
 80006fa:	441a      	add	r2, r3
 80006fc:	460b      	mov	r3, r1
 80006fe:	00db      	lsls	r3, r3, #3
 8000700:	440b      	add	r3, r1
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	4413      	add	r3, r2
 8000706:	4403      	add	r3, r0
 8000708:	3302      	adds	r3, #2
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
		for(uint8_t j =0; j<ROWS; j++){
 800070e:	79bb      	ldrb	r3, [r7, #6]
 8000710:	3301      	adds	r3, #1
 8000712:	71bb      	strb	r3, [r7, #6]
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	2b05      	cmp	r3, #5
 8000718:	d9bd      	bls.n	8000696 <Init_Grid+0x12>
	for(uint8_t i = 0; i<COLUMNS; i++){
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	3301      	adds	r3, #1
 800071e:	71fb      	strb	r3, [r7, #7]
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	2b06      	cmp	r3, #6
 8000724:	d9b4      	bls.n	8000690 <Init_Grid+0xc>
			//this clears any old information about the colors from the previous game
		}
	}
}
 8000726:	bf00      	nop
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bc90      	pop	{r4, r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	2002591c 	.word	0x2002591c

08000738 <LCD_GPIO_Init>:

void LCD_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	@ 0x30
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
 8000742:	4b5a      	ldr	r3, [pc, #360]	@ (80008ac <LCD_GPIO_Init+0x174>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000746:	4a59      	ldr	r2, [pc, #356]	@ (80008ac <LCD_GPIO_Init+0x174>)
 8000748:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800074c:	6453      	str	r3, [r2, #68]	@ 0x44
 800074e:	4b57      	ldr	r3, [pc, #348]	@ (80008ac <LCD_GPIO_Init+0x174>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000752:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000756:	61bb      	str	r3, [r7, #24]
 8000758:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
 800075e:	4b53      	ldr	r3, [pc, #332]	@ (80008ac <LCD_GPIO_Init+0x174>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a52      	ldr	r2, [pc, #328]	@ (80008ac <LCD_GPIO_Init+0x174>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b50      	ldr	r3, [pc, #320]	@ (80008ac <LCD_GPIO_Init+0x174>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b4c      	ldr	r3, [pc, #304]	@ (80008ac <LCD_GPIO_Init+0x174>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a4b      	ldr	r2, [pc, #300]	@ (80008ac <LCD_GPIO_Init+0x174>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b49      	ldr	r3, [pc, #292]	@ (80008ac <LCD_GPIO_Init+0x174>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b45      	ldr	r3, [pc, #276]	@ (80008ac <LCD_GPIO_Init+0x174>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a44      	ldr	r2, [pc, #272]	@ (80008ac <LCD_GPIO_Init+0x174>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b42      	ldr	r3, [pc, #264]	@ (80008ac <LCD_GPIO_Init+0x174>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b3e      	ldr	r3, [pc, #248]	@ (80008ac <LCD_GPIO_Init+0x174>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a3d      	ldr	r2, [pc, #244]	@ (80008ac <LCD_GPIO_Init+0x174>)
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b3b      	ldr	r3, [pc, #236]	@ (80008ac <LCD_GPIO_Init+0x174>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b37      	ldr	r3, [pc, #220]	@ (80008ac <LCD_GPIO_Init+0x174>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a36      	ldr	r2, [pc, #216]	@ (80008ac <LCD_GPIO_Init+0x174>)
 80007d4:	f043 0320 	orr.w	r3, r3, #32
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b34      	ldr	r3, [pc, #208]	@ (80008ac <LCD_GPIO_Init+0x174>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0320 	and.w	r3, r3, #32
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b30      	ldr	r3, [pc, #192]	@ (80008ac <LCD_GPIO_Init+0x174>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a2f      	ldr	r2, [pc, #188]	@ (80008ac <LCD_GPIO_Init+0x174>)
 80007f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b2d      	ldr	r3, [pc, #180]	@ (80008ac <LCD_GPIO_Init+0x174>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000802:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000806:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000810:	2302      	movs	r3, #2
 8000812:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000814:	230e      	movs	r3, #14
 8000816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4824      	ldr	r0, [pc, #144]	@ (80008b0 <LCD_GPIO_Init+0x178>)
 8000820:	f002 fdee 	bl	8003400 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000824:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000828:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4820      	ldr	r0, [pc, #128]	@ (80008b4 <LCD_GPIO_Init+0x17c>)
 8000832:	f002 fde5 	bl	8003400 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000836:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800083a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	481d      	ldr	r0, [pc, #116]	@ (80008b8 <LCD_GPIO_Init+0x180>)
 8000844:	f002 fddc 	bl	8003400 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000848:	2348      	movs	r3, #72	@ 0x48
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	481a      	ldr	r0, [pc, #104]	@ (80008bc <LCD_GPIO_Init+0x184>)
 8000854:	f002 fdd4 	bl	8003400 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000858:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800085c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4816      	ldr	r0, [pc, #88]	@ (80008c0 <LCD_GPIO_Init+0x188>)
 8000866:	f002 fdcb 	bl	8003400 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800086a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800086e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	4813      	ldr	r0, [pc, #76]	@ (80008c4 <LCD_GPIO_Init+0x18c>)
 8000878:	f002 fdc2 	bl	8003400 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800087c:	2303      	movs	r3, #3
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000880:	2309      	movs	r3, #9
 8000882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	480a      	ldr	r0, [pc, #40]	@ (80008b4 <LCD_GPIO_Init+0x17c>)
 800088c:	f002 fdb8 	bl	8003400 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000890:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4809      	ldr	r0, [pc, #36]	@ (80008c4 <LCD_GPIO_Init+0x18c>)
 800089e:	f002 fdaf 	bl	8003400 <HAL_GPIO_Init>
}
 80008a2:	bf00      	nop
 80008a4:	3730      	adds	r7, #48	@ 0x30
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020000 	.word	0x40020000
 80008b4:	40020400 	.word	0x40020400
 80008b8:	40020800 	.word	0x40020800
 80008bc:	40020c00 	.word	0x40020c00
 80008c0:	40021400 	.word	0x40021400
 80008c4:	40021800 	.word	0x40021800

080008c8 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b090      	sub	sp, #64	@ 0x40
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80008d6:	23f0      	movs	r3, #240	@ 0xf0
 80008d8:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80008de:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80008e2:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80008e4:	2302      	movs	r3, #2
 80008e6:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80008e8:	23ff      	movs	r3, #255	@ 0xff
 80008ea:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80008f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80008f6:	2305      	movs	r3, #5
 80008f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d101      	bne.n	8000904 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <LTCD_Layer_Init+0x78>)
 8000902:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000904:	23f0      	movs	r3, #240	@ 0xf0
 8000906:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000908:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800090c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000920:	79fa      	ldrb	r2, [r7, #7]
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	4619      	mov	r1, r3
 8000928:	4806      	ldr	r0, [pc, #24]	@ (8000944 <LTCD_Layer_Init+0x7c>)
 800092a:	f004 f9ab 	bl	8004c84 <HAL_LTDC_ConfigLayer>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000934:	f000 fe60 	bl	80015f8 <LCD_Error_Handler>
	}
}
 8000938:	bf00      	nop
 800093a:	3740      	adds	r7, #64	@ 0x40
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000011c 	.word	0x2000011c
 8000944:	20000040 	.word	0x20000040

08000948 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 800094c:	4b2a      	ldr	r3, [pc, #168]	@ (80009f8 <LTCD__Init+0xb0>)
 800094e:	4a2b      	ldr	r2, [pc, #172]	@ (80009fc <LTCD__Init+0xb4>)
 8000950:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000952:	4b29      	ldr	r3, [pc, #164]	@ (80009f8 <LTCD__Init+0xb0>)
 8000954:	2209      	movs	r2, #9
 8000956:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000958:	4b27      	ldr	r3, [pc, #156]	@ (80009f8 <LTCD__Init+0xb0>)
 800095a:	2201      	movs	r2, #1
 800095c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800095e:	4b26      	ldr	r3, [pc, #152]	@ (80009f8 <LTCD__Init+0xb0>)
 8000960:	221d      	movs	r2, #29
 8000962:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000964:	4b24      	ldr	r3, [pc, #144]	@ (80009f8 <LTCD__Init+0xb0>)
 8000966:	2203      	movs	r2, #3
 8000968:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800096a:	4b23      	ldr	r3, [pc, #140]	@ (80009f8 <LTCD__Init+0xb0>)
 800096c:	f240 120d 	movw	r2, #269	@ 0x10d
 8000970:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000972:	4b21      	ldr	r3, [pc, #132]	@ (80009f8 <LTCD__Init+0xb0>)
 8000974:	f240 1243 	movw	r2, #323	@ 0x143
 8000978:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800097a:	4b1f      	ldr	r3, [pc, #124]	@ (80009f8 <LTCD__Init+0xb0>)
 800097c:	f240 1217 	movw	r2, #279	@ 0x117
 8000980:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000982:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <LTCD__Init+0xb0>)
 8000984:	f240 1247 	movw	r2, #327	@ 0x147
 8000988:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800098a:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <LTCD__Init+0xb0>)
 800098c:	2200      	movs	r2, #0
 800098e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000992:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <LTCD__Init+0xb0>)
 8000994:	2200      	movs	r2, #0
 8000996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800099a:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <LTCD__Init+0xb0>)
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80009a2:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <LTCD__Init+0xb8>)
 80009a4:	2208      	movs	r2, #8
 80009a6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80009a8:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <LTCD__Init+0xb8>)
 80009aa:	22c0      	movs	r2, #192	@ 0xc0
 80009ac:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80009ae:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <LTCD__Init+0xb8>)
 80009b0:	2204      	movs	r2, #4
 80009b2:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <LTCD__Init+0xb8>)
 80009b6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80009ba:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80009bc:	4810      	ldr	r0, [pc, #64]	@ (8000a00 <LTCD__Init+0xb8>)
 80009be:	f004 ffbb 	bl	8005938 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <LTCD__Init+0xb0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009c8:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <LTCD__Init+0xb0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80009ce:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <LTCD__Init+0xb0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80009d4:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <LTCD__Init+0xb0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80009da:	f7ff fead 	bl	8000738 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80009de:	4806      	ldr	r0, [pc, #24]	@ (80009f8 <LTCD__Init+0xb0>)
 80009e0:	f004 f880 	bl	8004ae4 <HAL_LTDC_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80009ea:	f000 fe05 	bl	80015f8 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80009ee:	f000 fe53 	bl	8001698 <ili9341_Init>
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000040 	.word	0x20000040
 80009fc:	40016800 	.word	0x40016800
 8000a00:	200000e8 	.word	0x200000e8

08000a04 <LCD_Draw_Chip_To_Drop>:
/*
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Chip_To_Drop(){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	if(playerTurn == PLAYER_RED){
 8000a08:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <LCD_Draw_Chip_To_Drop+0x48>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d10b      	bne.n	8000a28 <LCD_Draw_Chip_To_Drop+0x24>
		LCD_Draw_Circle_Fill(chip.xPos, chip.yPos, CIRCLE_RADIUS, LCD_COLOR_RED);
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <LCD_Draw_Chip_To_Drop+0x4c>)
 8000a12:	785b      	ldrb	r3, [r3, #1]
 8000a14:	4618      	mov	r0, r3
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <LCD_Draw_Chip_To_Drop+0x4c>)
 8000a18:	789b      	ldrb	r3, [r3, #2]
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000a20:	220c      	movs	r2, #12
 8000a22:	f000 f895 	bl	8000b50 <LCD_Draw_Circle_Fill>
	}
	else if(playerTurn == PLAYER_YELLOW){
		LCD_Draw_Circle_Fill(chip.xPos, chip.yPos, CIRCLE_RADIUS, LCD_COLOR_YELLOW);
	}
	//if nothing is updating then there is an error with playerTurn
}
 8000a26:	e00e      	b.n	8000a46 <LCD_Draw_Chip_To_Drop+0x42>
	else if(playerTurn == PLAYER_YELLOW){
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <LCD_Draw_Chip_To_Drop+0x48>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d10a      	bne.n	8000a46 <LCD_Draw_Chip_To_Drop+0x42>
		LCD_Draw_Circle_Fill(chip.xPos, chip.yPos, CIRCLE_RADIUS, LCD_COLOR_YELLOW);
 8000a30:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <LCD_Draw_Chip_To_Drop+0x4c>)
 8000a32:	785b      	ldrb	r3, [r3, #1]
 8000a34:	4618      	mov	r0, r3
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <LCD_Draw_Chip_To_Drop+0x4c>)
 8000a38:	789b      	ldrb	r3, [r3, #2]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000a40:	220c      	movs	r2, #12
 8000a42:	f000 f885 	bl	8000b50 <LCD_Draw_Circle_Fill>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000002 	.word	0x20000002
 8000a50:	2002599c 	.word	0x2002599c

08000a54 <LCD_Clear_Chip_To_Drop>:

void LCD_Clear_Chip_To_Drop(){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	LCD_Draw_Circle_Fill(chip.xPos, chip.yPos, CIRCLE_RADIUS, LCD_COLOR_WHITE);
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <LCD_Clear_Chip_To_Drop+0x20>)
 8000a5a:	785b      	ldrb	r3, [r3, #1]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <LCD_Clear_Chip_To_Drop+0x20>)
 8000a60:	789b      	ldrb	r3, [r3, #2]
 8000a62:	4619      	mov	r1, r3
 8000a64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a68:	220c      	movs	r2, #12
 8000a6a:	f000 f871 	bl	8000b50 <LCD_Draw_Circle_Fill>
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2002599c 	.word	0x2002599c

08000a78 <LCD_Update_Chip_To_Drop_Column>:

void LCD_Update_Chip_To_Drop_Column(int direction){
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	if(direction == RIGHT && chip.column != RIGHT_MOST_COLUMN){
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d115      	bne.n	8000ab2 <LCD_Update_Chip_To_Drop_Column+0x3a>
 8000a86:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b06      	cmp	r3, #6
 8000a8c:	d011      	beq.n	8000ab2 <LCD_Update_Chip_To_Drop_Column+0x3a>
		//if its the 7th most do nothing
		chip.column = chip.column + 1;
 8000a8e:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000a98:	701a      	strb	r2, [r3, #0]
		chip.xPos   = CHIP_X_POS(chip.column);
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	0112      	lsls	r2, r2, #4
 8000aa2:	4413      	add	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	3311      	adds	r3, #17
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	4b10      	ldr	r3, [pc, #64]	@ (8000af0 <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000aae:	705a      	strb	r2, [r3, #1]
	else if(direction == LEFT && chip.column != LEFT_MOST_COLUMN){
		//if its the 1st column do nothing
		chip.column = chip.column - 1;
		chip.xPos   = CHIP_X_POS(chip.column);
	}
}
 8000ab0:	e017      	b.n	8000ae2 <LCD_Update_Chip_To_Drop_Column+0x6a>
	else if(direction == LEFT && chip.column != LEFT_MOST_COLUMN){
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d114      	bne.n	8000ae2 <LCD_Update_Chip_To_Drop_Column+0x6a>
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d010      	beq.n	8000ae2 <LCD_Update_Chip_To_Drop_Column+0x6a>
		chip.column = chip.column - 1;
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000aca:	701a      	strb	r2, [r3, #0]
		chip.xPos   = CHIP_X_POS(chip.column);
 8000acc:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	0112      	lsls	r2, r2, #4
 8000ad4:	4413      	add	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	3311      	adds	r3, #17
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4b04      	ldr	r3, [pc, #16]	@ (8000af0 <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000ae0:	705a      	strb	r2, [r3, #1]
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	2002599c 	.word	0x2002599c

08000af4 <LCD_Update_Chip_To_Drop>:

void LCD_Update_Chip_To_Drop(int dir){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	LCD_Clear_Chip_To_Drop();
 8000afc:	f7ff ffaa 	bl	8000a54 <LCD_Clear_Chip_To_Drop>
	//HAL_Delay(10);
	LCD_Update_Chip_To_Drop_Column(dir);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ffb9 	bl	8000a78 <LCD_Update_Chip_To_Drop_Column>
	LCD_Draw_Chip_To_Drop();
 8000b06:	f7ff ff7d 	bl	8000a04 <LCD_Draw_Chip_To_Drop>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <LCD_Draw_Pixel>:

void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	80fb      	strh	r3, [r7, #6]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	80bb      	strh	r3, [r7, #4]
 8000b22:	4613      	mov	r3, r2
 8000b24:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000b26:	88ba      	ldrh	r2, [r7, #4]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	011b      	lsls	r3, r3, #4
 8000b2c:	1a9b      	subs	r3, r3, r2
 8000b2e:	011b      	lsls	r3, r3, #4
 8000b30:	461a      	mov	r2, r3
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	4413      	add	r3, r2
 8000b36:	4905      	ldr	r1, [pc, #20]	@ (8000b4c <LCD_Draw_Pixel+0x38>)
 8000b38:	887a      	ldrh	r2, [r7, #2]
 8000b3a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	2000011c 	.word	0x2000011c

08000b50 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4604      	mov	r4, r0
 8000b58:	4608      	mov	r0, r1
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4623      	mov	r3, r4
 8000b60:	80fb      	strh	r3, [r7, #6]
 8000b62:	4603      	mov	r3, r0
 8000b64:	80bb      	strh	r3, [r7, #4]
 8000b66:	460b      	mov	r3, r1
 8000b68:	807b      	strh	r3, [r7, #2]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000b6e:	887b      	ldrh	r3, [r7, #2]
 8000b70:	425b      	negs	r3, r3
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	81fb      	strh	r3, [r7, #14]
 8000b76:	e034      	b.n	8000be2 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000b78:	887b      	ldrh	r3, [r7, #2]
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	81bb      	strh	r3, [r7, #12]
 8000b80:	e024      	b.n	8000bcc <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000b82:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b86:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000b8a:	fb03 f202 	mul.w	r2, r3, r2
 8000b8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b92:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000b96:	fb01 f303 	mul.w	r3, r1, r3
 8000b9a:	441a      	add	r2, r3
 8000b9c:	887b      	ldrh	r3, [r7, #2]
 8000b9e:	8879      	ldrh	r1, [r7, #2]
 8000ba0:	fb01 f303 	mul.w	r3, r1, r3
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	dc0b      	bgt.n	8000bc0 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000ba8:	89ba      	ldrh	r2, [r7, #12]
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	4413      	add	r3, r2
 8000bae:	b298      	uxth	r0, r3
 8000bb0:	89fa      	ldrh	r2, [r7, #14]
 8000bb2:	88bb      	ldrh	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	883a      	ldrh	r2, [r7, #0]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	f7ff ffaa 	bl	8000b14 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000bc0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	81bb      	strh	r3, [r7, #12]
 8000bcc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000bd0:	887b      	ldrh	r3, [r7, #2]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	ddd5      	ble.n	8000b82 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000bd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	3301      	adds	r3, #1
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	81fb      	strh	r3, [r7, #14]
 8000be2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000be6:	887b      	ldrh	r3, [r7, #2]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	ddc5      	ble.n	8000b78 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd90      	pop	{r4, r7, pc}

08000bf6 <LCD_Draw_Rectangle_Fill>:

void LCD_Draw_Rectangle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint16_t Height, uint16_t color){
 8000bf6:	b590      	push	{r4, r7, lr}
 8000bf8:	b085      	sub	sp, #20
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4604      	mov	r4, r0
 8000bfe:	4608      	mov	r0, r1
 8000c00:	4611      	mov	r1, r2
 8000c02:	461a      	mov	r2, r3
 8000c04:	4623      	mov	r3, r4
 8000c06:	80fb      	strh	r3, [r7, #6]
 8000c08:	4603      	mov	r3, r0
 8000c0a:	80bb      	strh	r3, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	807b      	strh	r3, [r7, #2]
 8000c10:	4613      	mov	r3, r2
 8000c12:	803b      	strh	r3, [r7, #0]
	for(int16_t y=0; y<Height; y++){
 8000c14:	2300      	movs	r3, #0
 8000c16:	81fb      	strh	r3, [r7, #14]
 8000c18:	e01f      	b.n	8000c5a <LCD_Draw_Rectangle_Fill+0x64>
		for(int16_t x=0; x<Length; x++){
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	81bb      	strh	r3, [r7, #12]
 8000c1e:	e011      	b.n	8000c44 <LCD_Draw_Rectangle_Fill+0x4e>
			LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000c20:	89ba      	ldrh	r2, [r7, #12]
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	4413      	add	r3, r2
 8000c26:	b298      	uxth	r0, r3
 8000c28:	89fa      	ldrh	r2, [r7, #14]
 8000c2a:	88bb      	ldrh	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	8c3a      	ldrh	r2, [r7, #32]
 8000c32:	4619      	mov	r1, r3
 8000c34:	f7ff ff6e 	bl	8000b14 <LCD_Draw_Pixel>
		for(int16_t x=0; x<Length; x++){
 8000c38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	3301      	adds	r3, #1
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	81bb      	strh	r3, [r7, #12]
 8000c44:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c48:	887b      	ldrh	r3, [r7, #2]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	dbe8      	blt.n	8000c20 <LCD_Draw_Rectangle_Fill+0x2a>
	for(int16_t y=0; y<Height; y++){
 8000c4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	3301      	adds	r3, #1
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	81fb      	strh	r3, [r7, #14]
 8000c5a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c5e:	883b      	ldrh	r3, [r7, #0]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dbda      	blt.n	8000c1a <LCD_Draw_Rectangle_Fill+0x24>
		}
	}
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd90      	pop	{r4, r7, pc}

08000c6e <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000c6e:	b590      	push	{r4, r7, lr}
 8000c70:	b085      	sub	sp, #20
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4604      	mov	r4, r0
 8000c76:	4608      	mov	r0, r1
 8000c78:	4611      	mov	r1, r2
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4623      	mov	r3, r4
 8000c7e:	80fb      	strh	r3, [r7, #6]
 8000c80:	4603      	mov	r3, r0
 8000c82:	80bb      	strh	r3, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	807b      	strh	r3, [r7, #2]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	81fb      	strh	r3, [r7, #14]
 8000c90:	e00b      	b.n	8000caa <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000c92:	89fa      	ldrh	r2, [r7, #14]
 8000c94:	88bb      	ldrh	r3, [r7, #4]
 8000c96:	4413      	add	r3, r2
 8000c98:	b299      	uxth	r1, r3
 8000c9a:	883a      	ldrh	r2, [r7, #0]
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff38 	bl	8000b14 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000ca4:	89fb      	ldrh	r3, [r7, #14]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	81fb      	strh	r3, [r7, #14]
 8000caa:	89fa      	ldrh	r2, [r7, #14]
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d3ef      	bcc.n	8000c92 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd90      	pop	{r4, r7, pc}

08000cbc <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4623      	mov	r3, r4
 8000ccc:	80fb      	strh	r3, [r7, #6]
 8000cce:	4603      	mov	r3, r0
 8000cd0:	80bb      	strh	r3, [r7, #4]
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	807b      	strh	r3, [r7, #2]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	81fb      	strh	r3, [r7, #14]
 8000cde:	e00b      	b.n	8000cf8 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8000ce0:	89fa      	ldrh	r2, [r7, #14]
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	883a      	ldrh	r2, [r7, #0]
 8000cea:	88b9      	ldrh	r1, [r7, #4]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff11 	bl	8000b14 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000cf2:	89fb      	ldrh	r3, [r7, #14]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	81fb      	strh	r3, [r7, #14]
 8000cf8:	89fa      	ldrh	r2, [r7, #14]
 8000cfa:	887b      	ldrh	r3, [r7, #2]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d3ef      	bcc.n	8000ce0 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd90      	pop	{r4, r7, pc}
	...

08000d0c <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	460a      	mov	r2, r1
 8000d16:	71fb      	strb	r3, [r7, #7]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10e      	bne.n	8000d40 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	e007      	b.n	8000d38 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000d28:	4908      	ldr	r1, [pc, #32]	@ (8000d4c <LCD_Clear+0x40>)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	88ba      	ldrh	r2, [r7, #4]
 8000d2e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	3301      	adds	r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000d3e:	d3f3      	bcc.n	8000d28 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	2000011c 	.word	0x2000011c

08000d50 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	@ (8000d6c <LCD_SetTextColor+0x1c>)
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	8013      	strh	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	20000000 	.word	0x20000000

08000d70 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000d78:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <LCD_SetFont+0x1c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000118 	.word	0x20000118

08000d90 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	603a      	str	r2, [r7, #0]
 8000d9a:	80fb      	strh	r3, [r7, #6]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	2300      	movs	r3, #0
 8000da6:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	e04c      	b.n	8000e48 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	e03f      	b.n	8000e34 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4b27      	ldr	r3, [pc, #156]	@ (8000e60 <LCD_Draw_Char+0xd0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	889b      	ldrh	r3, [r3, #4]
 8000dc6:	4a27      	ldr	r2, [pc, #156]	@ (8000e64 <LCD_Draw_Char+0xd4>)
 8000dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dcc:	08db      	lsrs	r3, r3, #3
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	2280      	movs	r2, #128	@ 0x80
 8000dd4:	409a      	lsls	r2, r3
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	fa42 f303 	asr.w	r3, r2, r3
 8000ddc:	400b      	ands	r3, r1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d104      	bne.n	8000dec <LCD_Draw_Char+0x5c>
 8000de2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e60 <LCD_Draw_Char+0xd0>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	889b      	ldrh	r3, [r3, #4]
 8000de8:	2b0c      	cmp	r3, #12
 8000dea:	d920      	bls.n	8000e2e <LCD_Draw_Char+0x9e>
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	683a      	ldr	r2, [r7, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	fa42 f303 	asr.w	r3, r2, r3
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d104      	bne.n	8000e10 <LCD_Draw_Char+0x80>
 8000e06:	4b16      	ldr	r3, [pc, #88]	@ (8000e60 <LCD_Draw_Char+0xd0>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	889b      	ldrh	r3, [r3, #4]
 8000e0c:	2b0c      	cmp	r3, #12
 8000e0e:	d80e      	bhi.n	8000e2e <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	4413      	add	r3, r2
 8000e18:	b298      	uxth	r0, r3
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	88bb      	ldrh	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	4a10      	ldr	r2, [pc, #64]	@ (8000e68 <LCD_Draw_Char+0xd8>)
 8000e26:	8812      	ldrh	r2, [r2, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f7ff fe73 	bl	8000b14 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	3301      	adds	r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <LCD_Draw_Char+0xd0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	889b      	ldrh	r3, [r3, #4]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d3b8      	bcc.n	8000db4 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	3301      	adds	r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <LCD_Draw_Char+0xd0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	88db      	ldrh	r3, [r3, #6]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d3ab      	bcc.n	8000dae <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000e56:	bf00      	nop
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000118 	.word	0x20000118
 8000e64:	aaaaaaab 	.word	0xaaaaaaab
 8000e68:	20000000 	.word	0x20000000

08000e6c <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	80fb      	strh	r3, [r7, #6]
 8000e76:	460b      	mov	r3, r1
 8000e78:	80bb      	strh	r3, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000e7e:	78fb      	ldrb	r3, [r7, #3]
 8000e80:	3b20      	subs	r3, #32
 8000e82:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000e84:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <LCD_DisplayChar+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	78fb      	ldrb	r3, [r7, #3]
 8000e8c:	4907      	ldr	r1, [pc, #28]	@ (8000eac <LCD_DisplayChar+0x40>)
 8000e8e:	6809      	ldr	r1, [r1, #0]
 8000e90:	88c9      	ldrh	r1, [r1, #6]
 8000e92:	fb01 f303 	mul.w	r3, r1, r3
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	441a      	add	r2, r3
 8000e9a:	88b9      	ldrh	r1, [r7, #4]
 8000e9c:	88fb      	ldrh	r3, [r7, #6]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff76 	bl	8000d90 <LCD_Draw_Char>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000118 	.word	0x20000118

08000eb0 <LCD_Space_Available_Game_Grid>:

bool LCD_Space_Available_Game_Grid(){
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
	if(grid[chip.column][5].playerColor != PLAYER_EMPTY){
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <LCD_Space_Available_Game_Grid+0x30>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee4 <LCD_Space_Available_Game_Grid+0x34>)
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	440b      	add	r3, r1
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	3311      	adds	r3, #17
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <LCD_Space_Available_Game_Grid+0x22>
	//5 is the highest row so we need to see if its occupied and if it is false
		return false;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <LCD_Space_Available_Game_Grid+0x24>
	}
	//if there is space return true
	return true;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	2002599c 	.word	0x2002599c
 8000ee4:	2002591c 	.word	0x2002591c

08000ee8 <LCD_Get_Row_Game_Grid>:

uint8_t LCD_Get_Row_Game_Grid(){
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
	for(int j = 0; j<ROWS; j++){
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	e017      	b.n	8000f24 <LCD_Get_Row_Game_Grid+0x3c>
		if(grid[chip.column][j].playerColor == PLAYER_EMPTY){
 8000ef4:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <LCD_Get_Row_Game_Grid+0x50>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	4910      	ldr	r1, [pc, #64]	@ (8000f3c <LCD_Get_Row_Game_Grid+0x54>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	461a      	mov	r2, r3
 8000f00:	0052      	lsls	r2, r2, #1
 8000f02:	441a      	add	r2, r3
 8000f04:	4603      	mov	r3, r0
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	4403      	add	r3, r0
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	3302      	adds	r3, #2
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <LCD_Get_Row_Game_Grid+0x36>
			//returns the first empty square
			return j;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	e006      	b.n	8000f2c <LCD_Get_Row_Game_Grid+0x44>
	for(int j = 0; j<ROWS; j++){
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3301      	adds	r3, #1
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b05      	cmp	r3, #5
 8000f28:	dde4      	ble.n	8000ef4 <LCD_Get_Row_Game_Grid+0xc>
		}
	}
	return -1; //out of bounds but should not occur
 8000f2a:	23ff      	movs	r3, #255	@ 0xff
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	2002599c 	.word	0x2002599c
 8000f3c:	2002591c 	.word	0x2002591c

08000f40 <LCD_Game_Won_Check_Row>:


bool LCD_Game_Won_Check_Row(uint8_t row, uint8_t player){
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	460a      	mov	r2, r1
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	71bb      	strb	r3, [r7, #6]
	uint8_t Consecutive = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
	//Resets consecutive
	for(int i=0; i<COLUMNS; i++){
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	e01e      	b.n	8000f98 <LCD_Game_Won_Check_Row+0x58>
		if(grid[i][row].playerColor == player){
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	4813      	ldr	r0, [pc, #76]	@ (8000fac <LCD_Game_Won_Check_Row+0x6c>)
 8000f5e:	68b9      	ldr	r1, [r7, #8]
 8000f60:	461a      	mov	r2, r3
 8000f62:	0052      	lsls	r2, r2, #1
 8000f64:	441a      	add	r2, r3
 8000f66:	460b      	mov	r3, r1
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	440b      	add	r3, r1
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	4403      	add	r3, r0
 8000f72:	3302      	adds	r3, #2
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	79ba      	ldrb	r2, [r7, #6]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d103      	bne.n	8000f84 <LCD_Game_Won_Check_Row+0x44>
			Consecutive++;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	e001      	b.n	8000f88 <LCD_Game_Won_Check_Row+0x48>
		}
		else{
			Consecutive = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73fb      	strb	r3, [r7, #15]
		}

		if(Consecutive == 4){
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	d101      	bne.n	8000f92 <LCD_Game_Won_Check_Row+0x52>
			return true;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e006      	b.n	8000fa0 <LCD_Game_Won_Check_Row+0x60>
	for(int i=0; i<COLUMNS; i++){
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	3301      	adds	r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	dddd      	ble.n	8000f5a <LCD_Game_Won_Check_Row+0x1a>
		}
	}

	return false;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	2002591c 	.word	0x2002591c

08000fb0 <LCD_Game_Won_Check_Column>:

bool LCD_Game_Won_Check_Column(uint8_t column, uint8_t player){
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	460a      	mov	r2, r1
 8000fba:	71fb      	strb	r3, [r7, #7]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	71bb      	strb	r3, [r7, #6]
	uint8_t Consecutive = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]
	for(int j=0; j<ROWS; j++){
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	e01e      	b.n	8001008 <LCD_Game_Won_Check_Column+0x58>
		if(grid[column][j].playerColor == player){
 8000fca:	79f9      	ldrb	r1, [r7, #7]
 8000fcc:	4813      	ldr	r0, [pc, #76]	@ (800101c <LCD_Game_Won_Check_Column+0x6c>)
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	0052      	lsls	r2, r2, #1
 8000fd4:	441a      	add	r2, r3
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	440b      	add	r3, r1
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	4403      	add	r3, r0
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	79ba      	ldrb	r2, [r7, #6]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d103      	bne.n	8000ff4 <LCD_Game_Won_Check_Column+0x44>
			Consecutive++;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e001      	b.n	8000ff8 <LCD_Game_Won_Check_Column+0x48>
		}
		else{
			Consecutive = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]
		}

		if(Consecutive == 4){
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	d101      	bne.n	8001002 <LCD_Game_Won_Check_Column+0x52>
			return true;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e006      	b.n	8001010 <LCD_Game_Won_Check_Column+0x60>
	for(int j=0; j<ROWS; j++){
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	3301      	adds	r3, #1
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	2b05      	cmp	r3, #5
 800100c:	dddd      	ble.n	8000fca <LCD_Game_Won_Check_Column+0x1a>
		}
	}

	return false;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	2002591c 	.word	0x2002591c

08001020 <LCD_Game_Won_Check_Up_Right_Diagonal>:


bool LCD_Game_Won_Check_Up_Right_Diagonal(uint8_t column, uint8_t row, uint8_t player){
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
 800102a:	460b      	mov	r3, r1
 800102c:	71bb      	strb	r3, [r7, #6]
 800102e:	4613      	mov	r3, r2
 8001030:	717b      	strb	r3, [r7, #5]
	uint8_t Consecutive = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]
	//need to find the bottom left spot and will go up right from there
	while( (row  > 0) && (column > 0) ){
 8001036:	e005      	b.n	8001044 <LCD_Game_Won_Check_Up_Right_Diagonal+0x24>
		//look until we get to the bottom left
		row--;
 8001038:	79bb      	ldrb	r3, [r7, #6]
 800103a:	3b01      	subs	r3, #1
 800103c:	71bb      	strb	r3, [r7, #6]
		column--;
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	3b01      	subs	r3, #1
 8001042:	71fb      	strb	r3, [r7, #7]
	while( (row  > 0) && (column > 0) ){
 8001044:	79bb      	ldrb	r3, [r7, #6]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d025      	beq.n	8001096 <LCD_Game_Won_Check_Up_Right_Diagonal+0x76>
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1f3      	bne.n	8001038 <LCD_Game_Won_Check_Up_Right_Diagonal+0x18>
	}

	while(row < ROWS && column < COLUMNS){
 8001050:	e021      	b.n	8001096 <LCD_Game_Won_Check_Up_Right_Diagonal+0x76>
		//keep going until we encounter top right edge
		if(grid[column][row].playerColor == player){
 8001052:	79f9      	ldrb	r1, [r7, #7]
 8001054:	79bb      	ldrb	r3, [r7, #6]
 8001056:	4816      	ldr	r0, [pc, #88]	@ (80010b0 <LCD_Game_Won_Check_Up_Right_Diagonal+0x90>)
 8001058:	461a      	mov	r2, r3
 800105a:	0052      	lsls	r2, r2, #1
 800105c:	441a      	add	r2, r3
 800105e:	460b      	mov	r3, r1
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	440b      	add	r3, r1
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	4403      	add	r3, r0
 800106a:	3302      	adds	r3, #2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	797a      	ldrb	r2, [r7, #5]
 8001070:	429a      	cmp	r2, r3
 8001072:	d103      	bne.n	800107c <LCD_Game_Won_Check_Up_Right_Diagonal+0x5c>
			Consecutive++;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	3301      	adds	r3, #1
 8001078:	73fb      	strb	r3, [r7, #15]
 800107a:	e001      	b.n	8001080 <LCD_Game_Won_Check_Up_Right_Diagonal+0x60>
		}
		else{
			Consecutive = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]
		}

		if(Consecutive == 4){
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	2b04      	cmp	r3, #4
 8001084:	d101      	bne.n	800108a <LCD_Game_Won_Check_Up_Right_Diagonal+0x6a>
			return true;
 8001086:	2301      	movs	r3, #1
 8001088:	e00c      	b.n	80010a4 <LCD_Game_Won_Check_Up_Right_Diagonal+0x84>
		}
		row++;
 800108a:	79bb      	ldrb	r3, [r7, #6]
 800108c:	3301      	adds	r3, #1
 800108e:	71bb      	strb	r3, [r7, #6]
		column++;
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	3301      	adds	r3, #1
 8001094:	71fb      	strb	r3, [r7, #7]
	while(row < ROWS && column < COLUMNS){
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	2b05      	cmp	r3, #5
 800109a:	d802      	bhi.n	80010a2 <LCD_Game_Won_Check_Up_Right_Diagonal+0x82>
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d9d7      	bls.n	8001052 <LCD_Game_Won_Check_Up_Right_Diagonal+0x32>
	}
	return false;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	2002591c 	.word	0x2002591c

080010b4 <LCD_Game_Won_Check_Up_Left_Diagonal>:

bool LCD_Game_Won_Check_Up_Left_Diagonal(uint8_t column, uint8_t row, uint8_t player){
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
 80010be:	460b      	mov	r3, r1
 80010c0:	71bb      	strb	r3, [r7, #6]
 80010c2:	4613      	mov	r3, r2
 80010c4:	717b      	strb	r3, [r7, #5]
	uint8_t Consecutive = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	73fb      	strb	r3, [r7, #15]
	//need to find the bottom left spot and will go up right from there
	while( (row > 0) && (column + 1 < COLUMNS) ){
 80010ca:	e005      	b.n	80010d8 <LCD_Game_Won_Check_Up_Left_Diagonal+0x24>
		//loop until bottom right, stop once we might go out of bounds (-1 or COLUMNS)
		row--;
 80010cc:	79bb      	ldrb	r3, [r7, #6]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	71bb      	strb	r3, [r7, #6]
		column++;
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	3301      	adds	r3, #1
 80010d6:	71fb      	strb	r3, [r7, #7]
	while( (row > 0) && (column + 1 < COLUMNS) ){
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d025      	beq.n	800112a <LCD_Game_Won_Check_Up_Left_Diagonal+0x76>
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b05      	cmp	r3, #5
 80010e2:	d9f3      	bls.n	80010cc <LCD_Game_Won_Check_Up_Left_Diagonal+0x18>
	}

	while(row < ROWS && column >= 0){
 80010e4:	e021      	b.n	800112a <LCD_Game_Won_Check_Up_Left_Diagonal+0x76>
		//keep going until we encounter top right edge
		if(grid[column][row].playerColor == player){
 80010e6:	79f9      	ldrb	r1, [r7, #7]
 80010e8:	79bb      	ldrb	r3, [r7, #6]
 80010ea:	4815      	ldr	r0, [pc, #84]	@ (8001140 <LCD_Game_Won_Check_Up_Left_Diagonal+0x8c>)
 80010ec:	461a      	mov	r2, r3
 80010ee:	0052      	lsls	r2, r2, #1
 80010f0:	441a      	add	r2, r3
 80010f2:	460b      	mov	r3, r1
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	440b      	add	r3, r1
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	4403      	add	r3, r0
 80010fe:	3302      	adds	r3, #2
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	797a      	ldrb	r2, [r7, #5]
 8001104:	429a      	cmp	r2, r3
 8001106:	d103      	bne.n	8001110 <LCD_Game_Won_Check_Up_Left_Diagonal+0x5c>
			Consecutive++;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	3301      	adds	r3, #1
 800110c:	73fb      	strb	r3, [r7, #15]
 800110e:	e001      	b.n	8001114 <LCD_Game_Won_Check_Up_Left_Diagonal+0x60>
		}
		else{
			Consecutive = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]
		}

		if(Consecutive == 4){
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	2b04      	cmp	r3, #4
 8001118:	d101      	bne.n	800111e <LCD_Game_Won_Check_Up_Left_Diagonal+0x6a>
			return true;
 800111a:	2301      	movs	r3, #1
 800111c:	e009      	b.n	8001132 <LCD_Game_Won_Check_Up_Left_Diagonal+0x7e>
		}
		row++;
 800111e:	79bb      	ldrb	r3, [r7, #6]
 8001120:	3301      	adds	r3, #1
 8001122:	71bb      	strb	r3, [r7, #6]
		column--;
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	3b01      	subs	r3, #1
 8001128:	71fb      	strb	r3, [r7, #7]
	while(row < ROWS && column >= 0){
 800112a:	79bb      	ldrb	r3, [r7, #6]
 800112c:	2b05      	cmp	r3, #5
 800112e:	d9da      	bls.n	80010e6 <LCD_Game_Won_Check_Up_Left_Diagonal+0x32>
	}
	return false;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	2002591c 	.word	0x2002591c

08001144 <LCD_Game_Won>:

bool LCD_Game_Won(uint8_t column, uint8_t row, uint8_t player){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	460b      	mov	r3, r1
 8001150:	71bb      	strb	r3, [r7, #6]
 8001152:	4613      	mov	r3, r2
 8001154:	717b      	strb	r3, [r7, #5]
	//check all adjacent pieces colors
	if(LCD_Game_Won_Check_Row(row, player)){
 8001156:	797a      	ldrb	r2, [r7, #5]
 8001158:	79bb      	ldrb	r3, [r7, #6]
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff feef 	bl	8000f40 <LCD_Game_Won_Check_Row>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <LCD_Game_Won+0x28>
		return true;
 8001168:	2301      	movs	r3, #1
 800116a:	e021      	b.n	80011b0 <LCD_Game_Won+0x6c>
	}
	else if(LCD_Game_Won_Check_Column(column, player)){
 800116c:	797a      	ldrb	r2, [r7, #5]
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff1c 	bl	8000fb0 <LCD_Game_Won_Check_Column>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <LCD_Game_Won+0x3e>
		return true;
 800117e:	2301      	movs	r3, #1
 8001180:	e016      	b.n	80011b0 <LCD_Game_Won+0x6c>
	}
	else if(LCD_Game_Won_Check_Up_Right_Diagonal(column, row, player)){
 8001182:	797a      	ldrb	r2, [r7, #5]
 8001184:	79b9      	ldrb	r1, [r7, #6]
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff49 	bl	8001020 <LCD_Game_Won_Check_Up_Right_Diagonal>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <LCD_Game_Won+0x54>
		return true;
 8001194:	2301      	movs	r3, #1
 8001196:	e00b      	b.n	80011b0 <LCD_Game_Won+0x6c>
	}
	else if(LCD_Game_Won_Check_Up_Left_Diagonal(column, row, player)){
 8001198:	797a      	ldrb	r2, [r7, #5]
 800119a:	79b9      	ldrb	r1, [r7, #6]
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff88 	bl	80010b4 <LCD_Game_Won_Check_Up_Left_Diagonal>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <LCD_Game_Won+0x6a>
		return true;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <LCD_Game_Won+0x6c>
	}
return false;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <LCD_Insert_Chip_Game_Grid>:

void LCD_Insert_Chip_Game_Grid(){
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
	if((LCD_Space_Available_Game_Grid())){
 80011be:	f7ff fe77 	bl	8000eb0 <LCD_Space_Available_Game_Grid>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80b3 	beq.w	8001330 <LCD_Insert_Chip_Game_Grid+0x178>
		//check for space
		uint8_t row = LCD_Get_Row_Game_Grid();
 80011ca:	f7ff fe8d 	bl	8000ee8 <LCD_Get_Row_Game_Grid>
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
		//returns the highest row for a column
		if(playerTurn == PLAYER_RED){
 80011d2:	4b59      	ldr	r3, [pc, #356]	@ (8001338 <LCD_Insert_Chip_Game_Grid+0x180>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d155      	bne.n	8001286 <LCD_Insert_Chip_Game_Grid+0xce>
			//if its Reds turn it will draw red
			LCD_Draw_Circle_Fill(grid[chip.column][row].xPos, LCD_PIXEL_HEIGHT-grid[chip.column][row].yPos, CIRCLE_RADIUS, LCD_COLOR_RED);
 80011da:	4b58      	ldr	r3, [pc, #352]	@ (800133c <LCD_Insert_Chip_Game_Grid+0x184>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	4957      	ldr	r1, [pc, #348]	@ (8001340 <LCD_Insert_Chip_Game_Grid+0x188>)
 80011e4:	461a      	mov	r2, r3
 80011e6:	0052      	lsls	r2, r2, #1
 80011e8:	441a      	add	r2, r3
 80011ea:	4603      	mov	r3, r0
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	4403      	add	r3, r0
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4413      	add	r3, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461c      	mov	r4, r3
 80011fa:	4b50      	ldr	r3, [pc, #320]	@ (800133c <LCD_Insert_Chip_Game_Grid+0x184>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	494f      	ldr	r1, [pc, #316]	@ (8001340 <LCD_Insert_Chip_Game_Grid+0x188>)
 8001204:	461a      	mov	r2, r3
 8001206:	0052      	lsls	r2, r2, #1
 8001208:	441a      	add	r2, r3
 800120a:	4603      	mov	r3, r0
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	4403      	add	r3, r0
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	440b      	add	r3, r1
 8001216:	3301      	adds	r3, #1
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 800121e:	b299      	uxth	r1, r3
 8001220:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001224:	220c      	movs	r2, #12
 8001226:	4620      	mov	r0, r4
 8001228:	f7ff fc92 	bl	8000b50 <LCD_Draw_Circle_Fill>
			grid[chip.column][row].playerColor = PLAYER_RED;
 800122c:	4b43      	ldr	r3, [pc, #268]	@ (800133c <LCD_Insert_Chip_Game_Grid+0x184>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	4942      	ldr	r1, [pc, #264]	@ (8001340 <LCD_Insert_Chip_Game_Grid+0x188>)
 8001236:	461a      	mov	r2, r3
 8001238:	0052      	lsls	r2, r2, #1
 800123a:	441a      	add	r2, r3
 800123c:	4603      	mov	r3, r0
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	4403      	add	r3, r0
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	440b      	add	r3, r1
 8001248:	3302      	adds	r3, #2
 800124a:	2202      	movs	r2, #2
 800124c:	701a      	strb	r2, [r3, #0]
			playerTurn = PLAYER_YELLOW;
 800124e:	4b3a      	ldr	r3, [pc, #232]	@ (8001338 <LCD_Insert_Chip_Game_Grid+0x180>)
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
			//update playerTurn to be other player
			LCD_Draw_Chip_To_Drop();
 8001254:	f7ff fbd6 	bl	8000a04 <LCD_Draw_Chip_To_Drop>
			//Update the display for the chip to drop
			if(LCD_Game_Won(chip.column, row, PLAYER_RED)){
 8001258:	4b38      	ldr	r3, [pc, #224]	@ (800133c <LCD_Insert_Chip_Game_Grid+0x184>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	79f9      	ldrb	r1, [r7, #7]
 800125e:	2202      	movs	r2, #2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff6f 	bl	8001144 <LCD_Game_Won>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d061      	beq.n	8001330 <LCD_Insert_Chip_Game_Grid+0x178>
				redScore++;
 800126c:	4b35      	ldr	r3, [pc, #212]	@ (8001344 <LCD_Insert_Chip_Game_Grid+0x18c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b33      	ldr	r3, [pc, #204]	@ (8001344 <LCD_Insert_Chip_Game_Grid+0x18c>)
 8001276:	701a      	strb	r2, [r3, #0]
				removeSchedulerEvent(POLLING_GAME_EVENT);
 8001278:	2008      	movs	r0, #8
 800127a:	f000 f9f9 	bl	8001670 <removeSchedulerEvent>
				addSchedulerEvent(SCORE_SCREEN_EVENT);
 800127e:	2010      	movs	r0, #16
 8001280:	f000 f9e4 	bl	800164c <addSchedulerEvent>
				addSchedulerEvent(SCORE_SCREEN_EVENT);
			}			//Check if game is over
		}
	}

}
 8001284:	e054      	b.n	8001330 <LCD_Insert_Chip_Game_Grid+0x178>
			LCD_Draw_Circle_Fill(grid[chip.column][row].xPos, LCD_PIXEL_HEIGHT-grid[chip.column][row].yPos, CIRCLE_RADIUS, LCD_COLOR_YELLOW);
 8001286:	4b2d      	ldr	r3, [pc, #180]	@ (800133c <LCD_Insert_Chip_Game_Grid+0x184>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	492c      	ldr	r1, [pc, #176]	@ (8001340 <LCD_Insert_Chip_Game_Grid+0x188>)
 8001290:	461a      	mov	r2, r3
 8001292:	0052      	lsls	r2, r2, #1
 8001294:	441a      	add	r2, r3
 8001296:	4603      	mov	r3, r0
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	4403      	add	r3, r0
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	440b      	add	r3, r1
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461c      	mov	r4, r3
 80012a6:	4b25      	ldr	r3, [pc, #148]	@ (800133c <LCD_Insert_Chip_Game_Grid+0x184>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	4924      	ldr	r1, [pc, #144]	@ (8001340 <LCD_Insert_Chip_Game_Grid+0x188>)
 80012b0:	461a      	mov	r2, r3
 80012b2:	0052      	lsls	r2, r2, #1
 80012b4:	441a      	add	r2, r3
 80012b6:	4603      	mov	r3, r0
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4403      	add	r3, r0
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	3301      	adds	r3, #1
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80012ca:	b299      	uxth	r1, r3
 80012cc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80012d0:	220c      	movs	r2, #12
 80012d2:	4620      	mov	r0, r4
 80012d4:	f7ff fc3c 	bl	8000b50 <LCD_Draw_Circle_Fill>
			grid[chip.column][row].playerColor = PLAYER_YELLOW;
 80012d8:	4b18      	ldr	r3, [pc, #96]	@ (800133c <LCD_Insert_Chip_Game_Grid+0x184>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	4917      	ldr	r1, [pc, #92]	@ (8001340 <LCD_Insert_Chip_Game_Grid+0x188>)
 80012e2:	461a      	mov	r2, r3
 80012e4:	0052      	lsls	r2, r2, #1
 80012e6:	441a      	add	r2, r3
 80012e8:	4603      	mov	r3, r0
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4403      	add	r3, r0
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4413      	add	r3, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	3302      	adds	r3, #2
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
			playerTurn = PLAYER_RED;
 80012fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <LCD_Insert_Chip_Game_Grid+0x180>)
 80012fc:	2202      	movs	r2, #2
 80012fe:	701a      	strb	r2, [r3, #0]
			LCD_Draw_Chip_To_Drop();
 8001300:	f7ff fb80 	bl	8000a04 <LCD_Draw_Chip_To_Drop>
			if(LCD_Game_Won(chip.column, row, PLAYER_YELLOW)){
 8001304:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <LCD_Insert_Chip_Game_Grid+0x184>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	79f9      	ldrb	r1, [r7, #7]
 800130a:	2201      	movs	r2, #1
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff19 	bl	8001144 <LCD_Game_Won>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00b      	beq.n	8001330 <LCD_Insert_Chip_Game_Grid+0x178>
				yellowScore++;
 8001318:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <LCD_Insert_Chip_Game_Grid+0x190>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <LCD_Insert_Chip_Game_Grid+0x190>)
 8001322:	701a      	strb	r2, [r3, #0]
				removeSchedulerEvent(POLLING_GAME_EVENT);
 8001324:	2008      	movs	r0, #8
 8001326:	f000 f9a3 	bl	8001670 <removeSchedulerEvent>
				addSchedulerEvent(SCORE_SCREEN_EVENT);
 800132a:	2010      	movs	r0, #16
 800132c:	f000 f98e 	bl	800164c <addSchedulerEvent>
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bd90      	pop	{r4, r7, pc}
 8001338:	20000002 	.word	0x20000002
 800133c:	2002599c 	.word	0x2002599c
 8001340:	2002591c 	.word	0x2002591c
 8001344:	2002599f 	.word	0x2002599f
 8001348:	200259a0 	.word	0x200259a0

0800134c <LCD_Draw_Start_Screen>:
void LCD_Draw_Start_Screen(){
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_BLACK);
 8001350:	2100      	movs	r1, #0
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff fcda 	bl	8000d0c <LCD_Clear>
	addSchedulerEvent(POLLING_MODE_SELECT_EVENT);
 8001358:	2002      	movs	r0, #2
 800135a:	f000 f977 	bl	800164c <addSchedulerEvent>
	removeSchedulerEvent(START_MENU_EVENT);
 800135e:	2001      	movs	r0, #1
 8001360:	f000 f986 	bl	8001670 <removeSchedulerEvent>
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}

08001368 <LCD_Draw_Game_Grid>:

void LCD_Draw_Game_Grid(){
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b085      	sub	sp, #20
 800136c:	af02      	add	r7, sp, #8
	LCD_Clear(0, LCD_COLOR_WHITE);
 800136e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001372:	2000      	movs	r0, #0
 8001374:	f7ff fcca 	bl	8000d0c <LCD_Clear>
	//Clears screen

	Init_Grid();
 8001378:	f7ff f984 	bl	8000684 <Init_Grid>
	Init_Chip_To_Drop();
 800137c:	f7ff f970 	bl	8000660 <Init_Chip_To_Drop>

	LCD_Draw_Rectangle_Fill(0, GRID_BACKGROUND_YPOS, LCD_PIXEL_WIDTH, SQUARE_SIZE*ROWS, LCD_COLOR_BLUE);
 8001380:	231f      	movs	r3, #31
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	23cc      	movs	r3, #204	@ 0xcc
 8001386:	22f0      	movs	r2, #240	@ 0xf0
 8001388:	2174      	movs	r1, #116	@ 0x74
 800138a:	2000      	movs	r0, #0
 800138c:	f7ff fc33 	bl	8000bf6 <LCD_Draw_Rectangle_Fill>

	for(uint8_t i=1; i<7; i++){
 8001390:	2301      	movs	r3, #1
 8001392:	71fb      	strb	r3, [r7, #7]
 8001394:	e00e      	b.n	80013b4 <LCD_Draw_Game_Grid+0x4c>
		LCD_Draw_Vertical_Line(SQUARE_SIZE*i,GRID_OFFSET_HORIZONTAL,SQUARE_SIZE*ROWS,LCD_COLOR_BLACK);
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	b29b      	uxth	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	4413      	add	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	b298      	uxth	r0, r3
 80013a4:	2300      	movs	r3, #0
 80013a6:	22cc      	movs	r2, #204	@ 0xcc
 80013a8:	2174      	movs	r1, #116	@ 0x74
 80013aa:	f7ff fc60 	bl	8000c6e <LCD_Draw_Vertical_Line>
	for(uint8_t i=1; i<7; i++){
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	3301      	adds	r3, #1
 80013b2:	71fb      	strb	r3, [r7, #7]
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d9ed      	bls.n	8001396 <LCD_Draw_Game_Grid+0x2e>
		//each tile is 34x34 so 180 is 6 height
		//15 is the offset from the edge, 34 is the size
	}
	for(uint8_t i =1; i<7; i++){
 80013ba:	2301      	movs	r3, #1
 80013bc:	71bb      	strb	r3, [r7, #6]
 80013be:	e013      	b.n	80013e8 <LCD_Draw_Game_Grid+0x80>
		LCD_Draw_Horizontal_Line(0,LCD_PIXEL_HEIGHT-(SQUARE_SIZE*i),LCD_PIXEL_WIDTH,LCD_COLOR_BLACK);
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	02d2      	lsls	r2, r2, #11
 80013c8:	1ad2      	subs	r2, r2, r3
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80013d6:	b299      	uxth	r1, r3
 80013d8:	2300      	movs	r3, #0
 80013da:	22f0      	movs	r2, #240	@ 0xf0
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff fc6d 	bl	8000cbc <LCD_Draw_Horizontal_Line>
	for(uint8_t i =1; i<7; i++){
 80013e2:	79bb      	ldrb	r3, [r7, #6]
 80013e4:	3301      	adds	r3, #1
 80013e6:	71bb      	strb	r3, [r7, #6]
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d9e8      	bls.n	80013c0 <LCD_Draw_Game_Grid+0x58>
		//want each horizontal line to go across the screen
	}
	for(uint8_t i = 0; i<COLUMNS; i++){
 80013ee:	2300      	movs	r3, #0
 80013f0:	717b      	strb	r3, [r7, #5]
 80013f2:	e030      	b.n	8001456 <LCD_Draw_Game_Grid+0xee>
		for(uint8_t j =0; j<ROWS; j++){
 80013f4:	2300      	movs	r3, #0
 80013f6:	713b      	strb	r3, [r7, #4]
 80013f8:	e027      	b.n	800144a <LCD_Draw_Game_Grid+0xe2>
			LCD_Draw_Circle_Fill(grid[i][j].xPos, LCD_PIXEL_HEIGHT-grid[i][j].yPos, CIRCLE_RADIUS, LCD_COLOR_WHITE);
 80013fa:	7979      	ldrb	r1, [r7, #5]
 80013fc:	793b      	ldrb	r3, [r7, #4]
 80013fe:	481c      	ldr	r0, [pc, #112]	@ (8001470 <LCD_Draw_Game_Grid+0x108>)
 8001400:	461a      	mov	r2, r3
 8001402:	0052      	lsls	r2, r2, #1
 8001404:	441a      	add	r2, r3
 8001406:	460b      	mov	r3, r1
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	440b      	add	r3, r1
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	4413      	add	r3, r2
 8001410:	4403      	add	r3, r0
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	461c      	mov	r4, r3
 8001416:	7979      	ldrb	r1, [r7, #5]
 8001418:	793b      	ldrb	r3, [r7, #4]
 800141a:	4815      	ldr	r0, [pc, #84]	@ (8001470 <LCD_Draw_Game_Grid+0x108>)
 800141c:	461a      	mov	r2, r3
 800141e:	0052      	lsls	r2, r2, #1
 8001420:	441a      	add	r2, r3
 8001422:	460b      	mov	r3, r1
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	440b      	add	r3, r1
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	4403      	add	r3, r0
 800142e:	3301      	adds	r3, #1
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001436:	b299      	uxth	r1, r3
 8001438:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800143c:	220c      	movs	r2, #12
 800143e:	4620      	mov	r0, r4
 8001440:	f7ff fb86 	bl	8000b50 <LCD_Draw_Circle_Fill>
		for(uint8_t j =0; j<ROWS; j++){
 8001444:	793b      	ldrb	r3, [r7, #4]
 8001446:	3301      	adds	r3, #1
 8001448:	713b      	strb	r3, [r7, #4]
 800144a:	793b      	ldrb	r3, [r7, #4]
 800144c:	2b05      	cmp	r3, #5
 800144e:	d9d4      	bls.n	80013fa <LCD_Draw_Game_Grid+0x92>
	for(uint8_t i = 0; i<COLUMNS; i++){
 8001450:	797b      	ldrb	r3, [r7, #5]
 8001452:	3301      	adds	r3, #1
 8001454:	717b      	strb	r3, [r7, #5]
 8001456:	797b      	ldrb	r3, [r7, #5]
 8001458:	2b06      	cmp	r3, #6
 800145a:	d9cb      	bls.n	80013f4 <LCD_Draw_Game_Grid+0x8c>
		}
	}
	addSchedulerEvent(POLLING_GAME_EVENT);
 800145c:	2008      	movs	r0, #8
 800145e:	f000 f8f5 	bl	800164c <addSchedulerEvent>
	removeSchedulerEvent(BUILD_NEW_GAME_EVENT);
 8001462:	2004      	movs	r0, #4
 8001464:	f000 f904 	bl	8001670 <removeSchedulerEvent>
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bd90      	pop	{r4, r7, pc}
 8001470:	2002591c 	.word	0x2002591c

08001474 <LCD_Draw_Score_Screen>:

void LCD_Draw_Score_Screen(){
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af02      	add	r7, sp, #8
	LCD_Clear(0, LCD_COLOR_GREY);
 800147a:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 800147e:	2000      	movs	r0, #0
 8001480:	f7ff fc44 	bl	8000d0c <LCD_Clear>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 8001484:	2000      	movs	r0, #0
 8001486:	f7ff fc63 	bl	8000d50 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 800148a:	4858      	ldr	r0, [pc, #352]	@ (80015ec <LCD_Draw_Score_Screen+0x178>)
 800148c:	f7ff fc70 	bl	8000d70 <LCD_SetFont>

	LCD_DisplayChar(95,TIMER_YPOS,'T');
 8001490:	2254      	movs	r2, #84	@ 0x54
 8001492:	2114      	movs	r1, #20
 8001494:	205f      	movs	r0, #95	@ 0x5f
 8001496:	f7ff fce9 	bl	8000e6c <LCD_DisplayChar>
	LCD_DisplayChar(105,TIMER_YPOS,'i');
 800149a:	2269      	movs	r2, #105	@ 0x69
 800149c:	2114      	movs	r1, #20
 800149e:	2069      	movs	r0, #105	@ 0x69
 80014a0:	f7ff fce4 	bl	8000e6c <LCD_DisplayChar>
	LCD_DisplayChar(115,TIMER_YPOS,'m');
 80014a4:	226d      	movs	r2, #109	@ 0x6d
 80014a6:	2114      	movs	r1, #20
 80014a8:	2073      	movs	r0, #115	@ 0x73
 80014aa:	f7ff fcdf 	bl	8000e6c <LCD_DisplayChar>
	LCD_DisplayChar(130,TIMER_YPOS,'e');
 80014ae:	2265      	movs	r2, #101	@ 0x65
 80014b0:	2114      	movs	r1, #20
 80014b2:	2082      	movs	r0, #130	@ 0x82
 80014b4:	f7ff fcda 	bl	8000e6c <LCD_DisplayChar>
	LCD_DisplayChar(140,TIMER_YPOS,'r');
 80014b8:	2272      	movs	r2, #114	@ 0x72
 80014ba:	2114      	movs	r1, #20
 80014bc:	208c      	movs	r0, #140	@ 0x8c
 80014be:	f7ff fcd5 	bl	8000e6c <LCD_DisplayChar>

	LCD_DisplayChar(95,SCORE_YPOS,'S');
 80014c2:	2253      	movs	r2, #83	@ 0x53
 80014c4:	2150      	movs	r1, #80	@ 0x50
 80014c6:	205f      	movs	r0, #95	@ 0x5f
 80014c8:	f7ff fcd0 	bl	8000e6c <LCD_DisplayChar>
	LCD_DisplayChar(107,SCORE_YPOS,'c');
 80014cc:	2263      	movs	r2, #99	@ 0x63
 80014ce:	2150      	movs	r1, #80	@ 0x50
 80014d0:	206b      	movs	r0, #107	@ 0x6b
 80014d2:	f7ff fccb 	bl	8000e6c <LCD_DisplayChar>
	LCD_DisplayChar(117,SCORE_YPOS,'o');
 80014d6:	226f      	movs	r2, #111	@ 0x6f
 80014d8:	2150      	movs	r1, #80	@ 0x50
 80014da:	2075      	movs	r0, #117	@ 0x75
 80014dc:	f7ff fcc6 	bl	8000e6c <LCD_DisplayChar>
	LCD_DisplayChar(127,SCORE_YPOS,'r');
 80014e0:	2272      	movs	r2, #114	@ 0x72
 80014e2:	2150      	movs	r1, #80	@ 0x50
 80014e4:	207f      	movs	r0, #127	@ 0x7f
 80014e6:	f7ff fcc1 	bl	8000e6c <LCD_DisplayChar>
	LCD_DisplayChar(135,SCORE_YPOS,'e');
 80014ea:	2265      	movs	r2, #101	@ 0x65
 80014ec:	2150      	movs	r1, #80	@ 0x50
 80014ee:	2087      	movs	r0, #135	@ 0x87
 80014f0:	f7ff fcbc 	bl	8000e6c <LCD_DisplayChar>

	LCD_Draw_Circle_Fill(103, SCORE_YPOS+60, 16, LCD_COLOR_BLACK);
 80014f4:	2300      	movs	r3, #0
 80014f6:	2210      	movs	r2, #16
 80014f8:	218c      	movs	r1, #140	@ 0x8c
 80014fa:	2067      	movs	r0, #103	@ 0x67
 80014fc:	f7ff fb28 	bl	8000b50 <LCD_Draw_Circle_Fill>
	LCD_Draw_Circle_Fill(144, SCORE_YPOS+60, 16, LCD_COLOR_BLACK);
 8001500:	2300      	movs	r3, #0
 8001502:	2210      	movs	r2, #16
 8001504:	218c      	movs	r1, #140	@ 0x8c
 8001506:	2090      	movs	r0, #144	@ 0x90
 8001508:	f7ff fb22 	bl	8000b50 <LCD_Draw_Circle_Fill>
	//Outlines for the circles

	LCD_Draw_Circle_Fill(103, SCORE_YPOS+60, 15, LCD_COLOR_RED);
 800150c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001510:	220f      	movs	r2, #15
 8001512:	218c      	movs	r1, #140	@ 0x8c
 8001514:	2067      	movs	r0, #103	@ 0x67
 8001516:	f7ff fb1b 	bl	8000b50 <LCD_Draw_Circle_Fill>
	LCD_Draw_Circle_Fill(144, SCORE_YPOS+60, 15, LCD_COLOR_YELLOW);
 800151a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800151e:	220f      	movs	r2, #15
 8001520:	218c      	movs	r1, #140	@ 0x8c
 8001522:	2090      	movs	r0, #144	@ 0x90
 8001524:	f7ff fb14 	bl	8000b50 <LCD_Draw_Circle_Fill>

	uint16_t redScoreToDisplay = '0' + redScore;
 8001528:	4b31      	ldr	r3, [pc, #196]	@ (80015f0 <LCD_Draw_Score_Screen+0x17c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	3330      	adds	r3, #48	@ 0x30
 800152e:	80fb      	strh	r3, [r7, #6]
	uint16_t yellowScoreToDisplay = '0' + yellowScore;
 8001530:	4b30      	ldr	r3, [pc, #192]	@ (80015f4 <LCD_Draw_Score_Screen+0x180>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	3330      	adds	r3, #48	@ 0x30
 8001536:	80bb      	strh	r3, [r7, #4]

	LCD_DisplayChar(97, SCORE_YPOS+51, redScoreToDisplay);
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	461a      	mov	r2, r3
 800153e:	2183      	movs	r1, #131	@ 0x83
 8001540:	2061      	movs	r0, #97	@ 0x61
 8001542:	f7ff fc93 	bl	8000e6c <LCD_DisplayChar>
	LCD_DisplayChar(137, SCORE_YPOS+51, yellowScoreToDisplay);
 8001546:	88bb      	ldrh	r3, [r7, #4]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	461a      	mov	r2, r3
 800154c:	2183      	movs	r1, #131	@ 0x83
 800154e:	2089      	movs	r0, #137	@ 0x89
 8001550:	f7ff fc8c 	bl	8000e6c <LCD_DisplayChar>
	//RIGHT NOW ONLY CAN DISPLAY UP TO 9 FOR BOTH SIDES OTHERWISE OVERFLOW
	LCD_DisplayChar(116, SCORE_YPOS+48, '-');
 8001554:	222d      	movs	r2, #45	@ 0x2d
 8001556:	2180      	movs	r1, #128	@ 0x80
 8001558:	2074      	movs	r0, #116	@ 0x74
 800155a:	f7ff fc87 	bl	8000e6c <LCD_DisplayChar>

	LCD_Draw_Rectangle_Fill(18, RESTART_BUTTON_YPOS-2, 204, 104, LCD_COLOR_BLACK);
 800155e:	2300      	movs	r3, #0
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2368      	movs	r3, #104	@ 0x68
 8001564:	22cc      	movs	r2, #204	@ 0xcc
 8001566:	21c6      	movs	r1, #198	@ 0xc6
 8001568:	2012      	movs	r0, #18
 800156a:	f7ff fb44 	bl	8000bf6 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(20, RESTART_BUTTON_YPOS, 200, 100, LCD_COLOR_CYAN);
 800156e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2364      	movs	r3, #100	@ 0x64
 8001576:	22c8      	movs	r2, #200	@ 0xc8
 8001578:	21c8      	movs	r1, #200	@ 0xc8
 800157a:	2014      	movs	r0, #20
 800157c:	f7ff fb3b 	bl	8000bf6 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(25, RESTART_BUTTON_YPOS+5, 190, 90, LCD_COLOR_BLUE2);
 8001580:	f240 531f 	movw	r3, #1311	@ 0x51f
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	235a      	movs	r3, #90	@ 0x5a
 8001588:	22be      	movs	r2, #190	@ 0xbe
 800158a:	21cd      	movs	r1, #205	@ 0xcd
 800158c:	2019      	movs	r0, #25
 800158e:	f7ff fb32 	bl	8000bf6 <LCD_Draw_Rectangle_Fill>

	LCD_DisplayChar(95,  NEW_YPOS,'N');
 8001592:	224e      	movs	r2, #78	@ 0x4e
 8001594:	21e6      	movs	r1, #230	@ 0xe6
 8001596:	205f      	movs	r0, #95	@ 0x5f
 8001598:	f7ff fc68 	bl	8000e6c <LCD_DisplayChar>
	LCD_DisplayChar(110, NEW_YPOS,'E');
 800159c:	2245      	movs	r2, #69	@ 0x45
 800159e:	21e6      	movs	r1, #230	@ 0xe6
 80015a0:	206e      	movs	r0, #110	@ 0x6e
 80015a2:	f7ff fc63 	bl	8000e6c <LCD_DisplayChar>
	LCD_DisplayChar(125, NEW_YPOS,'W');
 80015a6:	2257      	movs	r2, #87	@ 0x57
 80015a8:	21e6      	movs	r1, #230	@ 0xe6
 80015aa:	207d      	movs	r0, #125	@ 0x7d
 80015ac:	f7ff fc5e 	bl	8000e6c <LCD_DisplayChar>

	LCD_DisplayChar(90,  GAME_YPOS,'G');
 80015b0:	2247      	movs	r2, #71	@ 0x47
 80015b2:	21fa      	movs	r1, #250	@ 0xfa
 80015b4:	205a      	movs	r0, #90	@ 0x5a
 80015b6:	f7ff fc59 	bl	8000e6c <LCD_DisplayChar>
	LCD_DisplayChar(105, GAME_YPOS,'A');
 80015ba:	2241      	movs	r2, #65	@ 0x41
 80015bc:	21fa      	movs	r1, #250	@ 0xfa
 80015be:	2069      	movs	r0, #105	@ 0x69
 80015c0:	f7ff fc54 	bl	8000e6c <LCD_DisplayChar>
	LCD_DisplayChar(120, GAME_YPOS,'M');
 80015c4:	224d      	movs	r2, #77	@ 0x4d
 80015c6:	21fa      	movs	r1, #250	@ 0xfa
 80015c8:	2078      	movs	r0, #120	@ 0x78
 80015ca:	f7ff fc4f 	bl	8000e6c <LCD_DisplayChar>
	LCD_DisplayChar(135, GAME_YPOS,'E');
 80015ce:	2245      	movs	r2, #69	@ 0x45
 80015d0:	21fa      	movs	r1, #250	@ 0xfa
 80015d2:	2087      	movs	r0, #135	@ 0x87
 80015d4:	f7ff fc4a 	bl	8000e6c <LCD_DisplayChar>


	removeSchedulerEvent(SCORE_SCREEN_EVENT);
 80015d8:	2010      	movs	r0, #16
 80015da:	f000 f849 	bl	8001670 <removeSchedulerEvent>
	addSchedulerEvent(POLLING_RESTART_EVENT);
 80015de:	2020      	movs	r0, #32
 80015e0:	f000 f834 	bl	800164c <addSchedulerEvent>
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000004 	.word	0x20000004
 80015f0:	2002599f 	.word	0x2002599f
 80015f4:	200259a0 	.word	0x200259a0

080015f8 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015fc:	b672      	cpsid	i
}
 80015fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <LCD_Error_Handler+0x8>

08001604 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001608:	f001 f993 	bl	8002932 <STMPE811_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b02      	cmp	r3, #2
 8001610:	d001      	beq.n	8001616 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001612:	bf00      	nop
 8001614:	e7fd      	b.n	8001612 <InitializeLCDTouch+0xe>
  }
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}

0800161a <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f001 fa3d 	bl	8002aa2 <STMPE811_ReadTouch>
 8001628:	4603      	mov	r3, r0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <getScheduledEvents>:
#include "Scheduler.h"

static uint32_t scheduledEvents;

uint32_t getScheduledEvents(){
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8001638:	4b03      	ldr	r3, [pc, #12]	@ (8001648 <getScheduledEvents+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	200259a4 	.word	0x200259a4

0800164c <addSchedulerEvent>:

void addSchedulerEvent(uint32_t event_to_schedule){
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event_to_schedule;
 8001654:	4b05      	ldr	r3, [pc, #20]	@ (800166c <addSchedulerEvent+0x20>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4313      	orrs	r3, r2
 800165c:	4a03      	ldr	r2, [pc, #12]	@ (800166c <addSchedulerEvent+0x20>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	200259a4 	.word	0x200259a4

08001670 <removeSchedulerEvent>:


void removeSchedulerEvent(uint32_t event_to_remove){
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~event_to_remove;//this might be wrong
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	43da      	mvns	r2, r3
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <removeSchedulerEvent+0x24>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4013      	ands	r3, r2
 8001682:	4a04      	ldr	r2, [pc, #16]	@ (8001694 <removeSchedulerEvent+0x24>)
 8001684:	6013      	str	r3, [r2, #0]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	200259a4 	.word	0x200259a4

08001698 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800169c:	f000 f9fe 	bl	8001a9c <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80016a0:	20ca      	movs	r0, #202	@ 0xca
 80016a2:	f000 f943 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80016a6:	20c3      	movs	r0, #195	@ 0xc3
 80016a8:	f000 f94d 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80016ac:	2008      	movs	r0, #8
 80016ae:	f000 f94a 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80016b2:	2050      	movs	r0, #80	@ 0x50
 80016b4:	f000 f947 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80016b8:	20cf      	movs	r0, #207	@ 0xcf
 80016ba:	f000 f937 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80016be:	2000      	movs	r0, #0
 80016c0:	f000 f941 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80016c4:	20c1      	movs	r0, #193	@ 0xc1
 80016c6:	f000 f93e 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80016ca:	2030      	movs	r0, #48	@ 0x30
 80016cc:	f000 f93b 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80016d0:	20ed      	movs	r0, #237	@ 0xed
 80016d2:	f000 f92b 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80016d6:	2064      	movs	r0, #100	@ 0x64
 80016d8:	f000 f935 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80016dc:	2003      	movs	r0, #3
 80016de:	f000 f932 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80016e2:	2012      	movs	r0, #18
 80016e4:	f000 f92f 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80016e8:	2081      	movs	r0, #129	@ 0x81
 80016ea:	f000 f92c 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80016ee:	20e8      	movs	r0, #232	@ 0xe8
 80016f0:	f000 f91c 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80016f4:	2085      	movs	r0, #133	@ 0x85
 80016f6:	f000 f926 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80016fa:	2000      	movs	r0, #0
 80016fc:	f000 f923 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001700:	2078      	movs	r0, #120	@ 0x78
 8001702:	f000 f920 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001706:	20cb      	movs	r0, #203	@ 0xcb
 8001708:	f000 f910 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800170c:	2039      	movs	r0, #57	@ 0x39
 800170e:	f000 f91a 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001712:	202c      	movs	r0, #44	@ 0x2c
 8001714:	f000 f917 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001718:	2000      	movs	r0, #0
 800171a:	f000 f914 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800171e:	2034      	movs	r0, #52	@ 0x34
 8001720:	f000 f911 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001724:	2002      	movs	r0, #2
 8001726:	f000 f90e 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800172a:	20f7      	movs	r0, #247	@ 0xf7
 800172c:	f000 f8fe 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001730:	2020      	movs	r0, #32
 8001732:	f000 f908 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001736:	20ea      	movs	r0, #234	@ 0xea
 8001738:	f000 f8f8 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800173c:	2000      	movs	r0, #0
 800173e:	f000 f902 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001742:	2000      	movs	r0, #0
 8001744:	f000 f8ff 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001748:	20b1      	movs	r0, #177	@ 0xb1
 800174a:	f000 f8ef 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800174e:	2000      	movs	r0, #0
 8001750:	f000 f8f9 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001754:	201b      	movs	r0, #27
 8001756:	f000 f8f6 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800175a:	20b6      	movs	r0, #182	@ 0xb6
 800175c:	f000 f8e6 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001760:	200a      	movs	r0, #10
 8001762:	f000 f8f0 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001766:	20a2      	movs	r0, #162	@ 0xa2
 8001768:	f000 f8ed 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 800176c:	20c0      	movs	r0, #192	@ 0xc0
 800176e:	f000 f8dd 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001772:	2010      	movs	r0, #16
 8001774:	f000 f8e7 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001778:	20c1      	movs	r0, #193	@ 0xc1
 800177a:	f000 f8d7 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800177e:	2010      	movs	r0, #16
 8001780:	f000 f8e1 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001784:	20c5      	movs	r0, #197	@ 0xc5
 8001786:	f000 f8d1 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800178a:	2045      	movs	r0, #69	@ 0x45
 800178c:	f000 f8db 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001790:	2015      	movs	r0, #21
 8001792:	f000 f8d8 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001796:	20c7      	movs	r0, #199	@ 0xc7
 8001798:	f000 f8c8 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 800179c:	2090      	movs	r0, #144	@ 0x90
 800179e:	f000 f8d2 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80017a2:	2036      	movs	r0, #54	@ 0x36
 80017a4:	f000 f8c2 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80017a8:	20c8      	movs	r0, #200	@ 0xc8
 80017aa:	f000 f8cc 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80017ae:	20f2      	movs	r0, #242	@ 0xf2
 80017b0:	f000 f8bc 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80017b4:	2000      	movs	r0, #0
 80017b6:	f000 f8c6 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80017ba:	20b0      	movs	r0, #176	@ 0xb0
 80017bc:	f000 f8b6 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80017c0:	20c2      	movs	r0, #194	@ 0xc2
 80017c2:	f000 f8c0 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80017c6:	20b6      	movs	r0, #182	@ 0xb6
 80017c8:	f000 f8b0 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80017cc:	200a      	movs	r0, #10
 80017ce:	f000 f8ba 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80017d2:	20a7      	movs	r0, #167	@ 0xa7
 80017d4:	f000 f8b7 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80017d8:	2027      	movs	r0, #39	@ 0x27
 80017da:	f000 f8b4 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80017de:	2004      	movs	r0, #4
 80017e0:	f000 f8b1 	bl	8001946 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80017e4:	202a      	movs	r0, #42	@ 0x2a
 80017e6:	f000 f8a1 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80017ea:	2000      	movs	r0, #0
 80017ec:	f000 f8ab 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80017f0:	2000      	movs	r0, #0
 80017f2:	f000 f8a8 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f000 f8a5 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80017fc:	20ef      	movs	r0, #239	@ 0xef
 80017fe:	f000 f8a2 	bl	8001946 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001802:	202b      	movs	r0, #43	@ 0x2b
 8001804:	f000 f892 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001808:	2000      	movs	r0, #0
 800180a:	f000 f89c 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800180e:	2000      	movs	r0, #0
 8001810:	f000 f899 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001814:	2001      	movs	r0, #1
 8001816:	f000 f896 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800181a:	203f      	movs	r0, #63	@ 0x3f
 800181c:	f000 f893 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001820:	20f6      	movs	r0, #246	@ 0xf6
 8001822:	f000 f883 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001826:	2001      	movs	r0, #1
 8001828:	f000 f88d 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800182c:	2000      	movs	r0, #0
 800182e:	f000 f88a 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001832:	2006      	movs	r0, #6
 8001834:	f000 f887 	bl	8001946 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001838:	202c      	movs	r0, #44	@ 0x2c
 800183a:	f000 f877 	bl	800192c <ili9341_Write_Reg>
  LCD_Delay(200);
 800183e:	20c8      	movs	r0, #200	@ 0xc8
 8001840:	f000 f9e8 	bl	8001c14 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001844:	2026      	movs	r0, #38	@ 0x26
 8001846:	f000 f871 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800184a:	2001      	movs	r0, #1
 800184c:	f000 f87b 	bl	8001946 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001850:	20e0      	movs	r0, #224	@ 0xe0
 8001852:	f000 f86b 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001856:	200f      	movs	r0, #15
 8001858:	f000 f875 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 800185c:	2029      	movs	r0, #41	@ 0x29
 800185e:	f000 f872 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001862:	2024      	movs	r0, #36	@ 0x24
 8001864:	f000 f86f 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001868:	200c      	movs	r0, #12
 800186a:	f000 f86c 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800186e:	200e      	movs	r0, #14
 8001870:	f000 f869 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001874:	2009      	movs	r0, #9
 8001876:	f000 f866 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800187a:	204e      	movs	r0, #78	@ 0x4e
 800187c:	f000 f863 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001880:	2078      	movs	r0, #120	@ 0x78
 8001882:	f000 f860 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001886:	203c      	movs	r0, #60	@ 0x3c
 8001888:	f000 f85d 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800188c:	2009      	movs	r0, #9
 800188e:	f000 f85a 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001892:	2013      	movs	r0, #19
 8001894:	f000 f857 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001898:	2005      	movs	r0, #5
 800189a:	f000 f854 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800189e:	2017      	movs	r0, #23
 80018a0:	f000 f851 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80018a4:	2011      	movs	r0, #17
 80018a6:	f000 f84e 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80018aa:	2000      	movs	r0, #0
 80018ac:	f000 f84b 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80018b0:	20e1      	movs	r0, #225	@ 0xe1
 80018b2:	f000 f83b 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f000 f845 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80018bc:	2016      	movs	r0, #22
 80018be:	f000 f842 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80018c2:	201b      	movs	r0, #27
 80018c4:	f000 f83f 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80018c8:	2004      	movs	r0, #4
 80018ca:	f000 f83c 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80018ce:	2011      	movs	r0, #17
 80018d0:	f000 f839 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80018d4:	2007      	movs	r0, #7
 80018d6:	f000 f836 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80018da:	2031      	movs	r0, #49	@ 0x31
 80018dc:	f000 f833 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80018e0:	2033      	movs	r0, #51	@ 0x33
 80018e2:	f000 f830 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80018e6:	2042      	movs	r0, #66	@ 0x42
 80018e8:	f000 f82d 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80018ec:	2005      	movs	r0, #5
 80018ee:	f000 f82a 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80018f2:	200c      	movs	r0, #12
 80018f4:	f000 f827 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80018f8:	200a      	movs	r0, #10
 80018fa:	f000 f824 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80018fe:	2028      	movs	r0, #40	@ 0x28
 8001900:	f000 f821 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001904:	202f      	movs	r0, #47	@ 0x2f
 8001906:	f000 f81e 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800190a:	200f      	movs	r0, #15
 800190c:	f000 f81b 	bl	8001946 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001910:	2011      	movs	r0, #17
 8001912:	f000 f80b 	bl	800192c <ili9341_Write_Reg>
  LCD_Delay(200);
 8001916:	20c8      	movs	r0, #200	@ 0xc8
 8001918:	f000 f97c 	bl	8001c14 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800191c:	2029      	movs	r0, #41	@ 0x29
 800191e:	f000 f805 	bl	800192c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001922:	202c      	movs	r0, #44	@ 0x2c
 8001924:	f000 f802 	bl	800192c <ili9341_Write_Reg>
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}

0800192c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	4618      	mov	r0, r3
 800193a:	f000 f949 	bl	8001bd0 <LCD_IO_WriteReg>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f91a 	bl	8001b8c <LCD_IO_WriteData>
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001964:	4819      	ldr	r0, [pc, #100]	@ (80019cc <SPI_Init+0x6c>)
 8001966:	f004 fbc6 	bl	80060f6 <HAL_SPI_GetState>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d12b      	bne.n	80019c8 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001970:	4b16      	ldr	r3, [pc, #88]	@ (80019cc <SPI_Init+0x6c>)
 8001972:	4a17      	ldr	r2, [pc, #92]	@ (80019d0 <SPI_Init+0x70>)
 8001974:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001976:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <SPI_Init+0x6c>)
 8001978:	2218      	movs	r2, #24
 800197a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800197c:	4b13      	ldr	r3, [pc, #76]	@ (80019cc <SPI_Init+0x6c>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001982:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <SPI_Init+0x6c>)
 8001984:	2200      	movs	r2, #0
 8001986:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001988:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <SPI_Init+0x6c>)
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800198e:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <SPI_Init+0x6c>)
 8001990:	2200      	movs	r2, #0
 8001992:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001994:	4b0d      	ldr	r3, [pc, #52]	@ (80019cc <SPI_Init+0x6c>)
 8001996:	2207      	movs	r2, #7
 8001998:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800199a:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <SPI_Init+0x6c>)
 800199c:	2200      	movs	r2, #0
 800199e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80019a0:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <SPI_Init+0x6c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80019a6:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <SPI_Init+0x6c>)
 80019a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019ac:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80019ae:	4b07      	ldr	r3, [pc, #28]	@ (80019cc <SPI_Init+0x6c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80019b4:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <SPI_Init+0x6c>)
 80019b6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019ba:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80019bc:	4803      	ldr	r0, [pc, #12]	@ (80019cc <SPI_Init+0x6c>)
 80019be:	f000 f833 	bl	8001a28 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80019c2:	4802      	ldr	r0, [pc, #8]	@ (80019cc <SPI_Init+0x6c>)
 80019c4:	f004 f9a2 	bl	8005d0c <HAL_SPI_Init>
  }
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200259a8 	.word	0x200259a8
 80019d0:	40015000 	.word	0x40015000

080019d4 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <SPI_Write+0x34>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	1db9      	adds	r1, r7, #6
 80019e8:	2201      	movs	r2, #1
 80019ea:	4808      	ldr	r0, [pc, #32]	@ (8001a0c <SPI_Write+0x38>)
 80019ec:	f004 fa3f 	bl	8005e6e <HAL_SPI_Transmit>
 80019f0:	4603      	mov	r3, r0
 80019f2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80019fa:	f000 f809 	bl	8001a10 <SPI_Error>
  }
}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	2000000c 	.word	0x2000000c
 8001a0c:	200259a8 	.word	0x200259a8

08001a10 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001a14:	4803      	ldr	r0, [pc, #12]	@ (8001a24 <SPI_Error+0x14>)
 8001a16:	f004 fa02 	bl	8005e1e <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001a1a:	f7ff ffa1 	bl	8001960 <SPI_Init>
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200259a8 	.word	0x200259a8

08001a28 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	@ 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <SPI_MspInit+0x6c>)
 8001a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a38:	4a16      	ldr	r2, [pc, #88]	@ (8001a94 <SPI_MspInit+0x6c>)
 8001a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a40:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <SPI_MspInit+0x6c>)
 8001a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <SPI_MspInit+0x6c>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a54:	4a0f      	ldr	r2, [pc, #60]	@ (8001a94 <SPI_MspInit+0x6c>)
 8001a56:	f043 0320 	orr.w	r3, r3, #32
 8001a5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <SPI_MspInit+0x6c>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001a68:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001a76:	2301      	movs	r3, #1
 8001a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001a7a:	2305      	movs	r3, #5
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	4804      	ldr	r0, [pc, #16]	@ (8001a98 <SPI_MspInit+0x70>)
 8001a86:	f001 fcbb 	bl	8003400 <HAL_GPIO_Init>
}
 8001a8a:	bf00      	nop
 8001a8c:	3728      	adds	r7, #40	@ 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40021400 	.word	0x40021400

08001a9c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001aa2:	4b36      	ldr	r3, [pc, #216]	@ (8001b7c <LCD_IO_Init+0xe0>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d164      	bne.n	8001b74 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001aaa:	4b34      	ldr	r3, [pc, #208]	@ (8001b7c <LCD_IO_Init+0xe0>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	4b32      	ldr	r3, [pc, #200]	@ (8001b80 <LCD_IO_Init+0xe4>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab8:	4a31      	ldr	r2, [pc, #196]	@ (8001b80 <LCD_IO_Init+0xe4>)
 8001aba:	f043 0308 	orr.w	r3, r3, #8
 8001abe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b80 <LCD_IO_Init+0xe4>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001acc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ad0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ada:	2302      	movs	r3, #2
 8001adc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001ade:	f107 030c 	add.w	r3, r7, #12
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4827      	ldr	r0, [pc, #156]	@ (8001b84 <LCD_IO_Init+0xe8>)
 8001ae6:	f001 fc8b 	bl	8003400 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	4b24      	ldr	r3, [pc, #144]	@ (8001b80 <LCD_IO_Init+0xe4>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	4a23      	ldr	r2, [pc, #140]	@ (8001b80 <LCD_IO_Init+0xe4>)
 8001af4:	f043 0308 	orr.w	r3, r3, #8
 8001af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afa:	4b21      	ldr	r3, [pc, #132]	@ (8001b80 <LCD_IO_Init+0xe4>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001b06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b14:	2302      	movs	r3, #2
 8001b16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4819      	ldr	r0, [pc, #100]	@ (8001b84 <LCD_IO_Init+0xe8>)
 8001b20:	f001 fc6e 	bl	8003400 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001b24:	2300      	movs	r3, #0
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <LCD_IO_Init+0xe4>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2c:	4a14      	ldr	r2, [pc, #80]	@ (8001b80 <LCD_IO_Init+0xe4>)
 8001b2e:	f043 0304 	orr.w	r3, r3, #4
 8001b32:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b34:	4b12      	ldr	r3, [pc, #72]	@ (8001b80 <LCD_IO_Init+0xe4>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001b40:	2304      	movs	r3, #4
 8001b42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001b44:	2301      	movs	r3, #1
 8001b46:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	4619      	mov	r1, r3
 8001b56:	480c      	ldr	r0, [pc, #48]	@ (8001b88 <LCD_IO_Init+0xec>)
 8001b58:	f001 fc52 	bl	8003400 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2104      	movs	r1, #4
 8001b60:	4809      	ldr	r0, [pc, #36]	@ (8001b88 <LCD_IO_Init+0xec>)
 8001b62:	f001 ff05 	bl	8003970 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001b66:	2201      	movs	r2, #1
 8001b68:	2104      	movs	r1, #4
 8001b6a:	4807      	ldr	r0, [pc, #28]	@ (8001b88 <LCD_IO_Init+0xec>)
 8001b6c:	f001 ff00 	bl	8003970 <HAL_GPIO_WritePin>

    SPI_Init();
 8001b70:	f7ff fef6 	bl	8001960 <SPI_Init>
  }
}
 8001b74:	bf00      	nop
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20025a00 	.word	0x20025a00
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020c00 	.word	0x40020c00
 8001b88:	40020800 	.word	0x40020800

08001b8c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001b96:	2201      	movs	r2, #1
 8001b98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b9c:	480a      	ldr	r0, [pc, #40]	@ (8001bc8 <LCD_IO_WriteData+0x3c>)
 8001b9e:	f001 fee7 	bl	8003970 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2104      	movs	r1, #4
 8001ba6:	4809      	ldr	r0, [pc, #36]	@ (8001bcc <LCD_IO_WriteData+0x40>)
 8001ba8:	f001 fee2 	bl	8003970 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ff10 	bl	80019d4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	2104      	movs	r1, #4
 8001bb8:	4804      	ldr	r0, [pc, #16]	@ (8001bcc <LCD_IO_WriteData+0x40>)
 8001bba:	f001 fed9 	bl	8003970 <HAL_GPIO_WritePin>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40020c00 	.word	0x40020c00
 8001bcc:	40020800 	.word	0x40020800

08001bd0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001be0:	480a      	ldr	r0, [pc, #40]	@ (8001c0c <LCD_IO_WriteReg+0x3c>)
 8001be2:	f001 fec5 	bl	8003970 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001be6:	2200      	movs	r2, #0
 8001be8:	2104      	movs	r1, #4
 8001bea:	4809      	ldr	r0, [pc, #36]	@ (8001c10 <LCD_IO_WriteReg+0x40>)
 8001bec:	f001 fec0 	bl	8003970 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff feed 	bl	80019d4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	2104      	movs	r1, #4
 8001bfe:	4804      	ldr	r0, [pc, #16]	@ (8001c10 <LCD_IO_WriteReg+0x40>)
 8001c00:	f001 feb6 	bl	8003970 <HAL_GPIO_WritePin>
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40020c00 	.word	0x40020c00
 8001c10:	40020800 	.word	0x40020800

08001c14 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f001 fa87 	bl	8003130 <HAL_Delay>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c30:	f001 fa0c 	bl	800304c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c34:	f000 f846 	bl	8001cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c38:	f000 fa36 	bl	80020a8 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001c3c:	f000 f8ec 	bl	8001e18 <MX_LTDC_Init>
  MX_RNG_Init();
 8001c40:	f000 f99c 	bl	8001f7c <MX_RNG_Init>
  MX_TIM2_Init();
 8001c44:	f000 f9e4 	bl	8002010 <MX_TIM2_Init>
  MX_SPI5_Init();
 8001c48:	f000 f9ac 	bl	8001fa4 <MX_SPI5_Init>
  MX_I2C3_Init();
 8001c4c:	f000 f8a4 	bl	8001d98 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8001c50:	f7fe fc44 	bl	80004dc <ApplicationInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


//   addSchedulerEvent(SCORE_SCREEN_EVENT);
   addSchedulerEvent(BUILD_NEW_GAME_EVENT);
 8001c54:	2004      	movs	r0, #4
 8001c56:	f7ff fcf9 	bl	800164c <addSchedulerEvent>


  while (1)
  {
    /* USER CODE END WHILE */
	  eventsToRun = getScheduledEvents();
 8001c5a:	f7ff fceb 	bl	8001634 <getScheduledEvents>
 8001c5e:	6078      	str	r0, [r7, #4]

	  if(eventsToRun & START_MENU_EVENT){
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <main+0x4c>
		  LCD_Start_Screen();
 8001c6a:	f7fe fc51 	bl	8000510 <LCD_Start_Screen>
		  HAL_Delay(1000);
 8001c6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c72:	f001 fa5d 	bl	8003130 <HAL_Delay>
	  }
	  if(eventsToRun & POLLING_MODE_SELECT_EVENT){
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <main+0x5a>
		  LCD_Polling_Mode();
 8001c80:	f7fe fc8c 	bl	800059c <LCD_Polling_Mode>
	  }
	  if(eventsToRun & BUILD_NEW_GAME_EVENT){
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <main+0x68>
		  LCD_Game_Screen();
 8001c8e:	f7fe fc45 	bl	800051c <LCD_Game_Screen>
	  }
	  if(eventsToRun & POLLING_GAME_EVENT){
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d004      	beq.n	8001ca6 <main+0x7c>
		  LCD_Touch_Polling_Game();
 8001c9c:	f7fe fc50 	bl	8000540 <LCD_Touch_Polling_Game>
		  HAL_Delay(100);
 8001ca0:	2064      	movs	r0, #100	@ 0x64
 8001ca2:	f001 fa45 	bl	8003130 <HAL_Delay>
	  }
	  if(eventsToRun & SCORE_SCREEN_EVENT){
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <main+0x8a>
		  LCD_Score_Screen();
 8001cb0:	f7fe fc3a 	bl	8000528 <LCD_Score_Screen>
	  }
	  if(eventsToRun & POLLING_RESTART_EVENT){
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0320 	and.w	r3, r3, #32
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0cd      	beq.n	8001c5a <main+0x30>
		  LCD_Polling_Restart();
 8001cbe:	f7fe fc57 	bl	8000570 <LCD_Polling_Restart>
	  eventsToRun = getScheduledEvents();
 8001cc2:	e7ca      	b.n	8001c5a <main+0x30>

08001cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b094      	sub	sp, #80	@ 0x50
 8001cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cca:	f107 0320 	add.w	r3, r7, #32
 8001cce:	2230      	movs	r2, #48	@ 0x30
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f004 fdd2 	bl	800687c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	4b28      	ldr	r3, [pc, #160]	@ (8001d90 <SystemClock_Config+0xcc>)
 8001cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf0:	4a27      	ldr	r2, [pc, #156]	@ (8001d90 <SystemClock_Config+0xcc>)
 8001cf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf8:	4b25      	ldr	r3, [pc, #148]	@ (8001d90 <SystemClock_Config+0xcc>)
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d04:	2300      	movs	r3, #0
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	4b22      	ldr	r3, [pc, #136]	@ (8001d94 <SystemClock_Config+0xd0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a21      	ldr	r2, [pc, #132]	@ (8001d94 <SystemClock_Config+0xd0>)
 8001d0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b1f      	ldr	r3, [pc, #124]	@ (8001d94 <SystemClock_Config+0xd0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d20:	2301      	movs	r3, #1
 8001d22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d2e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d34:	2308      	movs	r3, #8
 8001d36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d38:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001d3c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d42:	2307      	movs	r3, #7
 8001d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d46:	f107 0320 	add.w	r3, r7, #32
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f003 f970 	bl	8005030 <HAL_RCC_OscConfig>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d56:	f000 fb55 	bl	8002404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d5a:	230f      	movs	r3, #15
 8001d5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d66:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d72:	f107 030c 	add.w	r3, r7, #12
 8001d76:	2105      	movs	r1, #5
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f003 fbd1 	bl	8005520 <HAL_RCC_ClockConfig>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d84:	f000 fb3e 	bl	8002404 <Error_Handler>
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3750      	adds	r7, #80	@ 0x50
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40007000 	.word	0x40007000

08001d98 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e0c <MX_I2C3_Init+0x74>)
 8001d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001e10 <MX_I2C3_Init+0x78>)
 8001da0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001da2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e0c <MX_I2C3_Init+0x74>)
 8001da4:	4a1b      	ldr	r2, [pc, #108]	@ (8001e14 <MX_I2C3_Init+0x7c>)
 8001da6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001da8:	4b18      	ldr	r3, [pc, #96]	@ (8001e0c <MX_I2C3_Init+0x74>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001dae:	4b17      	ldr	r3, [pc, #92]	@ (8001e0c <MX_I2C3_Init+0x74>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001db4:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <MX_I2C3_Init+0x74>)
 8001db6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dbc:	4b13      	ldr	r3, [pc, #76]	@ (8001e0c <MX_I2C3_Init+0x74>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001dc2:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <MX_I2C3_Init+0x74>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dc8:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <MX_I2C3_Init+0x74>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dce:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <MX_I2C3_Init+0x74>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001dd4:	480d      	ldr	r0, [pc, #52]	@ (8001e0c <MX_I2C3_Init+0x74>)
 8001dd6:	f001 fde5 	bl	80039a4 <HAL_I2C_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001de0:	f000 fb10 	bl	8002404 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001de4:	2100      	movs	r1, #0
 8001de6:	4809      	ldr	r0, [pc, #36]	@ (8001e0c <MX_I2C3_Init+0x74>)
 8001de8:	f002 fe00 	bl	80049ec <HAL_I2CEx_ConfigAnalogFilter>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001df2:	f000 fb07 	bl	8002404 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001df6:	2100      	movs	r1, #0
 8001df8:	4804      	ldr	r0, [pc, #16]	@ (8001e0c <MX_I2C3_Init+0x74>)
 8001dfa:	f002 fe33 	bl	8004a64 <HAL_I2CEx_ConfigDigitalFilter>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001e04:	f000 fafe 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20025a04 	.word	0x20025a04
 8001e10:	40005c00 	.word	0x40005c00
 8001e14:	000186a0 	.word	0x000186a0

08001e18 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b09a      	sub	sp, #104	@ 0x68
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001e1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e22:	2234      	movs	r2, #52	@ 0x34
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f004 fd28 	bl	800687c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001e2c:	463b      	mov	r3, r7
 8001e2e:	2234      	movs	r2, #52	@ 0x34
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f004 fd22 	bl	800687c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001e38:	4b4e      	ldr	r3, [pc, #312]	@ (8001f74 <MX_LTDC_Init+0x15c>)
 8001e3a:	4a4f      	ldr	r2, [pc, #316]	@ (8001f78 <MX_LTDC_Init+0x160>)
 8001e3c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001e3e:	4b4d      	ldr	r3, [pc, #308]	@ (8001f74 <MX_LTDC_Init+0x15c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001e44:	4b4b      	ldr	r3, [pc, #300]	@ (8001f74 <MX_LTDC_Init+0x15c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f74 <MX_LTDC_Init+0x15c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001e50:	4b48      	ldr	r3, [pc, #288]	@ (8001f74 <MX_LTDC_Init+0x15c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001e56:	4b47      	ldr	r3, [pc, #284]	@ (8001f74 <MX_LTDC_Init+0x15c>)
 8001e58:	2207      	movs	r2, #7
 8001e5a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001e5c:	4b45      	ldr	r3, [pc, #276]	@ (8001f74 <MX_LTDC_Init+0x15c>)
 8001e5e:	2203      	movs	r2, #3
 8001e60:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001e62:	4b44      	ldr	r3, [pc, #272]	@ (8001f74 <MX_LTDC_Init+0x15c>)
 8001e64:	220e      	movs	r2, #14
 8001e66:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001e68:	4b42      	ldr	r3, [pc, #264]	@ (8001f74 <MX_LTDC_Init+0x15c>)
 8001e6a:	2205      	movs	r2, #5
 8001e6c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001e6e:	4b41      	ldr	r3, [pc, #260]	@ (8001f74 <MX_LTDC_Init+0x15c>)
 8001e70:	f240 228e 	movw	r2, #654	@ 0x28e
 8001e74:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001e76:	4b3f      	ldr	r3, [pc, #252]	@ (8001f74 <MX_LTDC_Init+0x15c>)
 8001e78:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001e7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8001e7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f74 <MX_LTDC_Init+0x15c>)
 8001e80:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001e84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001e86:	4b3b      	ldr	r3, [pc, #236]	@ (8001f74 <MX_LTDC_Init+0x15c>)
 8001e88:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001e8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001e8e:	4b39      	ldr	r3, [pc, #228]	@ (8001f74 <MX_LTDC_Init+0x15c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001e96:	4b37      	ldr	r3, [pc, #220]	@ (8001f74 <MX_LTDC_Init+0x15c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001e9e:	4b35      	ldr	r3, [pc, #212]	@ (8001f74 <MX_LTDC_Init+0x15c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001ea6:	4833      	ldr	r0, [pc, #204]	@ (8001f74 <MX_LTDC_Init+0x15c>)
 8001ea8:	f002 fe1c 	bl	8004ae4 <HAL_LTDC_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001eb2:	f000 faa7 	bl	8002404 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001ed2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ed6:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001ed8:	2305      	movs	r3, #5
 8001eda:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001efa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001efe:	2200      	movs	r2, #0
 8001f00:	4619      	mov	r1, r3
 8001f02:	481c      	ldr	r0, [pc, #112]	@ (8001f74 <MX_LTDC_Init+0x15c>)
 8001f04:	f002 febe 	bl	8004c84 <HAL_LTDC_ConfigLayer>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001f0e:	f000 fa79 	bl	8002404 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001f2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f32:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001f34:	2305      	movs	r3, #5
 8001f36:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001f56:	463b      	mov	r3, r7
 8001f58:	2201      	movs	r2, #1
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4805      	ldr	r0, [pc, #20]	@ (8001f74 <MX_LTDC_Init+0x15c>)
 8001f5e:	f002 fe91 	bl	8004c84 <HAL_LTDC_ConfigLayer>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001f68:	f000 fa4c 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001f6c:	bf00      	nop
 8001f6e:	3768      	adds	r7, #104	@ 0x68
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20025a58 	.word	0x20025a58
 8001f78:	40016800 	.word	0x40016800

08001f7c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001f80:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <MX_RNG_Init+0x20>)
 8001f82:	4a07      	ldr	r2, [pc, #28]	@ (8001fa0 <MX_RNG_Init+0x24>)
 8001f84:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001f86:	4805      	ldr	r0, [pc, #20]	@ (8001f9c <MX_RNG_Init+0x20>)
 8001f88:	f003 fe96 	bl	8005cb8 <HAL_RNG_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001f92:	f000 fa37 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20025b00 	.word	0x20025b00
 8001fa0:	50060800 	.word	0x50060800

08001fa4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001fa8:	4b17      	ldr	r3, [pc, #92]	@ (8002008 <MX_SPI5_Init+0x64>)
 8001faa:	4a18      	ldr	r2, [pc, #96]	@ (800200c <MX_SPI5_Init+0x68>)
 8001fac:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001fae:	4b16      	ldr	r3, [pc, #88]	@ (8002008 <MX_SPI5_Init+0x64>)
 8001fb0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fb4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001fb6:	4b14      	ldr	r3, [pc, #80]	@ (8002008 <MX_SPI5_Init+0x64>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fbc:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <MX_SPI5_Init+0x64>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fc2:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <MX_SPI5_Init+0x64>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <MX_SPI5_Init+0x64>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <MX_SPI5_Init+0x64>)
 8001fd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fd4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <MX_SPI5_Init+0x64>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <MX_SPI5_Init+0x64>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fe2:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <MX_SPI5_Init+0x64>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe8:	4b07      	ldr	r3, [pc, #28]	@ (8002008 <MX_SPI5_Init+0x64>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001fee:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <MX_SPI5_Init+0x64>)
 8001ff0:	220a      	movs	r2, #10
 8001ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001ff4:	4804      	ldr	r0, [pc, #16]	@ (8002008 <MX_SPI5_Init+0x64>)
 8001ff6:	f003 fe89 	bl	8005d0c <HAL_SPI_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002000:	f000 fa00 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20025b10 	.word	0x20025b10
 800200c:	40015000 	.word	0x40015000

08002010 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002016:	f107 0308 	add.w	r3, r7, #8
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002024:	463b      	mov	r3, r7
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800202c:	4b1d      	ldr	r3, [pc, #116]	@ (80020a4 <MX_TIM2_Init+0x94>)
 800202e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002032:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002034:	4b1b      	ldr	r3, [pc, #108]	@ (80020a4 <MX_TIM2_Init+0x94>)
 8002036:	2200      	movs	r2, #0
 8002038:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203a:	4b1a      	ldr	r3, [pc, #104]	@ (80020a4 <MX_TIM2_Init+0x94>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002040:	4b18      	ldr	r3, [pc, #96]	@ (80020a4 <MX_TIM2_Init+0x94>)
 8002042:	f04f 32ff 	mov.w	r2, #4294967295
 8002046:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002048:	4b16      	ldr	r3, [pc, #88]	@ (80020a4 <MX_TIM2_Init+0x94>)
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204e:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <MX_TIM2_Init+0x94>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002054:	4813      	ldr	r0, [pc, #76]	@ (80020a4 <MX_TIM2_Init+0x94>)
 8002056:	f004 f939 	bl	80062cc <HAL_TIM_Base_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002060:	f000 f9d0 	bl	8002404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002064:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002068:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800206a:	f107 0308 	add.w	r3, r7, #8
 800206e:	4619      	mov	r1, r3
 8002070:	480c      	ldr	r0, [pc, #48]	@ (80020a4 <MX_TIM2_Init+0x94>)
 8002072:	f004 f97a 	bl	800636a <HAL_TIM_ConfigClockSource>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800207c:	f000 f9c2 	bl	8002404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002080:	2300      	movs	r3, #0
 8002082:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002088:	463b      	mov	r3, r7
 800208a:	4619      	mov	r1, r3
 800208c:	4805      	ldr	r0, [pc, #20]	@ (80020a4 <MX_TIM2_Init+0x94>)
 800208e:	f004 fb79 	bl	8006784 <HAL_TIMEx_MasterConfigSynchronization>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002098:	f000 f9b4 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800209c:	bf00      	nop
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20025b68 	.word	0x20025b68

080020a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08e      	sub	sp, #56	@ 0x38
 80020ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	60da      	str	r2, [r3, #12]
 80020bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	623b      	str	r3, [r7, #32]
 80020c2:	4bb2      	ldr	r3, [pc, #712]	@ (800238c <MX_GPIO_Init+0x2e4>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	4ab1      	ldr	r2, [pc, #708]	@ (800238c <MX_GPIO_Init+0x2e4>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ce:	4baf      	ldr	r3, [pc, #700]	@ (800238c <MX_GPIO_Init+0x2e4>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	623b      	str	r3, [r7, #32]
 80020d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	4bab      	ldr	r3, [pc, #684]	@ (800238c <MX_GPIO_Init+0x2e4>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	4aaa      	ldr	r2, [pc, #680]	@ (800238c <MX_GPIO_Init+0x2e4>)
 80020e4:	f043 0320 	orr.w	r3, r3, #32
 80020e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ea:	4ba8      	ldr	r3, [pc, #672]	@ (800238c <MX_GPIO_Init+0x2e4>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
 80020fa:	4ba4      	ldr	r3, [pc, #656]	@ (800238c <MX_GPIO_Init+0x2e4>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	4aa3      	ldr	r2, [pc, #652]	@ (800238c <MX_GPIO_Init+0x2e4>)
 8002100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002104:	6313      	str	r3, [r2, #48]	@ 0x30
 8002106:	4ba1      	ldr	r3, [pc, #644]	@ (800238c <MX_GPIO_Init+0x2e4>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800210e:	61bb      	str	r3, [r7, #24]
 8002110:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	4b9d      	ldr	r3, [pc, #628]	@ (800238c <MX_GPIO_Init+0x2e4>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	4a9c      	ldr	r2, [pc, #624]	@ (800238c <MX_GPIO_Init+0x2e4>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6313      	str	r3, [r2, #48]	@ 0x30
 8002122:	4b9a      	ldr	r3, [pc, #616]	@ (800238c <MX_GPIO_Init+0x2e4>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	4b96      	ldr	r3, [pc, #600]	@ (800238c <MX_GPIO_Init+0x2e4>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	4a95      	ldr	r2, [pc, #596]	@ (800238c <MX_GPIO_Init+0x2e4>)
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	6313      	str	r3, [r2, #48]	@ 0x30
 800213e:	4b93      	ldr	r3, [pc, #588]	@ (800238c <MX_GPIO_Init+0x2e4>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	4b8f      	ldr	r3, [pc, #572]	@ (800238c <MX_GPIO_Init+0x2e4>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	4a8e      	ldr	r2, [pc, #568]	@ (800238c <MX_GPIO_Init+0x2e4>)
 8002154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002158:	6313      	str	r3, [r2, #48]	@ 0x30
 800215a:	4b8c      	ldr	r3, [pc, #560]	@ (800238c <MX_GPIO_Init+0x2e4>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	4b88      	ldr	r3, [pc, #544]	@ (800238c <MX_GPIO_Init+0x2e4>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	4a87      	ldr	r2, [pc, #540]	@ (800238c <MX_GPIO_Init+0x2e4>)
 8002170:	f043 0310 	orr.w	r3, r3, #16
 8002174:	6313      	str	r3, [r2, #48]	@ 0x30
 8002176:	4b85      	ldr	r3, [pc, #532]	@ (800238c <MX_GPIO_Init+0x2e4>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	4b81      	ldr	r3, [pc, #516]	@ (800238c <MX_GPIO_Init+0x2e4>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a80      	ldr	r2, [pc, #512]	@ (800238c <MX_GPIO_Init+0x2e4>)
 800218c:	f043 0308 	orr.w	r3, r3, #8
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b7e      	ldr	r3, [pc, #504]	@ (800238c <MX_GPIO_Init+0x2e4>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	2116      	movs	r1, #22
 80021a2:	487b      	ldr	r0, [pc, #492]	@ (8002390 <MX_GPIO_Init+0x2e8>)
 80021a4:	f001 fbe4 	bl	8003970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80021a8:	2200      	movs	r2, #0
 80021aa:	2180      	movs	r1, #128	@ 0x80
 80021ac:	4879      	ldr	r0, [pc, #484]	@ (8002394 <MX_GPIO_Init+0x2ec>)
 80021ae:	f001 fbdf 	bl	8003970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80021b2:	2200      	movs	r2, #0
 80021b4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80021b8:	4877      	ldr	r0, [pc, #476]	@ (8002398 <MX_GPIO_Init+0x2f0>)
 80021ba:	f001 fbd9 	bl	8003970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80021be:	2200      	movs	r2, #0
 80021c0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80021c4:	4875      	ldr	r0, [pc, #468]	@ (800239c <MX_GPIO_Init+0x2f4>)
 80021c6:	f001 fbd3 	bl	8003970 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80021ca:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80021ce:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d8:	2303      	movs	r3, #3
 80021da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021dc:	230c      	movs	r3, #12
 80021de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021e4:	4619      	mov	r1, r3
 80021e6:	486e      	ldr	r0, [pc, #440]	@ (80023a0 <MX_GPIO_Init+0x2f8>)
 80021e8:	f001 f90a 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80021ec:	2301      	movs	r3, #1
 80021ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f8:	2303      	movs	r3, #3
 80021fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021fc:	230c      	movs	r3, #12
 80021fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002200:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002204:	4619      	mov	r1, r3
 8002206:	4862      	ldr	r0, [pc, #392]	@ (8002390 <MX_GPIO_Init+0x2e8>)
 8002208:	f001 f8fa 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800220c:	2316      	movs	r3, #22
 800220e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002210:	2301      	movs	r3, #1
 8002212:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002220:	4619      	mov	r1, r3
 8002222:	485b      	ldr	r0, [pc, #364]	@ (8002390 <MX_GPIO_Init+0x2e8>)
 8002224:	f001 f8ec 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002228:	f248 0307 	movw	r3, #32775	@ 0x8007
 800222c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800222e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002232:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002238:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800223c:	4619      	mov	r1, r3
 800223e:	4855      	ldr	r0, [pc, #340]	@ (8002394 <MX_GPIO_Init+0x2ec>)
 8002240:	f001 f8de 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002244:	2380      	movs	r3, #128	@ 0x80
 8002246:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002248:	2301      	movs	r3, #1
 800224a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2300      	movs	r3, #0
 8002252:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002254:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002258:	4619      	mov	r1, r3
 800225a:	484e      	ldr	r0, [pc, #312]	@ (8002394 <MX_GPIO_Init+0x2ec>)
 800225c:	f001 f8d0 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002260:	2320      	movs	r3, #32
 8002262:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002264:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002268:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800226e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002272:	4619      	mov	r1, r3
 8002274:	4846      	ldr	r0, [pc, #280]	@ (8002390 <MX_GPIO_Init+0x2e8>)
 8002276:	f001 f8c3 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800227a:	2304      	movs	r3, #4
 800227c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227e:	2300      	movs	r3, #0
 8002280:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002286:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800228a:	4619      	mov	r1, r3
 800228c:	4845      	ldr	r0, [pc, #276]	@ (80023a4 <MX_GPIO_Init+0x2fc>)
 800228e:	f001 f8b7 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002292:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002296:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a0:	2303      	movs	r3, #3
 80022a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022a4:	230c      	movs	r3, #12
 80022a6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022ac:	4619      	mov	r1, r3
 80022ae:	483b      	ldr	r0, [pc, #236]	@ (800239c <MX_GPIO_Init+0x2f4>)
 80022b0:	f001 f8a6 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80022b4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ba:	2302      	movs	r3, #2
 80022bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c2:	2303      	movs	r3, #3
 80022c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022c6:	230c      	movs	r3, #12
 80022c8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022ce:	4619      	mov	r1, r3
 80022d0:	4835      	ldr	r0, [pc, #212]	@ (80023a8 <MX_GPIO_Init+0x300>)
 80022d2:	f001 f895 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80022d6:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80022da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e4:	2300      	movs	r3, #0
 80022e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80022e8:	230c      	movs	r3, #12
 80022ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022f0:	4619      	mov	r1, r3
 80022f2:	482c      	ldr	r0, [pc, #176]	@ (80023a4 <MX_GPIO_Init+0x2fc>)
 80022f4:	f001 f884 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80022f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fe:	2300      	movs	r3, #0
 8002300:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800230a:	4619      	mov	r1, r3
 800230c:	4825      	ldr	r0, [pc, #148]	@ (80023a4 <MX_GPIO_Init+0x2fc>)
 800230e:	f001 f877 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002312:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002316:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002324:	230c      	movs	r3, #12
 8002326:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002328:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800232c:	4619      	mov	r1, r3
 800232e:	481a      	ldr	r0, [pc, #104]	@ (8002398 <MX_GPIO_Init+0x2f0>)
 8002330:	f001 f866 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002334:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002338:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233a:	2300      	movs	r3, #0
 800233c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002342:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002346:	4619      	mov	r1, r3
 8002348:	4813      	ldr	r0, [pc, #76]	@ (8002398 <MX_GPIO_Init+0x2f0>)
 800234a:	f001 f859 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800234e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002352:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002354:	2301      	movs	r3, #1
 8002356:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002360:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002364:	4619      	mov	r1, r3
 8002366:	480c      	ldr	r0, [pc, #48]	@ (8002398 <MX_GPIO_Init+0x2f0>)
 8002368:	f001 f84a 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800236c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002370:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002372:	2302      	movs	r3, #2
 8002374:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237a:	2303      	movs	r3, #3
 800237c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800237e:	2307      	movs	r3, #7
 8002380:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002382:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002386:	4619      	mov	r1, r3
 8002388:	e010      	b.n	80023ac <MX_GPIO_Init+0x304>
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800
 8002390:	40020800 	.word	0x40020800
 8002394:	40020000 	.word	0x40020000
 8002398:	40020c00 	.word	0x40020c00
 800239c:	40021800 	.word	0x40021800
 80023a0:	40021400 	.word	0x40021400
 80023a4:	40020400 	.word	0x40020400
 80023a8:	40021000 	.word	0x40021000
 80023ac:	4812      	ldr	r0, [pc, #72]	@ (80023f8 <MX_GPIO_Init+0x350>)
 80023ae:	f001 f827 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80023b2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b8:	2301      	movs	r3, #1
 80023ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2300      	movs	r3, #0
 80023c2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023c8:	4619      	mov	r1, r3
 80023ca:	480c      	ldr	r0, [pc, #48]	@ (80023fc <MX_GPIO_Init+0x354>)
 80023cc:	f001 f818 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80023d0:	2360      	movs	r3, #96	@ 0x60
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d4:	2302      	movs	r3, #2
 80023d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023dc:	2303      	movs	r3, #3
 80023de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023e0:	230c      	movs	r3, #12
 80023e2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023e8:	4619      	mov	r1, r3
 80023ea:	4805      	ldr	r0, [pc, #20]	@ (8002400 <MX_GPIO_Init+0x358>)
 80023ec:	f001 f808 	bl	8003400 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023f0:	bf00      	nop
 80023f2:	3738      	adds	r7, #56	@ 0x38
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40020000 	.word	0x40020000
 80023fc:	40021800 	.word	0x40021800
 8002400:	40020400 	.word	0x40020400

08002404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002408:	b672      	cpsid	i
}
 800240a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800240c:	bf00      	nop
 800240e:	e7fd      	b.n	800240c <Error_Handler+0x8>

08002410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]
 800241a:	4b10      	ldr	r3, [pc, #64]	@ (800245c <HAL_MspInit+0x4c>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241e:	4a0f      	ldr	r2, [pc, #60]	@ (800245c <HAL_MspInit+0x4c>)
 8002420:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002424:	6453      	str	r3, [r2, #68]	@ 0x44
 8002426:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <HAL_MspInit+0x4c>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	4b09      	ldr	r3, [pc, #36]	@ (800245c <HAL_MspInit+0x4c>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	4a08      	ldr	r2, [pc, #32]	@ (800245c <HAL_MspInit+0x4c>)
 800243c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002440:	6413      	str	r3, [r2, #64]	@ 0x40
 8002442:	4b06      	ldr	r3, [pc, #24]	@ (800245c <HAL_MspInit+0x4c>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800244e:	2007      	movs	r0, #7
 8002450:	f000 ff86 	bl	8003360 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40023800 	.word	0x40023800

08002460 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08a      	sub	sp, #40	@ 0x28
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a29      	ldr	r2, [pc, #164]	@ (8002524 <HAL_I2C_MspInit+0xc4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d14b      	bne.n	800251a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	4b28      	ldr	r3, [pc, #160]	@ (8002528 <HAL_I2C_MspInit+0xc8>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	4a27      	ldr	r2, [pc, #156]	@ (8002528 <HAL_I2C_MspInit+0xc8>)
 800248c:	f043 0304 	orr.w	r3, r3, #4
 8002490:	6313      	str	r3, [r2, #48]	@ 0x30
 8002492:	4b25      	ldr	r3, [pc, #148]	@ (8002528 <HAL_I2C_MspInit+0xc8>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	4b21      	ldr	r3, [pc, #132]	@ (8002528 <HAL_I2C_MspInit+0xc8>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	4a20      	ldr	r2, [pc, #128]	@ (8002528 <HAL_I2C_MspInit+0xc8>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002528 <HAL_I2C_MspInit+0xc8>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80024ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024c0:	2312      	movs	r3, #18
 80024c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c8:	2300      	movs	r3, #0
 80024ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024cc:	2304      	movs	r3, #4
 80024ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	4619      	mov	r1, r3
 80024d6:	4815      	ldr	r0, [pc, #84]	@ (800252c <HAL_I2C_MspInit+0xcc>)
 80024d8:	f000 ff92 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80024dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024e2:	2312      	movs	r3, #18
 80024e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024ee:	2304      	movs	r3, #4
 80024f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80024f2:	f107 0314 	add.w	r3, r7, #20
 80024f6:	4619      	mov	r1, r3
 80024f8:	480d      	ldr	r0, [pc, #52]	@ (8002530 <HAL_I2C_MspInit+0xd0>)
 80024fa:	f000 ff81 	bl	8003400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	4b09      	ldr	r3, [pc, #36]	@ (8002528 <HAL_I2C_MspInit+0xc8>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	4a08      	ldr	r2, [pc, #32]	@ (8002528 <HAL_I2C_MspInit+0xc8>)
 8002508:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800250c:	6413      	str	r3, [r2, #64]	@ 0x40
 800250e:	4b06      	ldr	r3, [pc, #24]	@ (8002528 <HAL_I2C_MspInit+0xc8>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800251a:	bf00      	nop
 800251c:	3728      	adds	r7, #40	@ 0x28
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40005c00 	.word	0x40005c00
 8002528:	40023800 	.word	0x40023800
 800252c:	40020800 	.word	0x40020800
 8002530:	40020000 	.word	0x40020000

08002534 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b09a      	sub	sp, #104	@ 0x68
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800254c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002550:	2230      	movs	r2, #48	@ 0x30
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f004 f991 	bl	800687c <memset>
  if(hltdc->Instance==LTDC)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a81      	ldr	r2, [pc, #516]	@ (8002764 <HAL_LTDC_MspInit+0x230>)
 8002560:	4293      	cmp	r3, r2
 8002562:	f040 80fb 	bne.w	800275c <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002566:	2308      	movs	r3, #8
 8002568:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 800256a:	23c8      	movs	r3, #200	@ 0xc8
 800256c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800256e:	2302      	movs	r3, #2
 8002570:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8002572:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002576:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800257c:	4618      	mov	r0, r3
 800257e:	f003 f9db 	bl	8005938 <HAL_RCCEx_PeriphCLKConfig>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002588:	f7ff ff3c 	bl	8002404 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800258c:	2300      	movs	r3, #0
 800258e:	623b      	str	r3, [r7, #32]
 8002590:	4b75      	ldr	r3, [pc, #468]	@ (8002768 <HAL_LTDC_MspInit+0x234>)
 8002592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002594:	4a74      	ldr	r2, [pc, #464]	@ (8002768 <HAL_LTDC_MspInit+0x234>)
 8002596:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800259a:	6453      	str	r3, [r2, #68]	@ 0x44
 800259c:	4b72      	ldr	r3, [pc, #456]	@ (8002768 <HAL_LTDC_MspInit+0x234>)
 800259e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025a4:	623b      	str	r3, [r7, #32]
 80025a6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025a8:	2300      	movs	r3, #0
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	4b6e      	ldr	r3, [pc, #440]	@ (8002768 <HAL_LTDC_MspInit+0x234>)
 80025ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b0:	4a6d      	ldr	r2, [pc, #436]	@ (8002768 <HAL_LTDC_MspInit+0x234>)
 80025b2:	f043 0320 	orr.w	r3, r3, #32
 80025b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b8:	4b6b      	ldr	r3, [pc, #428]	@ (8002768 <HAL_LTDC_MspInit+0x234>)
 80025ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025bc:	f003 0320 	and.w	r3, r3, #32
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c4:	2300      	movs	r3, #0
 80025c6:	61bb      	str	r3, [r7, #24]
 80025c8:	4b67      	ldr	r3, [pc, #412]	@ (8002768 <HAL_LTDC_MspInit+0x234>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025cc:	4a66      	ldr	r2, [pc, #408]	@ (8002768 <HAL_LTDC_MspInit+0x234>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d4:	4b64      	ldr	r3, [pc, #400]	@ (8002768 <HAL_LTDC_MspInit+0x234>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	4b60      	ldr	r3, [pc, #384]	@ (8002768 <HAL_LTDC_MspInit+0x234>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e8:	4a5f      	ldr	r2, [pc, #380]	@ (8002768 <HAL_LTDC_MspInit+0x234>)
 80025ea:	f043 0302 	orr.w	r3, r3, #2
 80025ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80025f0:	4b5d      	ldr	r3, [pc, #372]	@ (8002768 <HAL_LTDC_MspInit+0x234>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80025fc:	2300      	movs	r3, #0
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	4b59      	ldr	r3, [pc, #356]	@ (8002768 <HAL_LTDC_MspInit+0x234>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002604:	4a58      	ldr	r2, [pc, #352]	@ (8002768 <HAL_LTDC_MspInit+0x234>)
 8002606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800260a:	6313      	str	r3, [r2, #48]	@ 0x30
 800260c:	4b56      	ldr	r3, [pc, #344]	@ (8002768 <HAL_LTDC_MspInit+0x234>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	4b52      	ldr	r3, [pc, #328]	@ (8002768 <HAL_LTDC_MspInit+0x234>)
 800261e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002620:	4a51      	ldr	r2, [pc, #324]	@ (8002768 <HAL_LTDC_MspInit+0x234>)
 8002622:	f043 0304 	orr.w	r3, r3, #4
 8002626:	6313      	str	r3, [r2, #48]	@ 0x30
 8002628:	4b4f      	ldr	r3, [pc, #316]	@ (8002768 <HAL_LTDC_MspInit+0x234>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002634:	2300      	movs	r3, #0
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	4b4b      	ldr	r3, [pc, #300]	@ (8002768 <HAL_LTDC_MspInit+0x234>)
 800263a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263c:	4a4a      	ldr	r2, [pc, #296]	@ (8002768 <HAL_LTDC_MspInit+0x234>)
 800263e:	f043 0308 	orr.w	r3, r3, #8
 8002642:	6313      	str	r3, [r2, #48]	@ 0x30
 8002644:	4b48      	ldr	r3, [pc, #288]	@ (8002768 <HAL_LTDC_MspInit+0x234>)
 8002646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002650:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002654:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002662:	230e      	movs	r3, #14
 8002664:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002666:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800266a:	4619      	mov	r1, r3
 800266c:	483f      	ldr	r0, [pc, #252]	@ (800276c <HAL_LTDC_MspInit+0x238>)
 800266e:	f000 fec7 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002672:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002676:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	2302      	movs	r3, #2
 800267a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002680:	2300      	movs	r3, #0
 8002682:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002684:	230e      	movs	r3, #14
 8002686:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002688:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800268c:	4619      	mov	r1, r3
 800268e:	4838      	ldr	r0, [pc, #224]	@ (8002770 <HAL_LTDC_MspInit+0x23c>)
 8002690:	f000 feb6 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002694:	2303      	movs	r3, #3
 8002696:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a0:	2300      	movs	r3, #0
 80026a2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80026a4:	2309      	movs	r3, #9
 80026a6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026ac:	4619      	mov	r1, r3
 80026ae:	4831      	ldr	r0, [pc, #196]	@ (8002774 <HAL_LTDC_MspInit+0x240>)
 80026b0:	f000 fea6 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80026b4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80026b8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c2:	2300      	movs	r3, #0
 80026c4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026c6:	230e      	movs	r3, #14
 80026c8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026ce:	4619      	mov	r1, r3
 80026d0:	4828      	ldr	r0, [pc, #160]	@ (8002774 <HAL_LTDC_MspInit+0x240>)
 80026d2:	f000 fe95 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80026d6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80026da:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026dc:	2302      	movs	r3, #2
 80026de:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e4:	2300      	movs	r3, #0
 80026e6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026e8:	230e      	movs	r3, #14
 80026ea:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026f0:	4619      	mov	r1, r3
 80026f2:	4821      	ldr	r0, [pc, #132]	@ (8002778 <HAL_LTDC_MspInit+0x244>)
 80026f4:	f000 fe84 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80026f8:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80026fc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002706:	2300      	movs	r3, #0
 8002708:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800270a:	230e      	movs	r3, #14
 800270c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800270e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002712:	4619      	mov	r1, r3
 8002714:	4819      	ldr	r0, [pc, #100]	@ (800277c <HAL_LTDC_MspInit+0x248>)
 8002716:	f000 fe73 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800271a:	2348      	movs	r3, #72	@ 0x48
 800271c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800272a:	230e      	movs	r3, #14
 800272c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800272e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002732:	4619      	mov	r1, r3
 8002734:	4812      	ldr	r0, [pc, #72]	@ (8002780 <HAL_LTDC_MspInit+0x24c>)
 8002736:	f000 fe63 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800273a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800273e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002740:	2302      	movs	r3, #2
 8002742:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	2300      	movs	r3, #0
 800274a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800274c:	2309      	movs	r3, #9
 800274e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002750:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002754:	4619      	mov	r1, r3
 8002756:	4808      	ldr	r0, [pc, #32]	@ (8002778 <HAL_LTDC_MspInit+0x244>)
 8002758:	f000 fe52 	bl	8003400 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800275c:	bf00      	nop
 800275e:	3768      	adds	r7, #104	@ 0x68
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40016800 	.word	0x40016800
 8002768:	40023800 	.word	0x40023800
 800276c:	40021400 	.word	0x40021400
 8002770:	40020000 	.word	0x40020000
 8002774:	40020400 	.word	0x40020400
 8002778:	40021800 	.word	0x40021800
 800277c:	40020800 	.word	0x40020800
 8002780:	40020c00 	.word	0x40020c00

08002784 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0b      	ldr	r2, [pc, #44]	@ (80027c0 <HAL_RNG_MspInit+0x3c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d10d      	bne.n	80027b2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <HAL_RNG_MspInit+0x40>)
 800279c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800279e:	4a09      	ldr	r2, [pc, #36]	@ (80027c4 <HAL_RNG_MspInit+0x40>)
 80027a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027a4:	6353      	str	r3, [r2, #52]	@ 0x34
 80027a6:	4b07      	ldr	r3, [pc, #28]	@ (80027c4 <HAL_RNG_MspInit+0x40>)
 80027a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80027b2:	bf00      	nop
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	50060800 	.word	0x50060800
 80027c4:	40023800 	.word	0x40023800

080027c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	@ 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a19      	ldr	r2, [pc, #100]	@ (800284c <HAL_SPI_MspInit+0x84>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d12c      	bne.n	8002844 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	4b18      	ldr	r3, [pc, #96]	@ (8002850 <HAL_SPI_MspInit+0x88>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f2:	4a17      	ldr	r2, [pc, #92]	@ (8002850 <HAL_SPI_MspInit+0x88>)
 80027f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027fa:	4b15      	ldr	r3, [pc, #84]	@ (8002850 <HAL_SPI_MspInit+0x88>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	4b11      	ldr	r3, [pc, #68]	@ (8002850 <HAL_SPI_MspInit+0x88>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	4a10      	ldr	r2, [pc, #64]	@ (8002850 <HAL_SPI_MspInit+0x88>)
 8002810:	f043 0320 	orr.w	r3, r3, #32
 8002814:	6313      	str	r3, [r2, #48]	@ 0x30
 8002816:	4b0e      	ldr	r3, [pc, #56]	@ (8002850 <HAL_SPI_MspInit+0x88>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002822:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002830:	2300      	movs	r3, #0
 8002832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002834:	2305      	movs	r3, #5
 8002836:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	4619      	mov	r1, r3
 800283e:	4805      	ldr	r0, [pc, #20]	@ (8002854 <HAL_SPI_MspInit+0x8c>)
 8002840:	f000 fdde 	bl	8003400 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002844:	bf00      	nop
 8002846:	3728      	adds	r7, #40	@ 0x28
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40015000 	.word	0x40015000
 8002850:	40023800 	.word	0x40023800
 8002854:	40021400 	.word	0x40021400

08002858 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a08      	ldr	r2, [pc, #32]	@ (8002888 <HAL_SPI_MspDeInit+0x30>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d10a      	bne.n	8002880 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800286a:	4b08      	ldr	r3, [pc, #32]	@ (800288c <HAL_SPI_MspDeInit+0x34>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286e:	4a07      	ldr	r2, [pc, #28]	@ (800288c <HAL_SPI_MspDeInit+0x34>)
 8002870:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002874:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002876:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800287a:	4805      	ldr	r0, [pc, #20]	@ (8002890 <HAL_SPI_MspDeInit+0x38>)
 800287c:	f000 ff6c 	bl	8003758 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40015000 	.word	0x40015000
 800288c:	40023800 	.word	0x40023800
 8002890:	40021400 	.word	0x40021400

08002894 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a4:	d10d      	bne.n	80028c2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <HAL_TIM_Base_MspInit+0x3c>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	4a08      	ldr	r2, [pc, #32]	@ (80028d0 <HAL_TIM_Base_MspInit+0x3c>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028b6:	4b06      	ldr	r3, [pc, #24]	@ (80028d0 <HAL_TIM_Base_MspInit+0x3c>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800

080028d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <NMI_Handler+0x4>

080028dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <HardFault_Handler+0x4>

080028e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <MemManage_Handler+0x4>

080028ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028f0:	bf00      	nop
 80028f2:	e7fd      	b.n	80028f0 <BusFault_Handler+0x4>

080028f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <UsageFault_Handler+0x4>

080028fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800292a:	f000 fbe1 	bl	80030f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}

08002932 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002938:	f000 f9ce 	bl	8002cd8 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 800293c:	f000 f98e 	bl	8002c5c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002940:	2202      	movs	r2, #2
 8002942:	2103      	movs	r1, #3
 8002944:	2082      	movs	r0, #130	@ 0x82
 8002946:	f000 fa1b 	bl	8002d80 <I2C3_Write>
    HAL_Delay(5);
 800294a:	2005      	movs	r0, #5
 800294c:	f000 fbf0 	bl	8003130 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002950:	2200      	movs	r2, #0
 8002952:	2103      	movs	r1, #3
 8002954:	2082      	movs	r0, #130	@ 0x82
 8002956:	f000 fa13 	bl	8002d80 <I2C3_Write>
    HAL_Delay(2);
 800295a:	2002      	movs	r0, #2
 800295c:	f000 fbe8 	bl	8003130 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002960:	1cba      	adds	r2, r7, #2
 8002962:	2302      	movs	r3, #2
 8002964:	2100      	movs	r1, #0
 8002966:	2082      	movs	r0, #130	@ 0x82
 8002968:	f000 fa5a 	bl	8002e20 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800296c:	887b      	ldrh	r3, [r7, #2]
 800296e:	021b      	lsls	r3, r3, #8
 8002970:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002972:	887b      	ldrh	r3, [r7, #2]
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	b29a      	uxth	r2, r3
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	4313      	orrs	r3, r2
 800297c:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	f640 0211 	movw	r2, #2065	@ 0x811
 8002984:	4293      	cmp	r3, r2
 8002986:	d001      	beq.n	800298c <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002988:	2303      	movs	r3, #3
 800298a:	e075      	b.n	8002a78 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800298c:	2202      	movs	r2, #2
 800298e:	2103      	movs	r1, #3
 8002990:	2082      	movs	r0, #130	@ 0x82
 8002992:	f000 f9f5 	bl	8002d80 <I2C3_Write>
    HAL_Delay(5);
 8002996:	2005      	movs	r0, #5
 8002998:	f000 fbca 	bl	8003130 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800299c:	2200      	movs	r2, #0
 800299e:	2103      	movs	r1, #3
 80029a0:	2082      	movs	r0, #130	@ 0x82
 80029a2:	f000 f9ed 	bl	8002d80 <I2C3_Write>
    HAL_Delay(2);
 80029a6:	2002      	movs	r0, #2
 80029a8:	f000 fbc2 	bl	8003130 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80029ac:	2004      	movs	r0, #4
 80029ae:	f000 f867 	bl	8002a80 <STMPE811_Read>
 80029b2:	4603      	mov	r3, r0
 80029b4:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80029b6:	797b      	ldrb	r3, [r7, #5]
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80029be:	797b      	ldrb	r3, [r7, #5]
 80029c0:	461a      	mov	r2, r3
 80029c2:	2104      	movs	r1, #4
 80029c4:	2082      	movs	r0, #130	@ 0x82
 80029c6:	f000 f9db 	bl	8002d80 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80029ca:	2004      	movs	r0, #4
 80029cc:	f000 f858 	bl	8002a80 <STMPE811_Read>
 80029d0:	4603      	mov	r3, r0
 80029d2:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80029d4:	797b      	ldrb	r3, [r7, #5]
 80029d6:	f023 0302 	bic.w	r3, r3, #2
 80029da:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80029dc:	797b      	ldrb	r3, [r7, #5]
 80029de:	461a      	mov	r2, r3
 80029e0:	2104      	movs	r1, #4
 80029e2:	2082      	movs	r0, #130	@ 0x82
 80029e4:	f000 f9cc 	bl	8002d80 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80029e8:	2249      	movs	r2, #73	@ 0x49
 80029ea:	2120      	movs	r1, #32
 80029ec:	2082      	movs	r0, #130	@ 0x82
 80029ee:	f000 f9c7 	bl	8002d80 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80029f2:	2002      	movs	r0, #2
 80029f4:	f000 fb9c 	bl	8003130 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80029f8:	2201      	movs	r2, #1
 80029fa:	2121      	movs	r1, #33	@ 0x21
 80029fc:	2082      	movs	r0, #130	@ 0x82
 80029fe:	f000 f9bf 	bl	8002d80 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002a02:	2017      	movs	r0, #23
 8002a04:	f000 f83c 	bl	8002a80 <STMPE811_Read>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002a0c:	797b      	ldrb	r3, [r7, #5]
 8002a0e:	f043 031e 	orr.w	r3, r3, #30
 8002a12:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002a14:	797b      	ldrb	r3, [r7, #5]
 8002a16:	461a      	mov	r2, r3
 8002a18:	2117      	movs	r1, #23
 8002a1a:	2082      	movs	r0, #130	@ 0x82
 8002a1c:	f000 f9b0 	bl	8002d80 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002a20:	229a      	movs	r2, #154	@ 0x9a
 8002a22:	2141      	movs	r1, #65	@ 0x41
 8002a24:	2082      	movs	r0, #130	@ 0x82
 8002a26:	f000 f9ab 	bl	8002d80 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	214a      	movs	r1, #74	@ 0x4a
 8002a2e:	2082      	movs	r0, #130	@ 0x82
 8002a30:	f000 f9a6 	bl	8002d80 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002a34:	2201      	movs	r2, #1
 8002a36:	214b      	movs	r1, #75	@ 0x4b
 8002a38:	2082      	movs	r0, #130	@ 0x82
 8002a3a:	f000 f9a1 	bl	8002d80 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	214b      	movs	r1, #75	@ 0x4b
 8002a42:	2082      	movs	r0, #130	@ 0x82
 8002a44:	f000 f99c 	bl	8002d80 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002a48:	2201      	movs	r2, #1
 8002a4a:	2156      	movs	r1, #86	@ 0x56
 8002a4c:	2082      	movs	r0, #130	@ 0x82
 8002a4e:	f000 f997 	bl	8002d80 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002a52:	2201      	movs	r2, #1
 8002a54:	2158      	movs	r1, #88	@ 0x58
 8002a56:	2082      	movs	r0, #130	@ 0x82
 8002a58:	f000 f992 	bl	8002d80 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	2140      	movs	r1, #64	@ 0x40
 8002a60:	2082      	movs	r0, #130	@ 0x82
 8002a62:	f000 f98d 	bl	8002d80 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002a66:	22ff      	movs	r2, #255	@ 0xff
 8002a68:	210b      	movs	r1, #11
 8002a6a:	2082      	movs	r0, #130	@ 0x82
 8002a6c:	f000 f988 	bl	8002d80 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002a70:	20c8      	movs	r0, #200	@ 0xc8
 8002a72:	f000 fb5d 	bl	8003130 <HAL_Delay>

    return STMPE811_State_Ok;
 8002a76:	2302      	movs	r3, #2

}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002a8a:	f107 020f 	add.w	r2, r7, #15
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	4619      	mov	r1, r3
 8002a92:	2082      	movs	r0, #130	@ 0x82
 8002a94:	f000 f99e 	bl	8002dd4 <I2C3_Read>

    return readData;
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	791a      	ldrb	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002ab2:	2040      	movs	r0, #64	@ 0x40
 8002ab4:	f7ff ffe4 	bl	8002a80 <STMPE811_Read>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	db0e      	blt.n	8002ae2 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002aca:	2201      	movs	r2, #1
 8002acc:	214b      	movs	r1, #75	@ 0x4b
 8002ace:	2082      	movs	r0, #130	@ 0x82
 8002ad0:	f000 f956 	bl	8002d80 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	214b      	movs	r1, #75	@ 0x4b
 8002ad8:	2082      	movs	r0, #130	@ 0x82
 8002ada:	f000 f951 	bl	8002d80 <I2C3_Write>

        return STMPE811_State_Released;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e0a7      	b.n	8002c32 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	799b      	ldrb	r3, [r3, #6]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d117      	bne.n	8002b1a <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f9b8 	bl	8002e64 <TM_STMPE811_ReadX>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	885b      	ldrh	r3, [r3, #2]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fa0b 	bl	8002f20 <TM_STMPE811_ReadY>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002b10:	3301      	adds	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	805a      	strh	r2, [r3, #2]
 8002b18:	e048      	b.n	8002bac <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	799b      	ldrb	r3, [r3, #6]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d112      	bne.n	8002b48 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f99c 	bl	8002e64 <TM_STMPE811_ReadX>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	461a      	mov	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	885b      	ldrh	r3, [r3, #2]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 f9f1 	bl	8002f20 <TM_STMPE811_ReadY>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	461a      	mov	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	805a      	strh	r2, [r3, #2]
 8002b46:	e031      	b.n	8002bac <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	799b      	ldrb	r3, [r3, #6]
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d115      	bne.n	8002b7c <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	885b      	ldrh	r3, [r3, #2]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 f985 	bl	8002e64 <TM_STMPE811_ReadX>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 f9da 	bl	8002f20 <TM_STMPE811_ReadY>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002b72:	3301      	adds	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	801a      	strh	r2, [r3, #0]
 8002b7a:	e017      	b.n	8002bac <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	799b      	ldrb	r3, [r3, #6]
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d113      	bne.n	8002bac <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 f96b 	bl	8002e64 <TM_STMPE811_ReadX>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f9be 	bl	8002f20 <TM_STMPE811_ReadY>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002bac:	2201      	movs	r2, #1
 8002bae:	214b      	movs	r1, #75	@ 0x4b
 8002bb0:	2082      	movs	r0, #130	@ 0x82
 8002bb2:	f000 f8e5 	bl	8002d80 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	214b      	movs	r1, #75	@ 0x4b
 8002bba:	2082      	movs	r0, #130	@ 0x82
 8002bbc:	f000 f8e0 	bl	8002d80 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	799b      	ldrb	r3, [r3, #6]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <STMPE811_ReadTouch+0x12e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	799b      	ldrb	r3, [r3, #6]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d115      	bne.n	8002bfc <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d027      	beq.n	8002c28 <STMPE811_ReadTouch+0x186>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	2bee      	cmp	r3, #238	@ 0xee
 8002bde:	d823      	bhi.n	8002c28 <STMPE811_ReadTouch+0x186>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	885b      	ldrh	r3, [r3, #2]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d01f      	beq.n	8002c28 <STMPE811_ReadTouch+0x186>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	885b      	ldrh	r3, [r3, #2]
 8002bec:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002bf0:	d81a      	bhi.n	8002c28 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e01a      	b.n	8002c32 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d012      	beq.n	8002c2a <STMPE811_ReadTouch+0x188>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002c0c:	d80d      	bhi.n	8002c2a <STMPE811_ReadTouch+0x188>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	885b      	ldrh	r3, [r3, #2]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d009      	beq.n	8002c2a <STMPE811_ReadTouch+0x188>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	885b      	ldrh	r3, [r3, #2]
 8002c1a:	2bee      	cmp	r3, #238	@ 0xee
 8002c1c:	d805      	bhi.n	8002c2a <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002c24:	2300      	movs	r3, #0
 8002c26:	e004      	b.n	8002c32 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002c28:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002c30:	2301      	movs	r3, #1
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002c40:	4b05      	ldr	r3, [pc, #20]	@ (8002c58 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002c48:	bf00      	nop
 8002c4a:	e7fd      	b.n	8002c48 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	20025c04 	.word	0x20025c04

08002c5c <I2C3_Init>:

static void I2C3_Init()
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	603b      	str	r3, [r7, #0]
 8002c66:	4b18      	ldr	r3, [pc, #96]	@ (8002cc8 <I2C3_Init+0x6c>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	4a17      	ldr	r2, [pc, #92]	@ (8002cc8 <I2C3_Init+0x6c>)
 8002c6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c72:	4b15      	ldr	r3, [pc, #84]	@ (8002cc8 <I2C3_Init+0x6c>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002c7e:	4b13      	ldr	r3, [pc, #76]	@ (8002ccc <I2C3_Init+0x70>)
 8002c80:	4a13      	ldr	r2, [pc, #76]	@ (8002cd0 <I2C3_Init+0x74>)
 8002c82:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002c84:	4b11      	ldr	r3, [pc, #68]	@ (8002ccc <I2C3_Init+0x70>)
 8002c86:	4a13      	ldr	r2, [pc, #76]	@ (8002cd4 <I2C3_Init+0x78>)
 8002c88:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c8a:	4b10      	ldr	r3, [pc, #64]	@ (8002ccc <I2C3_Init+0x70>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002c90:	4b0e      	ldr	r3, [pc, #56]	@ (8002ccc <I2C3_Init+0x70>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c96:	4b0d      	ldr	r3, [pc, #52]	@ (8002ccc <I2C3_Init+0x70>)
 8002c98:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c9c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <I2C3_Init+0x70>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ca4:	4b09      	ldr	r3, [pc, #36]	@ (8002ccc <I2C3_Init+0x70>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002caa:	4808      	ldr	r0, [pc, #32]	@ (8002ccc <I2C3_Init+0x70>)
 8002cac:	f000 fe7a 	bl	80039a4 <HAL_I2C_Init>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002cba:	bf00      	nop
 8002cbc:	e7fd      	b.n	8002cba <I2C3_Init+0x5e>
    }
    return;
 8002cbe:	bf00      	nop
}
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	20025bb0 	.word	0x20025bb0
 8002cd0:	40005c00 	.word	0x40005c00
 8002cd4:	000186a0 	.word	0x000186a0

08002cd8 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cde:	f107 030c 	add.w	r3, r7, #12
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	609a      	str	r2, [r3, #8]
 8002cea:	60da      	str	r2, [r3, #12]
 8002cec:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	4b20      	ldr	r3, [pc, #128]	@ (8002d74 <I2C3_MspInit+0x9c>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8002d74 <I2C3_MspInit+0x9c>)
 8002cf8:	f043 0304 	orr.w	r3, r3, #4
 8002cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8002d74 <I2C3_MspInit+0x9c>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	4b19      	ldr	r3, [pc, #100]	@ (8002d74 <I2C3_MspInit+0x9c>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	4a18      	ldr	r2, [pc, #96]	@ (8002d74 <I2C3_MspInit+0x9c>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d1a:	4b16      	ldr	r3, [pc, #88]	@ (8002d74 <I2C3_MspInit+0x9c>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002d26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d2c:	2312      	movs	r3, #18
 8002d2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d34:	2300      	movs	r3, #0
 8002d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d38:	2304      	movs	r3, #4
 8002d3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002d3c:	f107 030c 	add.w	r3, r7, #12
 8002d40:	4619      	mov	r1, r3
 8002d42:	480d      	ldr	r0, [pc, #52]	@ (8002d78 <I2C3_MspInit+0xa0>)
 8002d44:	f000 fb5c 	bl	8003400 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002d48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d4e:	2312      	movs	r3, #18
 8002d50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002d5e:	f107 030c 	add.w	r3, r7, #12
 8002d62:	4619      	mov	r1, r3
 8002d64:	4805      	ldr	r0, [pc, #20]	@ (8002d7c <I2C3_MspInit+0xa4>)
 8002d66:	f000 fb4b 	bl	8003400 <HAL_GPIO_Init>
    
}
 8002d6a:	bf00      	nop
 8002d6c:	3720      	adds	r7, #32
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40020800 	.word	0x40020800
 8002d7c:	40020000 	.word	0x40020000

08002d80 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af04      	add	r7, sp, #16
 8002d86:	4603      	mov	r3, r0
 8002d88:	80fb      	strh	r3, [r7, #6]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	717b      	strb	r3, [r7, #5]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002d92:	793b      	ldrb	r3, [r7, #4]
 8002d94:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002d96:	797b      	ldrb	r3, [r7, #5]
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	88f9      	ldrh	r1, [r7, #6]
 8002d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc8 <I2C3_Write+0x48>)
 8002d9e:	9302      	str	r3, [sp, #8]
 8002da0:	2301      	movs	r3, #1
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	f107 030f 	add.w	r3, r7, #15
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	2301      	movs	r3, #1
 8002dac:	4807      	ldr	r0, [pc, #28]	@ (8002dcc <I2C3_Write+0x4c>)
 8002dae:	f000 ff3d 	bl	8003c2c <HAL_I2C_Mem_Write>
 8002db2:	4603      	mov	r3, r0
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <I2C3_Write+0x50>)
 8002db8:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002dba:	f7ff ff3f 	bl	8002c3c <verifyHAL_I2C_IS_OKAY>
}
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	0003d090 	.word	0x0003d090
 8002dcc:	20025bb0 	.word	0x20025bb0
 8002dd0:	20025c04 	.word	0x20025c04

08002dd4 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af04      	add	r7, sp, #16
 8002dda:	4603      	mov	r3, r0
 8002ddc:	603a      	str	r2, [r7, #0]
 8002dde:	71fb      	strb	r3, [r7, #7]
 8002de0:	460b      	mov	r3, r1
 8002de2:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	b299      	uxth	r1, r3
 8002de8:	79bb      	ldrb	r3, [r7, #6]
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	4b09      	ldr	r3, [pc, #36]	@ (8002e14 <I2C3_Read+0x40>)
 8002dee:	9302      	str	r3, [sp, #8]
 8002df0:	2301      	movs	r3, #1
 8002df2:	9301      	str	r3, [sp, #4]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	2301      	movs	r3, #1
 8002dfa:	4807      	ldr	r0, [pc, #28]	@ (8002e18 <I2C3_Read+0x44>)
 8002dfc:	f001 f810 	bl	8003e20 <HAL_I2C_Mem_Read>
 8002e00:	4603      	mov	r3, r0
 8002e02:	461a      	mov	r2, r3
 8002e04:	4b05      	ldr	r3, [pc, #20]	@ (8002e1c <I2C3_Read+0x48>)
 8002e06:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002e08:	f7ff ff18 	bl	8002c3c <verifyHAL_I2C_IS_OKAY>
}
 8002e0c:	bf00      	nop
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	0003d090 	.word	0x0003d090
 8002e18:	20025bb0 	.word	0x20025bb0
 8002e1c:	20025c04 	.word	0x20025c04

08002e20 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af04      	add	r7, sp, #16
 8002e26:	603a      	str	r2, [r7, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	71fb      	strb	r3, [r7, #7]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	71bb      	strb	r3, [r7, #6]
 8002e32:	4613      	mov	r3, r2
 8002e34:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	b299      	uxth	r1, r3
 8002e3a:	79bb      	ldrb	r3, [r7, #6]
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	4b07      	ldr	r3, [pc, #28]	@ (8002e5c <I2C3_MulitByteRead+0x3c>)
 8002e40:	9302      	str	r3, [sp, #8]
 8002e42:	88bb      	ldrh	r3, [r7, #4]
 8002e44:	9301      	str	r3, [sp, #4]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	4804      	ldr	r0, [pc, #16]	@ (8002e60 <I2C3_MulitByteRead+0x40>)
 8002e4e:	f000 ffe7 	bl	8003e20 <HAL_I2C_Mem_Read>
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	0003d090 	.word	0x0003d090
 8002e60:	20025bb0 	.word	0x20025bb0

08002e64 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002e6e:	204d      	movs	r0, #77	@ 0x4d
 8002e70:	f7ff fe06 	bl	8002a80 <STMPE811_Read>
 8002e74:	4603      	mov	r3, r0
 8002e76:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002e78:	204e      	movs	r0, #78	@ 0x4e
 8002e7a:	f7ff fe01 	bl	8002a80 <STMPE811_Read>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002e82:	7a7b      	ldrb	r3, [r7, #9]
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	b21a      	sxth	r2, r3
 8002e88:	7a3b      	ldrb	r3, [r7, #8]
 8002e8a:	b21b      	sxth	r3, r3
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002e90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e94:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	dc06      	bgt.n	8002eaa <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002e9c:	89fb      	ldrh	r3, [r7, #14]
 8002e9e:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002ea2:	330c      	adds	r3, #12
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	81fb      	strh	r3, [r7, #14]
 8002ea8:	e005      	b.n	8002eb6 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002eaa:	89fb      	ldrh	r3, [r7, #14]
 8002eac:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002eb0:	3308      	adds	r3, #8
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002eb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002eba:	4a18      	ldr	r2, [pc, #96]	@ (8002f1c <TM_STMPE811_ReadX+0xb8>)
 8002ebc:	fb82 1203 	smull	r1, r2, r2, r3
 8002ec0:	441a      	add	r2, r3
 8002ec2:	10d2      	asrs	r2, r2, #3
 8002ec4:	17db      	asrs	r3, r3, #31
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002eca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ece:	2bef      	cmp	r3, #239	@ 0xef
 8002ed0:	dd02      	ble.n	8002ed8 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8002ed2:	23ef      	movs	r3, #239	@ 0xef
 8002ed4:	81fb      	strh	r3, [r7, #14]
 8002ed6:	e005      	b.n	8002ee4 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002ed8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	da01      	bge.n	8002ee4 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002ee4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	dd05      	ble.n	8002efa <TM_STMPE811_ReadX+0x96>
 8002eee:	89fa      	ldrh	r2, [r7, #14]
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	b21b      	sxth	r3, r3
 8002ef8:	e004      	b.n	8002f04 <TM_STMPE811_ReadX+0xa0>
 8002efa:	89fb      	ldrh	r3, [r7, #14]
 8002efc:	88fa      	ldrh	r2, [r7, #6]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	b21b      	sxth	r3, r3
 8002f04:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002f06:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	dd01      	ble.n	8002f12 <TM_STMPE811_ReadX+0xae>
        return val;
 8002f0e:	89fb      	ldrh	r3, [r7, #14]
 8002f10:	e000      	b.n	8002f14 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8002f12:	88fb      	ldrh	r3, [r7, #6]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	88888889 	.word	0x88888889

08002f20 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002f2a:	204f      	movs	r0, #79	@ 0x4f
 8002f2c:	f7ff fda8 	bl	8002a80 <STMPE811_Read>
 8002f30:	4603      	mov	r3, r0
 8002f32:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002f34:	2050      	movs	r0, #80	@ 0x50
 8002f36:	f7ff fda3 	bl	8002a80 <STMPE811_Read>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002f3e:	7a7b      	ldrb	r3, [r7, #9]
 8002f40:	021b      	lsls	r3, r3, #8
 8002f42:	b21a      	sxth	r2, r3
 8002f44:	7a3b      	ldrb	r3, [r7, #8]
 8002f46:	b21b      	sxth	r3, r3
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002f4c:	89fb      	ldrh	r3, [r7, #14]
 8002f4e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002f56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f5a:	4a19      	ldr	r2, [pc, #100]	@ (8002fc0 <TM_STMPE811_ReadY+0xa0>)
 8002f5c:	fb82 1203 	smull	r1, r2, r2, r3
 8002f60:	1052      	asrs	r2, r2, #1
 8002f62:	17db      	asrs	r3, r3, #31
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002f68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	dc02      	bgt.n	8002f76 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	81fb      	strh	r3, [r7, #14]
 8002f74:	e007      	b.n	8002f86 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8002f76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f7a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002f7e:	db02      	blt.n	8002f86 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8002f80:	f240 133f 	movw	r3, #319	@ 0x13f
 8002f84:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002f86:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	dd05      	ble.n	8002f9c <TM_STMPE811_ReadY+0x7c>
 8002f90:	89fa      	ldrh	r2, [r7, #14]
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	b21b      	sxth	r3, r3
 8002f9a:	e004      	b.n	8002fa6 <TM_STMPE811_ReadY+0x86>
 8002f9c:	89fb      	ldrh	r3, [r7, #14]
 8002f9e:	88fa      	ldrh	r2, [r7, #6]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	b21b      	sxth	r3, r3
 8002fa6:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002fa8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	dd01      	ble.n	8002fb4 <TM_STMPE811_ReadY+0x94>
        return val;
 8002fb0:	89fb      	ldrh	r3, [r7, #14]
 8002fb2:	e000      	b.n	8002fb6 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	2e8ba2e9 	.word	0x2e8ba2e9

08002fc4 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fd8:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <SystemInit+0x20>)
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fde:	4a05      	ldr	r2, [pc, #20]	@ (8002ff4 <SystemInit+0x20>)
 8002fe0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fe4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002ff8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003030 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ffc:	f7ff ffea 	bl	8002fd4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003000:	480c      	ldr	r0, [pc, #48]	@ (8003034 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003002:	490d      	ldr	r1, [pc, #52]	@ (8003038 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003004:	4a0d      	ldr	r2, [pc, #52]	@ (800303c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003008:	e002      	b.n	8003010 <LoopCopyDataInit>

0800300a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800300a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800300c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800300e:	3304      	adds	r3, #4

08003010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003014:	d3f9      	bcc.n	800300a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003016:	4a0a      	ldr	r2, [pc, #40]	@ (8003040 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003018:	4c0a      	ldr	r4, [pc, #40]	@ (8003044 <LoopFillZerobss+0x22>)
  movs r3, #0
 800301a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800301c:	e001      	b.n	8003022 <LoopFillZerobss>

0800301e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800301e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003020:	3204      	adds	r2, #4

08003022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003024:	d3fb      	bcc.n	800301e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003026:	f003 fc31 	bl	800688c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800302a:	f7fe fdfe 	bl	8001c2a <main>
  bx  lr    
 800302e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003030:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003038:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800303c:	08007ae4 	.word	0x08007ae4
  ldr r2, =_sbss
 8003040:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8003044:	20025c0c 	.word	0x20025c0c

08003048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003048:	e7fe      	b.n	8003048 <ADC_IRQHandler>
	...

0800304c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003050:	4b0e      	ldr	r3, [pc, #56]	@ (800308c <HAL_Init+0x40>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a0d      	ldr	r2, [pc, #52]	@ (800308c <HAL_Init+0x40>)
 8003056:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800305a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800305c:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <HAL_Init+0x40>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a0a      	ldr	r2, [pc, #40]	@ (800308c <HAL_Init+0x40>)
 8003062:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003066:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003068:	4b08      	ldr	r3, [pc, #32]	@ (800308c <HAL_Init+0x40>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a07      	ldr	r2, [pc, #28]	@ (800308c <HAL_Init+0x40>)
 800306e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003072:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003074:	2003      	movs	r0, #3
 8003076:	f000 f973 	bl	8003360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800307a:	2000      	movs	r0, #0
 800307c:	f000 f808 	bl	8003090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003080:	f7ff f9c6 	bl	8002410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40023c00 	.word	0x40023c00

08003090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003098:	4b12      	ldr	r3, [pc, #72]	@ (80030e4 <HAL_InitTick+0x54>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4b12      	ldr	r3, [pc, #72]	@ (80030e8 <HAL_InitTick+0x58>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	4619      	mov	r1, r3
 80030a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f999 	bl	80033e6 <HAL_SYSTICK_Config>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e00e      	b.n	80030dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b0f      	cmp	r3, #15
 80030c2:	d80a      	bhi.n	80030da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030c4:	2200      	movs	r2, #0
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	f04f 30ff 	mov.w	r0, #4294967295
 80030cc:	f000 f953 	bl	8003376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030d0:	4a06      	ldr	r2, [pc, #24]	@ (80030ec <HAL_InitTick+0x5c>)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	e000      	b.n	80030dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20000010 	.word	0x20000010
 80030e8:	20000018 	.word	0x20000018
 80030ec:	20000014 	.word	0x20000014

080030f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030f4:	4b06      	ldr	r3, [pc, #24]	@ (8003110 <HAL_IncTick+0x20>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	4b06      	ldr	r3, [pc, #24]	@ (8003114 <HAL_IncTick+0x24>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4413      	add	r3, r2
 8003100:	4a04      	ldr	r2, [pc, #16]	@ (8003114 <HAL_IncTick+0x24>)
 8003102:	6013      	str	r3, [r2, #0]
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	20000018 	.word	0x20000018
 8003114:	20025c08 	.word	0x20025c08

08003118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return uwTick;
 800311c:	4b03      	ldr	r3, [pc, #12]	@ (800312c <HAL_GetTick+0x14>)
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20025c08 	.word	0x20025c08

08003130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003138:	f7ff ffee 	bl	8003118 <HAL_GetTick>
 800313c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003148:	d005      	beq.n	8003156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800314a:	4b0a      	ldr	r3, [pc, #40]	@ (8003174 <HAL_Delay+0x44>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003156:	bf00      	nop
 8003158:	f7ff ffde 	bl	8003118 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	429a      	cmp	r2, r3
 8003166:	d8f7      	bhi.n	8003158 <HAL_Delay+0x28>
  {
  }
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000018 	.word	0x20000018

08003178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003188:	4b0c      	ldr	r3, [pc, #48]	@ (80031bc <__NVIC_SetPriorityGrouping+0x44>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003194:	4013      	ands	r3, r2
 8003196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031aa:	4a04      	ldr	r2, [pc, #16]	@ (80031bc <__NVIC_SetPriorityGrouping+0x44>)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	60d3      	str	r3, [r2, #12]
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	e000ed00 	.word	0xe000ed00

080031c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031c4:	4b04      	ldr	r3, [pc, #16]	@ (80031d8 <__NVIC_GetPriorityGrouping+0x18>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	0a1b      	lsrs	r3, r3, #8
 80031ca:	f003 0307 	and.w	r3, r3, #7
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	e000ed00 	.word	0xe000ed00

080031dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	db0b      	blt.n	8003206 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	f003 021f 	and.w	r2, r3, #31
 80031f4:	4907      	ldr	r1, [pc, #28]	@ (8003214 <__NVIC_EnableIRQ+0x38>)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	2001      	movs	r0, #1
 80031fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	e000e100 	.word	0xe000e100

08003218 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	2b00      	cmp	r3, #0
 8003228:	db12      	blt.n	8003250 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	f003 021f 	and.w	r2, r3, #31
 8003230:	490a      	ldr	r1, [pc, #40]	@ (800325c <__NVIC_DisableIRQ+0x44>)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	2001      	movs	r0, #1
 800323a:	fa00 f202 	lsl.w	r2, r0, r2
 800323e:	3320      	adds	r3, #32
 8003240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003244:	f3bf 8f4f 	dsb	sy
}
 8003248:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800324a:	f3bf 8f6f 	isb	sy
}
 800324e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000e100 	.word	0xe000e100

08003260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	6039      	str	r1, [r7, #0]
 800326a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800326c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003270:	2b00      	cmp	r3, #0
 8003272:	db0a      	blt.n	800328a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	b2da      	uxtb	r2, r3
 8003278:	490c      	ldr	r1, [pc, #48]	@ (80032ac <__NVIC_SetPriority+0x4c>)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	0112      	lsls	r2, r2, #4
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	440b      	add	r3, r1
 8003284:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003288:	e00a      	b.n	80032a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	b2da      	uxtb	r2, r3
 800328e:	4908      	ldr	r1, [pc, #32]	@ (80032b0 <__NVIC_SetPriority+0x50>)
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	3b04      	subs	r3, #4
 8003298:	0112      	lsls	r2, r2, #4
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	440b      	add	r3, r1
 800329e:	761a      	strb	r2, [r3, #24]
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	e000e100 	.word	0xe000e100
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b089      	sub	sp, #36	@ 0x24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f1c3 0307 	rsb	r3, r3, #7
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	bf28      	it	cs
 80032d2:	2304      	movcs	r3, #4
 80032d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3304      	adds	r3, #4
 80032da:	2b06      	cmp	r3, #6
 80032dc:	d902      	bls.n	80032e4 <NVIC_EncodePriority+0x30>
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	3b03      	subs	r3, #3
 80032e2:	e000      	b.n	80032e6 <NVIC_EncodePriority+0x32>
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43da      	mvns	r2, r3
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	401a      	ands	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	fa01 f303 	lsl.w	r3, r1, r3
 8003306:	43d9      	mvns	r1, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800330c:	4313      	orrs	r3, r2
         );
}
 800330e:	4618      	mov	r0, r3
 8003310:	3724      	adds	r7, #36	@ 0x24
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
	...

0800331c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3b01      	subs	r3, #1
 8003328:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800332c:	d301      	bcc.n	8003332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800332e:	2301      	movs	r3, #1
 8003330:	e00f      	b.n	8003352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003332:	4a0a      	ldr	r2, [pc, #40]	@ (800335c <SysTick_Config+0x40>)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3b01      	subs	r3, #1
 8003338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800333a:	210f      	movs	r1, #15
 800333c:	f04f 30ff 	mov.w	r0, #4294967295
 8003340:	f7ff ff8e 	bl	8003260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003344:	4b05      	ldr	r3, [pc, #20]	@ (800335c <SysTick_Config+0x40>)
 8003346:	2200      	movs	r2, #0
 8003348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800334a:	4b04      	ldr	r3, [pc, #16]	@ (800335c <SysTick_Config+0x40>)
 800334c:	2207      	movs	r2, #7
 800334e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	e000e010 	.word	0xe000e010

08003360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff ff05 	bl	8003178 <__NVIC_SetPriorityGrouping>
}
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003376:	b580      	push	{r7, lr}
 8003378:	b086      	sub	sp, #24
 800337a:	af00      	add	r7, sp, #0
 800337c:	4603      	mov	r3, r0
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	607a      	str	r2, [r7, #4]
 8003382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003388:	f7ff ff1a 	bl	80031c0 <__NVIC_GetPriorityGrouping>
 800338c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	6978      	ldr	r0, [r7, #20]
 8003394:	f7ff ff8e 	bl	80032b4 <NVIC_EncodePriority>
 8003398:	4602      	mov	r2, r0
 800339a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339e:	4611      	mov	r1, r2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff ff5d 	bl	8003260 <__NVIC_SetPriority>
}
 80033a6:	bf00      	nop
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	4603      	mov	r3, r0
 80033b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ff0d 	bl	80031dc <__NVIC_EnableIRQ>
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	4603      	mov	r3, r0
 80033d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80033d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff ff1d 	bl	8003218 <__NVIC_DisableIRQ>
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7ff ff94 	bl	800331c <SysTick_Config>
 80033f4:	4603      	mov	r3, r0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003400:	b480      	push	{r7}
 8003402:	b089      	sub	sp, #36	@ 0x24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003412:	2300      	movs	r3, #0
 8003414:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	e177      	b.n	800370c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800341c:	2201      	movs	r2, #1
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4013      	ands	r3, r2
 800342e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	429a      	cmp	r2, r3
 8003436:	f040 8166 	bne.w	8003706 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b01      	cmp	r3, #1
 8003444:	d005      	beq.n	8003452 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800344e:	2b02      	cmp	r3, #2
 8003450:	d130      	bne.n	80034b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	2203      	movs	r2, #3
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4313      	orrs	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003488:	2201      	movs	r2, #1
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 0201 	and.w	r2, r3, #1
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d017      	beq.n	80034f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2203      	movs	r2, #3
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d123      	bne.n	8003544 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	08da      	lsrs	r2, r3, #3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3208      	adds	r2, #8
 8003504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003508:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	220f      	movs	r2, #15
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	08da      	lsrs	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3208      	adds	r2, #8
 800353e:	69b9      	ldr	r1, [r7, #24]
 8003540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	2203      	movs	r2, #3
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 0203 	and.w	r2, r3, #3
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 80c0 	beq.w	8003706 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	4b66      	ldr	r3, [pc, #408]	@ (8003724 <HAL_GPIO_Init+0x324>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358e:	4a65      	ldr	r2, [pc, #404]	@ (8003724 <HAL_GPIO_Init+0x324>)
 8003590:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003594:	6453      	str	r3, [r2, #68]	@ 0x44
 8003596:	4b63      	ldr	r3, [pc, #396]	@ (8003724 <HAL_GPIO_Init+0x324>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035a2:	4a61      	ldr	r2, [pc, #388]	@ (8003728 <HAL_GPIO_Init+0x328>)
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	089b      	lsrs	r3, r3, #2
 80035a8:	3302      	adds	r3, #2
 80035aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	220f      	movs	r2, #15
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4013      	ands	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a58      	ldr	r2, [pc, #352]	@ (800372c <HAL_GPIO_Init+0x32c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d037      	beq.n	800363e <HAL_GPIO_Init+0x23e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a57      	ldr	r2, [pc, #348]	@ (8003730 <HAL_GPIO_Init+0x330>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d031      	beq.n	800363a <HAL_GPIO_Init+0x23a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a56      	ldr	r2, [pc, #344]	@ (8003734 <HAL_GPIO_Init+0x334>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d02b      	beq.n	8003636 <HAL_GPIO_Init+0x236>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a55      	ldr	r2, [pc, #340]	@ (8003738 <HAL_GPIO_Init+0x338>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d025      	beq.n	8003632 <HAL_GPIO_Init+0x232>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a54      	ldr	r2, [pc, #336]	@ (800373c <HAL_GPIO_Init+0x33c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d01f      	beq.n	800362e <HAL_GPIO_Init+0x22e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a53      	ldr	r2, [pc, #332]	@ (8003740 <HAL_GPIO_Init+0x340>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d019      	beq.n	800362a <HAL_GPIO_Init+0x22a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a52      	ldr	r2, [pc, #328]	@ (8003744 <HAL_GPIO_Init+0x344>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <HAL_GPIO_Init+0x226>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a51      	ldr	r2, [pc, #324]	@ (8003748 <HAL_GPIO_Init+0x348>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00d      	beq.n	8003622 <HAL_GPIO_Init+0x222>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a50      	ldr	r2, [pc, #320]	@ (800374c <HAL_GPIO_Init+0x34c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d007      	beq.n	800361e <HAL_GPIO_Init+0x21e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a4f      	ldr	r2, [pc, #316]	@ (8003750 <HAL_GPIO_Init+0x350>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d101      	bne.n	800361a <HAL_GPIO_Init+0x21a>
 8003616:	2309      	movs	r3, #9
 8003618:	e012      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800361a:	230a      	movs	r3, #10
 800361c:	e010      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800361e:	2308      	movs	r3, #8
 8003620:	e00e      	b.n	8003640 <HAL_GPIO_Init+0x240>
 8003622:	2307      	movs	r3, #7
 8003624:	e00c      	b.n	8003640 <HAL_GPIO_Init+0x240>
 8003626:	2306      	movs	r3, #6
 8003628:	e00a      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800362a:	2305      	movs	r3, #5
 800362c:	e008      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800362e:	2304      	movs	r3, #4
 8003630:	e006      	b.n	8003640 <HAL_GPIO_Init+0x240>
 8003632:	2303      	movs	r3, #3
 8003634:	e004      	b.n	8003640 <HAL_GPIO_Init+0x240>
 8003636:	2302      	movs	r3, #2
 8003638:	e002      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800363e:	2300      	movs	r3, #0
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	f002 0203 	and.w	r2, r2, #3
 8003646:	0092      	lsls	r2, r2, #2
 8003648:	4093      	lsls	r3, r2
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003650:	4935      	ldr	r1, [pc, #212]	@ (8003728 <HAL_GPIO_Init+0x328>)
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	089b      	lsrs	r3, r3, #2
 8003656:	3302      	adds	r3, #2
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800365e:	4b3d      	ldr	r3, [pc, #244]	@ (8003754 <HAL_GPIO_Init+0x354>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	43db      	mvns	r3, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4013      	ands	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003682:	4a34      	ldr	r2, [pc, #208]	@ (8003754 <HAL_GPIO_Init+0x354>)
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003688:	4b32      	ldr	r3, [pc, #200]	@ (8003754 <HAL_GPIO_Init+0x354>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	43db      	mvns	r3, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4013      	ands	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036ac:	4a29      	ldr	r2, [pc, #164]	@ (8003754 <HAL_GPIO_Init+0x354>)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036b2:	4b28      	ldr	r3, [pc, #160]	@ (8003754 <HAL_GPIO_Init+0x354>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	43db      	mvns	r3, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4013      	ands	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003754 <HAL_GPIO_Init+0x354>)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003754 <HAL_GPIO_Init+0x354>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4013      	ands	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003700:	4a14      	ldr	r2, [pc, #80]	@ (8003754 <HAL_GPIO_Init+0x354>)
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3301      	adds	r3, #1
 800370a:	61fb      	str	r3, [r7, #28]
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	2b0f      	cmp	r3, #15
 8003710:	f67f ae84 	bls.w	800341c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003714:	bf00      	nop
 8003716:	bf00      	nop
 8003718:	3724      	adds	r7, #36	@ 0x24
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40023800 	.word	0x40023800
 8003728:	40013800 	.word	0x40013800
 800372c:	40020000 	.word	0x40020000
 8003730:	40020400 	.word	0x40020400
 8003734:	40020800 	.word	0x40020800
 8003738:	40020c00 	.word	0x40020c00
 800373c:	40021000 	.word	0x40021000
 8003740:	40021400 	.word	0x40021400
 8003744:	40021800 	.word	0x40021800
 8003748:	40021c00 	.word	0x40021c00
 800374c:	40022000 	.word	0x40022000
 8003750:	40022400 	.word	0x40022400
 8003754:	40013c00 	.word	0x40013c00

08003758 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800376a:	2300      	movs	r3, #0
 800376c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	e0d9      	b.n	8003928 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003774:	2201      	movs	r2, #1
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4013      	ands	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	429a      	cmp	r2, r3
 800378c:	f040 80c9 	bne.w	8003922 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003790:	4a6b      	ldr	r2, [pc, #428]	@ (8003940 <HAL_GPIO_DeInit+0x1e8>)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	089b      	lsrs	r3, r3, #2
 8003796:	3302      	adds	r3, #2
 8003798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800379c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	220f      	movs	r2, #15
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	4013      	ands	r3, r2
 80037b0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a63      	ldr	r2, [pc, #396]	@ (8003944 <HAL_GPIO_DeInit+0x1ec>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d037      	beq.n	800382a <HAL_GPIO_DeInit+0xd2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a62      	ldr	r2, [pc, #392]	@ (8003948 <HAL_GPIO_DeInit+0x1f0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d031      	beq.n	8003826 <HAL_GPIO_DeInit+0xce>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a61      	ldr	r2, [pc, #388]	@ (800394c <HAL_GPIO_DeInit+0x1f4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d02b      	beq.n	8003822 <HAL_GPIO_DeInit+0xca>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a60      	ldr	r2, [pc, #384]	@ (8003950 <HAL_GPIO_DeInit+0x1f8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d025      	beq.n	800381e <HAL_GPIO_DeInit+0xc6>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a5f      	ldr	r2, [pc, #380]	@ (8003954 <HAL_GPIO_DeInit+0x1fc>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d01f      	beq.n	800381a <HAL_GPIO_DeInit+0xc2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a5e      	ldr	r2, [pc, #376]	@ (8003958 <HAL_GPIO_DeInit+0x200>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d019      	beq.n	8003816 <HAL_GPIO_DeInit+0xbe>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a5d      	ldr	r2, [pc, #372]	@ (800395c <HAL_GPIO_DeInit+0x204>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d013      	beq.n	8003812 <HAL_GPIO_DeInit+0xba>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a5c      	ldr	r2, [pc, #368]	@ (8003960 <HAL_GPIO_DeInit+0x208>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00d      	beq.n	800380e <HAL_GPIO_DeInit+0xb6>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a5b      	ldr	r2, [pc, #364]	@ (8003964 <HAL_GPIO_DeInit+0x20c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d007      	beq.n	800380a <HAL_GPIO_DeInit+0xb2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a5a      	ldr	r2, [pc, #360]	@ (8003968 <HAL_GPIO_DeInit+0x210>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d101      	bne.n	8003806 <HAL_GPIO_DeInit+0xae>
 8003802:	2309      	movs	r3, #9
 8003804:	e012      	b.n	800382c <HAL_GPIO_DeInit+0xd4>
 8003806:	230a      	movs	r3, #10
 8003808:	e010      	b.n	800382c <HAL_GPIO_DeInit+0xd4>
 800380a:	2308      	movs	r3, #8
 800380c:	e00e      	b.n	800382c <HAL_GPIO_DeInit+0xd4>
 800380e:	2307      	movs	r3, #7
 8003810:	e00c      	b.n	800382c <HAL_GPIO_DeInit+0xd4>
 8003812:	2306      	movs	r3, #6
 8003814:	e00a      	b.n	800382c <HAL_GPIO_DeInit+0xd4>
 8003816:	2305      	movs	r3, #5
 8003818:	e008      	b.n	800382c <HAL_GPIO_DeInit+0xd4>
 800381a:	2304      	movs	r3, #4
 800381c:	e006      	b.n	800382c <HAL_GPIO_DeInit+0xd4>
 800381e:	2303      	movs	r3, #3
 8003820:	e004      	b.n	800382c <HAL_GPIO_DeInit+0xd4>
 8003822:	2302      	movs	r3, #2
 8003824:	e002      	b.n	800382c <HAL_GPIO_DeInit+0xd4>
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <HAL_GPIO_DeInit+0xd4>
 800382a:	2300      	movs	r3, #0
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	f002 0203 	and.w	r2, r2, #3
 8003832:	0092      	lsls	r2, r2, #2
 8003834:	4093      	lsls	r3, r2
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	429a      	cmp	r2, r3
 800383a:	d132      	bne.n	80038a2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800383c:	4b4b      	ldr	r3, [pc, #300]	@ (800396c <HAL_GPIO_DeInit+0x214>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	43db      	mvns	r3, r3
 8003844:	4949      	ldr	r1, [pc, #292]	@ (800396c <HAL_GPIO_DeInit+0x214>)
 8003846:	4013      	ands	r3, r2
 8003848:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800384a:	4b48      	ldr	r3, [pc, #288]	@ (800396c <HAL_GPIO_DeInit+0x214>)
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	43db      	mvns	r3, r3
 8003852:	4946      	ldr	r1, [pc, #280]	@ (800396c <HAL_GPIO_DeInit+0x214>)
 8003854:	4013      	ands	r3, r2
 8003856:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003858:	4b44      	ldr	r3, [pc, #272]	@ (800396c <HAL_GPIO_DeInit+0x214>)
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	43db      	mvns	r3, r3
 8003860:	4942      	ldr	r1, [pc, #264]	@ (800396c <HAL_GPIO_DeInit+0x214>)
 8003862:	4013      	ands	r3, r2
 8003864:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003866:	4b41      	ldr	r3, [pc, #260]	@ (800396c <HAL_GPIO_DeInit+0x214>)
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	43db      	mvns	r3, r3
 800386e:	493f      	ldr	r1, [pc, #252]	@ (800396c <HAL_GPIO_DeInit+0x214>)
 8003870:	4013      	ands	r3, r2
 8003872:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	220f      	movs	r2, #15
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003884:	4a2e      	ldr	r2, [pc, #184]	@ (8003940 <HAL_GPIO_DeInit+0x1e8>)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	089b      	lsrs	r3, r3, #2
 800388a:	3302      	adds	r3, #2
 800388c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	43da      	mvns	r2, r3
 8003894:	482a      	ldr	r0, [pc, #168]	@ (8003940 <HAL_GPIO_DeInit+0x1e8>)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	089b      	lsrs	r3, r3, #2
 800389a:	400a      	ands	r2, r1
 800389c:	3302      	adds	r3, #2
 800389e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	2103      	movs	r1, #3
 80038ac:	fa01 f303 	lsl.w	r3, r1, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	401a      	ands	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	08da      	lsrs	r2, r3, #3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3208      	adds	r2, #8
 80038c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	220f      	movs	r2, #15
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43db      	mvns	r3, r3
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	08d2      	lsrs	r2, r2, #3
 80038d8:	4019      	ands	r1, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3208      	adds	r2, #8
 80038de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	2103      	movs	r1, #3
 80038ec:	fa01 f303 	lsl.w	r3, r1, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	401a      	ands	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	2101      	movs	r1, #1
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	fa01 f303 	lsl.w	r3, r1, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	401a      	ands	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	2103      	movs	r1, #3
 8003916:	fa01 f303 	lsl.w	r3, r1, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	401a      	ands	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	3301      	adds	r3, #1
 8003926:	617b      	str	r3, [r7, #20]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2b0f      	cmp	r3, #15
 800392c:	f67f af22 	bls.w	8003774 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	40013800 	.word	0x40013800
 8003944:	40020000 	.word	0x40020000
 8003948:	40020400 	.word	0x40020400
 800394c:	40020800 	.word	0x40020800
 8003950:	40020c00 	.word	0x40020c00
 8003954:	40021000 	.word	0x40021000
 8003958:	40021400 	.word	0x40021400
 800395c:	40021800 	.word	0x40021800
 8003960:	40021c00 	.word	0x40021c00
 8003964:	40022000 	.word	0x40022000
 8003968:	40022400 	.word	0x40022400
 800396c:	40013c00 	.word	0x40013c00

08003970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	807b      	strh	r3, [r7, #2]
 800397c:	4613      	mov	r3, r2
 800397e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003980:	787b      	ldrb	r3, [r7, #1]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003986:	887a      	ldrh	r2, [r7, #2]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800398c:	e003      	b.n	8003996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800398e:	887b      	ldrh	r3, [r7, #2]
 8003990:	041a      	lsls	r2, r3, #16
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	619a      	str	r2, [r3, #24]
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e12b      	b.n	8003c0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fe fd48 	bl	8002460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2224      	movs	r2, #36	@ 0x24
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0201 	bic.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a08:	f001 ff82 	bl	8005910 <HAL_RCC_GetPCLK1Freq>
 8003a0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	4a81      	ldr	r2, [pc, #516]	@ (8003c18 <HAL_I2C_Init+0x274>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d807      	bhi.n	8003a28 <HAL_I2C_Init+0x84>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4a80      	ldr	r2, [pc, #512]	@ (8003c1c <HAL_I2C_Init+0x278>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	bf94      	ite	ls
 8003a20:	2301      	movls	r3, #1
 8003a22:	2300      	movhi	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	e006      	b.n	8003a36 <HAL_I2C_Init+0x92>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4a7d      	ldr	r2, [pc, #500]	@ (8003c20 <HAL_I2C_Init+0x27c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	bf94      	ite	ls
 8003a30:	2301      	movls	r3, #1
 8003a32:	2300      	movhi	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e0e7      	b.n	8003c0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4a78      	ldr	r2, [pc, #480]	@ (8003c24 <HAL_I2C_Init+0x280>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	0c9b      	lsrs	r3, r3, #18
 8003a48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4a6a      	ldr	r2, [pc, #424]	@ (8003c18 <HAL_I2C_Init+0x274>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d802      	bhi.n	8003a78 <HAL_I2C_Init+0xd4>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	3301      	adds	r3, #1
 8003a76:	e009      	b.n	8003a8c <HAL_I2C_Init+0xe8>
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	4a69      	ldr	r2, [pc, #420]	@ (8003c28 <HAL_I2C_Init+0x284>)
 8003a84:	fba2 2303 	umull	r2, r3, r2, r3
 8003a88:	099b      	lsrs	r3, r3, #6
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	495c      	ldr	r1, [pc, #368]	@ (8003c18 <HAL_I2C_Init+0x274>)
 8003aa8:	428b      	cmp	r3, r1
 8003aaa:	d819      	bhi.n	8003ae0 <HAL_I2C_Init+0x13c>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	1e59      	subs	r1, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aba:	1c59      	adds	r1, r3, #1
 8003abc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ac0:	400b      	ands	r3, r1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <HAL_I2C_Init+0x138>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1e59      	subs	r1, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ada:	e051      	b.n	8003b80 <HAL_I2C_Init+0x1dc>
 8003adc:	2304      	movs	r3, #4
 8003ade:	e04f      	b.n	8003b80 <HAL_I2C_Init+0x1dc>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d111      	bne.n	8003b0c <HAL_I2C_Init+0x168>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1e58      	subs	r0, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6859      	ldr	r1, [r3, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	440b      	add	r3, r1
 8003af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003afa:	3301      	adds	r3, #1
 8003afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	bf0c      	ite	eq
 8003b04:	2301      	moveq	r3, #1
 8003b06:	2300      	movne	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	e012      	b.n	8003b32 <HAL_I2C_Init+0x18e>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1e58      	subs	r0, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6859      	ldr	r1, [r3, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	0099      	lsls	r1, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b22:	3301      	adds	r3, #1
 8003b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf0c      	ite	eq
 8003b2c:	2301      	moveq	r3, #1
 8003b2e:	2300      	movne	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_I2C_Init+0x196>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e022      	b.n	8003b80 <HAL_I2C_Init+0x1dc>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10e      	bne.n	8003b60 <HAL_I2C_Init+0x1bc>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1e58      	subs	r0, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6859      	ldr	r1, [r3, #4]
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	440b      	add	r3, r1
 8003b50:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b54:	3301      	adds	r3, #1
 8003b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b5e:	e00f      	b.n	8003b80 <HAL_I2C_Init+0x1dc>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	1e58      	subs	r0, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6859      	ldr	r1, [r3, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	0099      	lsls	r1, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b76:	3301      	adds	r3, #1
 8003b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	6809      	ldr	r1, [r1, #0]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69da      	ldr	r2, [r3, #28]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003bae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6911      	ldr	r1, [r2, #16]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	68d2      	ldr	r2, [r2, #12]
 8003bba:	4311      	orrs	r1, r2
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	000186a0 	.word	0x000186a0
 8003c1c:	001e847f 	.word	0x001e847f
 8003c20:	003d08ff 	.word	0x003d08ff
 8003c24:	431bde83 	.word	0x431bde83
 8003c28:	10624dd3 	.word	0x10624dd3

08003c2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	4608      	mov	r0, r1
 8003c36:	4611      	mov	r1, r2
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	817b      	strh	r3, [r7, #10]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	813b      	strh	r3, [r7, #8]
 8003c42:	4613      	mov	r3, r2
 8003c44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c46:	f7ff fa67 	bl	8003118 <HAL_GetTick>
 8003c4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	f040 80d9 	bne.w	8003e0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	2319      	movs	r3, #25
 8003c60:	2201      	movs	r2, #1
 8003c62:	496d      	ldr	r1, [pc, #436]	@ (8003e18 <HAL_I2C_Mem_Write+0x1ec>)
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 fc8b 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c70:	2302      	movs	r3, #2
 8003c72:	e0cc      	b.n	8003e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_I2C_Mem_Write+0x56>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e0c5      	b.n	8003e0e <HAL_I2C_Mem_Write+0x1e2>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d007      	beq.n	8003ca8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2221      	movs	r2, #33	@ 0x21
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2240      	movs	r2, #64	@ 0x40
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a3a      	ldr	r2, [r7, #32]
 8003cd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4a4d      	ldr	r2, [pc, #308]	@ (8003e1c <HAL_I2C_Mem_Write+0x1f0>)
 8003ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cea:	88f8      	ldrh	r0, [r7, #6]
 8003cec:	893a      	ldrh	r2, [r7, #8]
 8003cee:	8979      	ldrh	r1, [r7, #10]
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fac2 	bl	8004284 <I2C_RequestMemoryWrite>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d052      	beq.n	8003dac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e081      	b.n	8003e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fd50 	bl	80047b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00d      	beq.n	8003d36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d107      	bne.n	8003d32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e06b      	b.n	8003e0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	781a      	ldrb	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d11b      	bne.n	8003dac <HAL_I2C_Mem_Write+0x180>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d017      	beq.n	8003dac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	781a      	ldrb	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1aa      	bne.n	8003d0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 fd43 	bl	8004844 <I2C_WaitOnBTFFlagUntilTimeout>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00d      	beq.n	8003de0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d107      	bne.n	8003ddc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e016      	b.n	8003e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	e000      	b.n	8003e0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e0c:	2302      	movs	r3, #2
  }
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	00100002 	.word	0x00100002
 8003e1c:	ffff0000 	.word	0xffff0000

08003e20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08c      	sub	sp, #48	@ 0x30
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	4608      	mov	r0, r1
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4603      	mov	r3, r0
 8003e30:	817b      	strh	r3, [r7, #10]
 8003e32:	460b      	mov	r3, r1
 8003e34:	813b      	strh	r3, [r7, #8]
 8003e36:	4613      	mov	r3, r2
 8003e38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e3a:	f7ff f96d 	bl	8003118 <HAL_GetTick>
 8003e3e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	f040 8214 	bne.w	8004276 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	2319      	movs	r3, #25
 8003e54:	2201      	movs	r2, #1
 8003e56:	497b      	ldr	r1, [pc, #492]	@ (8004044 <HAL_I2C_Mem_Read+0x224>)
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 fb91 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
 8003e66:	e207      	b.n	8004278 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_I2C_Mem_Read+0x56>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e200      	b.n	8004278 <HAL_I2C_Mem_Read+0x458>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d007      	beq.n	8003e9c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2222      	movs	r2, #34	@ 0x22
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2240      	movs	r2, #64	@ 0x40
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ec6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4a5b      	ldr	r2, [pc, #364]	@ (8004048 <HAL_I2C_Mem_Read+0x228>)
 8003edc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ede:	88f8      	ldrh	r0, [r7, #6]
 8003ee0:	893a      	ldrh	r2, [r7, #8]
 8003ee2:	8979      	ldrh	r1, [r7, #10]
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	9301      	str	r3, [sp, #4]
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	4603      	mov	r3, r0
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 fa5e 	bl	80043b0 <I2C_RequestMemoryRead>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e1bc      	b.n	8004278 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d113      	bne.n	8003f2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f06:	2300      	movs	r3, #0
 8003f08:	623b      	str	r3, [r7, #32]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	623b      	str	r3, [r7, #32]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	623b      	str	r3, [r7, #32]
 8003f1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	e190      	b.n	8004250 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d11b      	bne.n	8003f6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	61fb      	str	r3, [r7, #28]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	e170      	b.n	8004250 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d11b      	bne.n	8003fae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f96:	2300      	movs	r3, #0
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	61bb      	str	r3, [r7, #24]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	e150      	b.n	8004250 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	617b      	str	r3, [r7, #20]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003fc4:	e144      	b.n	8004250 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	f200 80f1 	bhi.w	80041b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d123      	bne.n	8004020 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 fc79 	bl	80048d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e145      	b.n	8004278 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691a      	ldr	r2, [r3, #16]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800401e:	e117      	b.n	8004250 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004024:	2b02      	cmp	r3, #2
 8004026:	d14e      	bne.n	80040c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402e:	2200      	movs	r2, #0
 8004030:	4906      	ldr	r1, [pc, #24]	@ (800404c <HAL_I2C_Mem_Read+0x22c>)
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 faa4 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d008      	beq.n	8004050 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e11a      	b.n	8004278 <HAL_I2C_Mem_Read+0x458>
 8004042:	bf00      	nop
 8004044:	00100002 	.word	0x00100002
 8004048:	ffff0000 	.word	0xffff0000
 800404c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800405e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040c4:	e0c4      	b.n	8004250 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040cc:	2200      	movs	r2, #0
 80040ce:	496c      	ldr	r1, [pc, #432]	@ (8004280 <HAL_I2C_Mem_Read+0x460>)
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 fa55 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0cb      	b.n	8004278 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004128:	2200      	movs	r2, #0
 800412a:	4955      	ldr	r1, [pc, #340]	@ (8004280 <HAL_I2C_Mem_Read+0x460>)
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 fa27 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e09d      	b.n	8004278 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800414a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041b0:	e04e      	b.n	8004250 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 fb8c 	bl	80048d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e058      	b.n	8004278 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b04      	cmp	r3, #4
 8004204:	d124      	bne.n	8004250 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800420a:	2b03      	cmp	r3, #3
 800420c:	d107      	bne.n	800421e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800421c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004254:	2b00      	cmp	r3, #0
 8004256:	f47f aeb6 	bne.w	8003fc6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	e000      	b.n	8004278 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004276:	2302      	movs	r3, #2
  }
}
 8004278:	4618      	mov	r0, r3
 800427a:	3728      	adds	r7, #40	@ 0x28
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	00010004 	.word	0x00010004

08004284 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af02      	add	r7, sp, #8
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	4608      	mov	r0, r1
 800428e:	4611      	mov	r1, r2
 8004290:	461a      	mov	r2, r3
 8004292:	4603      	mov	r3, r0
 8004294:	817b      	strh	r3, [r7, #10]
 8004296:	460b      	mov	r3, r1
 8004298:	813b      	strh	r3, [r7, #8]
 800429a:	4613      	mov	r3, r2
 800429c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f960 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00d      	beq.n	80042e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042d4:	d103      	bne.n	80042de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e05f      	b.n	80043a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042e2:	897b      	ldrh	r3, [r7, #10]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	6a3a      	ldr	r2, [r7, #32]
 80042f6:	492d      	ldr	r1, [pc, #180]	@ (80043ac <I2C_RequestMemoryWrite+0x128>)
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f9bb 	bl	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e04c      	b.n	80043a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800431e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004320:	6a39      	ldr	r1, [r7, #32]
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 fa46 	bl	80047b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00d      	beq.n	800434a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	2b04      	cmp	r3, #4
 8004334:	d107      	bne.n	8004346 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004344:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e02b      	b.n	80043a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d105      	bne.n	800435c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004350:	893b      	ldrh	r3, [r7, #8]
 8004352:	b2da      	uxtb	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	611a      	str	r2, [r3, #16]
 800435a:	e021      	b.n	80043a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800435c:	893b      	ldrh	r3, [r7, #8]
 800435e:	0a1b      	lsrs	r3, r3, #8
 8004360:	b29b      	uxth	r3, r3
 8004362:	b2da      	uxtb	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800436a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800436c:	6a39      	ldr	r1, [r7, #32]
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 fa20 	bl	80047b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00d      	beq.n	8004396 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	2b04      	cmp	r3, #4
 8004380:	d107      	bne.n	8004392 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004390:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e005      	b.n	80043a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004396:	893b      	ldrh	r3, [r7, #8]
 8004398:	b2da      	uxtb	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	00010002 	.word	0x00010002

080043b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	4608      	mov	r0, r1
 80043ba:	4611      	mov	r1, r2
 80043bc:	461a      	mov	r2, r3
 80043be:	4603      	mov	r3, r0
 80043c0:	817b      	strh	r3, [r7, #10]
 80043c2:	460b      	mov	r3, r1
 80043c4:	813b      	strh	r3, [r7, #8]
 80043c6:	4613      	mov	r3, r2
 80043c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f8c2 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00d      	beq.n	800441e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800440c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004410:	d103      	bne.n	800441a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004418:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e0aa      	b.n	8004574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800441e:	897b      	ldrh	r3, [r7, #10]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800442c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004430:	6a3a      	ldr	r2, [r7, #32]
 8004432:	4952      	ldr	r1, [pc, #328]	@ (800457c <I2C_RequestMemoryRead+0x1cc>)
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f91d 	bl	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e097      	b.n	8004574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800445a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800445c:	6a39      	ldr	r1, [r7, #32]
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 f9a8 	bl	80047b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00d      	beq.n	8004486 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446e:	2b04      	cmp	r3, #4
 8004470:	d107      	bne.n	8004482 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004480:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e076      	b.n	8004574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d105      	bne.n	8004498 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800448c:	893b      	ldrh	r3, [r7, #8]
 800448e:	b2da      	uxtb	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	611a      	str	r2, [r3, #16]
 8004496:	e021      	b.n	80044dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004498:	893b      	ldrh	r3, [r7, #8]
 800449a:	0a1b      	lsrs	r3, r3, #8
 800449c:	b29b      	uxth	r3, r3
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a8:	6a39      	ldr	r1, [r7, #32]
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 f982 	bl	80047b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00d      	beq.n	80044d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d107      	bne.n	80044ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e050      	b.n	8004574 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044d2:	893b      	ldrh	r3, [r7, #8]
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044de:	6a39      	ldr	r1, [r7, #32]
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 f967 	bl	80047b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00d      	beq.n	8004508 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d107      	bne.n	8004504 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004502:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e035      	b.n	8004574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004516:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	2200      	movs	r2, #0
 8004520:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 f82b 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00d      	beq.n	800454c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800453e:	d103      	bne.n	8004548 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004546:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e013      	b.n	8004574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800454c:	897b      	ldrh	r3, [r7, #10]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	b2da      	uxtb	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800455c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455e:	6a3a      	ldr	r2, [r7, #32]
 8004560:	4906      	ldr	r1, [pc, #24]	@ (800457c <I2C_RequestMemoryRead+0x1cc>)
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f886 	bl	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	00010002 	.word	0x00010002

08004580 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004590:	e048      	b.n	8004624 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004598:	d044      	beq.n	8004624 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459a:	f7fe fdbd 	bl	8003118 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d302      	bcc.n	80045b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d139      	bne.n	8004624 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	0c1b      	lsrs	r3, r3, #16
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d10d      	bne.n	80045d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	43da      	mvns	r2, r3
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	4013      	ands	r3, r2
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf0c      	ite	eq
 80045cc:	2301      	moveq	r3, #1
 80045ce:	2300      	movne	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	461a      	mov	r2, r3
 80045d4:	e00c      	b.n	80045f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	43da      	mvns	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	4013      	ands	r3, r2
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bf0c      	ite	eq
 80045e8:	2301      	moveq	r3, #1
 80045ea:	2300      	movne	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	461a      	mov	r2, r3
 80045f0:	79fb      	ldrb	r3, [r7, #7]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d116      	bne.n	8004624 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004610:	f043 0220 	orr.w	r2, r3, #32
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e023      	b.n	800466c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	0c1b      	lsrs	r3, r3, #16
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b01      	cmp	r3, #1
 800462c:	d10d      	bne.n	800464a <I2C_WaitOnFlagUntilTimeout+0xca>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	43da      	mvns	r2, r3
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	4013      	ands	r3, r2
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	bf0c      	ite	eq
 8004640:	2301      	moveq	r3, #1
 8004642:	2300      	movne	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	461a      	mov	r2, r3
 8004648:	e00c      	b.n	8004664 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	43da      	mvns	r2, r3
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	4013      	ands	r3, r2
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	bf0c      	ite	eq
 800465c:	2301      	moveq	r3, #1
 800465e:	2300      	movne	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	79fb      	ldrb	r3, [r7, #7]
 8004666:	429a      	cmp	r2, r3
 8004668:	d093      	beq.n	8004592 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004682:	e071      	b.n	8004768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800468e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004692:	d123      	bne.n	80046dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c8:	f043 0204 	orr.w	r2, r3, #4
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e067      	b.n	80047ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e2:	d041      	beq.n	8004768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e4:	f7fe fd18 	bl	8003118 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d302      	bcc.n	80046fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d136      	bne.n	8004768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	0c1b      	lsrs	r3, r3, #16
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b01      	cmp	r3, #1
 8004702:	d10c      	bne.n	800471e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	43da      	mvns	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4013      	ands	r3, r2
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	bf14      	ite	ne
 8004716:	2301      	movne	r3, #1
 8004718:	2300      	moveq	r3, #0
 800471a:	b2db      	uxtb	r3, r3
 800471c:	e00b      	b.n	8004736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	43da      	mvns	r2, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	4013      	ands	r3, r2
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	bf14      	ite	ne
 8004730:	2301      	movne	r3, #1
 8004732:	2300      	moveq	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d016      	beq.n	8004768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004754:	f043 0220 	orr.w	r2, r3, #32
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e021      	b.n	80047ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	0c1b      	lsrs	r3, r3, #16
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b01      	cmp	r3, #1
 8004770:	d10c      	bne.n	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	43da      	mvns	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	4013      	ands	r3, r2
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	bf14      	ite	ne
 8004784:	2301      	movne	r3, #1
 8004786:	2300      	moveq	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	e00b      	b.n	80047a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	43da      	mvns	r2, r3
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4013      	ands	r3, r2
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	bf14      	ite	ne
 800479e:	2301      	movne	r3, #1
 80047a0:	2300      	moveq	r3, #0
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f47f af6d 	bne.w	8004684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047c0:	e034      	b.n	800482c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f8e3 	bl	800498e <I2C_IsAcknowledgeFailed>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e034      	b.n	800483c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d8:	d028      	beq.n	800482c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047da:	f7fe fc9d 	bl	8003118 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d302      	bcc.n	80047f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d11d      	bne.n	800482c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047fa:	2b80      	cmp	r3, #128	@ 0x80
 80047fc:	d016      	beq.n	800482c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004818:	f043 0220 	orr.w	r2, r3, #32
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e007      	b.n	800483c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004836:	2b80      	cmp	r3, #128	@ 0x80
 8004838:	d1c3      	bne.n	80047c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004850:	e034      	b.n	80048bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 f89b 	bl	800498e <I2C_IsAcknowledgeFailed>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e034      	b.n	80048cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004868:	d028      	beq.n	80048bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486a:	f7fe fc55 	bl	8003118 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	429a      	cmp	r2, r3
 8004878:	d302      	bcc.n	8004880 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d11d      	bne.n	80048bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b04      	cmp	r3, #4
 800488c:	d016      	beq.n	80048bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a8:	f043 0220 	orr.w	r2, r3, #32
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e007      	b.n	80048cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d1c3      	bne.n	8004852 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048e0:	e049      	b.n	8004976 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f003 0310 	and.w	r3, r3, #16
 80048ec:	2b10      	cmp	r3, #16
 80048ee:	d119      	bne.n	8004924 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0210 	mvn.w	r2, #16
 80048f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e030      	b.n	8004986 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004924:	f7fe fbf8 	bl	8003118 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	429a      	cmp	r2, r3
 8004932:	d302      	bcc.n	800493a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d11d      	bne.n	8004976 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004944:	2b40      	cmp	r3, #64	@ 0x40
 8004946:	d016      	beq.n	8004976 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004962:	f043 0220 	orr.w	r2, r3, #32
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e007      	b.n	8004986 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004980:	2b40      	cmp	r3, #64	@ 0x40
 8004982:	d1ae      	bne.n	80048e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049a4:	d11b      	bne.n	80049de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ca:	f043 0204 	orr.w	r2, r3, #4
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d129      	bne.n	8004a56 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2224      	movs	r2, #36	@ 0x24
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0201 	bic.w	r2, r2, #1
 8004a18:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0210 	bic.w	r2, r2, #16
 8004a28:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0201 	orr.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	e000      	b.n	8004a58 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
  }
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	d12a      	bne.n	8004ad4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2224      	movs	r2, #36	@ 0x24
 8004a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0201 	bic.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004a9e:	89fb      	ldrh	r3, [r7, #14]
 8004aa0:	f023 030f 	bic.w	r3, r3, #15
 8004aa4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	89fb      	ldrh	r3, [r7, #14]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	89fa      	ldrh	r2, [r7, #14]
 8004ab6:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	e000      	b.n	8004ad6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004ad4:	2302      	movs	r3, #2
  }
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
	...

08004ae4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e0bf      	b.n	8004c76 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7fd fd12 	bl	8002534 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699a      	ldr	r2, [r3, #24]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004b26:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6999      	ldr	r1, [r3, #24]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b3c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6899      	ldr	r1, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4b4a      	ldr	r3, [pc, #296]	@ (8004c80 <HAL_LTDC_Init+0x19c>)
 8004b58:	400b      	ands	r3, r1
 8004b5a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	041b      	lsls	r3, r3, #16
 8004b62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6899      	ldr	r1, [r3, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699a      	ldr	r2, [r3, #24]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	431a      	orrs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68d9      	ldr	r1, [r3, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	4b3e      	ldr	r3, [pc, #248]	@ (8004c80 <HAL_LTDC_Init+0x19c>)
 8004b86:	400b      	ands	r3, r1
 8004b88:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	041b      	lsls	r3, r3, #16
 8004b90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68d9      	ldr	r1, [r3, #12]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1a      	ldr	r2, [r3, #32]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6919      	ldr	r1, [r3, #16]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4b33      	ldr	r3, [pc, #204]	@ (8004c80 <HAL_LTDC_Init+0x19c>)
 8004bb4:	400b      	ands	r3, r1
 8004bb6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbc:	041b      	lsls	r3, r3, #16
 8004bbe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6919      	ldr	r1, [r3, #16]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6959      	ldr	r1, [r3, #20]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	4b27      	ldr	r3, [pc, #156]	@ (8004c80 <HAL_LTDC_Init+0x19c>)
 8004be2:	400b      	ands	r3, r1
 8004be4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bea:	041b      	lsls	r3, r3, #16
 8004bec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6959      	ldr	r1, [r3, #20]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c0a:	021b      	lsls	r3, r3, #8
 8004c0c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004c14:	041b      	lsls	r3, r3, #16
 8004c16:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0206 	orr.w	r2, r2, #6
 8004c52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699a      	ldr	r2, [r3, #24]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	f000f800 	.word	0xf000f800

08004c84 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004c84:	b5b0      	push	{r4, r5, r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <HAL_LTDC_ConfigLayer+0x1a>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e02c      	b.n	8004cf8 <HAL_LTDC_ConfigLayer+0x74>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2134      	movs	r1, #52	@ 0x34
 8004cb4:	fb01 f303 	mul.w	r3, r1, r3
 8004cb8:	4413      	add	r3, r2
 8004cba:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	4614      	mov	r4, r2
 8004cc2:	461d      	mov	r5, r3
 8004cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cd0:	682b      	ldr	r3, [r5, #0]
 8004cd2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 f811 	bl	8004d00 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bdb0      	pop	{r4, r5, r7, pc}

08004d00 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b089      	sub	sp, #36	@ 0x24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	0c1b      	lsrs	r3, r3, #16
 8004d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d1c:	4413      	add	r3, r2
 8004d1e:	041b      	lsls	r3, r3, #16
 8004d20:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	01db      	lsls	r3, r3, #7
 8004d2c:	4413      	add	r3, r2
 8004d2e:	3384      	adds	r3, #132	@ 0x84
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	6812      	ldr	r2, [r2, #0]
 8004d36:	4611      	mov	r1, r2
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	01d2      	lsls	r2, r2, #7
 8004d3c:	440a      	add	r2, r1
 8004d3e:	3284      	adds	r2, #132	@ 0x84
 8004d40:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004d44:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	0c1b      	lsrs	r3, r3, #16
 8004d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d56:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004d58:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4619      	mov	r1, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	01db      	lsls	r3, r3, #7
 8004d64:	440b      	add	r3, r1
 8004d66:	3384      	adds	r3, #132	@ 0x84
 8004d68:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d6e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	68da      	ldr	r2, [r3, #12]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d7e:	4413      	add	r3, r2
 8004d80:	041b      	lsls	r3, r3, #16
 8004d82:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	01db      	lsls	r3, r3, #7
 8004d8e:	4413      	add	r3, r2
 8004d90:	3384      	adds	r3, #132	@ 0x84
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	4611      	mov	r1, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	01d2      	lsls	r2, r2, #7
 8004d9e:	440a      	add	r2, r1
 8004da0:	3284      	adds	r2, #132	@ 0x84
 8004da2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004da6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004db6:	4413      	add	r3, r2
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	01db      	lsls	r3, r3, #7
 8004dc4:	440b      	add	r3, r1
 8004dc6:	3384      	adds	r3, #132	@ 0x84
 8004dc8:	4619      	mov	r1, r3
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	01db      	lsls	r3, r3, #7
 8004dda:	4413      	add	r3, r2
 8004ddc:	3384      	adds	r3, #132	@ 0x84
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	6812      	ldr	r2, [r2, #0]
 8004de4:	4611      	mov	r1, r2
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	01d2      	lsls	r2, r2, #7
 8004dea:	440a      	add	r2, r1
 8004dec:	3284      	adds	r2, #132	@ 0x84
 8004dee:	f023 0307 	bic.w	r3, r3, #7
 8004df2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	01db      	lsls	r3, r3, #7
 8004dfe:	4413      	add	r3, r2
 8004e00:	3384      	adds	r3, #132	@ 0x84
 8004e02:	461a      	mov	r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004e1a:	041b      	lsls	r3, r3, #16
 8004e1c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	061b      	lsls	r3, r3, #24
 8004e24:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	01db      	lsls	r3, r3, #7
 8004e30:	4413      	add	r3, r2
 8004e32:	3384      	adds	r3, #132	@ 0x84
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	01db      	lsls	r3, r3, #7
 8004e40:	4413      	add	r3, r2
 8004e42:	3384      	adds	r3, #132	@ 0x84
 8004e44:	461a      	mov	r2, r3
 8004e46:	2300      	movs	r3, #0
 8004e48:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e50:	461a      	mov	r2, r3
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	431a      	orrs	r2, r3
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	01db      	lsls	r3, r3, #7
 8004e64:	440b      	add	r3, r1
 8004e66:	3384      	adds	r3, #132	@ 0x84
 8004e68:	4619      	mov	r1, r3
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	461a      	mov	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	01db      	lsls	r3, r3, #7
 8004e7a:	4413      	add	r3, r2
 8004e7c:	3384      	adds	r3, #132	@ 0x84
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	4611      	mov	r1, r2
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	01d2      	lsls	r2, r2, #7
 8004e8a:	440a      	add	r2, r1
 8004e8c:	3284      	adds	r2, #132	@ 0x84
 8004e8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e92:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	01db      	lsls	r3, r3, #7
 8004e9e:	4413      	add	r3, r2
 8004ea0:	3384      	adds	r3, #132	@ 0x84
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	01db      	lsls	r3, r3, #7
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3384      	adds	r3, #132	@ 0x84
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	01d2      	lsls	r2, r2, #7
 8004ec4:	440a      	add	r2, r1
 8004ec6:	3284      	adds	r2, #132	@ 0x84
 8004ec8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004ecc:	f023 0307 	bic.w	r3, r3, #7
 8004ed0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	69da      	ldr	r2, [r3, #28]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	68f9      	ldr	r1, [r7, #12]
 8004edc:	6809      	ldr	r1, [r1, #0]
 8004ede:	4608      	mov	r0, r1
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	01c9      	lsls	r1, r1, #7
 8004ee4:	4401      	add	r1, r0
 8004ee6:	3184      	adds	r1, #132	@ 0x84
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	01db      	lsls	r3, r3, #7
 8004ef6:	4413      	add	r3, r2
 8004ef8:	3384      	adds	r3, #132	@ 0x84
 8004efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	461a      	mov	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	01db      	lsls	r3, r3, #7
 8004f06:	4413      	add	r3, r2
 8004f08:	3384      	adds	r3, #132	@ 0x84
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	01db      	lsls	r3, r3, #7
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3384      	adds	r3, #132	@ 0x84
 8004f1e:	461a      	mov	r2, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f24:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d102      	bne.n	8004f34 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004f2e:	2304      	movs	r3, #4
 8004f30:	61fb      	str	r3, [r7, #28]
 8004f32:	e01b      	b.n	8004f6c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d102      	bne.n	8004f42 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	61fb      	str	r3, [r7, #28]
 8004f40:	e014      	b.n	8004f6c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d00b      	beq.n	8004f62 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d007      	beq.n	8004f62 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d003      	beq.n	8004f62 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004f5e:	2b07      	cmp	r3, #7
 8004f60:	d102      	bne.n	8004f68 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004f62:	2302      	movs	r3, #2
 8004f64:	61fb      	str	r3, [r7, #28]
 8004f66:	e001      	b.n	8004f6c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	461a      	mov	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	01db      	lsls	r3, r3, #7
 8004f76:	4413      	add	r3, r2
 8004f78:	3384      	adds	r3, #132	@ 0x84
 8004f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	4611      	mov	r1, r2
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	01d2      	lsls	r2, r2, #7
 8004f86:	440a      	add	r2, r1
 8004f88:	3284      	adds	r2, #132	@ 0x84
 8004f8a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004f8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	fb02 f303 	mul.w	r3, r2, r3
 8004f9a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	6859      	ldr	r1, [r3, #4]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	1acb      	subs	r3, r1, r3
 8004fa6:	69f9      	ldr	r1, [r7, #28]
 8004fa8:	fb01 f303 	mul.w	r3, r1, r3
 8004fac:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004fae:	68f9      	ldr	r1, [r7, #12]
 8004fb0:	6809      	ldr	r1, [r1, #0]
 8004fb2:	4608      	mov	r0, r1
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	01c9      	lsls	r1, r1, #7
 8004fb8:	4401      	add	r1, r0
 8004fba:	3184      	adds	r1, #132	@ 0x84
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	01db      	lsls	r3, r3, #7
 8004fca:	4413      	add	r3, r2
 8004fcc:	3384      	adds	r3, #132	@ 0x84
 8004fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	6812      	ldr	r2, [r2, #0]
 8004fd4:	4611      	mov	r1, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	01d2      	lsls	r2, r2, #7
 8004fda:	440a      	add	r2, r1
 8004fdc:	3284      	adds	r2, #132	@ 0x84
 8004fde:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004fe2:	f023 0307 	bic.w	r3, r3, #7
 8004fe6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	461a      	mov	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	01db      	lsls	r3, r3, #7
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3384      	adds	r3, #132	@ 0x84
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	01db      	lsls	r3, r3, #7
 8005008:	4413      	add	r3, r2
 800500a:	3384      	adds	r3, #132	@ 0x84
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	6812      	ldr	r2, [r2, #0]
 8005012:	4611      	mov	r1, r2
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	01d2      	lsls	r2, r2, #7
 8005018:	440a      	add	r2, r1
 800501a:	3284      	adds	r2, #132	@ 0x84
 800501c:	f043 0301 	orr.w	r3, r3, #1
 8005020:	6013      	str	r3, [r2, #0]
}
 8005022:	bf00      	nop
 8005024:	3724      	adds	r7, #36	@ 0x24
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
	...

08005030 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e267      	b.n	8005512 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d075      	beq.n	800513a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800504e:	4b88      	ldr	r3, [pc, #544]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 030c 	and.w	r3, r3, #12
 8005056:	2b04      	cmp	r3, #4
 8005058:	d00c      	beq.n	8005074 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800505a:	4b85      	ldr	r3, [pc, #532]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005062:	2b08      	cmp	r3, #8
 8005064:	d112      	bne.n	800508c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005066:	4b82      	ldr	r3, [pc, #520]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800506e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005072:	d10b      	bne.n	800508c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005074:	4b7e      	ldr	r3, [pc, #504]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d05b      	beq.n	8005138 <HAL_RCC_OscConfig+0x108>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d157      	bne.n	8005138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e242      	b.n	8005512 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005094:	d106      	bne.n	80050a4 <HAL_RCC_OscConfig+0x74>
 8005096:	4b76      	ldr	r3, [pc, #472]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a75      	ldr	r2, [pc, #468]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 800509c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	e01d      	b.n	80050e0 <HAL_RCC_OscConfig+0xb0>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050ac:	d10c      	bne.n	80050c8 <HAL_RCC_OscConfig+0x98>
 80050ae:	4b70      	ldr	r3, [pc, #448]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a6f      	ldr	r2, [pc, #444]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 80050b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a6c      	ldr	r2, [pc, #432]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 80050c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	e00b      	b.n	80050e0 <HAL_RCC_OscConfig+0xb0>
 80050c8:	4b69      	ldr	r3, [pc, #420]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a68      	ldr	r2, [pc, #416]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 80050ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	4b66      	ldr	r3, [pc, #408]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a65      	ldr	r2, [pc, #404]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 80050da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d013      	beq.n	8005110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e8:	f7fe f816 	bl	8003118 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050f0:	f7fe f812 	bl	8003118 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b64      	cmp	r3, #100	@ 0x64
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e207      	b.n	8005512 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005102:	4b5b      	ldr	r3, [pc, #364]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0f0      	beq.n	80050f0 <HAL_RCC_OscConfig+0xc0>
 800510e:	e014      	b.n	800513a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005110:	f7fe f802 	bl	8003118 <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005118:	f7fd fffe 	bl	8003118 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b64      	cmp	r3, #100	@ 0x64
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e1f3      	b.n	8005512 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800512a:	4b51      	ldr	r3, [pc, #324]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1f0      	bne.n	8005118 <HAL_RCC_OscConfig+0xe8>
 8005136:	e000      	b.n	800513a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d063      	beq.n	800520e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005146:	4b4a      	ldr	r3, [pc, #296]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 030c 	and.w	r3, r3, #12
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00b      	beq.n	800516a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005152:	4b47      	ldr	r3, [pc, #284]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800515a:	2b08      	cmp	r3, #8
 800515c:	d11c      	bne.n	8005198 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800515e:	4b44      	ldr	r3, [pc, #272]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d116      	bne.n	8005198 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800516a:	4b41      	ldr	r3, [pc, #260]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d005      	beq.n	8005182 <HAL_RCC_OscConfig+0x152>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d001      	beq.n	8005182 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e1c7      	b.n	8005512 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005182:	4b3b      	ldr	r3, [pc, #236]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4937      	ldr	r1, [pc, #220]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 8005192:	4313      	orrs	r3, r2
 8005194:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005196:	e03a      	b.n	800520e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d020      	beq.n	80051e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051a0:	4b34      	ldr	r3, [pc, #208]	@ (8005274 <HAL_RCC_OscConfig+0x244>)
 80051a2:	2201      	movs	r2, #1
 80051a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a6:	f7fd ffb7 	bl	8003118 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051ae:	f7fd ffb3 	bl	8003118 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e1a8      	b.n	8005512 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0f0      	beq.n	80051ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051cc:	4b28      	ldr	r3, [pc, #160]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	4925      	ldr	r1, [pc, #148]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	600b      	str	r3, [r1, #0]
 80051e0:	e015      	b.n	800520e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051e2:	4b24      	ldr	r3, [pc, #144]	@ (8005274 <HAL_RCC_OscConfig+0x244>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e8:	f7fd ff96 	bl	8003118 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f0:	f7fd ff92 	bl	8003118 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e187      	b.n	8005512 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005202:	4b1b      	ldr	r3, [pc, #108]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f0      	bne.n	80051f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d036      	beq.n	8005288 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d016      	beq.n	8005250 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005222:	4b15      	ldr	r3, [pc, #84]	@ (8005278 <HAL_RCC_OscConfig+0x248>)
 8005224:	2201      	movs	r2, #1
 8005226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005228:	f7fd ff76 	bl	8003118 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005230:	f7fd ff72 	bl	8003118 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e167      	b.n	8005512 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005242:	4b0b      	ldr	r3, [pc, #44]	@ (8005270 <HAL_RCC_OscConfig+0x240>)
 8005244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0f0      	beq.n	8005230 <HAL_RCC_OscConfig+0x200>
 800524e:	e01b      	b.n	8005288 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005250:	4b09      	ldr	r3, [pc, #36]	@ (8005278 <HAL_RCC_OscConfig+0x248>)
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005256:	f7fd ff5f 	bl	8003118 <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800525c:	e00e      	b.n	800527c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800525e:	f7fd ff5b 	bl	8003118 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d907      	bls.n	800527c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e150      	b.n	8005512 <HAL_RCC_OscConfig+0x4e2>
 8005270:	40023800 	.word	0x40023800
 8005274:	42470000 	.word	0x42470000
 8005278:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800527c:	4b88      	ldr	r3, [pc, #544]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 800527e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1ea      	bne.n	800525e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 8097 	beq.w	80053c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005296:	2300      	movs	r3, #0
 8005298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800529a:	4b81      	ldr	r3, [pc, #516]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 800529c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10f      	bne.n	80052c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052a6:	2300      	movs	r3, #0
 80052a8:	60bb      	str	r3, [r7, #8]
 80052aa:	4b7d      	ldr	r3, [pc, #500]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 80052ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ae:	4a7c      	ldr	r2, [pc, #496]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 80052b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80052b6:	4b7a      	ldr	r3, [pc, #488]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 80052b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052be:	60bb      	str	r3, [r7, #8]
 80052c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052c2:	2301      	movs	r3, #1
 80052c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c6:	4b77      	ldr	r3, [pc, #476]	@ (80054a4 <HAL_RCC_OscConfig+0x474>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d118      	bne.n	8005304 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052d2:	4b74      	ldr	r3, [pc, #464]	@ (80054a4 <HAL_RCC_OscConfig+0x474>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a73      	ldr	r2, [pc, #460]	@ (80054a4 <HAL_RCC_OscConfig+0x474>)
 80052d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052de:	f7fd ff1b 	bl	8003118 <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e4:	e008      	b.n	80052f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e6:	f7fd ff17 	bl	8003118 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e10c      	b.n	8005512 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f8:	4b6a      	ldr	r3, [pc, #424]	@ (80054a4 <HAL_RCC_OscConfig+0x474>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0f0      	beq.n	80052e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d106      	bne.n	800531a <HAL_RCC_OscConfig+0x2ea>
 800530c:	4b64      	ldr	r3, [pc, #400]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 800530e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005310:	4a63      	ldr	r2, [pc, #396]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 8005312:	f043 0301 	orr.w	r3, r3, #1
 8005316:	6713      	str	r3, [r2, #112]	@ 0x70
 8005318:	e01c      	b.n	8005354 <HAL_RCC_OscConfig+0x324>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	2b05      	cmp	r3, #5
 8005320:	d10c      	bne.n	800533c <HAL_RCC_OscConfig+0x30c>
 8005322:	4b5f      	ldr	r3, [pc, #380]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 8005324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005326:	4a5e      	ldr	r2, [pc, #376]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 8005328:	f043 0304 	orr.w	r3, r3, #4
 800532c:	6713      	str	r3, [r2, #112]	@ 0x70
 800532e:	4b5c      	ldr	r3, [pc, #368]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 8005330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005332:	4a5b      	ldr	r2, [pc, #364]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 8005334:	f043 0301 	orr.w	r3, r3, #1
 8005338:	6713      	str	r3, [r2, #112]	@ 0x70
 800533a:	e00b      	b.n	8005354 <HAL_RCC_OscConfig+0x324>
 800533c:	4b58      	ldr	r3, [pc, #352]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 800533e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005340:	4a57      	ldr	r2, [pc, #348]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 8005342:	f023 0301 	bic.w	r3, r3, #1
 8005346:	6713      	str	r3, [r2, #112]	@ 0x70
 8005348:	4b55      	ldr	r3, [pc, #340]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 800534a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534c:	4a54      	ldr	r2, [pc, #336]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 800534e:	f023 0304 	bic.w	r3, r3, #4
 8005352:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d015      	beq.n	8005388 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800535c:	f7fd fedc 	bl	8003118 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005362:	e00a      	b.n	800537a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005364:	f7fd fed8 	bl	8003118 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005372:	4293      	cmp	r3, r2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e0cb      	b.n	8005512 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800537a:	4b49      	ldr	r3, [pc, #292]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 800537c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d0ee      	beq.n	8005364 <HAL_RCC_OscConfig+0x334>
 8005386:	e014      	b.n	80053b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005388:	f7fd fec6 	bl	8003118 <HAL_GetTick>
 800538c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800538e:	e00a      	b.n	80053a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005390:	f7fd fec2 	bl	8003118 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800539e:	4293      	cmp	r3, r2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e0b5      	b.n	8005512 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053a6:	4b3e      	ldr	r3, [pc, #248]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 80053a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1ee      	bne.n	8005390 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053b2:	7dfb      	ldrb	r3, [r7, #23]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d105      	bne.n	80053c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053b8:	4b39      	ldr	r3, [pc, #228]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 80053ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053bc:	4a38      	ldr	r2, [pc, #224]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 80053be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 80a1 	beq.w	8005510 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053ce:	4b34      	ldr	r3, [pc, #208]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 030c 	and.w	r3, r3, #12
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	d05c      	beq.n	8005494 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d141      	bne.n	8005466 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e2:	4b31      	ldr	r3, [pc, #196]	@ (80054a8 <HAL_RCC_OscConfig+0x478>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e8:	f7fd fe96 	bl	8003118 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053f0:	f7fd fe92 	bl	8003118 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e087      	b.n	8005512 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005402:	4b27      	ldr	r3, [pc, #156]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f0      	bne.n	80053f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69da      	ldr	r2, [r3, #28]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541c:	019b      	lsls	r3, r3, #6
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005424:	085b      	lsrs	r3, r3, #1
 8005426:	3b01      	subs	r3, #1
 8005428:	041b      	lsls	r3, r3, #16
 800542a:	431a      	orrs	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005430:	061b      	lsls	r3, r3, #24
 8005432:	491b      	ldr	r1, [pc, #108]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 8005434:	4313      	orrs	r3, r2
 8005436:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005438:	4b1b      	ldr	r3, [pc, #108]	@ (80054a8 <HAL_RCC_OscConfig+0x478>)
 800543a:	2201      	movs	r2, #1
 800543c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543e:	f7fd fe6b 	bl	8003118 <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005446:	f7fd fe67 	bl	8003118 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e05c      	b.n	8005512 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005458:	4b11      	ldr	r3, [pc, #68]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0f0      	beq.n	8005446 <HAL_RCC_OscConfig+0x416>
 8005464:	e054      	b.n	8005510 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005466:	4b10      	ldr	r3, [pc, #64]	@ (80054a8 <HAL_RCC_OscConfig+0x478>)
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800546c:	f7fd fe54 	bl	8003118 <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005474:	f7fd fe50 	bl	8003118 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e045      	b.n	8005512 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005486:	4b06      	ldr	r3, [pc, #24]	@ (80054a0 <HAL_RCC_OscConfig+0x470>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1f0      	bne.n	8005474 <HAL_RCC_OscConfig+0x444>
 8005492:	e03d      	b.n	8005510 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d107      	bne.n	80054ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e038      	b.n	8005512 <HAL_RCC_OscConfig+0x4e2>
 80054a0:	40023800 	.word	0x40023800
 80054a4:	40007000 	.word	0x40007000
 80054a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054ac:	4b1b      	ldr	r3, [pc, #108]	@ (800551c <HAL_RCC_OscConfig+0x4ec>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d028      	beq.n	800550c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d121      	bne.n	800550c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d11a      	bne.n	800550c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054dc:	4013      	ands	r3, r2
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d111      	bne.n	800550c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f2:	085b      	lsrs	r3, r3, #1
 80054f4:	3b01      	subs	r3, #1
 80054f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d107      	bne.n	800550c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005506:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005508:	429a      	cmp	r2, r3
 800550a:	d001      	beq.n	8005510 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	40023800 	.word	0x40023800

08005520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e0cc      	b.n	80056ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005534:	4b68      	ldr	r3, [pc, #416]	@ (80056d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 030f 	and.w	r3, r3, #15
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d90c      	bls.n	800555c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005542:	4b65      	ldr	r3, [pc, #404]	@ (80056d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800554a:	4b63      	ldr	r3, [pc, #396]	@ (80056d8 <HAL_RCC_ClockConfig+0x1b8>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d001      	beq.n	800555c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e0b8      	b.n	80056ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d020      	beq.n	80055aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005574:	4b59      	ldr	r3, [pc, #356]	@ (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	4a58      	ldr	r2, [pc, #352]	@ (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800557e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	2b00      	cmp	r3, #0
 800558a:	d005      	beq.n	8005598 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800558c:	4b53      	ldr	r3, [pc, #332]	@ (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	4a52      	ldr	r2, [pc, #328]	@ (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 8005592:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005596:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005598:	4b50      	ldr	r3, [pc, #320]	@ (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	494d      	ldr	r1, [pc, #308]	@ (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d044      	beq.n	8005640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d107      	bne.n	80055ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055be:	4b47      	ldr	r3, [pc, #284]	@ (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d119      	bne.n	80055fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e07f      	b.n	80056ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d003      	beq.n	80055de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d107      	bne.n	80055ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055de:	4b3f      	ldr	r3, [pc, #252]	@ (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e06f      	b.n	80056ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ee:	4b3b      	ldr	r3, [pc, #236]	@ (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e067      	b.n	80056ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055fe:	4b37      	ldr	r3, [pc, #220]	@ (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f023 0203 	bic.w	r2, r3, #3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	4934      	ldr	r1, [pc, #208]	@ (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 800560c:	4313      	orrs	r3, r2
 800560e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005610:	f7fd fd82 	bl	8003118 <HAL_GetTick>
 8005614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005616:	e00a      	b.n	800562e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005618:	f7fd fd7e 	bl	8003118 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005626:	4293      	cmp	r3, r2
 8005628:	d901      	bls.n	800562e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e04f      	b.n	80056ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562e:	4b2b      	ldr	r3, [pc, #172]	@ (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 020c 	and.w	r2, r3, #12
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	429a      	cmp	r2, r3
 800563e:	d1eb      	bne.n	8005618 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005640:	4b25      	ldr	r3, [pc, #148]	@ (80056d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	429a      	cmp	r2, r3
 800564c:	d20c      	bcs.n	8005668 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564e:	4b22      	ldr	r3, [pc, #136]	@ (80056d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005656:	4b20      	ldr	r3, [pc, #128]	@ (80056d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d001      	beq.n	8005668 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e032      	b.n	80056ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b00      	cmp	r3, #0
 8005672:	d008      	beq.n	8005686 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005674:	4b19      	ldr	r3, [pc, #100]	@ (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	4916      	ldr	r1, [pc, #88]	@ (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 8005682:	4313      	orrs	r3, r2
 8005684:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b00      	cmp	r3, #0
 8005690:	d009      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005692:	4b12      	ldr	r3, [pc, #72]	@ (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	490e      	ldr	r1, [pc, #56]	@ (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056a6:	f000 f821 	bl	80056ec <HAL_RCC_GetSysClockFreq>
 80056aa:	4602      	mov	r2, r0
 80056ac:	4b0b      	ldr	r3, [pc, #44]	@ (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	091b      	lsrs	r3, r3, #4
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	490a      	ldr	r1, [pc, #40]	@ (80056e0 <HAL_RCC_ClockConfig+0x1c0>)
 80056b8:	5ccb      	ldrb	r3, [r1, r3]
 80056ba:	fa22 f303 	lsr.w	r3, r2, r3
 80056be:	4a09      	ldr	r2, [pc, #36]	@ (80056e4 <HAL_RCC_ClockConfig+0x1c4>)
 80056c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80056c2:	4b09      	ldr	r3, [pc, #36]	@ (80056e8 <HAL_RCC_ClockConfig+0x1c8>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fd fce2 	bl	8003090 <HAL_InitTick>

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	40023c00 	.word	0x40023c00
 80056dc:	40023800 	.word	0x40023800
 80056e0:	08007abc 	.word	0x08007abc
 80056e4:	20000010 	.word	0x20000010
 80056e8:	20000014 	.word	0x20000014

080056ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056f0:	b094      	sub	sp, #80	@ 0x50
 80056f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005704:	4b79      	ldr	r3, [pc, #484]	@ (80058ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f003 030c 	and.w	r3, r3, #12
 800570c:	2b08      	cmp	r3, #8
 800570e:	d00d      	beq.n	800572c <HAL_RCC_GetSysClockFreq+0x40>
 8005710:	2b08      	cmp	r3, #8
 8005712:	f200 80e1 	bhi.w	80058d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <HAL_RCC_GetSysClockFreq+0x34>
 800571a:	2b04      	cmp	r3, #4
 800571c:	d003      	beq.n	8005726 <HAL_RCC_GetSysClockFreq+0x3a>
 800571e:	e0db      	b.n	80058d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005720:	4b73      	ldr	r3, [pc, #460]	@ (80058f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005722:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005724:	e0db      	b.n	80058de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005726:	4b73      	ldr	r3, [pc, #460]	@ (80058f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005728:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800572a:	e0d8      	b.n	80058de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800572c:	4b6f      	ldr	r3, [pc, #444]	@ (80058ec <HAL_RCC_GetSysClockFreq+0x200>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005734:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005736:	4b6d      	ldr	r3, [pc, #436]	@ (80058ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d063      	beq.n	800580a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005742:	4b6a      	ldr	r3, [pc, #424]	@ (80058ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	099b      	lsrs	r3, r3, #6
 8005748:	2200      	movs	r2, #0
 800574a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800574c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800574e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005754:	633b      	str	r3, [r7, #48]	@ 0x30
 8005756:	2300      	movs	r3, #0
 8005758:	637b      	str	r3, [r7, #52]	@ 0x34
 800575a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800575e:	4622      	mov	r2, r4
 8005760:	462b      	mov	r3, r5
 8005762:	f04f 0000 	mov.w	r0, #0
 8005766:	f04f 0100 	mov.w	r1, #0
 800576a:	0159      	lsls	r1, r3, #5
 800576c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005770:	0150      	lsls	r0, r2, #5
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	4621      	mov	r1, r4
 8005778:	1a51      	subs	r1, r2, r1
 800577a:	6139      	str	r1, [r7, #16]
 800577c:	4629      	mov	r1, r5
 800577e:	eb63 0301 	sbc.w	r3, r3, r1
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	f04f 0300 	mov.w	r3, #0
 800578c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005790:	4659      	mov	r1, fp
 8005792:	018b      	lsls	r3, r1, #6
 8005794:	4651      	mov	r1, sl
 8005796:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800579a:	4651      	mov	r1, sl
 800579c:	018a      	lsls	r2, r1, #6
 800579e:	4651      	mov	r1, sl
 80057a0:	ebb2 0801 	subs.w	r8, r2, r1
 80057a4:	4659      	mov	r1, fp
 80057a6:	eb63 0901 	sbc.w	r9, r3, r1
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	f04f 0300 	mov.w	r3, #0
 80057b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057be:	4690      	mov	r8, r2
 80057c0:	4699      	mov	r9, r3
 80057c2:	4623      	mov	r3, r4
 80057c4:	eb18 0303 	adds.w	r3, r8, r3
 80057c8:	60bb      	str	r3, [r7, #8]
 80057ca:	462b      	mov	r3, r5
 80057cc:	eb49 0303 	adc.w	r3, r9, r3
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	f04f 0200 	mov.w	r2, #0
 80057d6:	f04f 0300 	mov.w	r3, #0
 80057da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057de:	4629      	mov	r1, r5
 80057e0:	024b      	lsls	r3, r1, #9
 80057e2:	4621      	mov	r1, r4
 80057e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057e8:	4621      	mov	r1, r4
 80057ea:	024a      	lsls	r2, r1, #9
 80057ec:	4610      	mov	r0, r2
 80057ee:	4619      	mov	r1, r3
 80057f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057f2:	2200      	movs	r2, #0
 80057f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057fc:	f7fa fcf6 	bl	80001ec <__aeabi_uldivmod>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4613      	mov	r3, r2
 8005806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005808:	e058      	b.n	80058bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800580a:	4b38      	ldr	r3, [pc, #224]	@ (80058ec <HAL_RCC_GetSysClockFreq+0x200>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	099b      	lsrs	r3, r3, #6
 8005810:	2200      	movs	r2, #0
 8005812:	4618      	mov	r0, r3
 8005814:	4611      	mov	r1, r2
 8005816:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800581a:	623b      	str	r3, [r7, #32]
 800581c:	2300      	movs	r3, #0
 800581e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005820:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005824:	4642      	mov	r2, r8
 8005826:	464b      	mov	r3, r9
 8005828:	f04f 0000 	mov.w	r0, #0
 800582c:	f04f 0100 	mov.w	r1, #0
 8005830:	0159      	lsls	r1, r3, #5
 8005832:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005836:	0150      	lsls	r0, r2, #5
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4641      	mov	r1, r8
 800583e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005842:	4649      	mov	r1, r9
 8005844:	eb63 0b01 	sbc.w	fp, r3, r1
 8005848:	f04f 0200 	mov.w	r2, #0
 800584c:	f04f 0300 	mov.w	r3, #0
 8005850:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005854:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005858:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800585c:	ebb2 040a 	subs.w	r4, r2, sl
 8005860:	eb63 050b 	sbc.w	r5, r3, fp
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	00eb      	lsls	r3, r5, #3
 800586e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005872:	00e2      	lsls	r2, r4, #3
 8005874:	4614      	mov	r4, r2
 8005876:	461d      	mov	r5, r3
 8005878:	4643      	mov	r3, r8
 800587a:	18e3      	adds	r3, r4, r3
 800587c:	603b      	str	r3, [r7, #0]
 800587e:	464b      	mov	r3, r9
 8005880:	eb45 0303 	adc.w	r3, r5, r3
 8005884:	607b      	str	r3, [r7, #4]
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005892:	4629      	mov	r1, r5
 8005894:	028b      	lsls	r3, r1, #10
 8005896:	4621      	mov	r1, r4
 8005898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800589c:	4621      	mov	r1, r4
 800589e:	028a      	lsls	r2, r1, #10
 80058a0:	4610      	mov	r0, r2
 80058a2:	4619      	mov	r1, r3
 80058a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058a6:	2200      	movs	r2, #0
 80058a8:	61bb      	str	r3, [r7, #24]
 80058aa:	61fa      	str	r2, [r7, #28]
 80058ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058b0:	f7fa fc9c 	bl	80001ec <__aeabi_uldivmod>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4613      	mov	r3, r2
 80058ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80058bc:	4b0b      	ldr	r3, [pc, #44]	@ (80058ec <HAL_RCC_GetSysClockFreq+0x200>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	0c1b      	lsrs	r3, r3, #16
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	3301      	adds	r3, #1
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80058cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058d6:	e002      	b.n	80058de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058d8:	4b05      	ldr	r3, [pc, #20]	@ (80058f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80058da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3750      	adds	r7, #80	@ 0x50
 80058e4:	46bd      	mov	sp, r7
 80058e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058ea:	bf00      	nop
 80058ec:	40023800 	.word	0x40023800
 80058f0:	00f42400 	.word	0x00f42400
 80058f4:	007a1200 	.word	0x007a1200

080058f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058fc:	4b03      	ldr	r3, [pc, #12]	@ (800590c <HAL_RCC_GetHCLKFreq+0x14>)
 80058fe:	681b      	ldr	r3, [r3, #0]
}
 8005900:	4618      	mov	r0, r3
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	20000010 	.word	0x20000010

08005910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005914:	f7ff fff0 	bl	80058f8 <HAL_RCC_GetHCLKFreq>
 8005918:	4602      	mov	r2, r0
 800591a:	4b05      	ldr	r3, [pc, #20]	@ (8005930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	0a9b      	lsrs	r3, r3, #10
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	4903      	ldr	r1, [pc, #12]	@ (8005934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005926:	5ccb      	ldrb	r3, [r1, r3]
 8005928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800592c:	4618      	mov	r0, r3
 800592e:	bd80      	pop	{r7, pc}
 8005930:	40023800 	.word	0x40023800
 8005934:	08007acc 	.word	0x08007acc

08005938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10b      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800595c:	2b00      	cmp	r3, #0
 800595e:	d105      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005968:	2b00      	cmp	r3, #0
 800596a:	d075      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800596c:	4b91      	ldr	r3, [pc, #580]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005972:	f7fd fbd1 	bl	8003118 <HAL_GetTick>
 8005976:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005978:	e008      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800597a:	f7fd fbcd 	bl	8003118 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e189      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800598c:	4b8a      	ldr	r3, [pc, #552]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1f0      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d009      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	019a      	lsls	r2, r3, #6
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	071b      	lsls	r3, r3, #28
 80059b0:	4981      	ldr	r1, [pc, #516]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01f      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059c4:	4b7c      	ldr	r3, [pc, #496]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059ca:	0f1b      	lsrs	r3, r3, #28
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	019a      	lsls	r2, r3, #6
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	061b      	lsls	r3, r3, #24
 80059de:	431a      	orrs	r2, r3
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	071b      	lsls	r3, r3, #28
 80059e4:	4974      	ldr	r1, [pc, #464]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80059ec:	4b72      	ldr	r3, [pc, #456]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059f2:	f023 021f 	bic.w	r2, r3, #31
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	496e      	ldr	r1, [pc, #440]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00d      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	019a      	lsls	r2, r3, #6
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	061b      	lsls	r3, r3, #24
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	071b      	lsls	r3, r3, #28
 8005a24:	4964      	ldr	r1, [pc, #400]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a2c:	4b61      	ldr	r3, [pc, #388]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005a2e:	2201      	movs	r2, #1
 8005a30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a32:	f7fd fb71 	bl	8003118 <HAL_GetTick>
 8005a36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a38:	e008      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a3a:	f7fd fb6d 	bl	8003118 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e129      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a4c:	4b5a      	ldr	r3, [pc, #360]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0f0      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d105      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d079      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a70:	4b52      	ldr	r3, [pc, #328]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a76:	f7fd fb4f 	bl	8003118 <HAL_GetTick>
 8005a7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a7c:	e008      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a7e:	f7fd fb4b 	bl	8003118 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e107      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a90:	4b49      	ldr	r3, [pc, #292]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a9c:	d0ef      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d020      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005aaa:	4b43      	ldr	r3, [pc, #268]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab0:	0f1b      	lsrs	r3, r3, #28
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	019a      	lsls	r2, r3, #6
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	061b      	lsls	r3, r3, #24
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	071b      	lsls	r3, r3, #28
 8005aca:	493b      	ldr	r1, [pc, #236]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ad2:	4b39      	ldr	r3, [pc, #228]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ad8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	021b      	lsls	r3, r3, #8
 8005ae4:	4934      	ldr	r1, [pc, #208]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0308 	and.w	r3, r3, #8
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01e      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005af8:	4b2f      	ldr	r3, [pc, #188]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005afe:	0e1b      	lsrs	r3, r3, #24
 8005b00:	f003 030f 	and.w	r3, r3, #15
 8005b04:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	019a      	lsls	r2, r3, #6
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	061b      	lsls	r3, r3, #24
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	071b      	lsls	r3, r3, #28
 8005b18:	4927      	ldr	r1, [pc, #156]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b20:	4b25      	ldr	r3, [pc, #148]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b26:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2e:	4922      	ldr	r1, [pc, #136]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b36:	4b21      	ldr	r3, [pc, #132]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005b38:	2201      	movs	r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b3c:	f7fd faec 	bl	8003118 <HAL_GetTick>
 8005b40:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b42:	e008      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b44:	f7fd fae8 	bl	8003118 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e0a4      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b56:	4b18      	ldr	r3, [pc, #96]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b62:	d1ef      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0320 	and.w	r3, r3, #32
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 808b 	beq.w	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b72:	2300      	movs	r3, #0
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	4b10      	ldr	r3, [pc, #64]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b82:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a0b      	ldr	r2, [pc, #44]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b98:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b9a:	f7fd fabd 	bl	8003118 <HAL_GetTick>
 8005b9e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005ba0:	e010      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ba2:	f7fd fab9 	bl	8003118 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d909      	bls.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e075      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005bb4:	42470068 	.word	0x42470068
 8005bb8:	40023800 	.word	0x40023800
 8005bbc:	42470070 	.word	0x42470070
 8005bc0:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005bc4:	4b38      	ldr	r3, [pc, #224]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0e8      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bd0:	4b36      	ldr	r3, [pc, #216]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bd8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d02f      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d028      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bee:	4b2f      	ldr	r3, [pc, #188]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bf6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005c04:	4a29      	ldr	r2, [pc, #164]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c0a:	4b28      	ldr	r3, [pc, #160]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d114      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005c16:	f7fd fa7f 	bl	8003118 <HAL_GetTick>
 8005c1a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c1c:	e00a      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c1e:	f7fd fa7b 	bl	8003118 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d901      	bls.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e035      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c34:	4b1d      	ldr	r3, [pc, #116]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0ee      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c4c:	d10d      	bne.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005c4e:	4b17      	ldr	r3, [pc, #92]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005c5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c62:	4912      	ldr	r1, [pc, #72]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	608b      	str	r3, [r1, #8]
 8005c68:	e005      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005c6a:	4b10      	ldr	r3, [pc, #64]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	4a0f      	ldr	r2, [pc, #60]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c70:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005c74:	6093      	str	r3, [r2, #8]
 8005c76:	4b0d      	ldr	r3, [pc, #52]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c78:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c82:	490a      	ldr	r1, [pc, #40]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0310 	and.w	r3, r3, #16
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d004      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005c9a:	4b06      	ldr	r3, [pc, #24]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005c9c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40007000 	.word	0x40007000
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	42470e40 	.word	0x42470e40
 8005cb4:	424711e0 	.word	0x424711e0

08005cb8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e01c      	b.n	8005d04 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	795b      	ldrb	r3, [r3, #5]
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d105      	bne.n	8005ce0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fc fd52 	bl	8002784 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f042 0204 	orr.w	r2, r2, #4
 8005cf4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e07b      	b.n	8005e16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d108      	bne.n	8005d38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d2e:	d009      	beq.n	8005d44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	61da      	str	r2, [r3, #28]
 8005d36:	e005      	b.n	8005d44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d106      	bne.n	8005d64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7fc fd32 	bl	80027c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	431a      	orrs	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dc8:	ea42 0103 	orr.w	r1, r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	0c1b      	lsrs	r3, r3, #16
 8005de2:	f003 0104 	and.w	r1, r3, #4
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dea:	f003 0210 	and.w	r2, r3, #16
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69da      	ldr	r2, [r3, #28]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b082      	sub	sp, #8
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e01a      	b.n	8005e66 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e46:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7fc fd05 	bl	8002858 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b088      	sub	sp, #32
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	603b      	str	r3, [r7, #0]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e7e:	f7fd f94b 	bl	8003118 <HAL_GetTick>
 8005e82:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005e84:	88fb      	ldrh	r3, [r7, #6]
 8005e86:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d001      	beq.n	8005e98 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005e94:	2302      	movs	r3, #2
 8005e96:	e12a      	b.n	80060ee <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <HAL_SPI_Transmit+0x36>
 8005e9e:	88fb      	ldrh	r3, [r7, #6]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e122      	b.n	80060ee <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d101      	bne.n	8005eb6 <HAL_SPI_Transmit+0x48>
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	e11b      	b.n	80060ee <HAL_SPI_Transmit+0x280>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2203      	movs	r2, #3
 8005ec2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	88fa      	ldrh	r2, [r7, #6]
 8005ed6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	88fa      	ldrh	r2, [r7, #6]
 8005edc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f04:	d10f      	bne.n	8005f26 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f30:	2b40      	cmp	r3, #64	@ 0x40
 8005f32:	d007      	beq.n	8005f44 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f4c:	d152      	bne.n	8005ff4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <HAL_SPI_Transmit+0xee>
 8005f56:	8b7b      	ldrh	r3, [r7, #26]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d145      	bne.n	8005fe8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f60:	881a      	ldrh	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6c:	1c9a      	adds	r2, r3, #2
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f80:	e032      	b.n	8005fe8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f003 0302 	and.w	r3, r3, #2
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d112      	bne.n	8005fb6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f94:	881a      	ldrh	r2, [r3, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa0:	1c9a      	adds	r2, r3, #2
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005fb4:	e018      	b.n	8005fe8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fb6:	f7fd f8af 	bl	8003118 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d803      	bhi.n	8005fce <HAL_SPI_Transmit+0x160>
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fcc:	d102      	bne.n	8005fd4 <HAL_SPI_Transmit+0x166>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d109      	bne.n	8005fe8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e082      	b.n	80060ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1c7      	bne.n	8005f82 <HAL_SPI_Transmit+0x114>
 8005ff2:	e053      	b.n	800609c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <HAL_SPI_Transmit+0x194>
 8005ffc:	8b7b      	ldrh	r3, [r7, #26]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d147      	bne.n	8006092 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	330c      	adds	r3, #12
 800600c:	7812      	ldrb	r2, [r2, #0]
 800600e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800601e:	b29b      	uxth	r3, r3
 8006020:	3b01      	subs	r3, #1
 8006022:	b29a      	uxth	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006028:	e033      	b.n	8006092 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b02      	cmp	r3, #2
 8006036:	d113      	bne.n	8006060 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	330c      	adds	r3, #12
 8006042:	7812      	ldrb	r2, [r2, #0]
 8006044:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800605e:	e018      	b.n	8006092 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006060:	f7fd f85a 	bl	8003118 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	429a      	cmp	r2, r3
 800606e:	d803      	bhi.n	8006078 <HAL_SPI_Transmit+0x20a>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006076:	d102      	bne.n	800607e <HAL_SPI_Transmit+0x210>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d109      	bne.n	8006092 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e02d      	b.n	80060ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006096:	b29b      	uxth	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1c6      	bne.n	800602a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800609c:	69fa      	ldr	r2, [r7, #28]
 800609e:	6839      	ldr	r1, [r7, #0]
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 f8bf 	bl	8006224 <SPI_EndRxTxTransaction>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d002      	beq.n	80060b2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2220      	movs	r2, #32
 80060b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10a      	bne.n	80060d0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060ba:	2300      	movs	r3, #0
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	617b      	str	r3, [r7, #20]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	617b      	str	r3, [r7, #20]
 80060ce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80060ec:	2300      	movs	r3, #0
  }
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3720      	adds	r7, #32
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006104:	b2db      	uxtb	r3, r3
}
 8006106:	4618      	mov	r0, r3
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
	...

08006114 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b088      	sub	sp, #32
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	603b      	str	r3, [r7, #0]
 8006120:	4613      	mov	r3, r2
 8006122:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006124:	f7fc fff8 	bl	8003118 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	4413      	add	r3, r2
 8006132:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006134:	f7fc fff0 	bl	8003118 <HAL_GetTick>
 8006138:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800613a:	4b39      	ldr	r3, [pc, #228]	@ (8006220 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	015b      	lsls	r3, r3, #5
 8006140:	0d1b      	lsrs	r3, r3, #20
 8006142:	69fa      	ldr	r2, [r7, #28]
 8006144:	fb02 f303 	mul.w	r3, r2, r3
 8006148:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800614a:	e054      	b.n	80061f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006152:	d050      	beq.n	80061f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006154:	f7fc ffe0 	bl	8003118 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	69fa      	ldr	r2, [r7, #28]
 8006160:	429a      	cmp	r2, r3
 8006162:	d902      	bls.n	800616a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d13d      	bne.n	80061e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006178:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006182:	d111      	bne.n	80061a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800618c:	d004      	beq.n	8006198 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006196:	d107      	bne.n	80061a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061b0:	d10f      	bne.n	80061d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e017      	b.n	8006216 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4013      	ands	r3, r2
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	429a      	cmp	r2, r3
 8006204:	bf0c      	ite	eq
 8006206:	2301      	moveq	r3, #1
 8006208:	2300      	movne	r3, #0
 800620a:	b2db      	uxtb	r3, r3
 800620c:	461a      	mov	r2, r3
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	429a      	cmp	r2, r3
 8006212:	d19b      	bne.n	800614c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3720      	adds	r7, #32
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20000010 	.word	0x20000010

08006224 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af02      	add	r7, sp, #8
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2201      	movs	r2, #1
 8006238:	2102      	movs	r1, #2
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f7ff ff6a 	bl	8006114 <SPI_WaitFlagStateUntilTimeout>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d007      	beq.n	8006256 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800624a:	f043 0220 	orr.w	r2, r3, #32
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e032      	b.n	80062bc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006256:	4b1b      	ldr	r3, [pc, #108]	@ (80062c4 <SPI_EndRxTxTransaction+0xa0>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a1b      	ldr	r2, [pc, #108]	@ (80062c8 <SPI_EndRxTxTransaction+0xa4>)
 800625c:	fba2 2303 	umull	r2, r3, r2, r3
 8006260:	0d5b      	lsrs	r3, r3, #21
 8006262:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006266:	fb02 f303 	mul.w	r3, r2, r3
 800626a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006274:	d112      	bne.n	800629c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2200      	movs	r2, #0
 800627e:	2180      	movs	r1, #128	@ 0x80
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f7ff ff47 	bl	8006114 <SPI_WaitFlagStateUntilTimeout>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d016      	beq.n	80062ba <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006290:	f043 0220 	orr.w	r2, r3, #32
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e00f      	b.n	80062bc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062b2:	2b80      	cmp	r3, #128	@ 0x80
 80062b4:	d0f2      	beq.n	800629c <SPI_EndRxTxTransaction+0x78>
 80062b6:	e000      	b.n	80062ba <SPI_EndRxTxTransaction+0x96>
        break;
 80062b8:	bf00      	nop
  }

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3718      	adds	r7, #24
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	20000010 	.word	0x20000010
 80062c8:	165e9f81 	.word	0x165e9f81

080062cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e041      	b.n	8006362 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d106      	bne.n	80062f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fc face 	bl	8002894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	3304      	adds	r3, #4
 8006308:	4619      	mov	r1, r3
 800630a:	4610      	mov	r0, r2
 800630c:	f000 f8f4 	bl	80064f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b084      	sub	sp, #16
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_TIM_ConfigClockSource+0x1c>
 8006382:	2302      	movs	r3, #2
 8006384:	e0b4      	b.n	80064f0 <HAL_TIM_ConfigClockSource+0x186>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2202      	movs	r2, #2
 8006392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80063a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063ac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063be:	d03e      	beq.n	800643e <HAL_TIM_ConfigClockSource+0xd4>
 80063c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063c4:	f200 8087 	bhi.w	80064d6 <HAL_TIM_ConfigClockSource+0x16c>
 80063c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063cc:	f000 8086 	beq.w	80064dc <HAL_TIM_ConfigClockSource+0x172>
 80063d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d4:	d87f      	bhi.n	80064d6 <HAL_TIM_ConfigClockSource+0x16c>
 80063d6:	2b70      	cmp	r3, #112	@ 0x70
 80063d8:	d01a      	beq.n	8006410 <HAL_TIM_ConfigClockSource+0xa6>
 80063da:	2b70      	cmp	r3, #112	@ 0x70
 80063dc:	d87b      	bhi.n	80064d6 <HAL_TIM_ConfigClockSource+0x16c>
 80063de:	2b60      	cmp	r3, #96	@ 0x60
 80063e0:	d050      	beq.n	8006484 <HAL_TIM_ConfigClockSource+0x11a>
 80063e2:	2b60      	cmp	r3, #96	@ 0x60
 80063e4:	d877      	bhi.n	80064d6 <HAL_TIM_ConfigClockSource+0x16c>
 80063e6:	2b50      	cmp	r3, #80	@ 0x50
 80063e8:	d03c      	beq.n	8006464 <HAL_TIM_ConfigClockSource+0xfa>
 80063ea:	2b50      	cmp	r3, #80	@ 0x50
 80063ec:	d873      	bhi.n	80064d6 <HAL_TIM_ConfigClockSource+0x16c>
 80063ee:	2b40      	cmp	r3, #64	@ 0x40
 80063f0:	d058      	beq.n	80064a4 <HAL_TIM_ConfigClockSource+0x13a>
 80063f2:	2b40      	cmp	r3, #64	@ 0x40
 80063f4:	d86f      	bhi.n	80064d6 <HAL_TIM_ConfigClockSource+0x16c>
 80063f6:	2b30      	cmp	r3, #48	@ 0x30
 80063f8:	d064      	beq.n	80064c4 <HAL_TIM_ConfigClockSource+0x15a>
 80063fa:	2b30      	cmp	r3, #48	@ 0x30
 80063fc:	d86b      	bhi.n	80064d6 <HAL_TIM_ConfigClockSource+0x16c>
 80063fe:	2b20      	cmp	r3, #32
 8006400:	d060      	beq.n	80064c4 <HAL_TIM_ConfigClockSource+0x15a>
 8006402:	2b20      	cmp	r3, #32
 8006404:	d867      	bhi.n	80064d6 <HAL_TIM_ConfigClockSource+0x16c>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d05c      	beq.n	80064c4 <HAL_TIM_ConfigClockSource+0x15a>
 800640a:	2b10      	cmp	r3, #16
 800640c:	d05a      	beq.n	80064c4 <HAL_TIM_ConfigClockSource+0x15a>
 800640e:	e062      	b.n	80064d6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006420:	f000 f990 	bl	8006744 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006432:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	609a      	str	r2, [r3, #8]
      break;
 800643c:	e04f      	b.n	80064de <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800644e:	f000 f979 	bl	8006744 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006460:	609a      	str	r2, [r3, #8]
      break;
 8006462:	e03c      	b.n	80064de <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006470:	461a      	mov	r2, r3
 8006472:	f000 f8ed 	bl	8006650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2150      	movs	r1, #80	@ 0x50
 800647c:	4618      	mov	r0, r3
 800647e:	f000 f946 	bl	800670e <TIM_ITRx_SetConfig>
      break;
 8006482:	e02c      	b.n	80064de <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006490:	461a      	mov	r2, r3
 8006492:	f000 f90c 	bl	80066ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2160      	movs	r1, #96	@ 0x60
 800649c:	4618      	mov	r0, r3
 800649e:	f000 f936 	bl	800670e <TIM_ITRx_SetConfig>
      break;
 80064a2:	e01c      	b.n	80064de <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064b0:	461a      	mov	r2, r3
 80064b2:	f000 f8cd 	bl	8006650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2140      	movs	r1, #64	@ 0x40
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 f926 	bl	800670e <TIM_ITRx_SetConfig>
      break;
 80064c2:	e00c      	b.n	80064de <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4619      	mov	r1, r3
 80064ce:	4610      	mov	r0, r2
 80064d0:	f000 f91d 	bl	800670e <TIM_ITRx_SetConfig>
      break;
 80064d4:	e003      	b.n	80064de <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	73fb      	strb	r3, [r7, #15]
      break;
 80064da:	e000      	b.n	80064de <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a46      	ldr	r2, [pc, #280]	@ (8006624 <TIM_Base_SetConfig+0x12c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d013      	beq.n	8006538 <TIM_Base_SetConfig+0x40>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006516:	d00f      	beq.n	8006538 <TIM_Base_SetConfig+0x40>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a43      	ldr	r2, [pc, #268]	@ (8006628 <TIM_Base_SetConfig+0x130>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d00b      	beq.n	8006538 <TIM_Base_SetConfig+0x40>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a42      	ldr	r2, [pc, #264]	@ (800662c <TIM_Base_SetConfig+0x134>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d007      	beq.n	8006538 <TIM_Base_SetConfig+0x40>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a41      	ldr	r2, [pc, #260]	@ (8006630 <TIM_Base_SetConfig+0x138>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d003      	beq.n	8006538 <TIM_Base_SetConfig+0x40>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a40      	ldr	r2, [pc, #256]	@ (8006634 <TIM_Base_SetConfig+0x13c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d108      	bne.n	800654a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800653e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4313      	orrs	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a35      	ldr	r2, [pc, #212]	@ (8006624 <TIM_Base_SetConfig+0x12c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d02b      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006558:	d027      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a32      	ldr	r2, [pc, #200]	@ (8006628 <TIM_Base_SetConfig+0x130>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d023      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a31      	ldr	r2, [pc, #196]	@ (800662c <TIM_Base_SetConfig+0x134>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d01f      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a30      	ldr	r2, [pc, #192]	@ (8006630 <TIM_Base_SetConfig+0x138>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d01b      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a2f      	ldr	r2, [pc, #188]	@ (8006634 <TIM_Base_SetConfig+0x13c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d017      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a2e      	ldr	r2, [pc, #184]	@ (8006638 <TIM_Base_SetConfig+0x140>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d013      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a2d      	ldr	r2, [pc, #180]	@ (800663c <TIM_Base_SetConfig+0x144>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00f      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a2c      	ldr	r2, [pc, #176]	@ (8006640 <TIM_Base_SetConfig+0x148>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00b      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a2b      	ldr	r2, [pc, #172]	@ (8006644 <TIM_Base_SetConfig+0x14c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d007      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a2a      	ldr	r2, [pc, #168]	@ (8006648 <TIM_Base_SetConfig+0x150>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d003      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a29      	ldr	r2, [pc, #164]	@ (800664c <TIM_Base_SetConfig+0x154>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d108      	bne.n	80065bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a10      	ldr	r2, [pc, #64]	@ (8006624 <TIM_Base_SetConfig+0x12c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d003      	beq.n	80065f0 <TIM_Base_SetConfig+0xf8>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a12      	ldr	r2, [pc, #72]	@ (8006634 <TIM_Base_SetConfig+0x13c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d103      	bne.n	80065f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	691a      	ldr	r2, [r3, #16]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b01      	cmp	r3, #1
 8006608:	d105      	bne.n	8006616 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f023 0201 	bic.w	r2, r3, #1
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	611a      	str	r2, [r3, #16]
  }
}
 8006616:	bf00      	nop
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	40010000 	.word	0x40010000
 8006628:	40000400 	.word	0x40000400
 800662c:	40000800 	.word	0x40000800
 8006630:	40000c00 	.word	0x40000c00
 8006634:	40010400 	.word	0x40010400
 8006638:	40014000 	.word	0x40014000
 800663c:	40014400 	.word	0x40014400
 8006640:	40014800 	.word	0x40014800
 8006644:	40001800 	.word	0x40001800
 8006648:	40001c00 	.word	0x40001c00
 800664c:	40002000 	.word	0x40002000

08006650 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	f023 0201 	bic.w	r2, r3, #1
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800667a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	011b      	lsls	r3, r3, #4
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	4313      	orrs	r3, r2
 8006684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f023 030a 	bic.w	r3, r3, #10
 800668c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	4313      	orrs	r3, r2
 8006694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	621a      	str	r2, [r3, #32]
}
 80066a2:	bf00      	nop
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b087      	sub	sp, #28
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	60b9      	str	r1, [r7, #8]
 80066b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	f023 0210 	bic.w	r2, r3, #16
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	031b      	lsls	r3, r3, #12
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	621a      	str	r2, [r3, #32]
}
 8006702:	bf00      	nop
 8006704:	371c      	adds	r7, #28
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800670e:	b480      	push	{r7}
 8006710:	b085      	sub	sp, #20
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006724:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4313      	orrs	r3, r2
 800672c:	f043 0307 	orr.w	r3, r3, #7
 8006730:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	609a      	str	r2, [r3, #8]
}
 8006738:	bf00      	nop
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
 8006750:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800675e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	021a      	lsls	r2, r3, #8
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	431a      	orrs	r2, r3
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	4313      	orrs	r3, r2
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	4313      	orrs	r3, r2
 8006770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	609a      	str	r2, [r3, #8]
}
 8006778:	bf00      	nop
 800677a:	371c      	adds	r7, #28
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006794:	2b01      	cmp	r3, #1
 8006796:	d101      	bne.n	800679c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006798:	2302      	movs	r3, #2
 800679a:	e05a      	b.n	8006852 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2202      	movs	r2, #2
 80067a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a21      	ldr	r2, [pc, #132]	@ (8006860 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d022      	beq.n	8006826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067e8:	d01d      	beq.n	8006826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006864 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d018      	beq.n	8006826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006868 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d013      	beq.n	8006826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a1a      	ldr	r2, [pc, #104]	@ (800686c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00e      	beq.n	8006826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a18      	ldr	r2, [pc, #96]	@ (8006870 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d009      	beq.n	8006826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a17      	ldr	r2, [pc, #92]	@ (8006874 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d004      	beq.n	8006826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a15      	ldr	r2, [pc, #84]	@ (8006878 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d10c      	bne.n	8006840 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800682c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	4313      	orrs	r3, r2
 8006836:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	40010000 	.word	0x40010000
 8006864:	40000400 	.word	0x40000400
 8006868:	40000800 	.word	0x40000800
 800686c:	40000c00 	.word	0x40000c00
 8006870:	40010400 	.word	0x40010400
 8006874:	40014000 	.word	0x40014000
 8006878:	40001800 	.word	0x40001800

0800687c <memset>:
 800687c:	4402      	add	r2, r0
 800687e:	4603      	mov	r3, r0
 8006880:	4293      	cmp	r3, r2
 8006882:	d100      	bne.n	8006886 <memset+0xa>
 8006884:	4770      	bx	lr
 8006886:	f803 1b01 	strb.w	r1, [r3], #1
 800688a:	e7f9      	b.n	8006880 <memset+0x4>

0800688c <__libc_init_array>:
 800688c:	b570      	push	{r4, r5, r6, lr}
 800688e:	4d0d      	ldr	r5, [pc, #52]	@ (80068c4 <__libc_init_array+0x38>)
 8006890:	4c0d      	ldr	r4, [pc, #52]	@ (80068c8 <__libc_init_array+0x3c>)
 8006892:	1b64      	subs	r4, r4, r5
 8006894:	10a4      	asrs	r4, r4, #2
 8006896:	2600      	movs	r6, #0
 8006898:	42a6      	cmp	r6, r4
 800689a:	d109      	bne.n	80068b0 <__libc_init_array+0x24>
 800689c:	4d0b      	ldr	r5, [pc, #44]	@ (80068cc <__libc_init_array+0x40>)
 800689e:	4c0c      	ldr	r4, [pc, #48]	@ (80068d0 <__libc_init_array+0x44>)
 80068a0:	f000 f818 	bl	80068d4 <_init>
 80068a4:	1b64      	subs	r4, r4, r5
 80068a6:	10a4      	asrs	r4, r4, #2
 80068a8:	2600      	movs	r6, #0
 80068aa:	42a6      	cmp	r6, r4
 80068ac:	d105      	bne.n	80068ba <__libc_init_array+0x2e>
 80068ae:	bd70      	pop	{r4, r5, r6, pc}
 80068b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b4:	4798      	blx	r3
 80068b6:	3601      	adds	r6, #1
 80068b8:	e7ee      	b.n	8006898 <__libc_init_array+0xc>
 80068ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80068be:	4798      	blx	r3
 80068c0:	3601      	adds	r6, #1
 80068c2:	e7f2      	b.n	80068aa <__libc_init_array+0x1e>
 80068c4:	08007adc 	.word	0x08007adc
 80068c8:	08007adc 	.word	0x08007adc
 80068cc:	08007adc 	.word	0x08007adc
 80068d0:	08007ae0 	.word	0x08007ae0

080068d4 <_init>:
 80068d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d6:	bf00      	nop
 80068d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068da:	bc08      	pop	{r3}
 80068dc:	469e      	mov	lr, r3
 80068de:	4770      	bx	lr

080068e0 <_fini>:
 80068e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e2:	bf00      	nop
 80068e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e6:	bc08      	pop	{r3}
 80068e8:	469e      	mov	lr, r3
 80068ea:	4770      	bx	lr
