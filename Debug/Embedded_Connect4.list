
Embedded_Connect4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007470  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001224  08007620  08007620  00008620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008844  08008844  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  08008844  08008844  00009844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800884c  0800884c  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800884c  0800884c  0000984c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008850  08008850  00009850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008854  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a06c  2**0
                  CONTENTS
 10 .bss          00025d48  2000006c  2000006c  0000a06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025db4  20025db4  0000a06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014104  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003293  00000000  00000000  0001e1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f0  00000000  00000000  00021438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000102c  00000000  00000000  00022928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000270d9  00000000  00000000  00023954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019245  00000000  00000000  0004aa2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3154  00000000  00000000  00063c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00146dc6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c30  00000000  00000000  00146e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  0014ca3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007608 	.word	0x08007608

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08007608 	.word	0x08007608

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f002 ff0e 	bl	80033a4 <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 faac 	bl	8000ae4 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fa69 	bl	8000a64 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fc86 	bl	8000ea8 <LCD_Clear>

    buttonInit();
 800059c:	f000 f83e 	bl	800061c <buttonInit>
    addSchedulerEvent(START_MENU_EVENT);
 80005a0:	2001      	movs	r0, #1
 80005a2:	f001 fa2b 	bl	80019fc <addSchedulerEvent>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005a6:	f001 fa05 	bl	80019b4 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005aa:	4b02      	ldr	r3, [pc, #8]	@ (80005b4 <ApplicationInit+0x34>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000088 	.word	0x20000088

080005b8 <LCD_Start_Screen>:
void LCD_Visual_Demo(void)
{
	visualDemo();
}

void LCD_Start_Screen(){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	LCD_Draw_Start_Screen();
 80005bc:	f000 ff9c 	bl	80014f8 <LCD_Draw_Start_Screen>
	addSchedulerEvent(POLLING_MODE_SELECT_EVENT);
 80005c0:	2002      	movs	r0, #2
 80005c2:	f001 fa1b 	bl	80019fc <addSchedulerEvent>
	removeSchedulerEvent(START_MENU_EVENT);
 80005c6:	2001      	movs	r0, #1
 80005c8:	f001 fa2a 	bl	8001a20 <removeSchedulerEvent>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <LCD_Select_Color_Screen>:

void LCD_Select_Color_Screen(){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	LCD_Draw_Select_Color_Screen();
 80005d4:	f000 ffcc 	bl	8001570 <LCD_Draw_Select_Color_Screen>
	removeSchedulerEvent(COLOR_SELECT_EVENT);
 80005d8:	2004      	movs	r0, #4
 80005da:	f001 fa21 	bl	8001a20 <removeSchedulerEvent>
	addSchedulerEvent(POLLING_COLOR_SELECT_EVENT);
 80005de:	2008      	movs	r0, #8
 80005e0:	f001 fa0c 	bl	80019fc <addSchedulerEvent>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <LCD_Game_Screen>:

void LCD_Game_Screen(){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	LCD_Update_Game_Start_Time();
 80005ec:	f000 f8ca 	bl	8000784 <LCD_Update_Game_Start_Time>
	//update the game starting time
	LCD_Draw_Game_Grid();
 80005f0:	f001 f810 	bl	8001614 <LCD_Draw_Game_Grid>
	removeSchedulerEvent(BUILD_NEW_GAME_EVENT);
 80005f4:	2010      	movs	r0, #16
 80005f6:	f001 fa13 	bl	8001a20 <removeSchedulerEvent>
	addSchedulerEvent(POLLING_GAME_EVENT);
 80005fa:	2020      	movs	r0, #32
 80005fc:	f001 f9fe 	bl	80019fc <addSchedulerEvent>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <LCD_Score_Screen>:

void LCD_Score_Screen(){
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	LCD_Draw_Score_Screen();
 8000608:	f001 f886 	bl	8001718 <LCD_Draw_Score_Screen>
	removeSchedulerEvent(SCORE_SCREEN_EVENT);
 800060c:	2040      	movs	r0, #64	@ 0x40
 800060e:	f001 fa07 	bl	8001a20 <removeSchedulerEvent>
	addSchedulerEvent(POLLING_RESTART_EVENT);
 8000612:	2080      	movs	r0, #128	@ 0x80
 8000614:	f001 f9f2 	bl	80019fc <addSchedulerEvent>
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}

0800061c <buttonInit>:

void buttonInit(){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	Button_Init();
 8000620:	f000 f880 	bl	8000724 <Button_Init>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <LCD_Polling_Mode>:
			}
		}
}


void LCD_Polling_Mode(){
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 800062c:	4808      	ldr	r0, [pc, #32]	@ (8000650 <LCD_Polling_Mode+0x28>)
 800062e:	f001 f9cc 	bl	80019ca <returnTouchStateAndLocation>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d109      	bne.n	800064c <LCD_Polling_Mode+0x24>
		/* Touch valid */
		if(StaticTouchData.x < LCD_PIXEL_WIDTH/2){
 8000638:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <LCD_Polling_Mode+0x28>)
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	2b77      	cmp	r3, #119	@ 0x77
 800063e:	d805      	bhi.n	800064c <LCD_Polling_Mode+0x24>
			//Bottom half
			removeSchedulerEvent(POLLING_MODE_SELECT_EVENT);
 8000640:	2002      	movs	r0, #2
 8000642:	f001 f9ed 	bl	8001a20 <removeSchedulerEvent>
			addSchedulerEvent(COLOR_SELECT_EVENT);
 8000646:	2004      	movs	r0, #4
 8000648:	f001 f9d8 	bl	80019fc <addSchedulerEvent>
		}
	}
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000088 	.word	0x20000088

08000654 <LCD_Polling_Color>:

void LCD_Polling_Color(){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000658:	480c      	ldr	r0, [pc, #48]	@ (800068c <LCD_Polling_Color+0x38>)
 800065a:	f001 f9b6 	bl	80019ca <returnTouchStateAndLocation>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d110      	bne.n	8000686 <LCD_Polling_Color+0x32>
			/* Touch valid */
			if(StaticTouchData.x < LCD_PIXEL_WIDTH/2){
 8000664:	4b09      	ldr	r3, [pc, #36]	@ (800068c <LCD_Polling_Color+0x38>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	2b77      	cmp	r3, #119	@ 0x77
 800066a:	d803      	bhi.n	8000674 <LCD_Polling_Color+0x20>
				//left side
				LCD_Set_Player(PLAYER_RED);
 800066c:	2002      	movs	r0, #2
 800066e:	f000 f8b5 	bl	80007dc <LCD_Set_Player>
 8000672:	e002      	b.n	800067a <LCD_Polling_Color+0x26>
			}
			else{
				//right side
				LCD_Set_Player(PLAYER_YELLOW);
 8000674:	2001      	movs	r0, #1
 8000676:	f000 f8b1 	bl	80007dc <LCD_Set_Player>
			}
			removeSchedulerEvent(POLLING_COLOR_SELECT_EVENT);
 800067a:	2008      	movs	r0, #8
 800067c:	f001 f9d0 	bl	8001a20 <removeSchedulerEvent>
			addSchedulerEvent(BUILD_NEW_GAME_EVENT);
 8000680:	2010      	movs	r0, #16
 8000682:	f001 f9bb 	bl	80019fc <addSchedulerEvent>
		}
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000088 	.word	0x20000088

08000690 <LCD_Touch_Polling_Game>:

void LCD_Touch_Polling_Game(){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	/* If touch pressed */
	if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000694:	4809      	ldr	r0, [pc, #36]	@ (80006bc <LCD_Touch_Polling_Game+0x2c>)
 8000696:	f001 f998 	bl	80019ca <returnTouchStateAndLocation>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d10a      	bne.n	80006b6 <LCD_Touch_Polling_Game+0x26>
		/* Touch valid */
		if(StaticTouchData.x < LCD_PIXEL_WIDTH/2){
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <LCD_Touch_Polling_Game+0x2c>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	2b77      	cmp	r3, #119	@ 0x77
 80006a6:	d803      	bhi.n	80006b0 <LCD_Touch_Polling_Game+0x20>
			//left side
			LCD_Update_Chip_To_Drop(LEFT);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f000 faf1 	bl	8000c90 <LCD_Update_Chip_To_Drop>
			LCD_Update_Chip_To_Drop(RIGHT);
		}
	}
	/* Touch not pressed */
	//do nothing
}
 80006ae:	e002      	b.n	80006b6 <LCD_Touch_Polling_Game+0x26>
			LCD_Update_Chip_To_Drop(RIGHT);
 80006b0:	2000      	movs	r0, #0
 80006b2:	f000 faed 	bl	8000c90 <LCD_Update_Chip_To_Drop>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000088 	.word	0x20000088

080006c0 <LCD_Polling_Restart>:

void LCD_Polling_Restart(){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80006c4:	4808      	ldr	r0, [pc, #32]	@ (80006e8 <LCD_Polling_Restart+0x28>)
 80006c6:	f001 f980 	bl	80019ca <returnTouchStateAndLocation>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d109      	bne.n	80006e4 <LCD_Polling_Restart+0x24>
		/* Touch valid */
		if(StaticTouchData.y < LCD_PIXEL_HEIGHT/2){
 80006d0:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <LCD_Polling_Restart+0x28>)
 80006d2:	885b      	ldrh	r3, [r3, #2]
 80006d4:	2b9f      	cmp	r3, #159	@ 0x9f
 80006d6:	d805      	bhi.n	80006e4 <LCD_Polling_Restart+0x24>
			//Bottom half
			removeSchedulerEvent(POLLING_RESTART_EVENT);
 80006d8:	2080      	movs	r0, #128	@ 0x80
 80006da:	f001 f9a1 	bl	8001a20 <removeSchedulerEvent>
			addSchedulerEvent(START_MENU_EVENT);
 80006de:	2001      	movs	r0, #1
 80006e0:	f001 f98c 	bl	80019fc <addSchedulerEvent>
		}
	}
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000088 	.word	0x20000088

080006ec <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80006f2:	2006      	movs	r0, #6
 80006f4:	f003 f88f 	bl	8003816 <HAL_NVIC_DisableIRQ>

	uint32_t eventsToRun = getScheduledEvents();
 80006f8:	f001 f974 	bl	80019e4 <getScheduledEvents>
 80006fc:	6078      	str	r0, [r7, #4]
	//only want to do stuff if the game screen is active
	if(eventsToRun & POLLING_GAME_EVENT){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f003 0320 	and.w	r3, r3, #32
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <EXTI0_IRQHandler+0x20>
		LCD_Insert_Chip_Game_Grid();
 8000708:	f000 fe2c 	bl	8001364 <LCD_Insert_Chip_Game_Grid>
		//allows for you to insert a chip if the game is active
    }
	__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_0);
 800070c:	4b04      	ldr	r3, [pc, #16]	@ (8000720 <EXTI0_IRQHandler+0x34>)
 800070e:	2201      	movs	r2, #1
 8000710:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000712:	2006      	movs	r0, #6
 8000714:	f003 f871 	bl	80037fa <HAL_NVIC_EnableIRQ>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40013c00 	.word	0x40013c00

08000724 <Button_Init>:
#include "Button_Driver.h"

void Button_Init(){
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <Button_Init+0x54>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a11      	ldr	r2, [pc, #68]	@ (8000778 <Button_Init+0x54>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <Button_Init+0x54>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
		GPIO_InitTypeDef buttonPin;
		buttonPin.Pin         = BUTTON_PIN;
 8000746:	2301      	movs	r3, #1
 8000748:	607b      	str	r3, [r7, #4]
		buttonPin.Mode        = GPIO_MODE_IT_RISING;
 800074a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800074e:	60bb      	str	r3, [r7, #8]
		buttonPin.Pull        = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
		buttonPin.Speed       = GPIO_SPEED_FREQ_HIGH;
 8000754:	2302      	movs	r3, #2
 8000756:	613b      	str	r3, [r7, #16]
		//buttonPin.Alternate   = GPIO_AF1_TIM2;
		HAL_GPIO_Init(BUTTON_PORT, &buttonPin);
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	4619      	mov	r1, r3
 800075c:	4807      	ldr	r0, [pc, #28]	@ (800077c <Button_Init+0x58>)
 800075e:	f003 f875 	bl	800384c <HAL_GPIO_Init>
		__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_0);
 8000762:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <Button_Init+0x5c>)
 8000764:	2201      	movs	r2, #1
 8000766:	615a      	str	r2, [r3, #20]

		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000768:	2006      	movs	r0, #6
 800076a:	f003 f846 	bl	80037fa <HAL_NVIC_EnableIRQ>
}
 800076e:	bf00      	nop
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40020000 	.word	0x40020000
 8000780:	40013c00 	.word	0x40013c00

08000784 <LCD_Update_Game_Start_Time>:

uint32_t gameStartTime    = 0;
uint32_t gameEndTime      = 0;
uint32_t gameLengthTime   = 0;

void LCD_Update_Game_Start_Time(){
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	gameStartTime = HAL_GetTick();
 8000788:	f002 feec 	bl	8003564 <HAL_GetTick>
 800078c:	4603      	mov	r3, r0
 800078e:	4a02      	ldr	r2, [pc, #8]	@ (8000798 <LCD_Update_Game_Start_Time+0x14>)
 8000790:	6013      	str	r3, [r2, #0]
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200259f4 	.word	0x200259f4

0800079c <LCD_Update_Game_End_Time>:

void LCD_Update_Game_End_Time(){
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	gameEndTime = HAL_GetTick();
 80007a0:	f002 fee0 	bl	8003564 <HAL_GetTick>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4a02      	ldr	r2, [pc, #8]	@ (80007b0 <LCD_Update_Game_End_Time+0x14>)
 80007a8:	6013      	str	r3, [r2, #0]
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200259f8 	.word	0x200259f8

080007b4 <LCD_Update_Game_Length_Time>:

void LCD_Update_Game_Length_Time(){
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
	gameLengthTime = gameEndTime - gameStartTime;
 80007b8:	4b05      	ldr	r3, [pc, #20]	@ (80007d0 <LCD_Update_Game_Length_Time+0x1c>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <LCD_Update_Game_Length_Time+0x20>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	4a05      	ldr	r2, [pc, #20]	@ (80007d8 <LCD_Update_Game_Length_Time+0x24>)
 80007c4:	6013      	str	r3, [r2, #0]
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	200259f8 	.word	0x200259f8
 80007d4:	200259f4 	.word	0x200259f4
 80007d8:	200259fc 	.word	0x200259fc

080007dc <LCD_Set_Player>:

void LCD_Set_Player(uint8_t color){
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
	playerTurn = color;
 80007e6:	4a04      	ldr	r2, [pc, #16]	@ (80007f8 <LCD_Set_Player+0x1c>)
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	7013      	strb	r3, [r2, #0]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	20000002 	.word	0x20000002

080007fc <Init_Chip_To_Drop>:

void Init_Chip_To_Drop(){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	chip.yPos        = CHIP_Y_POS;
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <Init_Chip_To_Drop+0x20>)
 8000802:	223a      	movs	r2, #58	@ 0x3a
 8000804:	709a      	strb	r2, [r3, #2]
	chip.xPos        = CHIP_X_POS(CHIP_X_START_COLUMN);
 8000806:	4b05      	ldr	r3, [pc, #20]	@ (800081c <Init_Chip_To_Drop+0x20>)
 8000808:	2277      	movs	r2, #119	@ 0x77
 800080a:	705a      	strb	r2, [r3, #1]
	chip.column      = CHIP_X_START_COLUMN;
 800080c:	4b03      	ldr	r3, [pc, #12]	@ (800081c <Init_Chip_To_Drop+0x20>)
 800080e:	2203      	movs	r2, #3
 8000810:	701a      	strb	r2, [r3, #0]
	LCD_Draw_Chip_To_Drop();
 8000812:	f000 f9c5 	bl	8000ba0 <LCD_Draw_Chip_To_Drop>
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200259ec 	.word	0x200259ec

08000820 <Init_Grid>:

void Init_Grid(){
 8000820:	b490      	push	{r4, r7}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<COLUMNS; i++){
 8000826:	2300      	movs	r3, #0
 8000828:	71fb      	strb	r3, [r7, #7]
 800082a:	e047      	b.n	80008bc <Init_Grid+0x9c>
		for(uint8_t j =0; j<ROWS; j++){
 800082c:	2300      	movs	r3, #0
 800082e:	71bb      	strb	r3, [r7, #6]
 8000830:	e03e      	b.n	80008b0 <Init_Grid+0x90>
			grid[i][j].xPos = SQUARE_SIZE/2+SQUARE_SIZE*i;
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	461a      	mov	r2, r3
 8000836:	0112      	lsls	r2, r2, #4
 8000838:	4413      	add	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	b2da      	uxtb	r2, r3
 800083e:	79f9      	ldrb	r1, [r7, #7]
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	3211      	adds	r2, #17
 8000844:	b2d4      	uxtb	r4, r2
 8000846:	4822      	ldr	r0, [pc, #136]	@ (80008d0 <Init_Grid+0xb0>)
 8000848:	461a      	mov	r2, r3
 800084a:	0052      	lsls	r2, r2, #1
 800084c:	441a      	add	r2, r3
 800084e:	460b      	mov	r3, r1
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	440b      	add	r3, r1
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	4403      	add	r3, r0
 800085a:	4622      	mov	r2, r4
 800085c:	701a      	strb	r2, [r3, #0]
			grid[i][j].yPos = SQUARE_SIZE/2 + SQUARE_SIZE*j;
 800085e:	79bb      	ldrb	r3, [r7, #6]
 8000860:	461a      	mov	r2, r3
 8000862:	0112      	lsls	r2, r2, #4
 8000864:	4413      	add	r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	b2da      	uxtb	r2, r3
 800086a:	79f9      	ldrb	r1, [r7, #7]
 800086c:	79bb      	ldrb	r3, [r7, #6]
 800086e:	3211      	adds	r2, #17
 8000870:	b2d4      	uxtb	r4, r2
 8000872:	4817      	ldr	r0, [pc, #92]	@ (80008d0 <Init_Grid+0xb0>)
 8000874:	461a      	mov	r2, r3
 8000876:	0052      	lsls	r2, r2, #1
 8000878:	441a      	add	r2, r3
 800087a:	460b      	mov	r3, r1
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	440b      	add	r3, r1
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	4413      	add	r3, r2
 8000884:	4403      	add	r3, r0
 8000886:	3301      	adds	r3, #1
 8000888:	4622      	mov	r2, r4
 800088a:	701a      	strb	r2, [r3, #0]
			grid[i][j].playerColor = PLAYER_EMPTY;
 800088c:	79f9      	ldrb	r1, [r7, #7]
 800088e:	79bb      	ldrb	r3, [r7, #6]
 8000890:	480f      	ldr	r0, [pc, #60]	@ (80008d0 <Init_Grid+0xb0>)
 8000892:	461a      	mov	r2, r3
 8000894:	0052      	lsls	r2, r2, #1
 8000896:	441a      	add	r2, r3
 8000898:	460b      	mov	r3, r1
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	440b      	add	r3, r1
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	4413      	add	r3, r2
 80008a2:	4403      	add	r3, r0
 80008a4:	3302      	adds	r3, #2
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
		for(uint8_t j =0; j<ROWS; j++){
 80008aa:	79bb      	ldrb	r3, [r7, #6]
 80008ac:	3301      	adds	r3, #1
 80008ae:	71bb      	strb	r3, [r7, #6]
 80008b0:	79bb      	ldrb	r3, [r7, #6]
 80008b2:	2b05      	cmp	r3, #5
 80008b4:	d9bd      	bls.n	8000832 <Init_Grid+0x12>
	for(uint8_t i = 0; i<COLUMNS; i++){
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	3301      	adds	r3, #1
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	2b06      	cmp	r3, #6
 80008c0:	d9b4      	bls.n	800082c <Init_Grid+0xc>
			//this clears any old information about the colors from the previous game
		}
	}
}
 80008c2:	bf00      	nop
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc90      	pop	{r4, r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	2002596c 	.word	0x2002596c

080008d4 <LCD_GPIO_Init>:

void LCD_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08c      	sub	sp, #48	@ 0x30
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	4b5a      	ldr	r3, [pc, #360]	@ (8000a48 <LCD_GPIO_Init+0x174>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e2:	4a59      	ldr	r2, [pc, #356]	@ (8000a48 <LCD_GPIO_Init+0x174>)
 80008e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80008e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ea:	4b57      	ldr	r3, [pc, #348]	@ (8000a48 <LCD_GPIO_Init+0x174>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80008f2:	61bb      	str	r3, [r7, #24]
 80008f4:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	4b53      	ldr	r3, [pc, #332]	@ (8000a48 <LCD_GPIO_Init+0x174>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a52      	ldr	r2, [pc, #328]	@ (8000a48 <LCD_GPIO_Init+0x174>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b50      	ldr	r3, [pc, #320]	@ (8000a48 <LCD_GPIO_Init+0x174>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b4c      	ldr	r3, [pc, #304]	@ (8000a48 <LCD_GPIO_Init+0x174>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a4b      	ldr	r2, [pc, #300]	@ (8000a48 <LCD_GPIO_Init+0x174>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b49      	ldr	r3, [pc, #292]	@ (8000a48 <LCD_GPIO_Init+0x174>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b45      	ldr	r3, [pc, #276]	@ (8000a48 <LCD_GPIO_Init+0x174>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a44      	ldr	r2, [pc, #272]	@ (8000a48 <LCD_GPIO_Init+0x174>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b42      	ldr	r3, [pc, #264]	@ (8000a48 <LCD_GPIO_Init+0x174>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a48 <LCD_GPIO_Init+0x174>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a3d      	ldr	r2, [pc, #244]	@ (8000a48 <LCD_GPIO_Init+0x174>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a48 <LCD_GPIO_Init+0x174>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b37      	ldr	r3, [pc, #220]	@ (8000a48 <LCD_GPIO_Init+0x174>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a36      	ldr	r2, [pc, #216]	@ (8000a48 <LCD_GPIO_Init+0x174>)
 8000970:	f043 0320 	orr.w	r3, r3, #32
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b34      	ldr	r3, [pc, #208]	@ (8000a48 <LCD_GPIO_Init+0x174>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0320 	and.w	r3, r3, #32
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	4b30      	ldr	r3, [pc, #192]	@ (8000a48 <LCD_GPIO_Init+0x174>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a2f      	ldr	r2, [pc, #188]	@ (8000a48 <LCD_GPIO_Init+0x174>)
 800098c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b2d      	ldr	r3, [pc, #180]	@ (8000a48 <LCD_GPIO_Init+0x174>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800099e:	f641 0358 	movw	r3, #6232	@ 0x1858
 80009a2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80009ac:	2302      	movs	r3, #2
 80009ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80009b0:	230e      	movs	r3, #14
 80009b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4824      	ldr	r0, [pc, #144]	@ (8000a4c <LCD_GPIO_Init+0x178>)
 80009bc:	f002 ff46 	bl	800384c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80009c0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80009c4:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4820      	ldr	r0, [pc, #128]	@ (8000a50 <LCD_GPIO_Init+0x17c>)
 80009ce:	f002 ff3d 	bl	800384c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80009d2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80009d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	481d      	ldr	r0, [pc, #116]	@ (8000a54 <LCD_GPIO_Init+0x180>)
 80009e0:	f002 ff34 	bl	800384c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80009e4:	2348      	movs	r3, #72	@ 0x48
 80009e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	481a      	ldr	r0, [pc, #104]	@ (8000a58 <LCD_GPIO_Init+0x184>)
 80009f0:	f002 ff2c 	bl	800384c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80009f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4816      	ldr	r0, [pc, #88]	@ (8000a5c <LCD_GPIO_Init+0x188>)
 8000a02:	f002 ff23 	bl	800384c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000a06:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000a0a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4813      	ldr	r0, [pc, #76]	@ (8000a60 <LCD_GPIO_Init+0x18c>)
 8000a14:	f002 ff1a 	bl	800384c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000a1c:	2309      	movs	r3, #9
 8000a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	480a      	ldr	r0, [pc, #40]	@ (8000a50 <LCD_GPIO_Init+0x17c>)
 8000a28:	f002 ff10 	bl	800384c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000a2c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4809      	ldr	r0, [pc, #36]	@ (8000a60 <LCD_GPIO_Init+0x18c>)
 8000a3a:	f002 ff07 	bl	800384c <HAL_GPIO_Init>
}
 8000a3e:	bf00      	nop
 8000a40:	3730      	adds	r7, #48	@ 0x30
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40020400 	.word	0x40020400
 8000a54:	40020800 	.word	0x40020800
 8000a58:	40020c00 	.word	0x40020c00
 8000a5c:	40021400 	.word	0x40021400
 8000a60:	40021800 	.word	0x40021800

08000a64 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b090      	sub	sp, #64	@ 0x40
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000a72:	23f0      	movs	r3, #240	@ 0xf0
 8000a74:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000a7a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a7e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000a80:	2302      	movs	r3, #2
 8000a82:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000a84:	23ff      	movs	r3, #255	@ 0xff
 8000a86:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a90:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a92:	2305      	movs	r3, #5
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d101      	bne.n	8000aa0 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <LTCD_Layer_Init+0x78>)
 8000a9e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000aa0:	23f0      	movs	r3, #240	@ 0xf0
 8000aa2:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000aa4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000abc:	79fa      	ldrb	r2, [r7, #7]
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4806      	ldr	r0, [pc, #24]	@ (8000ae0 <LTCD_Layer_Init+0x7c>)
 8000ac6:	f004 fb03 	bl	80050d0 <HAL_LTDC_ConfigLayer>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000ad0:	f000 ff6a 	bl	80019a8 <LCD_Error_Handler>
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	3740      	adds	r7, #64	@ 0x40
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	2000016c 	.word	0x2000016c
 8000ae0:	20000090 	.word	0x20000090

08000ae4 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b94 <LTCD__Init+0xb0>)
 8000aea:	4a2b      	ldr	r2, [pc, #172]	@ (8000b98 <LTCD__Init+0xb4>)
 8000aec:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000aee:	4b29      	ldr	r3, [pc, #164]	@ (8000b94 <LTCD__Init+0xb0>)
 8000af0:	2209      	movs	r2, #9
 8000af2:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000af4:	4b27      	ldr	r3, [pc, #156]	@ (8000b94 <LTCD__Init+0xb0>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000afa:	4b26      	ldr	r3, [pc, #152]	@ (8000b94 <LTCD__Init+0xb0>)
 8000afc:	221d      	movs	r2, #29
 8000afe:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000b00:	4b24      	ldr	r3, [pc, #144]	@ (8000b94 <LTCD__Init+0xb0>)
 8000b02:	2203      	movs	r2, #3
 8000b04:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000b06:	4b23      	ldr	r3, [pc, #140]	@ (8000b94 <LTCD__Init+0xb0>)
 8000b08:	f240 120d 	movw	r2, #269	@ 0x10d
 8000b0c:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000b0e:	4b21      	ldr	r3, [pc, #132]	@ (8000b94 <LTCD__Init+0xb0>)
 8000b10:	f240 1243 	movw	r2, #323	@ 0x143
 8000b14:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000b16:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <LTCD__Init+0xb0>)
 8000b18:	f240 1217 	movw	r2, #279	@ 0x117
 8000b1c:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b94 <LTCD__Init+0xb0>)
 8000b20:	f240 1247 	movw	r2, #327	@ 0x147
 8000b24:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000b26:	4b1b      	ldr	r3, [pc, #108]	@ (8000b94 <LTCD__Init+0xb0>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <LTCD__Init+0xb0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000b36:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <LTCD__Init+0xb0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000b3e:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <LTCD__Init+0xb8>)
 8000b40:	2208      	movs	r2, #8
 8000b42:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b44:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <LTCD__Init+0xb8>)
 8000b46:	22c0      	movs	r2, #192	@ 0xc0
 8000b48:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <LTCD__Init+0xb8>)
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <LTCD__Init+0xb8>)
 8000b52:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b56:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000b58:	4810      	ldr	r0, [pc, #64]	@ (8000b9c <LTCD__Init+0xb8>)
 8000b5a:	f005 f913 	bl	8005d84 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <LTCD__Init+0xb0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b64:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <LTCD__Init+0xb0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <LTCD__Init+0xb0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b70:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <LTCD__Init+0xb0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000b76:	f7ff fead 	bl	80008d4 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b7a:	4806      	ldr	r0, [pc, #24]	@ (8000b94 <LTCD__Init+0xb0>)
 8000b7c:	f004 f9d8 	bl	8004f30 <HAL_LTDC_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000b86:	f000 ff0f 	bl	80019a8 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000b8a:	f000 ff5d 	bl	8001a48 <ili9341_Init>
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000090 	.word	0x20000090
 8000b98:	40016800 	.word	0x40016800
 8000b9c:	20000138 	.word	0x20000138

08000ba0 <LCD_Draw_Chip_To_Drop>:
/*
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Chip_To_Drop(){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	if(playerTurn == PLAYER_RED){
 8000ba4:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <LCD_Draw_Chip_To_Drop+0x48>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d10b      	bne.n	8000bc4 <LCD_Draw_Chip_To_Drop+0x24>
		LCD_Draw_Circle_Fill(chip.xPos, chip.yPos, CIRCLE_RADIUS, LCD_COLOR_RED);
 8000bac:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <LCD_Draw_Chip_To_Drop+0x4c>)
 8000bae:	785b      	ldrb	r3, [r3, #1]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <LCD_Draw_Chip_To_Drop+0x4c>)
 8000bb4:	789b      	ldrb	r3, [r3, #2]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000bbc:	220c      	movs	r2, #12
 8000bbe:	f000 f895 	bl	8000cec <LCD_Draw_Circle_Fill>
	}
	else if(playerTurn == PLAYER_YELLOW){
		LCD_Draw_Circle_Fill(chip.xPos, chip.yPos, CIRCLE_RADIUS, LCD_COLOR_YELLOW);
	}
	//if nothing is updating then there is an error with playerTurn
}
 8000bc2:	e00e      	b.n	8000be2 <LCD_Draw_Chip_To_Drop+0x42>
	else if(playerTurn == PLAYER_YELLOW){
 8000bc4:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <LCD_Draw_Chip_To_Drop+0x48>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d10a      	bne.n	8000be2 <LCD_Draw_Chip_To_Drop+0x42>
		LCD_Draw_Circle_Fill(chip.xPos, chip.yPos, CIRCLE_RADIUS, LCD_COLOR_YELLOW);
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <LCD_Draw_Chip_To_Drop+0x4c>)
 8000bce:	785b      	ldrb	r3, [r3, #1]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <LCD_Draw_Chip_To_Drop+0x4c>)
 8000bd4:	789b      	ldrb	r3, [r3, #2]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000bdc:	220c      	movs	r2, #12
 8000bde:	f000 f885 	bl	8000cec <LCD_Draw_Circle_Fill>
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000002 	.word	0x20000002
 8000bec:	200259ec 	.word	0x200259ec

08000bf0 <LCD_Clear_Chip_To_Drop>:

void LCD_Clear_Chip_To_Drop(){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	LCD_Draw_Circle_Fill(chip.xPos, chip.yPos, CIRCLE_RADIUS, LCD_COLOR_WHITE);
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <LCD_Clear_Chip_To_Drop+0x20>)
 8000bf6:	785b      	ldrb	r3, [r3, #1]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <LCD_Clear_Chip_To_Drop+0x20>)
 8000bfc:	789b      	ldrb	r3, [r3, #2]
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c04:	220c      	movs	r2, #12
 8000c06:	f000 f871 	bl	8000cec <LCD_Draw_Circle_Fill>
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200259ec 	.word	0x200259ec

08000c14 <LCD_Update_Chip_To_Drop_Column>:

void LCD_Update_Chip_To_Drop_Column(int direction){
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	if(direction == RIGHT && chip.column != RIGHT_MOST_COLUMN){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d115      	bne.n	8000c4e <LCD_Update_Chip_To_Drop_Column+0x3a>
 8000c22:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d011      	beq.n	8000c4e <LCD_Update_Chip_To_Drop_Column+0x3a>
		//if its the 7th most do nothing
		chip.column = chip.column + 1;
 8000c2a:	4b18      	ldr	r3, [pc, #96]	@ (8000c8c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000c34:	701a      	strb	r2, [r3, #0]
		chip.xPos   = CHIP_X_POS(chip.column);
 8000c36:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	0112      	lsls	r2, r2, #4
 8000c3e:	4413      	add	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	3311      	adds	r3, #17
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000c4a:	705a      	strb	r2, [r3, #1]
	else if(direction == LEFT && chip.column != LEFT_MOST_COLUMN){
		//if its the 1st column do nothing
		chip.column = chip.column - 1;
		chip.xPos   = CHIP_X_POS(chip.column);
	}
}
 8000c4c:	e017      	b.n	8000c7e <LCD_Update_Chip_To_Drop_Column+0x6a>
	else if(direction == LEFT && chip.column != LEFT_MOST_COLUMN){
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d114      	bne.n	8000c7e <LCD_Update_Chip_To_Drop_Column+0x6a>
 8000c54:	4b0d      	ldr	r3, [pc, #52]	@ (8000c8c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d010      	beq.n	8000c7e <LCD_Update_Chip_To_Drop_Column+0x6a>
		chip.column = chip.column - 1;
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c8c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000c66:	701a      	strb	r2, [r3, #0]
		chip.xPos   = CHIP_X_POS(chip.column);
 8000c68:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	4413      	add	r3, r2
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	3311      	adds	r3, #17
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4b04      	ldr	r3, [pc, #16]	@ (8000c8c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000c7c:	705a      	strb	r2, [r3, #1]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	200259ec 	.word	0x200259ec

08000c90 <LCD_Update_Chip_To_Drop>:

void LCD_Update_Chip_To_Drop(int dir){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	LCD_Clear_Chip_To_Drop();
 8000c98:	f7ff ffaa 	bl	8000bf0 <LCD_Clear_Chip_To_Drop>
	//HAL_Delay(10);
	LCD_Update_Chip_To_Drop_Column(dir);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ffb9 	bl	8000c14 <LCD_Update_Chip_To_Drop_Column>
	LCD_Draw_Chip_To_Drop();
 8000ca2:	f7ff ff7d 	bl	8000ba0 <LCD_Draw_Chip_To_Drop>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <LCD_Draw_Pixel>:

void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	80fb      	strh	r3, [r7, #6]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	80bb      	strh	r3, [r7, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000cc2:	88ba      	ldrh	r2, [r7, #4]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	011b      	lsls	r3, r3, #4
 8000cc8:	1a9b      	subs	r3, r3, r2
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	461a      	mov	r2, r3
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4905      	ldr	r1, [pc, #20]	@ (8000ce8 <LCD_Draw_Pixel+0x38>)
 8000cd4:	887a      	ldrh	r2, [r7, #2]
 8000cd6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	2000016c 	.word	0x2000016c

08000cec <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	4608      	mov	r0, r1
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4623      	mov	r3, r4
 8000cfc:	80fb      	strh	r3, [r7, #6]
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80bb      	strh	r3, [r7, #4]
 8000d02:	460b      	mov	r3, r1
 8000d04:	807b      	strh	r3, [r7, #2]
 8000d06:	4613      	mov	r3, r2
 8000d08:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000d0a:	887b      	ldrh	r3, [r7, #2]
 8000d0c:	425b      	negs	r3, r3
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	81fb      	strh	r3, [r7, #14]
 8000d12:	e034      	b.n	8000d7e <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000d14:	887b      	ldrh	r3, [r7, #2]
 8000d16:	425b      	negs	r3, r3
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	81bb      	strh	r3, [r7, #12]
 8000d1c:	e024      	b.n	8000d68 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000d1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d22:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000d26:	fb03 f202 	mul.w	r2, r3, r2
 8000d2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d2e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000d32:	fb01 f303 	mul.w	r3, r1, r3
 8000d36:	441a      	add	r2, r3
 8000d38:	887b      	ldrh	r3, [r7, #2]
 8000d3a:	8879      	ldrh	r1, [r7, #2]
 8000d3c:	fb01 f303 	mul.w	r3, r1, r3
 8000d40:	429a      	cmp	r2, r3
 8000d42:	dc0b      	bgt.n	8000d5c <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000d44:	89ba      	ldrh	r2, [r7, #12]
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	4413      	add	r3, r2
 8000d4a:	b298      	uxth	r0, r3
 8000d4c:	89fa      	ldrh	r2, [r7, #14]
 8000d4e:	88bb      	ldrh	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	883a      	ldrh	r2, [r7, #0]
 8000d56:	4619      	mov	r1, r3
 8000d58:	f7ff ffaa 	bl	8000cb0 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000d5c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	3301      	adds	r3, #1
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	81bb      	strh	r3, [r7, #12]
 8000d68:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000d6c:	887b      	ldrh	r3, [r7, #2]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	ddd5      	ble.n	8000d1e <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000d72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	3301      	adds	r3, #1
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	81fb      	strh	r3, [r7, #14]
 8000d7e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000d82:	887b      	ldrh	r3, [r7, #2]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	ddc5      	ble.n	8000d14 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd90      	pop	{r4, r7, pc}

08000d92 <LCD_Draw_Rectangle_Fill>:

void LCD_Draw_Rectangle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint16_t Height, uint16_t color){
 8000d92:	b590      	push	{r4, r7, lr}
 8000d94:	b085      	sub	sp, #20
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4604      	mov	r4, r0
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4623      	mov	r3, r4
 8000da2:	80fb      	strh	r3, [r7, #6]
 8000da4:	4603      	mov	r3, r0
 8000da6:	80bb      	strh	r3, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	807b      	strh	r3, [r7, #2]
 8000dac:	4613      	mov	r3, r2
 8000dae:	803b      	strh	r3, [r7, #0]
	for(int16_t y=0; y<Height; y++){
 8000db0:	2300      	movs	r3, #0
 8000db2:	81fb      	strh	r3, [r7, #14]
 8000db4:	e01f      	b.n	8000df6 <LCD_Draw_Rectangle_Fill+0x64>
		for(int16_t x=0; x<Length; x++){
 8000db6:	2300      	movs	r3, #0
 8000db8:	81bb      	strh	r3, [r7, #12]
 8000dba:	e011      	b.n	8000de0 <LCD_Draw_Rectangle_Fill+0x4e>
			LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000dbc:	89ba      	ldrh	r2, [r7, #12]
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	b298      	uxth	r0, r3
 8000dc4:	89fa      	ldrh	r2, [r7, #14]
 8000dc6:	88bb      	ldrh	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	8c3a      	ldrh	r2, [r7, #32]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f7ff ff6e 	bl	8000cb0 <LCD_Draw_Pixel>
		for(int16_t x=0; x<Length; x++){
 8000dd4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	3301      	adds	r3, #1
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	81bb      	strh	r3, [r7, #12]
 8000de0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000de4:	887b      	ldrh	r3, [r7, #2]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	dbe8      	blt.n	8000dbc <LCD_Draw_Rectangle_Fill+0x2a>
	for(int16_t y=0; y<Height; y++){
 8000dea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	3301      	adds	r3, #1
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	81fb      	strh	r3, [r7, #14]
 8000df6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000dfa:	883b      	ldrh	r3, [r7, #0]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	dbda      	blt.n	8000db6 <LCD_Draw_Rectangle_Fill+0x24>
		}
	}
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd90      	pop	{r4, r7, pc}

08000e0a <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000e0a:	b590      	push	{r4, r7, lr}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4604      	mov	r4, r0
 8000e12:	4608      	mov	r0, r1
 8000e14:	4611      	mov	r1, r2
 8000e16:	461a      	mov	r2, r3
 8000e18:	4623      	mov	r3, r4
 8000e1a:	80fb      	strh	r3, [r7, #6]
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	80bb      	strh	r3, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	807b      	strh	r3, [r7, #2]
 8000e24:	4613      	mov	r3, r2
 8000e26:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000e28:	2300      	movs	r3, #0
 8000e2a:	81fb      	strh	r3, [r7, #14]
 8000e2c:	e00b      	b.n	8000e46 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000e2e:	89fa      	ldrh	r2, [r7, #14]
 8000e30:	88bb      	ldrh	r3, [r7, #4]
 8000e32:	4413      	add	r3, r2
 8000e34:	b299      	uxth	r1, r3
 8000e36:	883a      	ldrh	r2, [r7, #0]
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff38 	bl	8000cb0 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000e40:	89fb      	ldrh	r3, [r7, #14]
 8000e42:	3301      	adds	r3, #1
 8000e44:	81fb      	strh	r3, [r7, #14]
 8000e46:	89fa      	ldrh	r2, [r7, #14]
 8000e48:	887b      	ldrh	r3, [r7, #2]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d3ef      	bcc.n	8000e2e <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000e4e:	bf00      	nop
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd90      	pop	{r4, r7, pc}

08000e58 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4604      	mov	r4, r0
 8000e60:	4608      	mov	r0, r1
 8000e62:	4611      	mov	r1, r2
 8000e64:	461a      	mov	r2, r3
 8000e66:	4623      	mov	r3, r4
 8000e68:	80fb      	strh	r3, [r7, #6]
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	80bb      	strh	r3, [r7, #4]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	807b      	strh	r3, [r7, #2]
 8000e72:	4613      	mov	r3, r2
 8000e74:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	81fb      	strh	r3, [r7, #14]
 8000e7a:	e00b      	b.n	8000e94 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8000e7c:	89fa      	ldrh	r2, [r7, #14]
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	4413      	add	r3, r2
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	883a      	ldrh	r2, [r7, #0]
 8000e86:	88b9      	ldrh	r1, [r7, #4]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff11 	bl	8000cb0 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000e8e:	89fb      	ldrh	r3, [r7, #14]
 8000e90:	3301      	adds	r3, #1
 8000e92:	81fb      	strh	r3, [r7, #14]
 8000e94:	89fa      	ldrh	r2, [r7, #14]
 8000e96:	887b      	ldrh	r3, [r7, #2]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d3ef      	bcc.n	8000e7c <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd90      	pop	{r4, r7, pc}
	...

08000ea8 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10e      	bne.n	8000edc <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	e007      	b.n	8000ed4 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000ec4:	4908      	ldr	r1, [pc, #32]	@ (8000ee8 <LCD_Clear+0x40>)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	88ba      	ldrh	r2, [r7, #4]
 8000eca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000eda:	d3f3      	bcc.n	8000ec4 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	2000016c 	.word	0x2000016c

08000eec <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	@ (8000f08 <LCD_SetTextColor+0x1c>)
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	8013      	strh	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	20000000 	.word	0x20000000

08000f0c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000f14:	4a04      	ldr	r2, [pc, #16]	@ (8000f28 <LCD_SetFont+0x1c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000168 	.word	0x20000168

08000f2c <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	603a      	str	r2, [r7, #0]
 8000f36:	80fb      	strh	r3, [r7, #6]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	e04c      	b.n	8000fe4 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	e03f      	b.n	8000fd0 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4b27      	ldr	r3, [pc, #156]	@ (8000ffc <LCD_Draw_Char+0xd0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	889b      	ldrh	r3, [r3, #4]
 8000f62:	4a27      	ldr	r2, [pc, #156]	@ (8001000 <LCD_Draw_Char+0xd4>)
 8000f64:	fba2 2303 	umull	r2, r3, r2, r3
 8000f68:	08db      	lsrs	r3, r3, #3
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	2280      	movs	r2, #128	@ 0x80
 8000f70:	409a      	lsls	r2, r3
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	fa42 f303 	asr.w	r3, r2, r3
 8000f78:	400b      	ands	r3, r1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d104      	bne.n	8000f88 <LCD_Draw_Char+0x5c>
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ffc <LCD_Draw_Char+0xd0>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	889b      	ldrh	r3, [r3, #4]
 8000f84:	2b0c      	cmp	r3, #12
 8000f86:	d920      	bls.n	8000fca <LCD_Draw_Char+0x9e>
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	fa42 f303 	asr.w	r3, r2, r3
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d104      	bne.n	8000fac <LCD_Draw_Char+0x80>
 8000fa2:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <LCD_Draw_Char+0xd0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	889b      	ldrh	r3, [r3, #4]
 8000fa8:	2b0c      	cmp	r3, #12
 8000faa:	d80e      	bhi.n	8000fca <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	b298      	uxth	r0, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	88bb      	ldrh	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	4a10      	ldr	r2, [pc, #64]	@ (8001004 <LCD_Draw_Char+0xd8>)
 8000fc2:	8812      	ldrh	r2, [r2, #0]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f7ff fe73 	bl	8000cb0 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <LCD_Draw_Char+0xd0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	889b      	ldrh	r3, [r3, #4]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d3b8      	bcc.n	8000f50 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	4b05      	ldr	r3, [pc, #20]	@ (8000ffc <LCD_Draw_Char+0xd0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	88db      	ldrh	r3, [r3, #6]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d3ab      	bcc.n	8000f4a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000168 	.word	0x20000168
 8001000:	aaaaaaab 	.word	0xaaaaaaab
 8001004:	20000000 	.word	0x20000000

08001008 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
 8001012:	460b      	mov	r3, r1
 8001014:	80bb      	strh	r3, [r7, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	3b20      	subs	r3, #32
 800101e:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001020:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <LCD_DisplayChar+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	78fb      	ldrb	r3, [r7, #3]
 8001028:	4907      	ldr	r1, [pc, #28]	@ (8001048 <LCD_DisplayChar+0x40>)
 800102a:	6809      	ldr	r1, [r1, #0]
 800102c:	88c9      	ldrh	r1, [r1, #6]
 800102e:	fb01 f303 	mul.w	r3, r1, r3
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	441a      	add	r2, r3
 8001036:	88b9      	ldrh	r1, [r7, #4]
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff76 	bl	8000f2c <LCD_Draw_Char>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000168 	.word	0x20000168

0800104c <LCD_Space_Available_Game_Grid>:

bool LCD_Space_Available_Game_Grid(){
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
	if(grid[chip.column][5].playerColor != PLAYER_EMPTY){
 8001050:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <LCD_Space_Available_Game_Grid+0x30>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	4a0a      	ldr	r2, [pc, #40]	@ (8001080 <LCD_Space_Available_Game_Grid+0x34>)
 8001058:	460b      	mov	r3, r1
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	440b      	add	r3, r1
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	3311      	adds	r3, #17
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <LCD_Space_Available_Game_Grid+0x22>
	//5 is the highest row so we need to see if its occupied and if it is false
		return false;
 800106a:	2300      	movs	r3, #0
 800106c:	e000      	b.n	8001070 <LCD_Space_Available_Game_Grid+0x24>
	}
	//if there is space return true
	return true;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	200259ec 	.word	0x200259ec
 8001080:	2002596c 	.word	0x2002596c

08001084 <LCD_Get_Row_Game_Grid>:

uint8_t LCD_Get_Row_Game_Grid(){
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
	for(int j = 0; j<ROWS; j++){
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	e017      	b.n	80010c0 <LCD_Get_Row_Game_Grid+0x3c>
		if(grid[chip.column][j].playerColor == PLAYER_EMPTY){
 8001090:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <LCD_Get_Row_Game_Grid+0x50>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	4910      	ldr	r1, [pc, #64]	@ (80010d8 <LCD_Get_Row_Game_Grid+0x54>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	461a      	mov	r2, r3
 800109c:	0052      	lsls	r2, r2, #1
 800109e:	441a      	add	r2, r3
 80010a0:	4603      	mov	r3, r0
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4403      	add	r3, r0
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	3302      	adds	r3, #2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <LCD_Get_Row_Game_Grid+0x36>
			//returns the first empty square
			return j;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	e006      	b.n	80010c8 <LCD_Get_Row_Game_Grid+0x44>
	for(int j = 0; j<ROWS; j++){
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3301      	adds	r3, #1
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b05      	cmp	r3, #5
 80010c4:	dde4      	ble.n	8001090 <LCD_Get_Row_Game_Grid+0xc>
		}
	}
	return -1; //out of bounds but should not occur
 80010c6:	23ff      	movs	r3, #255	@ 0xff
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	200259ec 	.word	0x200259ec
 80010d8:	2002596c 	.word	0x2002596c

080010dc <LCD_Game_Won_Check_Row>:


bool LCD_Game_Won_Check_Row(uint8_t row, uint8_t player){
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	460a      	mov	r2, r1
 80010e6:	71fb      	strb	r3, [r7, #7]
 80010e8:	4613      	mov	r3, r2
 80010ea:	71bb      	strb	r3, [r7, #6]
	uint8_t Consecutive = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
	//Resets consecutive
	for(int i=0; i<COLUMNS; i++){
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	e01e      	b.n	8001134 <LCD_Game_Won_Check_Row+0x58>
		if(grid[i][row].playerColor == player){
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	4813      	ldr	r0, [pc, #76]	@ (8001148 <LCD_Game_Won_Check_Row+0x6c>)
 80010fa:	68b9      	ldr	r1, [r7, #8]
 80010fc:	461a      	mov	r2, r3
 80010fe:	0052      	lsls	r2, r2, #1
 8001100:	441a      	add	r2, r3
 8001102:	460b      	mov	r3, r1
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	440b      	add	r3, r1
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4413      	add	r3, r2
 800110c:	4403      	add	r3, r0
 800110e:	3302      	adds	r3, #2
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	79ba      	ldrb	r2, [r7, #6]
 8001114:	429a      	cmp	r2, r3
 8001116:	d103      	bne.n	8001120 <LCD_Game_Won_Check_Row+0x44>
			Consecutive++;
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	3301      	adds	r3, #1
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	e001      	b.n	8001124 <LCD_Game_Won_Check_Row+0x48>
		}
		else{
			Consecutive = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]
		}

		if(Consecutive == 4){
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	2b04      	cmp	r3, #4
 8001128:	d101      	bne.n	800112e <LCD_Game_Won_Check_Row+0x52>
			return true;
 800112a:	2301      	movs	r3, #1
 800112c:	e006      	b.n	800113c <LCD_Game_Won_Check_Row+0x60>
	for(int i=0; i<COLUMNS; i++){
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	3301      	adds	r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b06      	cmp	r3, #6
 8001138:	dddd      	ble.n	80010f6 <LCD_Game_Won_Check_Row+0x1a>
		}
	}

	return false;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	2002596c 	.word	0x2002596c

0800114c <LCD_Game_Won_Check_Column>:

bool LCD_Game_Won_Check_Column(uint8_t column, uint8_t player){
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	460a      	mov	r2, r1
 8001156:	71fb      	strb	r3, [r7, #7]
 8001158:	4613      	mov	r3, r2
 800115a:	71bb      	strb	r3, [r7, #6]
	uint8_t Consecutive = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]
	for(int j=0; j<ROWS; j++){
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	e01e      	b.n	80011a4 <LCD_Game_Won_Check_Column+0x58>
		if(grid[column][j].playerColor == player){
 8001166:	79f9      	ldrb	r1, [r7, #7]
 8001168:	4813      	ldr	r0, [pc, #76]	@ (80011b8 <LCD_Game_Won_Check_Column+0x6c>)
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	461a      	mov	r2, r3
 800116e:	0052      	lsls	r2, r2, #1
 8001170:	441a      	add	r2, r3
 8001172:	460b      	mov	r3, r1
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	440b      	add	r3, r1
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	4403      	add	r3, r0
 800117e:	3302      	adds	r3, #2
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	79ba      	ldrb	r2, [r7, #6]
 8001184:	429a      	cmp	r2, r3
 8001186:	d103      	bne.n	8001190 <LCD_Game_Won_Check_Column+0x44>
			Consecutive++;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	3301      	adds	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	e001      	b.n	8001194 <LCD_Game_Won_Check_Column+0x48>
		}
		else{
			Consecutive = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]
		}

		if(Consecutive == 4){
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	2b04      	cmp	r3, #4
 8001198:	d101      	bne.n	800119e <LCD_Game_Won_Check_Column+0x52>
			return true;
 800119a:	2301      	movs	r3, #1
 800119c:	e006      	b.n	80011ac <LCD_Game_Won_Check_Column+0x60>
	for(int j=0; j<ROWS; j++){
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	3301      	adds	r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	2b05      	cmp	r3, #5
 80011a8:	dddd      	ble.n	8001166 <LCD_Game_Won_Check_Column+0x1a>
		}
	}

	return false;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	2002596c 	.word	0x2002596c

080011bc <LCD_Game_Won_Check_Up_Right_Diagonal>:


bool LCD_Game_Won_Check_Up_Right_Diagonal(uint8_t column, uint8_t row, uint8_t player){
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
 80011c6:	460b      	mov	r3, r1
 80011c8:	71bb      	strb	r3, [r7, #6]
 80011ca:	4613      	mov	r3, r2
 80011cc:	717b      	strb	r3, [r7, #5]
	uint8_t Consecutive = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	73fb      	strb	r3, [r7, #15]
	//need to find the bottom left spot and will go up right from there
	while( (row  > 0) && (column > 0) ){
 80011d2:	e005      	b.n	80011e0 <LCD_Game_Won_Check_Up_Right_Diagonal+0x24>
		//look until we get to the bottom left
		row--;
 80011d4:	79bb      	ldrb	r3, [r7, #6]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	71bb      	strb	r3, [r7, #6]
		column--;
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	3b01      	subs	r3, #1
 80011de:	71fb      	strb	r3, [r7, #7]
	while( (row  > 0) && (column > 0) ){
 80011e0:	79bb      	ldrb	r3, [r7, #6]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d025      	beq.n	8001232 <LCD_Game_Won_Check_Up_Right_Diagonal+0x76>
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1f3      	bne.n	80011d4 <LCD_Game_Won_Check_Up_Right_Diagonal+0x18>
	}

	while(row < ROWS && column < COLUMNS){
 80011ec:	e021      	b.n	8001232 <LCD_Game_Won_Check_Up_Right_Diagonal+0x76>
		//keep going until we encounter top right edge
		if(grid[column][row].playerColor == player){
 80011ee:	79f9      	ldrb	r1, [r7, #7]
 80011f0:	79bb      	ldrb	r3, [r7, #6]
 80011f2:	4816      	ldr	r0, [pc, #88]	@ (800124c <LCD_Game_Won_Check_Up_Right_Diagonal+0x90>)
 80011f4:	461a      	mov	r2, r3
 80011f6:	0052      	lsls	r2, r2, #1
 80011f8:	441a      	add	r2, r3
 80011fa:	460b      	mov	r3, r1
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	440b      	add	r3, r1
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	4403      	add	r3, r0
 8001206:	3302      	adds	r3, #2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	797a      	ldrb	r2, [r7, #5]
 800120c:	429a      	cmp	r2, r3
 800120e:	d103      	bne.n	8001218 <LCD_Game_Won_Check_Up_Right_Diagonal+0x5c>
			Consecutive++;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	3301      	adds	r3, #1
 8001214:	73fb      	strb	r3, [r7, #15]
 8001216:	e001      	b.n	800121c <LCD_Game_Won_Check_Up_Right_Diagonal+0x60>
		}
		else{
			Consecutive = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	73fb      	strb	r3, [r7, #15]
		}

		if(Consecutive == 4){
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	2b04      	cmp	r3, #4
 8001220:	d101      	bne.n	8001226 <LCD_Game_Won_Check_Up_Right_Diagonal+0x6a>
			return true;
 8001222:	2301      	movs	r3, #1
 8001224:	e00c      	b.n	8001240 <LCD_Game_Won_Check_Up_Right_Diagonal+0x84>
		}
		row++;
 8001226:	79bb      	ldrb	r3, [r7, #6]
 8001228:	3301      	adds	r3, #1
 800122a:	71bb      	strb	r3, [r7, #6]
		column++;
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	3301      	adds	r3, #1
 8001230:	71fb      	strb	r3, [r7, #7]
	while(row < ROWS && column < COLUMNS){
 8001232:	79bb      	ldrb	r3, [r7, #6]
 8001234:	2b05      	cmp	r3, #5
 8001236:	d802      	bhi.n	800123e <LCD_Game_Won_Check_Up_Right_Diagonal+0x82>
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	2b06      	cmp	r3, #6
 800123c:	d9d7      	bls.n	80011ee <LCD_Game_Won_Check_Up_Right_Diagonal+0x32>
	}
	return false;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	2002596c 	.word	0x2002596c

08001250 <LCD_Game_Won_Check_Up_Left_Diagonal>:

bool LCD_Game_Won_Check_Up_Left_Diagonal(uint8_t column, uint8_t row, uint8_t player){
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
 800125a:	460b      	mov	r3, r1
 800125c:	71bb      	strb	r3, [r7, #6]
 800125e:	4613      	mov	r3, r2
 8001260:	717b      	strb	r3, [r7, #5]
	uint8_t Consecutive = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	73fb      	strb	r3, [r7, #15]
	//need to find the bottom left spot and will go up right from there
	while( (row > 0) && (column + 1 < COLUMNS) ){
 8001266:	e005      	b.n	8001274 <LCD_Game_Won_Check_Up_Left_Diagonal+0x24>
		//loop until bottom right, stop once we might go out of bounds (-1 or COLUMNS)
		row--;
 8001268:	79bb      	ldrb	r3, [r7, #6]
 800126a:	3b01      	subs	r3, #1
 800126c:	71bb      	strb	r3, [r7, #6]
		column++;
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	3301      	adds	r3, #1
 8001272:	71fb      	strb	r3, [r7, #7]
	while( (row > 0) && (column + 1 < COLUMNS) ){
 8001274:	79bb      	ldrb	r3, [r7, #6]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d025      	beq.n	80012c6 <LCD_Game_Won_Check_Up_Left_Diagonal+0x76>
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b05      	cmp	r3, #5
 800127e:	d9f3      	bls.n	8001268 <LCD_Game_Won_Check_Up_Left_Diagonal+0x18>
	}

	while(row < ROWS && column >= 0){
 8001280:	e021      	b.n	80012c6 <LCD_Game_Won_Check_Up_Left_Diagonal+0x76>
		//keep going until we encounter top right edge
		if(grid[column][row].playerColor == player){
 8001282:	79f9      	ldrb	r1, [r7, #7]
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	4815      	ldr	r0, [pc, #84]	@ (80012dc <LCD_Game_Won_Check_Up_Left_Diagonal+0x8c>)
 8001288:	461a      	mov	r2, r3
 800128a:	0052      	lsls	r2, r2, #1
 800128c:	441a      	add	r2, r3
 800128e:	460b      	mov	r3, r1
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	440b      	add	r3, r1
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4413      	add	r3, r2
 8001298:	4403      	add	r3, r0
 800129a:	3302      	adds	r3, #2
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	797a      	ldrb	r2, [r7, #5]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d103      	bne.n	80012ac <LCD_Game_Won_Check_Up_Left_Diagonal+0x5c>
			Consecutive++;
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	3301      	adds	r3, #1
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	e001      	b.n	80012b0 <LCD_Game_Won_Check_Up_Left_Diagonal+0x60>
		}
		else{
			Consecutive = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
		}

		if(Consecutive == 4){
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d101      	bne.n	80012ba <LCD_Game_Won_Check_Up_Left_Diagonal+0x6a>
			return true;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e009      	b.n	80012ce <LCD_Game_Won_Check_Up_Left_Diagonal+0x7e>
		}
		row++;
 80012ba:	79bb      	ldrb	r3, [r7, #6]
 80012bc:	3301      	adds	r3, #1
 80012be:	71bb      	strb	r3, [r7, #6]
		column--;
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	71fb      	strb	r3, [r7, #7]
	while(row < ROWS && column >= 0){
 80012c6:	79bb      	ldrb	r3, [r7, #6]
 80012c8:	2b05      	cmp	r3, #5
 80012ca:	d9da      	bls.n	8001282 <LCD_Game_Won_Check_Up_Left_Diagonal+0x32>
	}
	return false;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	2002596c 	.word	0x2002596c

080012e0 <LCD_Game_Won>:

bool LCD_Game_Won(uint8_t column, uint8_t row, uint8_t player){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
 80012ea:	460b      	mov	r3, r1
 80012ec:	71bb      	strb	r3, [r7, #6]
 80012ee:	4613      	mov	r3, r2
 80012f0:	717b      	strb	r3, [r7, #5]
	//check all adjacent pieces colors
	if(LCD_Game_Won_Check_Row(row, player)){
 80012f2:	797a      	ldrb	r2, [r7, #5]
 80012f4:	79bb      	ldrb	r3, [r7, #6]
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff feef 	bl	80010dc <LCD_Game_Won_Check_Row>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <LCD_Game_Won+0x2c>
		LCD_Update_Game_End_Time();
 8001304:	f7ff fa4a 	bl	800079c <LCD_Update_Game_End_Time>
		//Get the game length as soon as a win is detected
		return true;
 8001308:	2301      	movs	r3, #1
 800130a:	e027      	b.n	800135c <LCD_Game_Won+0x7c>
	}
	else if(LCD_Game_Won_Check_Column(column, player)){
 800130c:	797a      	ldrb	r2, [r7, #5]
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff1a 	bl	800114c <LCD_Game_Won_Check_Column>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <LCD_Game_Won+0x46>
		LCD_Update_Game_End_Time();
 800131e:	f7ff fa3d 	bl	800079c <LCD_Update_Game_End_Time>
		//Get the game length as soon as a win is detected
		return true;
 8001322:	2301      	movs	r3, #1
 8001324:	e01a      	b.n	800135c <LCD_Game_Won+0x7c>
	}
	else if(LCD_Game_Won_Check_Up_Right_Diagonal(column, row, player)){
 8001326:	797a      	ldrb	r2, [r7, #5]
 8001328:	79b9      	ldrb	r1, [r7, #6]
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff45 	bl	80011bc <LCD_Game_Won_Check_Up_Right_Diagonal>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <LCD_Game_Won+0x60>
		LCD_Update_Game_End_Time();
 8001338:	f7ff fa30 	bl	800079c <LCD_Update_Game_End_Time>
		//Get the game length as soon as a win is detected
		return true;
 800133c:	2301      	movs	r3, #1
 800133e:	e00d      	b.n	800135c <LCD_Game_Won+0x7c>
	}
	else if(LCD_Game_Won_Check_Up_Left_Diagonal(column, row, player)){
 8001340:	797a      	ldrb	r2, [r7, #5]
 8001342:	79b9      	ldrb	r1, [r7, #6]
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff82 	bl	8001250 <LCD_Game_Won_Check_Up_Left_Diagonal>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <LCD_Game_Won+0x7a>
		LCD_Update_Game_End_Time();
 8001352:	f7ff fa23 	bl	800079c <LCD_Update_Game_End_Time>
		//Get the game length as soon as a win is detected
		return true;
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <LCD_Game_Won+0x7c>
	}
return false;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <LCD_Insert_Chip_Game_Grid>:

void LCD_Insert_Chip_Game_Grid(){
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
	if((LCD_Space_Available_Game_Grid())){
 800136a:	f7ff fe6f 	bl	800104c <LCD_Space_Available_Game_Grid>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 80b3 	beq.w	80014dc <LCD_Insert_Chip_Game_Grid+0x178>
		//check for space
		uint8_t row = LCD_Get_Row_Game_Grid();
 8001376:	f7ff fe85 	bl	8001084 <LCD_Get_Row_Game_Grid>
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
		//returns the highest row for a column
		if(playerTurn == PLAYER_RED){
 800137e:	4b59      	ldr	r3, [pc, #356]	@ (80014e4 <LCD_Insert_Chip_Game_Grid+0x180>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b02      	cmp	r3, #2
 8001384:	d155      	bne.n	8001432 <LCD_Insert_Chip_Game_Grid+0xce>
			//if its Reds turn it will draw red
			LCD_Draw_Circle_Fill(grid[chip.column][row].xPos, LCD_PIXEL_HEIGHT-grid[chip.column][row].yPos, CIRCLE_RADIUS, LCD_COLOR_RED);
 8001386:	4b58      	ldr	r3, [pc, #352]	@ (80014e8 <LCD_Insert_Chip_Game_Grid+0x184>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	4957      	ldr	r1, [pc, #348]	@ (80014ec <LCD_Insert_Chip_Game_Grid+0x188>)
 8001390:	461a      	mov	r2, r3
 8001392:	0052      	lsls	r2, r2, #1
 8001394:	441a      	add	r2, r3
 8001396:	4603      	mov	r3, r0
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4403      	add	r3, r0
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461c      	mov	r4, r3
 80013a6:	4b50      	ldr	r3, [pc, #320]	@ (80014e8 <LCD_Insert_Chip_Game_Grid+0x184>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	494f      	ldr	r1, [pc, #316]	@ (80014ec <LCD_Insert_Chip_Game_Grid+0x188>)
 80013b0:	461a      	mov	r2, r3
 80013b2:	0052      	lsls	r2, r2, #1
 80013b4:	441a      	add	r2, r3
 80013b6:	4603      	mov	r3, r0
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4403      	add	r3, r0
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	4413      	add	r3, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	3301      	adds	r3, #1
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80013ca:	b299      	uxth	r1, r3
 80013cc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80013d0:	220c      	movs	r2, #12
 80013d2:	4620      	mov	r0, r4
 80013d4:	f7ff fc8a 	bl	8000cec <LCD_Draw_Circle_Fill>
			grid[chip.column][row].playerColor = PLAYER_RED;
 80013d8:	4b43      	ldr	r3, [pc, #268]	@ (80014e8 <LCD_Insert_Chip_Game_Grid+0x184>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	4942      	ldr	r1, [pc, #264]	@ (80014ec <LCD_Insert_Chip_Game_Grid+0x188>)
 80013e2:	461a      	mov	r2, r3
 80013e4:	0052      	lsls	r2, r2, #1
 80013e6:	441a      	add	r2, r3
 80013e8:	4603      	mov	r3, r0
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4403      	add	r3, r0
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	440b      	add	r3, r1
 80013f4:	3302      	adds	r3, #2
 80013f6:	2202      	movs	r2, #2
 80013f8:	701a      	strb	r2, [r3, #0]
			playerTurn = PLAYER_YELLOW;
 80013fa:	4b3a      	ldr	r3, [pc, #232]	@ (80014e4 <LCD_Insert_Chip_Game_Grid+0x180>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
			//update playerTurn to be other player
			LCD_Draw_Chip_To_Drop();
 8001400:	f7ff fbce 	bl	8000ba0 <LCD_Draw_Chip_To_Drop>
			//Update the display for the chip to drop
			if(LCD_Game_Won(chip.column, row, PLAYER_RED)){
 8001404:	4b38      	ldr	r3, [pc, #224]	@ (80014e8 <LCD_Insert_Chip_Game_Grid+0x184>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	79f9      	ldrb	r1, [r7, #7]
 800140a:	2202      	movs	r2, #2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff67 	bl	80012e0 <LCD_Game_Won>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d061      	beq.n	80014dc <LCD_Insert_Chip_Game_Grid+0x178>
				redScore++;
 8001418:	4b35      	ldr	r3, [pc, #212]	@ (80014f0 <LCD_Insert_Chip_Game_Grid+0x18c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b33      	ldr	r3, [pc, #204]	@ (80014f0 <LCD_Insert_Chip_Game_Grid+0x18c>)
 8001422:	701a      	strb	r2, [r3, #0]
				removeSchedulerEvent(POLLING_GAME_EVENT);
 8001424:	2020      	movs	r0, #32
 8001426:	f000 fafb 	bl	8001a20 <removeSchedulerEvent>
				addSchedulerEvent(SCORE_SCREEN_EVENT);
 800142a:	2040      	movs	r0, #64	@ 0x40
 800142c:	f000 fae6 	bl	80019fc <addSchedulerEvent>
				addSchedulerEvent(SCORE_SCREEN_EVENT);
			}			//Check if game is over
		}
	}

}
 8001430:	e054      	b.n	80014dc <LCD_Insert_Chip_Game_Grid+0x178>
			LCD_Draw_Circle_Fill(grid[chip.column][row].xPos, LCD_PIXEL_HEIGHT-grid[chip.column][row].yPos, CIRCLE_RADIUS, LCD_COLOR_YELLOW);
 8001432:	4b2d      	ldr	r3, [pc, #180]	@ (80014e8 <LCD_Insert_Chip_Game_Grid+0x184>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	492c      	ldr	r1, [pc, #176]	@ (80014ec <LCD_Insert_Chip_Game_Grid+0x188>)
 800143c:	461a      	mov	r2, r3
 800143e:	0052      	lsls	r2, r2, #1
 8001440:	441a      	add	r2, r3
 8001442:	4603      	mov	r3, r0
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4403      	add	r3, r0
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	440b      	add	r3, r1
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461c      	mov	r4, r3
 8001452:	4b25      	ldr	r3, [pc, #148]	@ (80014e8 <LCD_Insert_Chip_Game_Grid+0x184>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	4924      	ldr	r1, [pc, #144]	@ (80014ec <LCD_Insert_Chip_Game_Grid+0x188>)
 800145c:	461a      	mov	r2, r3
 800145e:	0052      	lsls	r2, r2, #1
 8001460:	441a      	add	r2, r3
 8001462:	4603      	mov	r3, r0
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4403      	add	r3, r0
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	440b      	add	r3, r1
 800146e:	3301      	adds	r3, #1
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001476:	b299      	uxth	r1, r3
 8001478:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800147c:	220c      	movs	r2, #12
 800147e:	4620      	mov	r0, r4
 8001480:	f7ff fc34 	bl	8000cec <LCD_Draw_Circle_Fill>
			grid[chip.column][row].playerColor = PLAYER_YELLOW;
 8001484:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <LCD_Insert_Chip_Game_Grid+0x184>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	4917      	ldr	r1, [pc, #92]	@ (80014ec <LCD_Insert_Chip_Game_Grid+0x188>)
 800148e:	461a      	mov	r2, r3
 8001490:	0052      	lsls	r2, r2, #1
 8001492:	441a      	add	r2, r3
 8001494:	4603      	mov	r3, r0
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	4403      	add	r3, r0
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4413      	add	r3, r2
 800149e:	440b      	add	r3, r1
 80014a0:	3302      	adds	r3, #2
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]
			playerTurn = PLAYER_RED;
 80014a6:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <LCD_Insert_Chip_Game_Grid+0x180>)
 80014a8:	2202      	movs	r2, #2
 80014aa:	701a      	strb	r2, [r3, #0]
			LCD_Draw_Chip_To_Drop();
 80014ac:	f7ff fb78 	bl	8000ba0 <LCD_Draw_Chip_To_Drop>
			if(LCD_Game_Won(chip.column, row, PLAYER_YELLOW)){
 80014b0:	4b0d      	ldr	r3, [pc, #52]	@ (80014e8 <LCD_Insert_Chip_Game_Grid+0x184>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	79f9      	ldrb	r1, [r7, #7]
 80014b6:	2201      	movs	r2, #1
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff11 	bl	80012e0 <LCD_Game_Won>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00b      	beq.n	80014dc <LCD_Insert_Chip_Game_Grid+0x178>
				yellowScore++;
 80014c4:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <LCD_Insert_Chip_Game_Grid+0x190>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <LCD_Insert_Chip_Game_Grid+0x190>)
 80014ce:	701a      	strb	r2, [r3, #0]
				removeSchedulerEvent(POLLING_GAME_EVENT);
 80014d0:	2020      	movs	r0, #32
 80014d2:	f000 faa5 	bl	8001a20 <removeSchedulerEvent>
				addSchedulerEvent(SCORE_SCREEN_EVENT);
 80014d6:	2040      	movs	r0, #64	@ 0x40
 80014d8:	f000 fa90 	bl	80019fc <addSchedulerEvent>
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd90      	pop	{r4, r7, pc}
 80014e4:	20000002 	.word	0x20000002
 80014e8:	200259ec 	.word	0x200259ec
 80014ec:	2002596c 	.word	0x2002596c
 80014f0:	200259ef 	.word	0x200259ef
 80014f4:	200259f0 	.word	0x200259f0

080014f8 <LCD_Draw_Start_Screen>:
void LCD_Draw_Start_Screen(){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_WHITE);
 80014fc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001500:	2000      	movs	r0, #0
 8001502:	f7ff fcd1 	bl	8000ea8 <LCD_Clear>

	LCD_Draw_Vertical_Line(LCD_PIXEL_WIDTH/2,40,LCD_PIXEL_HEIGHT-40,LCD_COLOR_BLACK);
 8001506:	2300      	movs	r3, #0
 8001508:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800150c:	2128      	movs	r1, #40	@ 0x28
 800150e:	2078      	movs	r0, #120	@ 0x78
 8001510:	f7ff fc7b 	bl	8000e0a <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(0,40,LCD_PIXEL_WIDTH,LCD_COLOR_BLACK);
 8001514:	2300      	movs	r3, #0
 8001516:	22f0      	movs	r2, #240	@ 0xf0
 8001518:	2128      	movs	r1, #40	@ 0x28
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff fc9c 	bl	8000e58 <LCD_Draw_Horizontal_Line>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff fce3 	bl	8000eec <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001526:	4811      	ldr	r0, [pc, #68]	@ (800156c <LCD_Draw_Start_Screen+0x74>)
 8001528:	f7ff fcf0 	bl	8000f0c <LCD_SetFont>

	LCD_DisplayChar(80+2,  MODE_YPOS,'M');
 800152c:	224d      	movs	r2, #77	@ 0x4d
 800152e:	2114      	movs	r1, #20
 8001530:	2052      	movs	r0, #82	@ 0x52
 8001532:	f7ff fd69 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(100,   MODE_YPOS,'O');
 8001536:	224f      	movs	r2, #79	@ 0x4f
 8001538:	2114      	movs	r1, #20
 800153a:	2064      	movs	r0, #100	@ 0x64
 800153c:	f7ff fd64 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(120-2, MODE_YPOS,'D');
 8001540:	2244      	movs	r2, #68	@ 0x44
 8001542:	2114      	movs	r1, #20
 8001544:	2076      	movs	r0, #118	@ 0x76
 8001546:	f7ff fd5f 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(135-2, MODE_YPOS,'E');
 800154a:	2245      	movs	r2, #69	@ 0x45
 800154c:	2114      	movs	r1, #20
 800154e:	2085      	movs	r0, #133	@ 0x85
 8001550:	f7ff fd5a 	bl	8001008 <LCD_DisplayChar>

	LCD_DisplayChar(50, 160,'1');
 8001554:	2231      	movs	r2, #49	@ 0x31
 8001556:	21a0      	movs	r1, #160	@ 0xa0
 8001558:	2032      	movs	r0, #50	@ 0x32
 800155a:	f7ff fd55 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(180, 160,'2');
 800155e:	2232      	movs	r2, #50	@ 0x32
 8001560:	21a0      	movs	r1, #160	@ 0xa0
 8001562:	20b4      	movs	r0, #180	@ 0xb4
 8001564:	f7ff fd50 	bl	8001008 <LCD_DisplayChar>
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000004 	.word	0x20000004

08001570 <LCD_Draw_Select_Color_Screen>:

void LCD_Draw_Select_Color_Screen(){
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af02      	add	r7, sp, #8
	LCD_Clear(0, LCD_COLOR_RED);
 8001576:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800157a:	2000      	movs	r0, #0
 800157c:	f7ff fc94 	bl	8000ea8 <LCD_Clear>

	LCD_Draw_Vertical_Line(LCD_PIXEL_WIDTH/2,0,LCD_PIXEL_HEIGHT,LCD_COLOR_BLACK);
 8001580:	2300      	movs	r3, #0
 8001582:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001586:	2100      	movs	r1, #0
 8001588:	2078      	movs	r0, #120	@ 0x78
 800158a:	f7ff fc3e 	bl	8000e0a <LCD_Draw_Vertical_Line>

	LCD_Draw_Rectangle_Fill(LCD_PIXEL_WIDTH/2, 0, LCD_PIXEL_WIDTH/2, LCD_PIXEL_HEIGHT, LCD_COLOR_YELLOW);
 800158e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001598:	2278      	movs	r2, #120	@ 0x78
 800159a:	2100      	movs	r1, #0
 800159c:	2078      	movs	r0, #120	@ 0x78
 800159e:	f7ff fbf8 	bl	8000d92 <LCD_Draw_Rectangle_Fill>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 80015a2:	2000      	movs	r0, #0
 80015a4:	f7ff fca2 	bl	8000eec <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80015a8:	4819      	ldr	r0, [pc, #100]	@ (8001610 <LCD_Draw_Select_Color_Screen+0xa0>)
 80015aa:	f7ff fcaf 	bl	8000f0c <LCD_SetFont>

	LCD_DisplayChar(95,  PICK_YPOS,'P');
 80015ae:	2250      	movs	r2, #80	@ 0x50
 80015b0:	2114      	movs	r1, #20
 80015b2:	205f      	movs	r0, #95	@ 0x5f
 80015b4:	f7ff fd28 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(110, PICK_YPOS,'I');
 80015b8:	2249      	movs	r2, #73	@ 0x49
 80015ba:	2114      	movs	r1, #20
 80015bc:	206e      	movs	r0, #110	@ 0x6e
 80015be:	f7ff fd23 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(125, PICK_YPOS,'C');
 80015c2:	2243      	movs	r2, #67	@ 0x43
 80015c4:	2114      	movs	r1, #20
 80015c6:	207d      	movs	r0, #125	@ 0x7d
 80015c8:	f7ff fd1e 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(140, PICK_YPOS,'K');
 80015cc:	224b      	movs	r2, #75	@ 0x4b
 80015ce:	2114      	movs	r1, #20
 80015d0:	208c      	movs	r0, #140	@ 0x8c
 80015d2:	f7ff fd19 	bl	8001008 <LCD_DisplayChar>

	LCD_DisplayChar(90,  COLOR_YPOS,'C');
 80015d6:	2243      	movs	r2, #67	@ 0x43
 80015d8:	2128      	movs	r1, #40	@ 0x28
 80015da:	205a      	movs	r0, #90	@ 0x5a
 80015dc:	f7ff fd14 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(105, COLOR_YPOS,'O');
 80015e0:	224f      	movs	r2, #79	@ 0x4f
 80015e2:	2128      	movs	r1, #40	@ 0x28
 80015e4:	2069      	movs	r0, #105	@ 0x69
 80015e6:	f7ff fd0f 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(120, COLOR_YPOS,'L');
 80015ea:	224c      	movs	r2, #76	@ 0x4c
 80015ec:	2128      	movs	r1, #40	@ 0x28
 80015ee:	2078      	movs	r0, #120	@ 0x78
 80015f0:	f7ff fd0a 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(135, COLOR_YPOS,'O');
 80015f4:	224f      	movs	r2, #79	@ 0x4f
 80015f6:	2128      	movs	r1, #40	@ 0x28
 80015f8:	2087      	movs	r0, #135	@ 0x87
 80015fa:	f7ff fd05 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(150, COLOR_YPOS,'R');
 80015fe:	2252      	movs	r2, #82	@ 0x52
 8001600:	2128      	movs	r1, #40	@ 0x28
 8001602:	2096      	movs	r0, #150	@ 0x96
 8001604:	f7ff fd00 	bl	8001008 <LCD_DisplayChar>

}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000004 	.word	0x20000004

08001614 <LCD_Draw_Game_Grid>:

void LCD_Draw_Game_Grid(){
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b085      	sub	sp, #20
 8001618:	af02      	add	r7, sp, #8
	LCD_Clear(0, LCD_COLOR_WHITE);
 800161a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff fc42 	bl	8000ea8 <LCD_Clear>
	//Clears screen

	Init_Grid();
 8001624:	f7ff f8fc 	bl	8000820 <Init_Grid>
	Init_Chip_To_Drop();
 8001628:	f7ff f8e8 	bl	80007fc <Init_Chip_To_Drop>

	LCD_Draw_Rectangle_Fill(0, GRID_BACKGROUND_YPOS, LCD_PIXEL_WIDTH, SQUARE_SIZE*ROWS, LCD_COLOR_BLUE);
 800162c:	231f      	movs	r3, #31
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	23cc      	movs	r3, #204	@ 0xcc
 8001632:	22f0      	movs	r2, #240	@ 0xf0
 8001634:	2174      	movs	r1, #116	@ 0x74
 8001636:	2000      	movs	r0, #0
 8001638:	f7ff fbab 	bl	8000d92 <LCD_Draw_Rectangle_Fill>

	for(uint8_t i=1; i<7; i++){
 800163c:	2301      	movs	r3, #1
 800163e:	71fb      	strb	r3, [r7, #7]
 8001640:	e00e      	b.n	8001660 <LCD_Draw_Game_Grid+0x4c>
		LCD_Draw_Vertical_Line(SQUARE_SIZE*i,GRID_OFFSET_HORIZONTAL,SQUARE_SIZE*ROWS,LCD_COLOR_BLACK);
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	b29b      	uxth	r3, r3
 8001646:	461a      	mov	r2, r3
 8001648:	0112      	lsls	r2, r2, #4
 800164a:	4413      	add	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	b298      	uxth	r0, r3
 8001650:	2300      	movs	r3, #0
 8001652:	22cc      	movs	r2, #204	@ 0xcc
 8001654:	2174      	movs	r1, #116	@ 0x74
 8001656:	f7ff fbd8 	bl	8000e0a <LCD_Draw_Vertical_Line>
	for(uint8_t i=1; i<7; i++){
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	3301      	adds	r3, #1
 800165e:	71fb      	strb	r3, [r7, #7]
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b06      	cmp	r3, #6
 8001664:	d9ed      	bls.n	8001642 <LCD_Draw_Game_Grid+0x2e>
		//each tile is 34x34 so 180 is 6 height
		//15 is the offset from the edge, 34 is the size
	}
	for(uint8_t i =1; i<7; i++){
 8001666:	2301      	movs	r3, #1
 8001668:	71bb      	strb	r3, [r7, #6]
 800166a:	e013      	b.n	8001694 <LCD_Draw_Game_Grid+0x80>
		LCD_Draw_Horizontal_Line(0,LCD_PIXEL_HEIGHT-(SQUARE_SIZE*i),LCD_PIXEL_WIDTH,LCD_COLOR_BLACK);
 800166c:	79bb      	ldrb	r3, [r7, #6]
 800166e:	b29b      	uxth	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	02d2      	lsls	r2, r2, #11
 8001674:	1ad2      	subs	r2, r2, r3
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	b29b      	uxth	r3, r3
 800167e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8001682:	b299      	uxth	r1, r3
 8001684:	2300      	movs	r3, #0
 8001686:	22f0      	movs	r2, #240	@ 0xf0
 8001688:	2000      	movs	r0, #0
 800168a:	f7ff fbe5 	bl	8000e58 <LCD_Draw_Horizontal_Line>
	for(uint8_t i =1; i<7; i++){
 800168e:	79bb      	ldrb	r3, [r7, #6]
 8001690:	3301      	adds	r3, #1
 8001692:	71bb      	strb	r3, [r7, #6]
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	2b06      	cmp	r3, #6
 8001698:	d9e8      	bls.n	800166c <LCD_Draw_Game_Grid+0x58>
		//want each horizontal line to go across the screen
	}
	for(uint8_t i = 0; i<COLUMNS; i++){
 800169a:	2300      	movs	r3, #0
 800169c:	717b      	strb	r3, [r7, #5]
 800169e:	e030      	b.n	8001702 <LCD_Draw_Game_Grid+0xee>
		for(uint8_t j =0; j<ROWS; j++){
 80016a0:	2300      	movs	r3, #0
 80016a2:	713b      	strb	r3, [r7, #4]
 80016a4:	e027      	b.n	80016f6 <LCD_Draw_Game_Grid+0xe2>
			LCD_Draw_Circle_Fill(grid[i][j].xPos, LCD_PIXEL_HEIGHT-grid[i][j].yPos, CIRCLE_RADIUS, LCD_COLOR_WHITE);
 80016a6:	7979      	ldrb	r1, [r7, #5]
 80016a8:	793b      	ldrb	r3, [r7, #4]
 80016aa:	481a      	ldr	r0, [pc, #104]	@ (8001714 <LCD_Draw_Game_Grid+0x100>)
 80016ac:	461a      	mov	r2, r3
 80016ae:	0052      	lsls	r2, r2, #1
 80016b0:	441a      	add	r2, r3
 80016b2:	460b      	mov	r3, r1
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	440b      	add	r3, r1
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	4403      	add	r3, r0
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461c      	mov	r4, r3
 80016c2:	7979      	ldrb	r1, [r7, #5]
 80016c4:	793b      	ldrb	r3, [r7, #4]
 80016c6:	4813      	ldr	r0, [pc, #76]	@ (8001714 <LCD_Draw_Game_Grid+0x100>)
 80016c8:	461a      	mov	r2, r3
 80016ca:	0052      	lsls	r2, r2, #1
 80016cc:	441a      	add	r2, r3
 80016ce:	460b      	mov	r3, r1
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	4403      	add	r3, r0
 80016da:	3301      	adds	r3, #1
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80016e2:	b299      	uxth	r1, r3
 80016e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016e8:	220c      	movs	r2, #12
 80016ea:	4620      	mov	r0, r4
 80016ec:	f7ff fafe 	bl	8000cec <LCD_Draw_Circle_Fill>
		for(uint8_t j =0; j<ROWS; j++){
 80016f0:	793b      	ldrb	r3, [r7, #4]
 80016f2:	3301      	adds	r3, #1
 80016f4:	713b      	strb	r3, [r7, #4]
 80016f6:	793b      	ldrb	r3, [r7, #4]
 80016f8:	2b05      	cmp	r3, #5
 80016fa:	d9d4      	bls.n	80016a6 <LCD_Draw_Game_Grid+0x92>
	for(uint8_t i = 0; i<COLUMNS; i++){
 80016fc:	797b      	ldrb	r3, [r7, #5]
 80016fe:	3301      	adds	r3, #1
 8001700:	717b      	strb	r3, [r7, #5]
 8001702:	797b      	ldrb	r3, [r7, #5]
 8001704:	2b06      	cmp	r3, #6
 8001706:	d9cb      	bls.n	80016a0 <LCD_Draw_Game_Grid+0x8c>
		}
	}
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bd90      	pop	{r4, r7, pc}
 8001712:	bf00      	nop
 8001714:	2002596c 	.word	0x2002596c

08001718 <LCD_Draw_Score_Screen>:

void LCD_Draw_Score_Screen(){
 8001718:	b580      	push	{r7, lr}
 800171a:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 800171e:	af02      	add	r7, sp, #8
	LCD_Update_Game_Length_Time();
 8001720:	f7ff f848 	bl	80007b4 <LCD_Update_Game_Length_Time>

	LCD_Clear(0, LCD_COLOR_GREY);
 8001724:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8001728:	2000      	movs	r0, #0
 800172a:	f7ff fbbd 	bl	8000ea8 <LCD_Clear>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 800172e:	2000      	movs	r0, #0
 8001730:	f7ff fbdc 	bl	8000eec <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001734:	4895      	ldr	r0, [pc, #596]	@ (800198c <LCD_Draw_Score_Screen+0x274>)
 8001736:	f7ff fbe9 	bl	8000f0c <LCD_SetFont>

	LCD_DisplayChar(95,TIMER_YPOS,'T');
 800173a:	2254      	movs	r2, #84	@ 0x54
 800173c:	2114      	movs	r1, #20
 800173e:	205f      	movs	r0, #95	@ 0x5f
 8001740:	f7ff fc62 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(105,TIMER_YPOS,'i');
 8001744:	2269      	movs	r2, #105	@ 0x69
 8001746:	2114      	movs	r1, #20
 8001748:	2069      	movs	r0, #105	@ 0x69
 800174a:	f7ff fc5d 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(115,TIMER_YPOS,'m');
 800174e:	226d      	movs	r2, #109	@ 0x6d
 8001750:	2114      	movs	r1, #20
 8001752:	2073      	movs	r0, #115	@ 0x73
 8001754:	f7ff fc58 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(130,TIMER_YPOS,'e');
 8001758:	2265      	movs	r2, #101	@ 0x65
 800175a:	2114      	movs	r1, #20
 800175c:	2082      	movs	r0, #130	@ 0x82
 800175e:	f7ff fc53 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(140,TIMER_YPOS,'r');
 8001762:	2272      	movs	r2, #114	@ 0x72
 8001764:	2114      	movs	r1, #20
 8001766:	208c      	movs	r0, #140	@ 0x8c
 8001768:	f7ff fc4e 	bl	8001008 <LCD_DisplayChar>


	char seconds[1000];
	//converts the ms to seconds and allowing for 1000 seconds to be displayed
	sprintf(seconds, "%ld", gameLengthTime/1000);
 800176c:	4b88      	ldr	r3, [pc, #544]	@ (8001990 <LCD_Draw_Score_Screen+0x278>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a88      	ldr	r2, [pc, #544]	@ (8001994 <LCD_Draw_Score_Screen+0x27c>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	099a      	lsrs	r2, r3, #6
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	4986      	ldr	r1, [pc, #536]	@ (8001998 <LCD_Draw_Score_Screen+0x280>)
 800177e:	4618      	mov	r0, r3
 8001780:	f005 faa2 	bl	8006cc8 <siprintf>

	for(uint32_t i = 0; seconds[i]!='\0'; i++){
 8001784:	2300      	movs	r3, #0
 8001786:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 800178a:	e019      	b.n	80017c0 <LCD_Draw_Score_Screen+0xa8>
		LCD_DisplayChar(105+i*15, TIMER_YPOS+30, seconds[i]);
 800178c:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 8001790:	b29b      	uxth	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	0112      	lsls	r2, r2, #4
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	b29b      	uxth	r3, r3
 800179a:	3369      	adds	r3, #105	@ 0x69
 800179c:	b298      	uxth	r0, r3
 800179e:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80017a2:	f5a3 727d 	sub.w	r2, r3, #1012	@ 0x3f4
 80017a6:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 80017aa:	4413      	add	r3, r2
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	2132      	movs	r1, #50	@ 0x32
 80017b2:	f7ff fc29 	bl	8001008 <LCD_DisplayChar>
	for(uint32_t i = 0; seconds[i]!='\0'; i++){
 80017b6:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 80017ba:	3301      	adds	r3, #1
 80017bc:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 80017c0:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80017c4:	f5a3 727d 	sub.w	r2, r3, #1012	@ 0x3f4
 80017c8:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 80017cc:	4413      	add	r3, r2
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1db      	bne.n	800178c <LCD_Draw_Score_Screen+0x74>
	}

	LCD_DisplayChar(95,SCORE_YPOS,'S');
 80017d4:	2253      	movs	r2, #83	@ 0x53
 80017d6:	2150      	movs	r1, #80	@ 0x50
 80017d8:	205f      	movs	r0, #95	@ 0x5f
 80017da:	f7ff fc15 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(107,SCORE_YPOS,'c');
 80017de:	2263      	movs	r2, #99	@ 0x63
 80017e0:	2150      	movs	r1, #80	@ 0x50
 80017e2:	206b      	movs	r0, #107	@ 0x6b
 80017e4:	f7ff fc10 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(117,SCORE_YPOS,'o');
 80017e8:	226f      	movs	r2, #111	@ 0x6f
 80017ea:	2150      	movs	r1, #80	@ 0x50
 80017ec:	2075      	movs	r0, #117	@ 0x75
 80017ee:	f7ff fc0b 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(127,SCORE_YPOS,'r');
 80017f2:	2272      	movs	r2, #114	@ 0x72
 80017f4:	2150      	movs	r1, #80	@ 0x50
 80017f6:	207f      	movs	r0, #127	@ 0x7f
 80017f8:	f7ff fc06 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(135,SCORE_YPOS,'e');
 80017fc:	2265      	movs	r2, #101	@ 0x65
 80017fe:	2150      	movs	r1, #80	@ 0x50
 8001800:	2087      	movs	r0, #135	@ 0x87
 8001802:	f7ff fc01 	bl	8001008 <LCD_DisplayChar>



	LCD_Draw_Circle_Fill(103, SCORE_YPOS+60, 16, LCD_COLOR_BLACK);
 8001806:	2300      	movs	r3, #0
 8001808:	2210      	movs	r2, #16
 800180a:	218c      	movs	r1, #140	@ 0x8c
 800180c:	2067      	movs	r0, #103	@ 0x67
 800180e:	f7ff fa6d 	bl	8000cec <LCD_Draw_Circle_Fill>
	LCD_Draw_Circle_Fill(144, SCORE_YPOS+60, 16, LCD_COLOR_BLACK);
 8001812:	2300      	movs	r3, #0
 8001814:	2210      	movs	r2, #16
 8001816:	218c      	movs	r1, #140	@ 0x8c
 8001818:	2090      	movs	r0, #144	@ 0x90
 800181a:	f7ff fa67 	bl	8000cec <LCD_Draw_Circle_Fill>
	//Outlines for the circles

	LCD_Draw_Circle_Fill(103, SCORE_YPOS+60, 15, LCD_COLOR_RED);
 800181e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001822:	220f      	movs	r2, #15
 8001824:	218c      	movs	r1, #140	@ 0x8c
 8001826:	2067      	movs	r0, #103	@ 0x67
 8001828:	f7ff fa60 	bl	8000cec <LCD_Draw_Circle_Fill>
	LCD_Draw_Circle_Fill(144, SCORE_YPOS+60, 15, LCD_COLOR_YELLOW);
 800182c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001830:	220f      	movs	r2, #15
 8001832:	218c      	movs	r1, #140	@ 0x8c
 8001834:	2090      	movs	r0, #144	@ 0x90
 8001836:	f7ff fa59 	bl	8000cec <LCD_Draw_Circle_Fill>

	char redScoreToDisplay[4];
	//displays up to 9999
	sprintf(redScoreToDisplay, "%d", redScore);
 800183a:	4b58      	ldr	r3, [pc, #352]	@ (800199c <LCD_Draw_Score_Screen+0x284>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	4956      	ldr	r1, [pc, #344]	@ (80019a0 <LCD_Draw_Score_Screen+0x288>)
 8001846:	4618      	mov	r0, r3
 8001848:	f005 fa3e 	bl	8006cc8 <siprintf>
	for(int i = 0; redScoreToDisplay[i] != '\0'; i++){
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8001852:	e019      	b.n	8001888 <LCD_Draw_Score_Screen+0x170>
		LCD_DisplayChar(97+i*15, SCORE_YPOS+51, redScoreToDisplay[i]);
 8001854:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001858:	b29b      	uxth	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	0112      	lsls	r2, r2, #4
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	b29b      	uxth	r3, r3
 8001862:	3361      	adds	r3, #97	@ 0x61
 8001864:	b298      	uxth	r0, r3
 8001866:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800186a:	f5a3 727e 	sub.w	r2, r3, #1016	@ 0x3f8
 800186e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001872:	4413      	add	r3, r2
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	2183      	movs	r1, #131	@ 0x83
 800187a:	f7ff fbc5 	bl	8001008 <LCD_DisplayChar>
	for(int i = 0; redScoreToDisplay[i] != '\0'; i++){
 800187e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001882:	3301      	adds	r3, #1
 8001884:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8001888:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800188c:	f5a3 727e 	sub.w	r2, r3, #1016	@ 0x3f8
 8001890:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001894:	4413      	add	r3, r2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1db      	bne.n	8001854 <LCD_Draw_Score_Screen+0x13c>
	}

	char yellowScoreToDisplay[4];
	sprintf(yellowScoreToDisplay, "%d", yellowScore);
 800189c:	4b41      	ldr	r3, [pc, #260]	@ (80019a4 <LCD_Draw_Score_Screen+0x28c>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	493e      	ldr	r1, [pc, #248]	@ (80019a0 <LCD_Draw_Score_Screen+0x288>)
 80018a6:	4618      	mov	r0, r3
 80018a8:	f005 fa0e 	bl	8006cc8 <siprintf>
	for(int i = 0; redScoreToDisplay[i] != '\0'; i++){
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 80018b2:	e019      	b.n	80018e8 <LCD_Draw_Score_Screen+0x1d0>
		LCD_DisplayChar(137+i*15, SCORE_YPOS+51, yellowScoreToDisplay[i]);
 80018b4:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	3389      	adds	r3, #137	@ 0x89
 80018c4:	b298      	uxth	r0, r3
 80018c6:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80018ca:	f5a3 727f 	sub.w	r2, r3, #1020	@ 0x3fc
 80018ce:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80018d2:	4413      	add	r3, r2
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	2183      	movs	r1, #131	@ 0x83
 80018da:	f7ff fb95 	bl	8001008 <LCD_DisplayChar>
	for(int i = 0; redScoreToDisplay[i] != '\0'; i++){
 80018de:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80018e2:	3301      	adds	r3, #1
 80018e4:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 80018e8:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80018ec:	f5a3 727e 	sub.w	r2, r3, #1016	@ 0x3f8
 80018f0:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80018f4:	4413      	add	r3, r2
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1db      	bne.n	80018b4 <LCD_Draw_Score_Screen+0x19c>
	}

//	LCD_DisplayChar(97, SCORE_YPOS+51, redScoreToDisplay);
//	LCD_DisplayChar(137, SCORE_YPOS+51, yellowScoreToDisplay);
	//RIGHT NOW ONLY CAN DISPLAY UP TO 9 FOR BOTH SIDES OTHERWISE OVERFLOW
	LCD_DisplayChar(116, SCORE_YPOS+48, '-');
 80018fc:	222d      	movs	r2, #45	@ 0x2d
 80018fe:	2180      	movs	r1, #128	@ 0x80
 8001900:	2074      	movs	r0, #116	@ 0x74
 8001902:	f7ff fb81 	bl	8001008 <LCD_DisplayChar>

	LCD_Draw_Rectangle_Fill(18, RESTART_BUTTON_YPOS-2, 204, 104, LCD_COLOR_BLACK);
 8001906:	2300      	movs	r3, #0
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2368      	movs	r3, #104	@ 0x68
 800190c:	22cc      	movs	r2, #204	@ 0xcc
 800190e:	21c6      	movs	r1, #198	@ 0xc6
 8001910:	2012      	movs	r0, #18
 8001912:	f7ff fa3e 	bl	8000d92 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(20, RESTART_BUTTON_YPOS, 200, 100, LCD_COLOR_CYAN);
 8001916:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2364      	movs	r3, #100	@ 0x64
 800191e:	22c8      	movs	r2, #200	@ 0xc8
 8001920:	21c8      	movs	r1, #200	@ 0xc8
 8001922:	2014      	movs	r0, #20
 8001924:	f7ff fa35 	bl	8000d92 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(25, RESTART_BUTTON_YPOS+5, 190, 90, LCD_COLOR_BLUE2);
 8001928:	f240 531f 	movw	r3, #1311	@ 0x51f
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	235a      	movs	r3, #90	@ 0x5a
 8001930:	22be      	movs	r2, #190	@ 0xbe
 8001932:	21cd      	movs	r1, #205	@ 0xcd
 8001934:	2019      	movs	r0, #25
 8001936:	f7ff fa2c 	bl	8000d92 <LCD_Draw_Rectangle_Fill>

	LCD_DisplayChar(95,  NEW_YPOS,'N');
 800193a:	224e      	movs	r2, #78	@ 0x4e
 800193c:	21e6      	movs	r1, #230	@ 0xe6
 800193e:	205f      	movs	r0, #95	@ 0x5f
 8001940:	f7ff fb62 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(110, NEW_YPOS,'E');
 8001944:	2245      	movs	r2, #69	@ 0x45
 8001946:	21e6      	movs	r1, #230	@ 0xe6
 8001948:	206e      	movs	r0, #110	@ 0x6e
 800194a:	f7ff fb5d 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(125, NEW_YPOS,'W');
 800194e:	2257      	movs	r2, #87	@ 0x57
 8001950:	21e6      	movs	r1, #230	@ 0xe6
 8001952:	207d      	movs	r0, #125	@ 0x7d
 8001954:	f7ff fb58 	bl	8001008 <LCD_DisplayChar>

	LCD_DisplayChar(90,  GAME_YPOS,'G');
 8001958:	2247      	movs	r2, #71	@ 0x47
 800195a:	21fa      	movs	r1, #250	@ 0xfa
 800195c:	205a      	movs	r0, #90	@ 0x5a
 800195e:	f7ff fb53 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(105, GAME_YPOS,'A');
 8001962:	2241      	movs	r2, #65	@ 0x41
 8001964:	21fa      	movs	r1, #250	@ 0xfa
 8001966:	2069      	movs	r0, #105	@ 0x69
 8001968:	f7ff fb4e 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(120, GAME_YPOS,'M');
 800196c:	224d      	movs	r2, #77	@ 0x4d
 800196e:	21fa      	movs	r1, #250	@ 0xfa
 8001970:	2078      	movs	r0, #120	@ 0x78
 8001972:	f7ff fb49 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(135, GAME_YPOS,'E');
 8001976:	2245      	movs	r2, #69	@ 0x45
 8001978:	21fa      	movs	r1, #250	@ 0xfa
 800197a:	2087      	movs	r0, #135	@ 0x87
 800197c:	f7ff fb44 	bl	8001008 <LCD_DisplayChar>
}
 8001980:	bf00      	nop
 8001982:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000004 	.word	0x20000004
 8001990:	200259fc 	.word	0x200259fc
 8001994:	10624dd3 	.word	0x10624dd3
 8001998:	08007620 	.word	0x08007620
 800199c:	200259ef 	.word	0x200259ef
 80019a0:	08007624 	.word	0x08007624
 80019a4:	200259f0 	.word	0x200259f0

080019a8 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ac:	b672      	cpsid	i
}
 80019ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <LCD_Error_Handler+0x8>

080019b4 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 80019b8:	f001 f9ab 	bl	8002d12 <STMPE811_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d001      	beq.n	80019c6 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 80019c2:	bf00      	nop
 80019c4:	e7fd      	b.n	80019c2 <InitializeLCDTouch+0xe>
  }
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}

080019ca <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f001 fa55 	bl	8002e82 <STMPE811_ReadTouch>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <getScheduledEvents>:
#include "Scheduler.h"

static uint32_t scheduledEvents;

uint32_t getScheduledEvents(){
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
	return scheduledEvents;
 80019e8:	4b03      	ldr	r3, [pc, #12]	@ (80019f8 <getScheduledEvents+0x14>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20025a00 	.word	0x20025a00

080019fc <addSchedulerEvent>:

void addSchedulerEvent(uint32_t event_to_schedule){
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event_to_schedule;
 8001a04:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <addSchedulerEvent+0x20>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	4a03      	ldr	r2, [pc, #12]	@ (8001a1c <addSchedulerEvent+0x20>)
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	20025a00 	.word	0x20025a00

08001a20 <removeSchedulerEvent>:


void removeSchedulerEvent(uint32_t event_to_remove){
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~event_to_remove;//this might be wrong
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <removeSchedulerEvent+0x24>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4013      	ands	r3, r2
 8001a32:	4a04      	ldr	r2, [pc, #16]	@ (8001a44 <removeSchedulerEvent+0x24>)
 8001a34:	6013      	str	r3, [r2, #0]
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20025a00 	.word	0x20025a00

08001a48 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001a4c:	f000 f9fe 	bl	8001e4c <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001a50:	20ca      	movs	r0, #202	@ 0xca
 8001a52:	f000 f943 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001a56:	20c3      	movs	r0, #195	@ 0xc3
 8001a58:	f000 f94d 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001a5c:	2008      	movs	r0, #8
 8001a5e:	f000 f94a 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001a62:	2050      	movs	r0, #80	@ 0x50
 8001a64:	f000 f947 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001a68:	20cf      	movs	r0, #207	@ 0xcf
 8001a6a:	f000 f937 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f000 f941 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001a74:	20c1      	movs	r0, #193	@ 0xc1
 8001a76:	f000 f93e 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001a7a:	2030      	movs	r0, #48	@ 0x30
 8001a7c:	f000 f93b 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001a80:	20ed      	movs	r0, #237	@ 0xed
 8001a82:	f000 f92b 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001a86:	2064      	movs	r0, #100	@ 0x64
 8001a88:	f000 f935 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 f932 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001a92:	2012      	movs	r0, #18
 8001a94:	f000 f92f 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001a98:	2081      	movs	r0, #129	@ 0x81
 8001a9a:	f000 f92c 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001a9e:	20e8      	movs	r0, #232	@ 0xe8
 8001aa0:	f000 f91c 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001aa4:	2085      	movs	r0, #133	@ 0x85
 8001aa6:	f000 f926 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f000 f923 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001ab0:	2078      	movs	r0, #120	@ 0x78
 8001ab2:	f000 f920 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001ab6:	20cb      	movs	r0, #203	@ 0xcb
 8001ab8:	f000 f910 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001abc:	2039      	movs	r0, #57	@ 0x39
 8001abe:	f000 f91a 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001ac2:	202c      	movs	r0, #44	@ 0x2c
 8001ac4:	f000 f917 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f000 f914 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001ace:	2034      	movs	r0, #52	@ 0x34
 8001ad0:	f000 f911 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001ad4:	2002      	movs	r0, #2
 8001ad6:	f000 f90e 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001ada:	20f7      	movs	r0, #247	@ 0xf7
 8001adc:	f000 f8fe 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001ae0:	2020      	movs	r0, #32
 8001ae2:	f000 f908 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001ae6:	20ea      	movs	r0, #234	@ 0xea
 8001ae8:	f000 f8f8 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001aec:	2000      	movs	r0, #0
 8001aee:	f000 f902 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001af2:	2000      	movs	r0, #0
 8001af4:	f000 f8ff 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001af8:	20b1      	movs	r0, #177	@ 0xb1
 8001afa:	f000 f8ef 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f000 f8f9 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001b04:	201b      	movs	r0, #27
 8001b06:	f000 f8f6 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001b0a:	20b6      	movs	r0, #182	@ 0xb6
 8001b0c:	f000 f8e6 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001b10:	200a      	movs	r0, #10
 8001b12:	f000 f8f0 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001b16:	20a2      	movs	r0, #162	@ 0xa2
 8001b18:	f000 f8ed 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001b1c:	20c0      	movs	r0, #192	@ 0xc0
 8001b1e:	f000 f8dd 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001b22:	2010      	movs	r0, #16
 8001b24:	f000 f8e7 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001b28:	20c1      	movs	r0, #193	@ 0xc1
 8001b2a:	f000 f8d7 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001b2e:	2010      	movs	r0, #16
 8001b30:	f000 f8e1 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001b34:	20c5      	movs	r0, #197	@ 0xc5
 8001b36:	f000 f8d1 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001b3a:	2045      	movs	r0, #69	@ 0x45
 8001b3c:	f000 f8db 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001b40:	2015      	movs	r0, #21
 8001b42:	f000 f8d8 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001b46:	20c7      	movs	r0, #199	@ 0xc7
 8001b48:	f000 f8c8 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001b4c:	2090      	movs	r0, #144	@ 0x90
 8001b4e:	f000 f8d2 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001b52:	2036      	movs	r0, #54	@ 0x36
 8001b54:	f000 f8c2 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001b58:	20c8      	movs	r0, #200	@ 0xc8
 8001b5a:	f000 f8cc 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001b5e:	20f2      	movs	r0, #242	@ 0xf2
 8001b60:	f000 f8bc 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001b64:	2000      	movs	r0, #0
 8001b66:	f000 f8c6 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001b6a:	20b0      	movs	r0, #176	@ 0xb0
 8001b6c:	f000 f8b6 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001b70:	20c2      	movs	r0, #194	@ 0xc2
 8001b72:	f000 f8c0 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001b76:	20b6      	movs	r0, #182	@ 0xb6
 8001b78:	f000 f8b0 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001b7c:	200a      	movs	r0, #10
 8001b7e:	f000 f8ba 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001b82:	20a7      	movs	r0, #167	@ 0xa7
 8001b84:	f000 f8b7 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001b88:	2027      	movs	r0, #39	@ 0x27
 8001b8a:	f000 f8b4 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001b8e:	2004      	movs	r0, #4
 8001b90:	f000 f8b1 	bl	8001cf6 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001b94:	202a      	movs	r0, #42	@ 0x2a
 8001b96:	f000 f8a1 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f000 f8ab 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f000 f8a8 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f000 f8a5 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001bac:	20ef      	movs	r0, #239	@ 0xef
 8001bae:	f000 f8a2 	bl	8001cf6 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001bb2:	202b      	movs	r0, #43	@ 0x2b
 8001bb4:	f000 f892 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f000 f89c 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f000 f899 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	f000 f896 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001bca:	203f      	movs	r0, #63	@ 0x3f
 8001bcc:	f000 f893 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001bd0:	20f6      	movs	r0, #246	@ 0xf6
 8001bd2:	f000 f883 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f000 f88d 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f000 f88a 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001be2:	2006      	movs	r0, #6
 8001be4:	f000 f887 	bl	8001cf6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001be8:	202c      	movs	r0, #44	@ 0x2c
 8001bea:	f000 f877 	bl	8001cdc <ili9341_Write_Reg>
  LCD_Delay(200);
 8001bee:	20c8      	movs	r0, #200	@ 0xc8
 8001bf0:	f000 f9e8 	bl	8001fc4 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001bf4:	2026      	movs	r0, #38	@ 0x26
 8001bf6:	f000 f871 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f000 f87b 	bl	8001cf6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001c00:	20e0      	movs	r0, #224	@ 0xe0
 8001c02:	f000 f86b 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001c06:	200f      	movs	r0, #15
 8001c08:	f000 f875 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001c0c:	2029      	movs	r0, #41	@ 0x29
 8001c0e:	f000 f872 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001c12:	2024      	movs	r0, #36	@ 0x24
 8001c14:	f000 f86f 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001c18:	200c      	movs	r0, #12
 8001c1a:	f000 f86c 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001c1e:	200e      	movs	r0, #14
 8001c20:	f000 f869 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001c24:	2009      	movs	r0, #9
 8001c26:	f000 f866 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001c2a:	204e      	movs	r0, #78	@ 0x4e
 8001c2c:	f000 f863 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001c30:	2078      	movs	r0, #120	@ 0x78
 8001c32:	f000 f860 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001c36:	203c      	movs	r0, #60	@ 0x3c
 8001c38:	f000 f85d 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001c3c:	2009      	movs	r0, #9
 8001c3e:	f000 f85a 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001c42:	2013      	movs	r0, #19
 8001c44:	f000 f857 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001c48:	2005      	movs	r0, #5
 8001c4a:	f000 f854 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001c4e:	2017      	movs	r0, #23
 8001c50:	f000 f851 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001c54:	2011      	movs	r0, #17
 8001c56:	f000 f84e 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f000 f84b 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001c60:	20e1      	movs	r0, #225	@ 0xe1
 8001c62:	f000 f83b 	bl	8001cdc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001c66:	2000      	movs	r0, #0
 8001c68:	f000 f845 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001c6c:	2016      	movs	r0, #22
 8001c6e:	f000 f842 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001c72:	201b      	movs	r0, #27
 8001c74:	f000 f83f 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001c78:	2004      	movs	r0, #4
 8001c7a:	f000 f83c 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001c7e:	2011      	movs	r0, #17
 8001c80:	f000 f839 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001c84:	2007      	movs	r0, #7
 8001c86:	f000 f836 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001c8a:	2031      	movs	r0, #49	@ 0x31
 8001c8c:	f000 f833 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001c90:	2033      	movs	r0, #51	@ 0x33
 8001c92:	f000 f830 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001c96:	2042      	movs	r0, #66	@ 0x42
 8001c98:	f000 f82d 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001c9c:	2005      	movs	r0, #5
 8001c9e:	f000 f82a 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001ca2:	200c      	movs	r0, #12
 8001ca4:	f000 f827 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001ca8:	200a      	movs	r0, #10
 8001caa:	f000 f824 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001cae:	2028      	movs	r0, #40	@ 0x28
 8001cb0:	f000 f821 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001cb4:	202f      	movs	r0, #47	@ 0x2f
 8001cb6:	f000 f81e 	bl	8001cf6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001cba:	200f      	movs	r0, #15
 8001cbc:	f000 f81b 	bl	8001cf6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001cc0:	2011      	movs	r0, #17
 8001cc2:	f000 f80b 	bl	8001cdc <ili9341_Write_Reg>
  LCD_Delay(200);
 8001cc6:	20c8      	movs	r0, #200	@ 0xc8
 8001cc8:	f000 f97c 	bl	8001fc4 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001ccc:	2029      	movs	r0, #41	@ 0x29
 8001cce:	f000 f805 	bl	8001cdc <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001cd2:	202c      	movs	r0, #44	@ 0x2c
 8001cd4:	f000 f802 	bl	8001cdc <ili9341_Write_Reg>
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 f949 	bl	8001f80 <LCD_IO_WriteReg>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f91a 	bl	8001f3c <LCD_IO_WriteData>
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001d14:	4819      	ldr	r0, [pc, #100]	@ (8001d7c <SPI_Init+0x6c>)
 8001d16:	f004 fc14 	bl	8006542 <HAL_SPI_GetState>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d12b      	bne.n	8001d78 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001d20:	4b16      	ldr	r3, [pc, #88]	@ (8001d7c <SPI_Init+0x6c>)
 8001d22:	4a17      	ldr	r2, [pc, #92]	@ (8001d80 <SPI_Init+0x70>)
 8001d24:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d26:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <SPI_Init+0x6c>)
 8001d28:	2218      	movs	r2, #24
 8001d2a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001d2c:	4b13      	ldr	r3, [pc, #76]	@ (8001d7c <SPI_Init+0x6c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001d32:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <SPI_Init+0x6c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001d38:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <SPI_Init+0x6c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d7c <SPI_Init+0x6c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001d44:	4b0d      	ldr	r3, [pc, #52]	@ (8001d7c <SPI_Init+0x6c>)
 8001d46:	2207      	movs	r2, #7
 8001d48:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <SPI_Init+0x6c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001d50:	4b0a      	ldr	r3, [pc, #40]	@ (8001d7c <SPI_Init+0x6c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001d56:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <SPI_Init+0x6c>)
 8001d58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d5c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001d5e:	4b07      	ldr	r3, [pc, #28]	@ (8001d7c <SPI_Init+0x6c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001d64:	4b05      	ldr	r3, [pc, #20]	@ (8001d7c <SPI_Init+0x6c>)
 8001d66:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d6a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001d6c:	4803      	ldr	r0, [pc, #12]	@ (8001d7c <SPI_Init+0x6c>)
 8001d6e:	f000 f833 	bl	8001dd8 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001d72:	4802      	ldr	r0, [pc, #8]	@ (8001d7c <SPI_Init+0x6c>)
 8001d74:	f004 f9f0 	bl	8006158 <HAL_SPI_Init>
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20025a04 	.word	0x20025a04
 8001d80:	40015000 	.word	0x40015000

08001d84 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001d92:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <SPI_Write+0x34>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	1db9      	adds	r1, r7, #6
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4808      	ldr	r0, [pc, #32]	@ (8001dbc <SPI_Write+0x38>)
 8001d9c:	f004 fa8d 	bl	80062ba <HAL_SPI_Transmit>
 8001da0:	4603      	mov	r3, r0
 8001da2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001daa:	f000 f809 	bl	8001dc0 <SPI_Error>
  }
}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2000000c 	.word	0x2000000c
 8001dbc:	20025a04 	.word	0x20025a04

08001dc0 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001dc4:	4803      	ldr	r0, [pc, #12]	@ (8001dd4 <SPI_Error+0x14>)
 8001dc6:	f004 fa50 	bl	800626a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001dca:	f7ff ffa1 	bl	8001d10 <SPI_Init>
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20025a04 	.word	0x20025a04

08001dd8 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	@ 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	4b17      	ldr	r3, [pc, #92]	@ (8001e44 <SPI_MspInit+0x6c>)
 8001de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de8:	4a16      	ldr	r2, [pc, #88]	@ (8001e44 <SPI_MspInit+0x6c>)
 8001dea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001dee:	6453      	str	r3, [r2, #68]	@ 0x44
 8001df0:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <SPI_MspInit+0x6c>)
 8001df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <SPI_MspInit+0x6c>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e04:	4a0f      	ldr	r2, [pc, #60]	@ (8001e44 <SPI_MspInit+0x6c>)
 8001e06:	f043 0320 	orr.w	r3, r3, #32
 8001e0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e44 <SPI_MspInit+0x6c>)
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001e18:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001e22:	2302      	movs	r3, #2
 8001e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001e26:	2301      	movs	r3, #1
 8001e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001e2a:	2305      	movs	r3, #5
 8001e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	4804      	ldr	r0, [pc, #16]	@ (8001e48 <SPI_MspInit+0x70>)
 8001e36:	f001 fd09 	bl	800384c <HAL_GPIO_Init>
}
 8001e3a:	bf00      	nop
 8001e3c:	3728      	adds	r7, #40	@ 0x28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40021400 	.word	0x40021400

08001e4c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001e52:	4b36      	ldr	r3, [pc, #216]	@ (8001f2c <LCD_IO_Init+0xe0>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d164      	bne.n	8001f24 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001e5a:	4b34      	ldr	r3, [pc, #208]	@ (8001f2c <LCD_IO_Init+0xe0>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	4b32      	ldr	r3, [pc, #200]	@ (8001f30 <LCD_IO_Init+0xe4>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e68:	4a31      	ldr	r2, [pc, #196]	@ (8001f30 <LCD_IO_Init+0xe4>)
 8001e6a:	f043 0308 	orr.w	r3, r3, #8
 8001e6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e70:	4b2f      	ldr	r3, [pc, #188]	@ (8001f30 <LCD_IO_Init+0xe4>)
 8001e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001e7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001e82:	2301      	movs	r3, #1
 8001e84:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001e8e:	f107 030c 	add.w	r3, r7, #12
 8001e92:	4619      	mov	r1, r3
 8001e94:	4827      	ldr	r0, [pc, #156]	@ (8001f34 <LCD_IO_Init+0xe8>)
 8001e96:	f001 fcd9 	bl	800384c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	4b24      	ldr	r3, [pc, #144]	@ (8001f30 <LCD_IO_Init+0xe4>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	4a23      	ldr	r2, [pc, #140]	@ (8001f30 <LCD_IO_Init+0xe4>)
 8001ea4:	f043 0308 	orr.w	r3, r3, #8
 8001ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eaa:	4b21      	ldr	r3, [pc, #132]	@ (8001f30 <LCD_IO_Init+0xe4>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001eb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001ec8:	f107 030c 	add.w	r3, r7, #12
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4819      	ldr	r0, [pc, #100]	@ (8001f34 <LCD_IO_Init+0xe8>)
 8001ed0:	f001 fcbc 	bl	800384c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	603b      	str	r3, [r7, #0]
 8001ed8:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <LCD_IO_Init+0xe4>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001edc:	4a14      	ldr	r2, [pc, #80]	@ (8001f30 <LCD_IO_Init+0xe4>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee4:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <LCD_IO_Init+0xe4>)
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	603b      	str	r3, [r7, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001efc:	2302      	movs	r3, #2
 8001efe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	4619      	mov	r1, r3
 8001f06:	480c      	ldr	r0, [pc, #48]	@ (8001f38 <LCD_IO_Init+0xec>)
 8001f08:	f001 fca0 	bl	800384c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2104      	movs	r1, #4
 8001f10:	4809      	ldr	r0, [pc, #36]	@ (8001f38 <LCD_IO_Init+0xec>)
 8001f12:	f001 ff53 	bl	8003dbc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001f16:	2201      	movs	r2, #1
 8001f18:	2104      	movs	r1, #4
 8001f1a:	4807      	ldr	r0, [pc, #28]	@ (8001f38 <LCD_IO_Init+0xec>)
 8001f1c:	f001 ff4e 	bl	8003dbc <HAL_GPIO_WritePin>

    SPI_Init();
 8001f20:	f7ff fef6 	bl	8001d10 <SPI_Init>
  }
}
 8001f24:	bf00      	nop
 8001f26:	3720      	adds	r7, #32
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20025a5c 	.word	0x20025a5c
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020c00 	.word	0x40020c00
 8001f38:	40020800 	.word	0x40020800

08001f3c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001f46:	2201      	movs	r2, #1
 8001f48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f4c:	480a      	ldr	r0, [pc, #40]	@ (8001f78 <LCD_IO_WriteData+0x3c>)
 8001f4e:	f001 ff35 	bl	8003dbc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001f52:	2200      	movs	r2, #0
 8001f54:	2104      	movs	r1, #4
 8001f56:	4809      	ldr	r0, [pc, #36]	@ (8001f7c <LCD_IO_WriteData+0x40>)
 8001f58:	f001 ff30 	bl	8003dbc <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001f5c:	88fb      	ldrh	r3, [r7, #6]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff ff10 	bl	8001d84 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001f64:	2201      	movs	r2, #1
 8001f66:	2104      	movs	r1, #4
 8001f68:	4804      	ldr	r0, [pc, #16]	@ (8001f7c <LCD_IO_WriteData+0x40>)
 8001f6a:	f001 ff27 	bl	8003dbc <HAL_GPIO_WritePin>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40020c00 	.word	0x40020c00
 8001f7c:	40020800 	.word	0x40020800

08001f80 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f90:	480a      	ldr	r0, [pc, #40]	@ (8001fbc <LCD_IO_WriteReg+0x3c>)
 8001f92:	f001 ff13 	bl	8003dbc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001f96:	2200      	movs	r2, #0
 8001f98:	2104      	movs	r1, #4
 8001f9a:	4809      	ldr	r0, [pc, #36]	@ (8001fc0 <LCD_IO_WriteReg+0x40>)
 8001f9c:	f001 ff0e 	bl	8003dbc <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff feed 	bl	8001d84 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001faa:	2201      	movs	r2, #1
 8001fac:	2104      	movs	r1, #4
 8001fae:	4804      	ldr	r0, [pc, #16]	@ (8001fc0 <LCD_IO_WriteReg+0x40>)
 8001fb0:	f001 ff04 	bl	8003dbc <HAL_GPIO_WritePin>
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40020c00 	.word	0x40020c00
 8001fc0:	40020800 	.word	0x40020800

08001fc4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f001 fad5 	bl	800357c <HAL_Delay>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fe2:	f001 fa59 	bl	8003498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fe6:	f000 f85d 	bl	80020a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fea:	f000 fa4d 	bl	8002488 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001fee:	f000 f903 	bl	80021f8 <MX_LTDC_Init>
  MX_RNG_Init();
 8001ff2:	f000 f9b3 	bl	800235c <MX_RNG_Init>
  MX_TIM2_Init();
 8001ff6:	f000 f9fb 	bl	80023f0 <MX_TIM2_Init>
  MX_SPI5_Init();
 8001ffa:	f000 f9c3 	bl	8002384 <MX_SPI5_Init>
  MX_I2C3_Init();
 8001ffe:	f000 f8bb 	bl	8002178 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8002002:	f7fe fabd 	bl	8000580 <ApplicationInit>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  eventsToRun = getScheduledEvents();
 8002006:	f7ff fced 	bl	80019e4 <getScheduledEvents>
 800200a:	6078      	str	r0, [r7, #4]

	  if(eventsToRun & START_MENU_EVENT){
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <main+0x3e>
		  LCD_Start_Screen();
 8002016:	f7fe facf 	bl	80005b8 <LCD_Start_Screen>
	  }
	  if(eventsToRun & POLLING_MODE_SELECT_EVENT){
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d004      	beq.n	800202e <main+0x52>
		  LCD_Polling_Mode();
 8002024:	f7fe fb00 	bl	8000628 <LCD_Polling_Mode>
		  HAL_Delay(200);
 8002028:	20c8      	movs	r0, #200	@ 0xc8
 800202a:	f001 faa7 	bl	800357c <HAL_Delay>
	  }
	  if(eventsToRun & COLOR_SELECT_EVENT){
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <main+0x60>
		  LCD_Select_Color_Screen();
 8002038:	f7fe faca 	bl	80005d0 <LCD_Select_Color_Screen>
	  }
	  if(eventsToRun & POLLING_COLOR_SELECT_EVENT){
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d004      	beq.n	8002050 <main+0x74>
		  LCD_Polling_Color();
 8002046:	f7fe fb05 	bl	8000654 <LCD_Polling_Color>
		  HAL_Delay(200);
 800204a:	20c8      	movs	r0, #200	@ 0xc8
 800204c:	f001 fa96 	bl	800357c <HAL_Delay>
	  }
	  if(eventsToRun & BUILD_NEW_GAME_EVENT){
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	2b00      	cmp	r3, #0
 8002058:	d004      	beq.n	8002064 <main+0x88>
		  LCD_Game_Screen();
 800205a:	f7fe fac5 	bl	80005e8 <LCD_Game_Screen>
		  __HAL_TIM_GET_COUNTER(&htim2);
 800205e:	4b10      	ldr	r3, [pc, #64]	@ (80020a0 <main+0xc4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	  }
	  if(eventsToRun & POLLING_GAME_EVENT){
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b00      	cmp	r3, #0
 800206c:	d004      	beq.n	8002078 <main+0x9c>
		  LCD_Touch_Polling_Game();
 800206e:	f7fe fb0f 	bl	8000690 <LCD_Touch_Polling_Game>
		  HAL_Delay(100);
 8002072:	2064      	movs	r0, #100	@ 0x64
 8002074:	f001 fa82 	bl	800357c <HAL_Delay>
	  }
	  if(eventsToRun & SCORE_SCREEN_EVENT){
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <main+0xb2>
		  LCD_Score_Screen();
 8002082:	f7fe fabf 	bl	8000604 <LCD_Score_Screen>
		  HAL_Delay(1000);
 8002086:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800208a:	f001 fa77 	bl	800357c <HAL_Delay>
	  }
	  if(eventsToRun & POLLING_RESTART_EVENT){
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0b6      	beq.n	8002006 <main+0x2a>
		  LCD_Polling_Restart();
 8002098:	f7fe fb12 	bl	80006c0 <LCD_Polling_Restart>
	  eventsToRun = getScheduledEvents();
 800209c:	e7b3      	b.n	8002006 <main+0x2a>
 800209e:	bf00      	nop
 80020a0:	20025bc4 	.word	0x20025bc4

080020a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b094      	sub	sp, #80	@ 0x50
 80020a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020aa:	f107 0320 	add.w	r3, r7, #32
 80020ae:	2230      	movs	r2, #48	@ 0x30
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f004 fe28 	bl	8006d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c8:	2300      	movs	r3, #0
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	4b28      	ldr	r3, [pc, #160]	@ (8002170 <SystemClock_Config+0xcc>)
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	4a27      	ldr	r2, [pc, #156]	@ (8002170 <SystemClock_Config+0xcc>)
 80020d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80020d8:	4b25      	ldr	r3, [pc, #148]	@ (8002170 <SystemClock_Config+0xcc>)
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020e4:	2300      	movs	r3, #0
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	4b22      	ldr	r3, [pc, #136]	@ (8002174 <SystemClock_Config+0xd0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a21      	ldr	r2, [pc, #132]	@ (8002174 <SystemClock_Config+0xd0>)
 80020ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002174 <SystemClock_Config+0xd0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002100:	2301      	movs	r3, #1
 8002102:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002104:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800210a:	2302      	movs	r3, #2
 800210c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800210e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002112:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002114:	2308      	movs	r3, #8
 8002116:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002118:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800211c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800211e:	2302      	movs	r3, #2
 8002120:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002122:	2307      	movs	r3, #7
 8002124:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002126:	f107 0320 	add.w	r3, r7, #32
 800212a:	4618      	mov	r0, r3
 800212c:	f003 f9a6 	bl	800547c <HAL_RCC_OscConfig>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002136:	f000 fb55 	bl	80027e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800213a:	230f      	movs	r3, #15
 800213c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800213e:	2302      	movs	r3, #2
 8002140:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002146:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800214a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800214c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002150:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002152:	f107 030c 	add.w	r3, r7, #12
 8002156:	2105      	movs	r1, #5
 8002158:	4618      	mov	r0, r3
 800215a:	f003 fc07 	bl	800596c <HAL_RCC_ClockConfig>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002164:	f000 fb3e 	bl	80027e4 <Error_Handler>
  }
}
 8002168:	bf00      	nop
 800216a:	3750      	adds	r7, #80	@ 0x50
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40023800 	.word	0x40023800
 8002174:	40007000 	.word	0x40007000

08002178 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800217c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ec <MX_I2C3_Init+0x74>)
 800217e:	4a1c      	ldr	r2, [pc, #112]	@ (80021f0 <MX_I2C3_Init+0x78>)
 8002180:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002182:	4b1a      	ldr	r3, [pc, #104]	@ (80021ec <MX_I2C3_Init+0x74>)
 8002184:	4a1b      	ldr	r2, [pc, #108]	@ (80021f4 <MX_I2C3_Init+0x7c>)
 8002186:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002188:	4b18      	ldr	r3, [pc, #96]	@ (80021ec <MX_I2C3_Init+0x74>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800218e:	4b17      	ldr	r3, [pc, #92]	@ (80021ec <MX_I2C3_Init+0x74>)
 8002190:	2200      	movs	r2, #0
 8002192:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002194:	4b15      	ldr	r3, [pc, #84]	@ (80021ec <MX_I2C3_Init+0x74>)
 8002196:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800219a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800219c:	4b13      	ldr	r3, [pc, #76]	@ (80021ec <MX_I2C3_Init+0x74>)
 800219e:	2200      	movs	r2, #0
 80021a0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80021a2:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <MX_I2C3_Init+0x74>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021a8:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <MX_I2C3_Init+0x74>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ae:	4b0f      	ldr	r3, [pc, #60]	@ (80021ec <MX_I2C3_Init+0x74>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80021b4:	480d      	ldr	r0, [pc, #52]	@ (80021ec <MX_I2C3_Init+0x74>)
 80021b6:	f001 fe1b 	bl	8003df0 <HAL_I2C_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80021c0:	f000 fb10 	bl	80027e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021c4:	2100      	movs	r1, #0
 80021c6:	4809      	ldr	r0, [pc, #36]	@ (80021ec <MX_I2C3_Init+0x74>)
 80021c8:	f002 fe36 	bl	8004e38 <HAL_I2CEx_ConfigAnalogFilter>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80021d2:	f000 fb07 	bl	80027e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80021d6:	2100      	movs	r1, #0
 80021d8:	4804      	ldr	r0, [pc, #16]	@ (80021ec <MX_I2C3_Init+0x74>)
 80021da:	f002 fe69 	bl	8004eb0 <HAL_I2CEx_ConfigDigitalFilter>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80021e4:	f000 fafe 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20025a60 	.word	0x20025a60
 80021f0:	40005c00 	.word	0x40005c00
 80021f4:	000186a0 	.word	0x000186a0

080021f8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b09a      	sub	sp, #104	@ 0x68
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80021fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002202:	2234      	movs	r2, #52	@ 0x34
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f004 fd7e 	bl	8006d08 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800220c:	463b      	mov	r3, r7
 800220e:	2234      	movs	r2, #52	@ 0x34
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f004 fd78 	bl	8006d08 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002218:	4b4e      	ldr	r3, [pc, #312]	@ (8002354 <MX_LTDC_Init+0x15c>)
 800221a:	4a4f      	ldr	r2, [pc, #316]	@ (8002358 <MX_LTDC_Init+0x160>)
 800221c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800221e:	4b4d      	ldr	r3, [pc, #308]	@ (8002354 <MX_LTDC_Init+0x15c>)
 8002220:	2200      	movs	r2, #0
 8002222:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002224:	4b4b      	ldr	r3, [pc, #300]	@ (8002354 <MX_LTDC_Init+0x15c>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800222a:	4b4a      	ldr	r3, [pc, #296]	@ (8002354 <MX_LTDC_Init+0x15c>)
 800222c:	2200      	movs	r2, #0
 800222e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002230:	4b48      	ldr	r3, [pc, #288]	@ (8002354 <MX_LTDC_Init+0x15c>)
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8002236:	4b47      	ldr	r3, [pc, #284]	@ (8002354 <MX_LTDC_Init+0x15c>)
 8002238:	2207      	movs	r2, #7
 800223a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800223c:	4b45      	ldr	r3, [pc, #276]	@ (8002354 <MX_LTDC_Init+0x15c>)
 800223e:	2203      	movs	r2, #3
 8002240:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8002242:	4b44      	ldr	r3, [pc, #272]	@ (8002354 <MX_LTDC_Init+0x15c>)
 8002244:	220e      	movs	r2, #14
 8002246:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8002248:	4b42      	ldr	r3, [pc, #264]	@ (8002354 <MX_LTDC_Init+0x15c>)
 800224a:	2205      	movs	r2, #5
 800224c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800224e:	4b41      	ldr	r3, [pc, #260]	@ (8002354 <MX_LTDC_Init+0x15c>)
 8002250:	f240 228e 	movw	r2, #654	@ 0x28e
 8002254:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8002256:	4b3f      	ldr	r3, [pc, #252]	@ (8002354 <MX_LTDC_Init+0x15c>)
 8002258:	f240 12e5 	movw	r2, #485	@ 0x1e5
 800225c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 800225e:	4b3d      	ldr	r3, [pc, #244]	@ (8002354 <MX_LTDC_Init+0x15c>)
 8002260:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8002264:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8002266:	4b3b      	ldr	r3, [pc, #236]	@ (8002354 <MX_LTDC_Init+0x15c>)
 8002268:	f240 12e7 	movw	r2, #487	@ 0x1e7
 800226c:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800226e:	4b39      	ldr	r3, [pc, #228]	@ (8002354 <MX_LTDC_Init+0x15c>)
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002276:	4b37      	ldr	r3, [pc, #220]	@ (8002354 <MX_LTDC_Init+0x15c>)
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800227e:	4b35      	ldr	r3, [pc, #212]	@ (8002354 <MX_LTDC_Init+0x15c>)
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002286:	4833      	ldr	r0, [pc, #204]	@ (8002354 <MX_LTDC_Init+0x15c>)
 8002288:	f002 fe52 	bl	8004f30 <HAL_LTDC_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8002292:	f000 faa7 	bl	80027e4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80022a6:	2300      	movs	r3, #0
 80022a8:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80022b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022b6:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80022b8:	2305      	movs	r3, #5
 80022ba:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80022da:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022de:	2200      	movs	r2, #0
 80022e0:	4619      	mov	r1, r3
 80022e2:	481c      	ldr	r0, [pc, #112]	@ (8002354 <MX_LTDC_Init+0x15c>)
 80022e4:	f002 fef4 	bl	80050d0 <HAL_LTDC_ConfigLayer>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80022ee:	f000 fa79 	bl	80027e4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800230e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002312:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002314:	2305      	movs	r3, #5
 8002316:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002336:	463b      	mov	r3, r7
 8002338:	2201      	movs	r2, #1
 800233a:	4619      	mov	r1, r3
 800233c:	4805      	ldr	r0, [pc, #20]	@ (8002354 <MX_LTDC_Init+0x15c>)
 800233e:	f002 fec7 	bl	80050d0 <HAL_LTDC_ConfigLayer>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8002348:	f000 fa4c 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800234c:	bf00      	nop
 800234e:	3768      	adds	r7, #104	@ 0x68
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20025ab4 	.word	0x20025ab4
 8002358:	40016800 	.word	0x40016800

0800235c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002360:	4b06      	ldr	r3, [pc, #24]	@ (800237c <MX_RNG_Init+0x20>)
 8002362:	4a07      	ldr	r2, [pc, #28]	@ (8002380 <MX_RNG_Init+0x24>)
 8002364:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002366:	4805      	ldr	r0, [pc, #20]	@ (800237c <MX_RNG_Init+0x20>)
 8002368:	f003 fecc 	bl	8006104 <HAL_RNG_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002372:	f000 fa37 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20025b5c 	.word	0x20025b5c
 8002380:	50060800 	.word	0x50060800

08002384 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002388:	4b17      	ldr	r3, [pc, #92]	@ (80023e8 <MX_SPI5_Init+0x64>)
 800238a:	4a18      	ldr	r2, [pc, #96]	@ (80023ec <MX_SPI5_Init+0x68>)
 800238c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800238e:	4b16      	ldr	r3, [pc, #88]	@ (80023e8 <MX_SPI5_Init+0x64>)
 8002390:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002394:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002396:	4b14      	ldr	r3, [pc, #80]	@ (80023e8 <MX_SPI5_Init+0x64>)
 8002398:	2200      	movs	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800239c:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <MX_SPI5_Init+0x64>)
 800239e:	2200      	movs	r2, #0
 80023a0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023a2:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <MX_SPI5_Init+0x64>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023a8:	4b0f      	ldr	r3, [pc, #60]	@ (80023e8 <MX_SPI5_Init+0x64>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80023ae:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <MX_SPI5_Init+0x64>)
 80023b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023b4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023b6:	4b0c      	ldr	r3, [pc, #48]	@ (80023e8 <MX_SPI5_Init+0x64>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023bc:	4b0a      	ldr	r3, [pc, #40]	@ (80023e8 <MX_SPI5_Init+0x64>)
 80023be:	2200      	movs	r2, #0
 80023c0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80023c2:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <MX_SPI5_Init+0x64>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023c8:	4b07      	ldr	r3, [pc, #28]	@ (80023e8 <MX_SPI5_Init+0x64>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80023ce:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <MX_SPI5_Init+0x64>)
 80023d0:	220a      	movs	r2, #10
 80023d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80023d4:	4804      	ldr	r0, [pc, #16]	@ (80023e8 <MX_SPI5_Init+0x64>)
 80023d6:	f003 febf 	bl	8006158 <HAL_SPI_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80023e0:	f000 fa00 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20025b6c 	.word	0x20025b6c
 80023ec:	40015000 	.word	0x40015000

080023f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023f6:	f107 0308 	add.w	r3, r7, #8
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	605a      	str	r2, [r3, #4]
 8002400:	609a      	str	r2, [r3, #8]
 8002402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002404:	463b      	mov	r3, r7
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800240c:	4b1d      	ldr	r3, [pc, #116]	@ (8002484 <MX_TIM2_Init+0x94>)
 800240e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002412:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002414:	4b1b      	ldr	r3, [pc, #108]	@ (8002484 <MX_TIM2_Init+0x94>)
 8002416:	2200      	movs	r2, #0
 8002418:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800241a:	4b1a      	ldr	r3, [pc, #104]	@ (8002484 <MX_TIM2_Init+0x94>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002420:	4b18      	ldr	r3, [pc, #96]	@ (8002484 <MX_TIM2_Init+0x94>)
 8002422:	f04f 32ff 	mov.w	r2, #4294967295
 8002426:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002428:	4b16      	ldr	r3, [pc, #88]	@ (8002484 <MX_TIM2_Init+0x94>)
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800242e:	4b15      	ldr	r3, [pc, #84]	@ (8002484 <MX_TIM2_Init+0x94>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002434:	4813      	ldr	r0, [pc, #76]	@ (8002484 <MX_TIM2_Init+0x94>)
 8002436:	f004 f96f 	bl	8006718 <HAL_TIM_Base_Init>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002440:	f000 f9d0 	bl	80027e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002444:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002448:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800244a:	f107 0308 	add.w	r3, r7, #8
 800244e:	4619      	mov	r1, r3
 8002450:	480c      	ldr	r0, [pc, #48]	@ (8002484 <MX_TIM2_Init+0x94>)
 8002452:	f004 f9b0 	bl	80067b6 <HAL_TIM_ConfigClockSource>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800245c:	f000 f9c2 	bl	80027e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002460:	2300      	movs	r3, #0
 8002462:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002464:	2300      	movs	r3, #0
 8002466:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002468:	463b      	mov	r3, r7
 800246a:	4619      	mov	r1, r3
 800246c:	4805      	ldr	r0, [pc, #20]	@ (8002484 <MX_TIM2_Init+0x94>)
 800246e:	f004 fbaf 	bl	8006bd0 <HAL_TIMEx_MasterConfigSynchronization>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002478:	f000 f9b4 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800247c:	bf00      	nop
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20025bc4 	.word	0x20025bc4

08002488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08e      	sub	sp, #56	@ 0x38
 800248c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
 800249c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	623b      	str	r3, [r7, #32]
 80024a2:	4bb2      	ldr	r3, [pc, #712]	@ (800276c <MX_GPIO_Init+0x2e4>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	4ab1      	ldr	r2, [pc, #708]	@ (800276c <MX_GPIO_Init+0x2e4>)
 80024a8:	f043 0304 	orr.w	r3, r3, #4
 80024ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ae:	4baf      	ldr	r3, [pc, #700]	@ (800276c <MX_GPIO_Init+0x2e4>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	623b      	str	r3, [r7, #32]
 80024b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	4bab      	ldr	r3, [pc, #684]	@ (800276c <MX_GPIO_Init+0x2e4>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	4aaa      	ldr	r2, [pc, #680]	@ (800276c <MX_GPIO_Init+0x2e4>)
 80024c4:	f043 0320 	orr.w	r3, r3, #32
 80024c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ca:	4ba8      	ldr	r3, [pc, #672]	@ (800276c <MX_GPIO_Init+0x2e4>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	4ba4      	ldr	r3, [pc, #656]	@ (800276c <MX_GPIO_Init+0x2e4>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024de:	4aa3      	ldr	r2, [pc, #652]	@ (800276c <MX_GPIO_Init+0x2e4>)
 80024e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e6:	4ba1      	ldr	r3, [pc, #644]	@ (800276c <MX_GPIO_Init+0x2e4>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ee:	61bb      	str	r3, [r7, #24]
 80024f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	4b9d      	ldr	r3, [pc, #628]	@ (800276c <MX_GPIO_Init+0x2e4>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	4a9c      	ldr	r2, [pc, #624]	@ (800276c <MX_GPIO_Init+0x2e4>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6313      	str	r3, [r2, #48]	@ 0x30
 8002502:	4b9a      	ldr	r3, [pc, #616]	@ (800276c <MX_GPIO_Init+0x2e4>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	4b96      	ldr	r3, [pc, #600]	@ (800276c <MX_GPIO_Init+0x2e4>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	4a95      	ldr	r2, [pc, #596]	@ (800276c <MX_GPIO_Init+0x2e4>)
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	6313      	str	r3, [r2, #48]	@ 0x30
 800251e:	4b93      	ldr	r3, [pc, #588]	@ (800276c <MX_GPIO_Init+0x2e4>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	4b8f      	ldr	r3, [pc, #572]	@ (800276c <MX_GPIO_Init+0x2e4>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	4a8e      	ldr	r2, [pc, #568]	@ (800276c <MX_GPIO_Init+0x2e4>)
 8002534:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002538:	6313      	str	r3, [r2, #48]	@ 0x30
 800253a:	4b8c      	ldr	r3, [pc, #560]	@ (800276c <MX_GPIO_Init+0x2e4>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	4b88      	ldr	r3, [pc, #544]	@ (800276c <MX_GPIO_Init+0x2e4>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	4a87      	ldr	r2, [pc, #540]	@ (800276c <MX_GPIO_Init+0x2e4>)
 8002550:	f043 0310 	orr.w	r3, r3, #16
 8002554:	6313      	str	r3, [r2, #48]	@ 0x30
 8002556:	4b85      	ldr	r3, [pc, #532]	@ (800276c <MX_GPIO_Init+0x2e4>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	607b      	str	r3, [r7, #4]
 8002566:	4b81      	ldr	r3, [pc, #516]	@ (800276c <MX_GPIO_Init+0x2e4>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	4a80      	ldr	r2, [pc, #512]	@ (800276c <MX_GPIO_Init+0x2e4>)
 800256c:	f043 0308 	orr.w	r3, r3, #8
 8002570:	6313      	str	r3, [r2, #48]	@ 0x30
 8002572:	4b7e      	ldr	r3, [pc, #504]	@ (800276c <MX_GPIO_Init+0x2e4>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800257e:	2200      	movs	r2, #0
 8002580:	2116      	movs	r1, #22
 8002582:	487b      	ldr	r0, [pc, #492]	@ (8002770 <MX_GPIO_Init+0x2e8>)
 8002584:	f001 fc1a 	bl	8003dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002588:	2200      	movs	r2, #0
 800258a:	2180      	movs	r1, #128	@ 0x80
 800258c:	4879      	ldr	r0, [pc, #484]	@ (8002774 <MX_GPIO_Init+0x2ec>)
 800258e:	f001 fc15 	bl	8003dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002592:	2200      	movs	r2, #0
 8002594:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002598:	4877      	ldr	r0, [pc, #476]	@ (8002778 <MX_GPIO_Init+0x2f0>)
 800259a:	f001 fc0f 	bl	8003dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800259e:	2200      	movs	r2, #0
 80025a0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80025a4:	4875      	ldr	r0, [pc, #468]	@ (800277c <MX_GPIO_Init+0x2f4>)
 80025a6:	f001 fc09 	bl	8003dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80025aa:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80025ae:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b8:	2303      	movs	r3, #3
 80025ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025bc:	230c      	movs	r3, #12
 80025be:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025c4:	4619      	mov	r1, r3
 80025c6:	486e      	ldr	r0, [pc, #440]	@ (8002780 <MX_GPIO_Init+0x2f8>)
 80025c8:	f001 f940 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80025cc:	2301      	movs	r3, #1
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d0:	2302      	movs	r3, #2
 80025d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d8:	2303      	movs	r3, #3
 80025da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025dc:	230c      	movs	r3, #12
 80025de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80025e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025e4:	4619      	mov	r1, r3
 80025e6:	4862      	ldr	r0, [pc, #392]	@ (8002770 <MX_GPIO_Init+0x2e8>)
 80025e8:	f001 f930 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80025ec:	2316      	movs	r3, #22
 80025ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f0:	2301      	movs	r3, #1
 80025f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f8:	2300      	movs	r3, #0
 80025fa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002600:	4619      	mov	r1, r3
 8002602:	485b      	ldr	r0, [pc, #364]	@ (8002770 <MX_GPIO_Init+0x2e8>)
 8002604:	f001 f922 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002608:	f248 0307 	movw	r3, #32775	@ 0x8007
 800260c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800260e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002612:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002618:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800261c:	4619      	mov	r1, r3
 800261e:	4855      	ldr	r0, [pc, #340]	@ (8002774 <MX_GPIO_Init+0x2ec>)
 8002620:	f001 f914 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002624:	2380      	movs	r3, #128	@ 0x80
 8002626:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002628:	2301      	movs	r3, #1
 800262a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	2300      	movs	r3, #0
 8002632:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002638:	4619      	mov	r1, r3
 800263a:	484e      	ldr	r0, [pc, #312]	@ (8002774 <MX_GPIO_Init+0x2ec>)
 800263c:	f001 f906 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002640:	2320      	movs	r3, #32
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002644:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002648:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800264e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002652:	4619      	mov	r1, r3
 8002654:	4846      	ldr	r0, [pc, #280]	@ (8002770 <MX_GPIO_Init+0x2e8>)
 8002656:	f001 f8f9 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800265a:	2304      	movs	r3, #4
 800265c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800265e:	2300      	movs	r3, #0
 8002660:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800266a:	4619      	mov	r1, r3
 800266c:	4845      	ldr	r0, [pc, #276]	@ (8002784 <MX_GPIO_Init+0x2fc>)
 800266e:	f001 f8ed 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002672:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002676:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	2302      	movs	r3, #2
 800267a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002680:	2303      	movs	r3, #3
 8002682:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002684:	230c      	movs	r3, #12
 8002686:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800268c:	4619      	mov	r1, r3
 800268e:	483b      	ldr	r0, [pc, #236]	@ (800277c <MX_GPIO_Init+0x2f4>)
 8002690:	f001 f8dc 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002694:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002698:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a2:	2303      	movs	r3, #3
 80026a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026a6:	230c      	movs	r3, #12
 80026a8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026ae:	4619      	mov	r1, r3
 80026b0:	4835      	ldr	r0, [pc, #212]	@ (8002788 <MX_GPIO_Init+0x300>)
 80026b2:	f001 f8cb 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80026b6:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c4:	2300      	movs	r3, #0
 80026c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80026c8:	230c      	movs	r3, #12
 80026ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026d0:	4619      	mov	r1, r3
 80026d2:	482c      	ldr	r0, [pc, #176]	@ (8002784 <MX_GPIO_Init+0x2fc>)
 80026d4:	f001 f8ba 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80026d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026de:	2300      	movs	r3, #0
 80026e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80026e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026ea:	4619      	mov	r1, r3
 80026ec:	4825      	ldr	r0, [pc, #148]	@ (8002784 <MX_GPIO_Init+0x2fc>)
 80026ee:	f001 f8ad 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80026f2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80026f6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002700:	2303      	movs	r3, #3
 8002702:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002704:	230c      	movs	r3, #12
 8002706:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002708:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800270c:	4619      	mov	r1, r3
 800270e:	481a      	ldr	r0, [pc, #104]	@ (8002778 <MX_GPIO_Init+0x2f0>)
 8002710:	f001 f89c 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002714:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002718:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800271a:	2300      	movs	r3, #0
 800271c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002726:	4619      	mov	r1, r3
 8002728:	4813      	ldr	r0, [pc, #76]	@ (8002778 <MX_GPIO_Init+0x2f0>)
 800272a:	f001 f88f 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800272e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002732:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002734:	2301      	movs	r3, #1
 8002736:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273c:	2300      	movs	r3, #0
 800273e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002740:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002744:	4619      	mov	r1, r3
 8002746:	480c      	ldr	r0, [pc, #48]	@ (8002778 <MX_GPIO_Init+0x2f0>)
 8002748:	f001 f880 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800274c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002750:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002752:	2302      	movs	r3, #2
 8002754:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275a:	2303      	movs	r3, #3
 800275c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800275e:	2307      	movs	r3, #7
 8002760:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002766:	4619      	mov	r1, r3
 8002768:	e010      	b.n	800278c <MX_GPIO_Init+0x304>
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800
 8002770:	40020800 	.word	0x40020800
 8002774:	40020000 	.word	0x40020000
 8002778:	40020c00 	.word	0x40020c00
 800277c:	40021800 	.word	0x40021800
 8002780:	40021400 	.word	0x40021400
 8002784:	40020400 	.word	0x40020400
 8002788:	40021000 	.word	0x40021000
 800278c:	4812      	ldr	r0, [pc, #72]	@ (80027d8 <MX_GPIO_Init+0x350>)
 800278e:	f001 f85d 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002792:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002798:	2301      	movs	r3, #1
 800279a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a0:	2300      	movs	r3, #0
 80027a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027a8:	4619      	mov	r1, r3
 80027aa:	480c      	ldr	r0, [pc, #48]	@ (80027dc <MX_GPIO_Init+0x354>)
 80027ac:	f001 f84e 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80027b0:	2360      	movs	r3, #96	@ 0x60
 80027b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027bc:	2303      	movs	r3, #3
 80027be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027c0:	230c      	movs	r3, #12
 80027c2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027c8:	4619      	mov	r1, r3
 80027ca:	4805      	ldr	r0, [pc, #20]	@ (80027e0 <MX_GPIO_Init+0x358>)
 80027cc:	f001 f83e 	bl	800384c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027d0:	bf00      	nop
 80027d2:	3738      	adds	r7, #56	@ 0x38
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40020000 	.word	0x40020000
 80027dc:	40021800 	.word	0x40021800
 80027e0:	40020400 	.word	0x40020400

080027e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80027e8:	b672      	cpsid	i
}
 80027ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027ec:	bf00      	nop
 80027ee:	e7fd      	b.n	80027ec <Error_Handler+0x8>

080027f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	4b10      	ldr	r3, [pc, #64]	@ (800283c <HAL_MspInit+0x4c>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fe:	4a0f      	ldr	r2, [pc, #60]	@ (800283c <HAL_MspInit+0x4c>)
 8002800:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002804:	6453      	str	r3, [r2, #68]	@ 0x44
 8002806:	4b0d      	ldr	r3, [pc, #52]	@ (800283c <HAL_MspInit+0x4c>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	603b      	str	r3, [r7, #0]
 8002816:	4b09      	ldr	r3, [pc, #36]	@ (800283c <HAL_MspInit+0x4c>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	4a08      	ldr	r2, [pc, #32]	@ (800283c <HAL_MspInit+0x4c>)
 800281c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002820:	6413      	str	r3, [r2, #64]	@ 0x40
 8002822:	4b06      	ldr	r3, [pc, #24]	@ (800283c <HAL_MspInit+0x4c>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800282e:	2007      	movs	r0, #7
 8002830:	f000 ffbc 	bl	80037ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40023800 	.word	0x40023800

08002840 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	@ 0x28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a29      	ldr	r2, [pc, #164]	@ (8002904 <HAL_I2C_MspInit+0xc4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d14b      	bne.n	80028fa <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	4b28      	ldr	r3, [pc, #160]	@ (8002908 <HAL_I2C_MspInit+0xc8>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	4a27      	ldr	r2, [pc, #156]	@ (8002908 <HAL_I2C_MspInit+0xc8>)
 800286c:	f043 0304 	orr.w	r3, r3, #4
 8002870:	6313      	str	r3, [r2, #48]	@ 0x30
 8002872:	4b25      	ldr	r3, [pc, #148]	@ (8002908 <HAL_I2C_MspInit+0xc8>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	4b21      	ldr	r3, [pc, #132]	@ (8002908 <HAL_I2C_MspInit+0xc8>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	4a20      	ldr	r2, [pc, #128]	@ (8002908 <HAL_I2C_MspInit+0xc8>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6313      	str	r3, [r2, #48]	@ 0x30
 800288e:	4b1e      	ldr	r3, [pc, #120]	@ (8002908 <HAL_I2C_MspInit+0xc8>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800289a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800289e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a0:	2312      	movs	r3, #18
 80028a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028ac:	2304      	movs	r3, #4
 80028ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	4619      	mov	r1, r3
 80028b6:	4815      	ldr	r0, [pc, #84]	@ (800290c <HAL_I2C_MspInit+0xcc>)
 80028b8:	f000 ffc8 	bl	800384c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80028bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028c2:	2312      	movs	r3, #18
 80028c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ca:	2300      	movs	r3, #0
 80028cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028ce:	2304      	movs	r3, #4
 80028d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80028d2:	f107 0314 	add.w	r3, r7, #20
 80028d6:	4619      	mov	r1, r3
 80028d8:	480d      	ldr	r0, [pc, #52]	@ (8002910 <HAL_I2C_MspInit+0xd0>)
 80028da:	f000 ffb7 	bl	800384c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	4b09      	ldr	r3, [pc, #36]	@ (8002908 <HAL_I2C_MspInit+0xc8>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	4a08      	ldr	r2, [pc, #32]	@ (8002908 <HAL_I2C_MspInit+0xc8>)
 80028e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ee:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <HAL_I2C_MspInit+0xc8>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80028fa:	bf00      	nop
 80028fc:	3728      	adds	r7, #40	@ 0x28
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40005c00 	.word	0x40005c00
 8002908:	40023800 	.word	0x40023800
 800290c:	40020800 	.word	0x40020800
 8002910:	40020000 	.word	0x40020000

08002914 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b09a      	sub	sp, #104	@ 0x68
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800292c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002930:	2230      	movs	r2, #48	@ 0x30
 8002932:	2100      	movs	r1, #0
 8002934:	4618      	mov	r0, r3
 8002936:	f004 f9e7 	bl	8006d08 <memset>
  if(hltdc->Instance==LTDC)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a81      	ldr	r2, [pc, #516]	@ (8002b44 <HAL_LTDC_MspInit+0x230>)
 8002940:	4293      	cmp	r3, r2
 8002942:	f040 80fb 	bne.w	8002b3c <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002946:	2308      	movs	r3, #8
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 800294a:	23c8      	movs	r3, #200	@ 0xc8
 800294c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800294e:	2302      	movs	r3, #2
 8002950:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8002952:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002956:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002958:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800295c:	4618      	mov	r0, r3
 800295e:	f003 fa11 	bl	8005d84 <HAL_RCCEx_PeriphCLKConfig>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002968:	f7ff ff3c 	bl	80027e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800296c:	2300      	movs	r3, #0
 800296e:	623b      	str	r3, [r7, #32]
 8002970:	4b75      	ldr	r3, [pc, #468]	@ (8002b48 <HAL_LTDC_MspInit+0x234>)
 8002972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002974:	4a74      	ldr	r2, [pc, #464]	@ (8002b48 <HAL_LTDC_MspInit+0x234>)
 8002976:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800297a:	6453      	str	r3, [r2, #68]	@ 0x44
 800297c:	4b72      	ldr	r3, [pc, #456]	@ (8002b48 <HAL_LTDC_MspInit+0x234>)
 800297e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002980:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002984:	623b      	str	r3, [r7, #32]
 8002986:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	4b6e      	ldr	r3, [pc, #440]	@ (8002b48 <HAL_LTDC_MspInit+0x234>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002990:	4a6d      	ldr	r2, [pc, #436]	@ (8002b48 <HAL_LTDC_MspInit+0x234>)
 8002992:	f043 0320 	orr.w	r3, r3, #32
 8002996:	6313      	str	r3, [r2, #48]	@ 0x30
 8002998:	4b6b      	ldr	r3, [pc, #428]	@ (8002b48 <HAL_LTDC_MspInit+0x234>)
 800299a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299c:	f003 0320 	and.w	r3, r3, #32
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a4:	2300      	movs	r3, #0
 80029a6:	61bb      	str	r3, [r7, #24]
 80029a8:	4b67      	ldr	r3, [pc, #412]	@ (8002b48 <HAL_LTDC_MspInit+0x234>)
 80029aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ac:	4a66      	ldr	r2, [pc, #408]	@ (8002b48 <HAL_LTDC_MspInit+0x234>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b4:	4b64      	ldr	r3, [pc, #400]	@ (8002b48 <HAL_LTDC_MspInit+0x234>)
 80029b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	4b60      	ldr	r3, [pc, #384]	@ (8002b48 <HAL_LTDC_MspInit+0x234>)
 80029c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c8:	4a5f      	ldr	r2, [pc, #380]	@ (8002b48 <HAL_LTDC_MspInit+0x234>)
 80029ca:	f043 0302 	orr.w	r3, r3, #2
 80029ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d0:	4b5d      	ldr	r3, [pc, #372]	@ (8002b48 <HAL_LTDC_MspInit+0x234>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80029dc:	2300      	movs	r3, #0
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	4b59      	ldr	r3, [pc, #356]	@ (8002b48 <HAL_LTDC_MspInit+0x234>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e4:	4a58      	ldr	r2, [pc, #352]	@ (8002b48 <HAL_LTDC_MspInit+0x234>)
 80029e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ec:	4b56      	ldr	r3, [pc, #344]	@ (8002b48 <HAL_LTDC_MspInit+0x234>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	4b52      	ldr	r3, [pc, #328]	@ (8002b48 <HAL_LTDC_MspInit+0x234>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a00:	4a51      	ldr	r2, [pc, #324]	@ (8002b48 <HAL_LTDC_MspInit+0x234>)
 8002a02:	f043 0304 	orr.w	r3, r3, #4
 8002a06:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a08:	4b4f      	ldr	r3, [pc, #316]	@ (8002b48 <HAL_LTDC_MspInit+0x234>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a14:	2300      	movs	r3, #0
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	4b4b      	ldr	r3, [pc, #300]	@ (8002b48 <HAL_LTDC_MspInit+0x234>)
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1c:	4a4a      	ldr	r2, [pc, #296]	@ (8002b48 <HAL_LTDC_MspInit+0x234>)
 8002a1e:	f043 0308 	orr.w	r3, r3, #8
 8002a22:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a24:	4b48      	ldr	r3, [pc, #288]	@ (8002b48 <HAL_LTDC_MspInit+0x234>)
 8002a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002a30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a34:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a36:	2302      	movs	r3, #2
 8002a38:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a42:	230e      	movs	r3, #14
 8002a44:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002a46:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	483f      	ldr	r0, [pc, #252]	@ (8002b4c <HAL_LTDC_MspInit+0x238>)
 8002a4e:	f000 fefd 	bl	800384c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002a52:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002a56:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a60:	2300      	movs	r3, #0
 8002a62:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a64:	230e      	movs	r3, #14
 8002a66:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4838      	ldr	r0, [pc, #224]	@ (8002b50 <HAL_LTDC_MspInit+0x23c>)
 8002a70:	f000 feec 	bl	800384c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002a74:	2303      	movs	r3, #3
 8002a76:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a80:	2300      	movs	r3, #0
 8002a82:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002a84:	2309      	movs	r3, #9
 8002a86:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a88:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4831      	ldr	r0, [pc, #196]	@ (8002b54 <HAL_LTDC_MspInit+0x240>)
 8002a90:	f000 fedc 	bl	800384c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002a94:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002a98:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002aa6:	230e      	movs	r3, #14
 8002aa8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aaa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4828      	ldr	r0, [pc, #160]	@ (8002b54 <HAL_LTDC_MspInit+0x240>)
 8002ab2:	f000 fecb 	bl	800384c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002ab6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002aba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ac8:	230e      	movs	r3, #14
 8002aca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002acc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4821      	ldr	r0, [pc, #132]	@ (8002b58 <HAL_LTDC_MspInit+0x244>)
 8002ad4:	f000 feba 	bl	800384c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002ad8:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002adc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002aea:	230e      	movs	r3, #14
 8002aec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002af2:	4619      	mov	r1, r3
 8002af4:	4819      	ldr	r0, [pc, #100]	@ (8002b5c <HAL_LTDC_MspInit+0x248>)
 8002af6:	f000 fea9 	bl	800384c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002afa:	2348      	movs	r3, #72	@ 0x48
 8002afc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	2302      	movs	r3, #2
 8002b00:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b0a:	230e      	movs	r3, #14
 8002b0c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b0e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b12:	4619      	mov	r1, r3
 8002b14:	4812      	ldr	r0, [pc, #72]	@ (8002b60 <HAL_LTDC_MspInit+0x24c>)
 8002b16:	f000 fe99 	bl	800384c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002b1a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002b1e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b20:	2302      	movs	r3, #2
 8002b22:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002b2c:	2309      	movs	r3, #9
 8002b2e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b30:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b34:	4619      	mov	r1, r3
 8002b36:	4808      	ldr	r0, [pc, #32]	@ (8002b58 <HAL_LTDC_MspInit+0x244>)
 8002b38:	f000 fe88 	bl	800384c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002b3c:	bf00      	nop
 8002b3e:	3768      	adds	r7, #104	@ 0x68
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40016800 	.word	0x40016800
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40021400 	.word	0x40021400
 8002b50:	40020000 	.word	0x40020000
 8002b54:	40020400 	.word	0x40020400
 8002b58:	40021800 	.word	0x40021800
 8002b5c:	40020800 	.word	0x40020800
 8002b60:	40020c00 	.word	0x40020c00

08002b64 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a0b      	ldr	r2, [pc, #44]	@ (8002ba0 <HAL_RNG_MspInit+0x3c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d10d      	bne.n	8002b92 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba4 <HAL_RNG_MspInit+0x40>)
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b7e:	4a09      	ldr	r2, [pc, #36]	@ (8002ba4 <HAL_RNG_MspInit+0x40>)
 8002b80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b84:	6353      	str	r3, [r2, #52]	@ 0x34
 8002b86:	4b07      	ldr	r3, [pc, #28]	@ (8002ba4 <HAL_RNG_MspInit+0x40>)
 8002b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002b92:	bf00      	nop
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	50060800 	.word	0x50060800
 8002ba4:	40023800 	.word	0x40023800

08002ba8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	@ 0x28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	f107 0314 	add.w	r3, r7, #20
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a19      	ldr	r2, [pc, #100]	@ (8002c2c <HAL_SPI_MspInit+0x84>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d12c      	bne.n	8002c24 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	4b18      	ldr	r3, [pc, #96]	@ (8002c30 <HAL_SPI_MspInit+0x88>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	4a17      	ldr	r2, [pc, #92]	@ (8002c30 <HAL_SPI_MspInit+0x88>)
 8002bd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bda:	4b15      	ldr	r3, [pc, #84]	@ (8002c30 <HAL_SPI_MspInit+0x88>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	4b11      	ldr	r3, [pc, #68]	@ (8002c30 <HAL_SPI_MspInit+0x88>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bee:	4a10      	ldr	r2, [pc, #64]	@ (8002c30 <HAL_SPI_MspInit+0x88>)
 8002bf0:	f043 0320 	orr.w	r3, r3, #32
 8002bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c30 <HAL_SPI_MspInit+0x88>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002c02:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c10:	2300      	movs	r3, #0
 8002c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002c14:	2305      	movs	r3, #5
 8002c16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4805      	ldr	r0, [pc, #20]	@ (8002c34 <HAL_SPI_MspInit+0x8c>)
 8002c20:	f000 fe14 	bl	800384c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002c24:	bf00      	nop
 8002c26:	3728      	adds	r7, #40	@ 0x28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40015000 	.word	0x40015000
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40021400 	.word	0x40021400

08002c38 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a08      	ldr	r2, [pc, #32]	@ (8002c68 <HAL_SPI_MspDeInit+0x30>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d10a      	bne.n	8002c60 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002c4a:	4b08      	ldr	r3, [pc, #32]	@ (8002c6c <HAL_SPI_MspDeInit+0x34>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4e:	4a07      	ldr	r2, [pc, #28]	@ (8002c6c <HAL_SPI_MspDeInit+0x34>)
 8002c50:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002c54:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002c56:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002c5a:	4805      	ldr	r0, [pc, #20]	@ (8002c70 <HAL_SPI_MspDeInit+0x38>)
 8002c5c:	f000 ffa2 	bl	8003ba4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002c60:	bf00      	nop
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40015000 	.word	0x40015000
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40021400 	.word	0x40021400

08002c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c84:	d10d      	bne.n	8002ca2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <HAL_TIM_Base_MspInit+0x3c>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	4a08      	ldr	r2, [pc, #32]	@ (8002cb0 <HAL_TIM_Base_MspInit+0x3c>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c96:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <HAL_TIM_Base_MspInit+0x3c>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800

08002cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cb8:	bf00      	nop
 8002cba:	e7fd      	b.n	8002cb8 <NMI_Handler+0x4>

08002cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cc0:	bf00      	nop
 8002cc2:	e7fd      	b.n	8002cc0 <HardFault_Handler+0x4>

08002cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cc8:	bf00      	nop
 8002cca:	e7fd      	b.n	8002cc8 <MemManage_Handler+0x4>

08002ccc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cd0:	bf00      	nop
 8002cd2:	e7fd      	b.n	8002cd0 <BusFault_Handler+0x4>

08002cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <UsageFault_Handler+0x4>

08002cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d0a:	f000 fc17 	bl	800353c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002d18:	f000 f9ce 	bl	80030b8 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002d1c:	f000 f98e 	bl	800303c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002d20:	2202      	movs	r2, #2
 8002d22:	2103      	movs	r1, #3
 8002d24:	2082      	movs	r0, #130	@ 0x82
 8002d26:	f000 fa1b 	bl	8003160 <I2C3_Write>
    HAL_Delay(5);
 8002d2a:	2005      	movs	r0, #5
 8002d2c:	f000 fc26 	bl	800357c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002d30:	2200      	movs	r2, #0
 8002d32:	2103      	movs	r1, #3
 8002d34:	2082      	movs	r0, #130	@ 0x82
 8002d36:	f000 fa13 	bl	8003160 <I2C3_Write>
    HAL_Delay(2);
 8002d3a:	2002      	movs	r0, #2
 8002d3c:	f000 fc1e 	bl	800357c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002d40:	1cba      	adds	r2, r7, #2
 8002d42:	2302      	movs	r3, #2
 8002d44:	2100      	movs	r1, #0
 8002d46:	2082      	movs	r0, #130	@ 0x82
 8002d48:	f000 fa5a 	bl	8003200 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002d4c:	887b      	ldrh	r3, [r7, #2]
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002d52:	887b      	ldrh	r3, [r7, #2]
 8002d54:	0a1b      	lsrs	r3, r3, #8
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	f640 0211 	movw	r2, #2065	@ 0x811
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d001      	beq.n	8002d6c <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e075      	b.n	8002e58 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	2103      	movs	r1, #3
 8002d70:	2082      	movs	r0, #130	@ 0x82
 8002d72:	f000 f9f5 	bl	8003160 <I2C3_Write>
    HAL_Delay(5);
 8002d76:	2005      	movs	r0, #5
 8002d78:	f000 fc00 	bl	800357c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2103      	movs	r1, #3
 8002d80:	2082      	movs	r0, #130	@ 0x82
 8002d82:	f000 f9ed 	bl	8003160 <I2C3_Write>
    HAL_Delay(2);
 8002d86:	2002      	movs	r0, #2
 8002d88:	f000 fbf8 	bl	800357c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002d8c:	2004      	movs	r0, #4
 8002d8e:	f000 f867 	bl	8002e60 <STMPE811_Read>
 8002d92:	4603      	mov	r3, r0
 8002d94:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002d96:	797b      	ldrb	r3, [r7, #5]
 8002d98:	f023 0301 	bic.w	r3, r3, #1
 8002d9c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002d9e:	797b      	ldrb	r3, [r7, #5]
 8002da0:	461a      	mov	r2, r3
 8002da2:	2104      	movs	r1, #4
 8002da4:	2082      	movs	r0, #130	@ 0x82
 8002da6:	f000 f9db 	bl	8003160 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002daa:	2004      	movs	r0, #4
 8002dac:	f000 f858 	bl	8002e60 <STMPE811_Read>
 8002db0:	4603      	mov	r3, r0
 8002db2:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002db4:	797b      	ldrb	r3, [r7, #5]
 8002db6:	f023 0302 	bic.w	r3, r3, #2
 8002dba:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002dbc:	797b      	ldrb	r3, [r7, #5]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2104      	movs	r1, #4
 8002dc2:	2082      	movs	r0, #130	@ 0x82
 8002dc4:	f000 f9cc 	bl	8003160 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002dc8:	2249      	movs	r2, #73	@ 0x49
 8002dca:	2120      	movs	r1, #32
 8002dcc:	2082      	movs	r0, #130	@ 0x82
 8002dce:	f000 f9c7 	bl	8003160 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002dd2:	2002      	movs	r0, #2
 8002dd4:	f000 fbd2 	bl	800357c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002dd8:	2201      	movs	r2, #1
 8002dda:	2121      	movs	r1, #33	@ 0x21
 8002ddc:	2082      	movs	r0, #130	@ 0x82
 8002dde:	f000 f9bf 	bl	8003160 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002de2:	2017      	movs	r0, #23
 8002de4:	f000 f83c 	bl	8002e60 <STMPE811_Read>
 8002de8:	4603      	mov	r3, r0
 8002dea:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002dec:	797b      	ldrb	r3, [r7, #5]
 8002dee:	f043 031e 	orr.w	r3, r3, #30
 8002df2:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002df4:	797b      	ldrb	r3, [r7, #5]
 8002df6:	461a      	mov	r2, r3
 8002df8:	2117      	movs	r1, #23
 8002dfa:	2082      	movs	r0, #130	@ 0x82
 8002dfc:	f000 f9b0 	bl	8003160 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002e00:	229a      	movs	r2, #154	@ 0x9a
 8002e02:	2141      	movs	r1, #65	@ 0x41
 8002e04:	2082      	movs	r0, #130	@ 0x82
 8002e06:	f000 f9ab 	bl	8003160 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	214a      	movs	r1, #74	@ 0x4a
 8002e0e:	2082      	movs	r0, #130	@ 0x82
 8002e10:	f000 f9a6 	bl	8003160 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002e14:	2201      	movs	r2, #1
 8002e16:	214b      	movs	r1, #75	@ 0x4b
 8002e18:	2082      	movs	r0, #130	@ 0x82
 8002e1a:	f000 f9a1 	bl	8003160 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002e1e:	2200      	movs	r2, #0
 8002e20:	214b      	movs	r1, #75	@ 0x4b
 8002e22:	2082      	movs	r0, #130	@ 0x82
 8002e24:	f000 f99c 	bl	8003160 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002e28:	2201      	movs	r2, #1
 8002e2a:	2156      	movs	r1, #86	@ 0x56
 8002e2c:	2082      	movs	r0, #130	@ 0x82
 8002e2e:	f000 f997 	bl	8003160 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002e32:	2201      	movs	r2, #1
 8002e34:	2158      	movs	r1, #88	@ 0x58
 8002e36:	2082      	movs	r0, #130	@ 0x82
 8002e38:	f000 f992 	bl	8003160 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	2140      	movs	r1, #64	@ 0x40
 8002e40:	2082      	movs	r0, #130	@ 0x82
 8002e42:	f000 f98d 	bl	8003160 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002e46:	22ff      	movs	r2, #255	@ 0xff
 8002e48:	210b      	movs	r1, #11
 8002e4a:	2082      	movs	r0, #130	@ 0x82
 8002e4c:	f000 f988 	bl	8003160 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002e50:	20c8      	movs	r0, #200	@ 0xc8
 8002e52:	f000 fb93 	bl	800357c <HAL_Delay>

    return STMPE811_State_Ok;
 8002e56:	2302      	movs	r3, #2

}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002e6a:	f107 020f 	add.w	r2, r7, #15
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	4619      	mov	r1, r3
 8002e72:	2082      	movs	r0, #130	@ 0x82
 8002e74:	f000 f99e 	bl	80031b4 <I2C3_Read>

    return readData;
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b084      	sub	sp, #16
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	791a      	ldrb	r2, [r3, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002e92:	2040      	movs	r0, #64	@ 0x40
 8002e94:	f7ff ffe4 	bl	8002e60 <STMPE811_Read>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	db0e      	blt.n	8002ec2 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002eaa:	2201      	movs	r2, #1
 8002eac:	214b      	movs	r1, #75	@ 0x4b
 8002eae:	2082      	movs	r0, #130	@ 0x82
 8002eb0:	f000 f956 	bl	8003160 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	214b      	movs	r1, #75	@ 0x4b
 8002eb8:	2082      	movs	r0, #130	@ 0x82
 8002eba:	f000 f951 	bl	8003160 <I2C3_Write>

        return STMPE811_State_Released;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e0a7      	b.n	8003012 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	799b      	ldrb	r3, [r3, #6]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d117      	bne.n	8002efa <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 f9b8 	bl	8003244 <TM_STMPE811_ReadX>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	885b      	ldrh	r3, [r3, #2]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 fa0b 	bl	8003300 <TM_STMPE811_ReadY>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	805a      	strh	r2, [r3, #2]
 8002ef8:	e048      	b.n	8002f8c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	799b      	ldrb	r3, [r3, #6]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d112      	bne.n	8002f28 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 f99c 	bl	8003244 <TM_STMPE811_ReadX>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	461a      	mov	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	885b      	ldrh	r3, [r3, #2]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 f9f1 	bl	8003300 <TM_STMPE811_ReadY>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	461a      	mov	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	805a      	strh	r2, [r3, #2]
 8002f26:	e031      	b.n	8002f8c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	799b      	ldrb	r3, [r3, #6]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d115      	bne.n	8002f5c <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	885b      	ldrh	r3, [r3, #2]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 f985 	bl	8003244 <TM_STMPE811_ReadX>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f9da 	bl	8003300 <TM_STMPE811_ReadY>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002f52:	3301      	adds	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	801a      	strh	r2, [r3, #0]
 8002f5a:	e017      	b.n	8002f8c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	799b      	ldrb	r3, [r3, #6]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d113      	bne.n	8002f8c <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 f96b 	bl	8003244 <TM_STMPE811_ReadX>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 f9be 	bl	8003300 <TM_STMPE811_ReadY>
 8002f84:	4603      	mov	r3, r0
 8002f86:	461a      	mov	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	214b      	movs	r1, #75	@ 0x4b
 8002f90:	2082      	movs	r0, #130	@ 0x82
 8002f92:	f000 f8e5 	bl	8003160 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002f96:	2200      	movs	r2, #0
 8002f98:	214b      	movs	r1, #75	@ 0x4b
 8002f9a:	2082      	movs	r0, #130	@ 0x82
 8002f9c:	f000 f8e0 	bl	8003160 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	799b      	ldrb	r3, [r3, #6]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <STMPE811_ReadTouch+0x12e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	799b      	ldrb	r3, [r3, #6]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d115      	bne.n	8002fdc <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d027      	beq.n	8003008 <STMPE811_ReadTouch+0x186>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	2bee      	cmp	r3, #238	@ 0xee
 8002fbe:	d823      	bhi.n	8003008 <STMPE811_ReadTouch+0x186>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	885b      	ldrh	r3, [r3, #2]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d01f      	beq.n	8003008 <STMPE811_ReadTouch+0x186>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	885b      	ldrh	r3, [r3, #2]
 8002fcc:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002fd0:	d81a      	bhi.n	8003008 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	e01a      	b.n	8003012 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d012      	beq.n	800300a <STMPE811_ReadTouch+0x188>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002fec:	d80d      	bhi.n	800300a <STMPE811_ReadTouch+0x188>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	885b      	ldrh	r3, [r3, #2]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <STMPE811_ReadTouch+0x188>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	885b      	ldrh	r3, [r3, #2]
 8002ffa:	2bee      	cmp	r3, #238	@ 0xee
 8002ffc:	d805      	bhi.n	800300a <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8003004:	2300      	movs	r3, #0
 8003006:	e004      	b.n	8003012 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8003008:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8003010:	2301      	movs	r3, #1
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8003020:	4b05      	ldr	r3, [pc, #20]	@ (8003038 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8003028:	bf00      	nop
 800302a:	e7fd      	b.n	8003028 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	20025c60 	.word	0x20025c60

0800303c <I2C3_Init>:

static void I2C3_Init()
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	4b18      	ldr	r3, [pc, #96]	@ (80030a8 <I2C3_Init+0x6c>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304a:	4a17      	ldr	r2, [pc, #92]	@ (80030a8 <I2C3_Init+0x6c>)
 800304c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003050:	6413      	str	r3, [r2, #64]	@ 0x40
 8003052:	4b15      	ldr	r3, [pc, #84]	@ (80030a8 <I2C3_Init+0x6c>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800305e:	4b13      	ldr	r3, [pc, #76]	@ (80030ac <I2C3_Init+0x70>)
 8003060:	4a13      	ldr	r2, [pc, #76]	@ (80030b0 <I2C3_Init+0x74>)
 8003062:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8003064:	4b11      	ldr	r3, [pc, #68]	@ (80030ac <I2C3_Init+0x70>)
 8003066:	4a13      	ldr	r2, [pc, #76]	@ (80030b4 <I2C3_Init+0x78>)
 8003068:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800306a:	4b10      	ldr	r3, [pc, #64]	@ (80030ac <I2C3_Init+0x70>)
 800306c:	2200      	movs	r2, #0
 800306e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8003070:	4b0e      	ldr	r3, [pc, #56]	@ (80030ac <I2C3_Init+0x70>)
 8003072:	2200      	movs	r2, #0
 8003074:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003076:	4b0d      	ldr	r3, [pc, #52]	@ (80030ac <I2C3_Init+0x70>)
 8003078:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800307c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800307e:	4b0b      	ldr	r3, [pc, #44]	@ (80030ac <I2C3_Init+0x70>)
 8003080:	2200      	movs	r2, #0
 8003082:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003084:	4b09      	ldr	r3, [pc, #36]	@ (80030ac <I2C3_Init+0x70>)
 8003086:	2200      	movs	r2, #0
 8003088:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800308a:	4808      	ldr	r0, [pc, #32]	@ (80030ac <I2C3_Init+0x70>)
 800308c:	f000 feb0 	bl	8003df0 <HAL_I2C_Init>
 8003090:	4603      	mov	r3, r0
 8003092:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800309a:	bf00      	nop
 800309c:	e7fd      	b.n	800309a <I2C3_Init+0x5e>
    }
    return;
 800309e:	bf00      	nop
}
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40023800 	.word	0x40023800
 80030ac:	20025c0c 	.word	0x20025c0c
 80030b0:	40005c00 	.word	0x40005c00
 80030b4:	000186a0 	.word	0x000186a0

080030b8 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030be:	f107 030c 	add.w	r3, r7, #12
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]
 80030c8:	609a      	str	r2, [r3, #8]
 80030ca:	60da      	str	r2, [r3, #12]
 80030cc:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	4b20      	ldr	r3, [pc, #128]	@ (8003154 <I2C3_MspInit+0x9c>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003154 <I2C3_MspInit+0x9c>)
 80030d8:	f043 0304 	orr.w	r3, r3, #4
 80030dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030de:	4b1d      	ldr	r3, [pc, #116]	@ (8003154 <I2C3_MspInit+0x9c>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	4b19      	ldr	r3, [pc, #100]	@ (8003154 <I2C3_MspInit+0x9c>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	4a18      	ldr	r2, [pc, #96]	@ (8003154 <I2C3_MspInit+0x9c>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030fa:	4b16      	ldr	r3, [pc, #88]	@ (8003154 <I2C3_MspInit+0x9c>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	607b      	str	r3, [r7, #4]
 8003104:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003106:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800310a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800310c:	2312      	movs	r3, #18
 800310e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003114:	2300      	movs	r3, #0
 8003116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003118:	2304      	movs	r3, #4
 800311a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800311c:	f107 030c 	add.w	r3, r7, #12
 8003120:	4619      	mov	r1, r3
 8003122:	480d      	ldr	r0, [pc, #52]	@ (8003158 <I2C3_MspInit+0xa0>)
 8003124:	f000 fb92 	bl	800384c <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003128:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800312c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800312e:	2312      	movs	r3, #18
 8003130:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800313a:	2304      	movs	r3, #4
 800313c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800313e:	f107 030c 	add.w	r3, r7, #12
 8003142:	4619      	mov	r1, r3
 8003144:	4805      	ldr	r0, [pc, #20]	@ (800315c <I2C3_MspInit+0xa4>)
 8003146:	f000 fb81 	bl	800384c <HAL_GPIO_Init>
    
}
 800314a:	bf00      	nop
 800314c:	3720      	adds	r7, #32
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800
 8003158:	40020800 	.word	0x40020800
 800315c:	40020000 	.word	0x40020000

08003160 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af04      	add	r7, sp, #16
 8003166:	4603      	mov	r3, r0
 8003168:	80fb      	strh	r3, [r7, #6]
 800316a:	460b      	mov	r3, r1
 800316c:	717b      	strb	r3, [r7, #5]
 800316e:	4613      	mov	r3, r2
 8003170:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8003172:	793b      	ldrb	r3, [r7, #4]
 8003174:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003176:	797b      	ldrb	r3, [r7, #5]
 8003178:	b29a      	uxth	r2, r3
 800317a:	88f9      	ldrh	r1, [r7, #6]
 800317c:	4b0a      	ldr	r3, [pc, #40]	@ (80031a8 <I2C3_Write+0x48>)
 800317e:	9302      	str	r3, [sp, #8]
 8003180:	2301      	movs	r3, #1
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	f107 030f 	add.w	r3, r7, #15
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	2301      	movs	r3, #1
 800318c:	4807      	ldr	r0, [pc, #28]	@ (80031ac <I2C3_Write+0x4c>)
 800318e:	f000 ff73 	bl	8004078 <HAL_I2C_Mem_Write>
 8003192:	4603      	mov	r3, r0
 8003194:	461a      	mov	r2, r3
 8003196:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <I2C3_Write+0x50>)
 8003198:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800319a:	f7ff ff3f 	bl	800301c <verifyHAL_I2C_IS_OKAY>
}
 800319e:	bf00      	nop
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	0003d090 	.word	0x0003d090
 80031ac:	20025c0c 	.word	0x20025c0c
 80031b0:	20025c60 	.word	0x20025c60

080031b4 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af04      	add	r7, sp, #16
 80031ba:	4603      	mov	r3, r0
 80031bc:	603a      	str	r2, [r7, #0]
 80031be:	71fb      	strb	r3, [r7, #7]
 80031c0:	460b      	mov	r3, r1
 80031c2:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	b299      	uxth	r1, r3
 80031c8:	79bb      	ldrb	r3, [r7, #6]
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	4b09      	ldr	r3, [pc, #36]	@ (80031f4 <I2C3_Read+0x40>)
 80031ce:	9302      	str	r3, [sp, #8]
 80031d0:	2301      	movs	r3, #1
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	2301      	movs	r3, #1
 80031da:	4807      	ldr	r0, [pc, #28]	@ (80031f8 <I2C3_Read+0x44>)
 80031dc:	f001 f846 	bl	800426c <HAL_I2C_Mem_Read>
 80031e0:	4603      	mov	r3, r0
 80031e2:	461a      	mov	r2, r3
 80031e4:	4b05      	ldr	r3, [pc, #20]	@ (80031fc <I2C3_Read+0x48>)
 80031e6:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80031e8:	f7ff ff18 	bl	800301c <verifyHAL_I2C_IS_OKAY>
}
 80031ec:	bf00      	nop
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	0003d090 	.word	0x0003d090
 80031f8:	20025c0c 	.word	0x20025c0c
 80031fc:	20025c60 	.word	0x20025c60

08003200 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af04      	add	r7, sp, #16
 8003206:	603a      	str	r2, [r7, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	4603      	mov	r3, r0
 800320c:	71fb      	strb	r3, [r7, #7]
 800320e:	460b      	mov	r3, r1
 8003210:	71bb      	strb	r3, [r7, #6]
 8003212:	4613      	mov	r3, r2
 8003214:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	b299      	uxth	r1, r3
 800321a:	79bb      	ldrb	r3, [r7, #6]
 800321c:	b29a      	uxth	r2, r3
 800321e:	4b07      	ldr	r3, [pc, #28]	@ (800323c <I2C3_MulitByteRead+0x3c>)
 8003220:	9302      	str	r3, [sp, #8]
 8003222:	88bb      	ldrh	r3, [r7, #4]
 8003224:	9301      	str	r3, [sp, #4]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	2301      	movs	r3, #1
 800322c:	4804      	ldr	r0, [pc, #16]	@ (8003240 <I2C3_MulitByteRead+0x40>)
 800322e:	f001 f81d 	bl	800426c <HAL_I2C_Mem_Read>
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	0003d090 	.word	0x0003d090
 8003240:	20025c0c 	.word	0x20025c0c

08003244 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800324e:	204d      	movs	r0, #77	@ 0x4d
 8003250:	f7ff fe06 	bl	8002e60 <STMPE811_Read>
 8003254:	4603      	mov	r3, r0
 8003256:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8003258:	204e      	movs	r0, #78	@ 0x4e
 800325a:	f7ff fe01 	bl	8002e60 <STMPE811_Read>
 800325e:	4603      	mov	r3, r0
 8003260:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003262:	7a7b      	ldrb	r3, [r7, #9]
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	b21a      	sxth	r2, r3
 8003268:	7a3b      	ldrb	r3, [r7, #8]
 800326a:	b21b      	sxth	r3, r3
 800326c:	4313      	orrs	r3, r2
 800326e:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8003270:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003274:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003278:	4293      	cmp	r3, r2
 800327a:	dc06      	bgt.n	800328a <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 800327c:	89fb      	ldrh	r3, [r7, #14]
 800327e:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8003282:	330c      	adds	r3, #12
 8003284:	b29b      	uxth	r3, r3
 8003286:	81fb      	strh	r3, [r7, #14]
 8003288:	e005      	b.n	8003296 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 800328a:	89fb      	ldrh	r3, [r7, #14]
 800328c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8003290:	3308      	adds	r3, #8
 8003292:	b29b      	uxth	r3, r3
 8003294:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8003296:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800329a:	4a18      	ldr	r2, [pc, #96]	@ (80032fc <TM_STMPE811_ReadX+0xb8>)
 800329c:	fb82 1203 	smull	r1, r2, r2, r3
 80032a0:	441a      	add	r2, r3
 80032a2:	10d2      	asrs	r2, r2, #3
 80032a4:	17db      	asrs	r3, r3, #31
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80032aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032ae:	2bef      	cmp	r3, #239	@ 0xef
 80032b0:	dd02      	ble.n	80032b8 <TM_STMPE811_ReadX+0x74>
        val = 239;
 80032b2:	23ef      	movs	r3, #239	@ 0xef
 80032b4:	81fb      	strh	r3, [r7, #14]
 80032b6:	e005      	b.n	80032c4 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 80032b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	da01      	bge.n	80032c4 <TM_STMPE811_ReadX+0x80>
        val = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80032c4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80032c8:	88fb      	ldrh	r3, [r7, #6]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	dd05      	ble.n	80032da <TM_STMPE811_ReadX+0x96>
 80032ce:	89fa      	ldrh	r2, [r7, #14]
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	b21b      	sxth	r3, r3
 80032d8:	e004      	b.n	80032e4 <TM_STMPE811_ReadX+0xa0>
 80032da:	89fb      	ldrh	r3, [r7, #14]
 80032dc:	88fa      	ldrh	r2, [r7, #6]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	b21b      	sxth	r3, r3
 80032e4:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80032e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	dd01      	ble.n	80032f2 <TM_STMPE811_ReadX+0xae>
        return val;
 80032ee:	89fb      	ldrh	r3, [r7, #14]
 80032f0:	e000      	b.n	80032f4 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 80032f2:	88fb      	ldrh	r3, [r7, #6]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	88888889 	.word	0x88888889

08003300 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 800330a:	204f      	movs	r0, #79	@ 0x4f
 800330c:	f7ff fda8 	bl	8002e60 <STMPE811_Read>
 8003310:	4603      	mov	r3, r0
 8003312:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003314:	2050      	movs	r0, #80	@ 0x50
 8003316:	f7ff fda3 	bl	8002e60 <STMPE811_Read>
 800331a:	4603      	mov	r3, r0
 800331c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800331e:	7a7b      	ldrb	r3, [r7, #9]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	b21a      	sxth	r2, r3
 8003324:	7a3b      	ldrb	r3, [r7, #8]
 8003326:	b21b      	sxth	r3, r3
 8003328:	4313      	orrs	r3, r2
 800332a:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 800332c:	89fb      	ldrh	r3, [r7, #14]
 800332e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003332:	b29b      	uxth	r3, r3
 8003334:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003336:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800333a:	4a19      	ldr	r2, [pc, #100]	@ (80033a0 <TM_STMPE811_ReadY+0xa0>)
 800333c:	fb82 1203 	smull	r1, r2, r2, r3
 8003340:	1052      	asrs	r2, r2, #1
 8003342:	17db      	asrs	r3, r3, #31
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003348:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800334c:	2b00      	cmp	r3, #0
 800334e:	dc02      	bgt.n	8003356 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	81fb      	strh	r3, [r7, #14]
 8003354:	e007      	b.n	8003366 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8003356:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800335a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800335e:	db02      	blt.n	8003366 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8003360:	f240 133f 	movw	r3, #319	@ 0x13f
 8003364:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003366:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800336a:	88fb      	ldrh	r3, [r7, #6]
 800336c:	429a      	cmp	r2, r3
 800336e:	dd05      	ble.n	800337c <TM_STMPE811_ReadY+0x7c>
 8003370:	89fa      	ldrh	r2, [r7, #14]
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	b29b      	uxth	r3, r3
 8003378:	b21b      	sxth	r3, r3
 800337a:	e004      	b.n	8003386 <TM_STMPE811_ReadY+0x86>
 800337c:	89fb      	ldrh	r3, [r7, #14]
 800337e:	88fa      	ldrh	r2, [r7, #6]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	b29b      	uxth	r3, r3
 8003384:	b21b      	sxth	r3, r3
 8003386:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003388:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800338c:	2b04      	cmp	r3, #4
 800338e:	dd01      	ble.n	8003394 <TM_STMPE811_ReadY+0x94>
        return val;
 8003390:	89fb      	ldrh	r3, [r7, #14]
 8003392:	e000      	b.n	8003396 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8003394:	88fb      	ldrh	r3, [r7, #6]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	2e8ba2e9 	.word	0x2e8ba2e9

080033a4 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033bc:	4a14      	ldr	r2, [pc, #80]	@ (8003410 <_sbrk+0x5c>)
 80033be:	4b15      	ldr	r3, [pc, #84]	@ (8003414 <_sbrk+0x60>)
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033c8:	4b13      	ldr	r3, [pc, #76]	@ (8003418 <_sbrk+0x64>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d102      	bne.n	80033d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033d0:	4b11      	ldr	r3, [pc, #68]	@ (8003418 <_sbrk+0x64>)
 80033d2:	4a12      	ldr	r2, [pc, #72]	@ (800341c <_sbrk+0x68>)
 80033d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033d6:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <_sbrk+0x64>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4413      	add	r3, r2
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d207      	bcs.n	80033f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033e4:	f003 fc98 	bl	8006d18 <__errno>
 80033e8:	4603      	mov	r3, r0
 80033ea:	220c      	movs	r2, #12
 80033ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033ee:	f04f 33ff 	mov.w	r3, #4294967295
 80033f2:	e009      	b.n	8003408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033f4:	4b08      	ldr	r3, [pc, #32]	@ (8003418 <_sbrk+0x64>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033fa:	4b07      	ldr	r3, [pc, #28]	@ (8003418 <_sbrk+0x64>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4413      	add	r3, r2
 8003402:	4a05      	ldr	r2, [pc, #20]	@ (8003418 <_sbrk+0x64>)
 8003404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003406:	68fb      	ldr	r3, [r7, #12]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20030000 	.word	0x20030000
 8003414:	00000400 	.word	0x00000400
 8003418:	20025c64 	.word	0x20025c64
 800341c:	20025db8 	.word	0x20025db8

08003420 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003424:	4b06      	ldr	r3, [pc, #24]	@ (8003440 <SystemInit+0x20>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800342a:	4a05      	ldr	r2, [pc, #20]	@ (8003440 <SystemInit+0x20>)
 800342c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003430:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003444:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800347c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003448:	f7ff ffea 	bl	8003420 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800344c:	480c      	ldr	r0, [pc, #48]	@ (8003480 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800344e:	490d      	ldr	r1, [pc, #52]	@ (8003484 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003450:	4a0d      	ldr	r2, [pc, #52]	@ (8003488 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003454:	e002      	b.n	800345c <LoopCopyDataInit>

08003456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800345a:	3304      	adds	r3, #4

0800345c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800345c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800345e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003460:	d3f9      	bcc.n	8003456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003462:	4a0a      	ldr	r2, [pc, #40]	@ (800348c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003464:	4c0a      	ldr	r4, [pc, #40]	@ (8003490 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003468:	e001      	b.n	800346e <LoopFillZerobss>

0800346a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800346a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800346c:	3204      	adds	r2, #4

0800346e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800346e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003470:	d3fb      	bcc.n	800346a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003472:	f003 fc57 	bl	8006d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003476:	f7fe fdb1 	bl	8001fdc <main>
  bx  lr    
 800347a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800347c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003484:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8003488:	08008854 	.word	0x08008854
  ldr r2, =_sbss
 800348c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8003490:	20025db4 	.word	0x20025db4

08003494 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003494:	e7fe      	b.n	8003494 <ADC_IRQHandler>
	...

08003498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800349c:	4b0e      	ldr	r3, [pc, #56]	@ (80034d8 <HAL_Init+0x40>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a0d      	ldr	r2, [pc, #52]	@ (80034d8 <HAL_Init+0x40>)
 80034a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034a8:	4b0b      	ldr	r3, [pc, #44]	@ (80034d8 <HAL_Init+0x40>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a0a      	ldr	r2, [pc, #40]	@ (80034d8 <HAL_Init+0x40>)
 80034ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034b4:	4b08      	ldr	r3, [pc, #32]	@ (80034d8 <HAL_Init+0x40>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a07      	ldr	r2, [pc, #28]	@ (80034d8 <HAL_Init+0x40>)
 80034ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034c0:	2003      	movs	r0, #3
 80034c2:	f000 f973 	bl	80037ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034c6:	2000      	movs	r0, #0
 80034c8:	f000 f808 	bl	80034dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034cc:	f7ff f990 	bl	80027f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40023c00 	.word	0x40023c00

080034dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034e4:	4b12      	ldr	r3, [pc, #72]	@ (8003530 <HAL_InitTick+0x54>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	4b12      	ldr	r3, [pc, #72]	@ (8003534 <HAL_InitTick+0x58>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	4619      	mov	r1, r3
 80034ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80034f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f999 	bl	8003832 <HAL_SYSTICK_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e00e      	b.n	8003528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b0f      	cmp	r3, #15
 800350e:	d80a      	bhi.n	8003526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003510:	2200      	movs	r2, #0
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	f04f 30ff 	mov.w	r0, #4294967295
 8003518:	f000 f953 	bl	80037c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800351c:	4a06      	ldr	r2, [pc, #24]	@ (8003538 <HAL_InitTick+0x5c>)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	e000      	b.n	8003528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	20000010 	.word	0x20000010
 8003534:	20000018 	.word	0x20000018
 8003538:	20000014 	.word	0x20000014

0800353c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003540:	4b06      	ldr	r3, [pc, #24]	@ (800355c <HAL_IncTick+0x20>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	4b06      	ldr	r3, [pc, #24]	@ (8003560 <HAL_IncTick+0x24>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4413      	add	r3, r2
 800354c:	4a04      	ldr	r2, [pc, #16]	@ (8003560 <HAL_IncTick+0x24>)
 800354e:	6013      	str	r3, [r2, #0]
}
 8003550:	bf00      	nop
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	20000018 	.word	0x20000018
 8003560:	20025c68 	.word	0x20025c68

08003564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  return uwTick;
 8003568:	4b03      	ldr	r3, [pc, #12]	@ (8003578 <HAL_GetTick+0x14>)
 800356a:	681b      	ldr	r3, [r3, #0]
}
 800356c:	4618      	mov	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	20025c68 	.word	0x20025c68

0800357c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003584:	f7ff ffee 	bl	8003564 <HAL_GetTick>
 8003588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d005      	beq.n	80035a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003596:	4b0a      	ldr	r3, [pc, #40]	@ (80035c0 <HAL_Delay+0x44>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4413      	add	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035a2:	bf00      	nop
 80035a4:	f7ff ffde 	bl	8003564 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d8f7      	bhi.n	80035a4 <HAL_Delay+0x28>
  {
  }
}
 80035b4:	bf00      	nop
 80035b6:	bf00      	nop
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000018 	.word	0x20000018

080035c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003608 <__NVIC_SetPriorityGrouping+0x44>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035e0:	4013      	ands	r3, r2
 80035e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035f6:	4a04      	ldr	r2, [pc, #16]	@ (8003608 <__NVIC_SetPriorityGrouping+0x44>)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	60d3      	str	r3, [r2, #12]
}
 80035fc:	bf00      	nop
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003610:	4b04      	ldr	r3, [pc, #16]	@ (8003624 <__NVIC_GetPriorityGrouping+0x18>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	0a1b      	lsrs	r3, r3, #8
 8003616:	f003 0307 	and.w	r3, r3, #7
}
 800361a:	4618      	mov	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003636:	2b00      	cmp	r3, #0
 8003638:	db0b      	blt.n	8003652 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	f003 021f 	and.w	r2, r3, #31
 8003640:	4907      	ldr	r1, [pc, #28]	@ (8003660 <__NVIC_EnableIRQ+0x38>)
 8003642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	2001      	movs	r0, #1
 800364a:	fa00 f202 	lsl.w	r2, r0, r2
 800364e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	e000e100 	.word	0xe000e100

08003664 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800366e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003672:	2b00      	cmp	r3, #0
 8003674:	db12      	blt.n	800369c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003676:	79fb      	ldrb	r3, [r7, #7]
 8003678:	f003 021f 	and.w	r2, r3, #31
 800367c:	490a      	ldr	r1, [pc, #40]	@ (80036a8 <__NVIC_DisableIRQ+0x44>)
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	2001      	movs	r0, #1
 8003686:	fa00 f202 	lsl.w	r2, r0, r2
 800368a:	3320      	adds	r3, #32
 800368c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003690:	f3bf 8f4f 	dsb	sy
}
 8003694:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003696:	f3bf 8f6f 	isb	sy
}
 800369a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	e000e100 	.word	0xe000e100

080036ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	6039      	str	r1, [r7, #0]
 80036b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	db0a      	blt.n	80036d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	490c      	ldr	r1, [pc, #48]	@ (80036f8 <__NVIC_SetPriority+0x4c>)
 80036c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ca:	0112      	lsls	r2, r2, #4
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	440b      	add	r3, r1
 80036d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036d4:	e00a      	b.n	80036ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	4908      	ldr	r1, [pc, #32]	@ (80036fc <__NVIC_SetPriority+0x50>)
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	3b04      	subs	r3, #4
 80036e4:	0112      	lsls	r2, r2, #4
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	440b      	add	r3, r1
 80036ea:	761a      	strb	r2, [r3, #24]
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	e000e100 	.word	0xe000e100
 80036fc:	e000ed00 	.word	0xe000ed00

08003700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003700:	b480      	push	{r7}
 8003702:	b089      	sub	sp, #36	@ 0x24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f1c3 0307 	rsb	r3, r3, #7
 800371a:	2b04      	cmp	r3, #4
 800371c:	bf28      	it	cs
 800371e:	2304      	movcs	r3, #4
 8003720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	3304      	adds	r3, #4
 8003726:	2b06      	cmp	r3, #6
 8003728:	d902      	bls.n	8003730 <NVIC_EncodePriority+0x30>
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	3b03      	subs	r3, #3
 800372e:	e000      	b.n	8003732 <NVIC_EncodePriority+0x32>
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003734:	f04f 32ff 	mov.w	r2, #4294967295
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43da      	mvns	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	401a      	ands	r2, r3
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003748:	f04f 31ff 	mov.w	r1, #4294967295
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	fa01 f303 	lsl.w	r3, r1, r3
 8003752:	43d9      	mvns	r1, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003758:	4313      	orrs	r3, r2
         );
}
 800375a:	4618      	mov	r0, r3
 800375c:	3724      	adds	r7, #36	@ 0x24
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
	...

08003768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3b01      	subs	r3, #1
 8003774:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003778:	d301      	bcc.n	800377e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800377a:	2301      	movs	r3, #1
 800377c:	e00f      	b.n	800379e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800377e:	4a0a      	ldr	r2, [pc, #40]	@ (80037a8 <SysTick_Config+0x40>)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3b01      	subs	r3, #1
 8003784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003786:	210f      	movs	r1, #15
 8003788:	f04f 30ff 	mov.w	r0, #4294967295
 800378c:	f7ff ff8e 	bl	80036ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003790:	4b05      	ldr	r3, [pc, #20]	@ (80037a8 <SysTick_Config+0x40>)
 8003792:	2200      	movs	r2, #0
 8003794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003796:	4b04      	ldr	r3, [pc, #16]	@ (80037a8 <SysTick_Config+0x40>)
 8003798:	2207      	movs	r2, #7
 800379a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	e000e010 	.word	0xe000e010

080037ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff ff05 	bl	80035c4 <__NVIC_SetPriorityGrouping>
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b086      	sub	sp, #24
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	4603      	mov	r3, r0
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
 80037ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037d4:	f7ff ff1a 	bl	800360c <__NVIC_GetPriorityGrouping>
 80037d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	6978      	ldr	r0, [r7, #20]
 80037e0:	f7ff ff8e 	bl	8003700 <NVIC_EncodePriority>
 80037e4:	4602      	mov	r2, r0
 80037e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ea:	4611      	mov	r1, r2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff ff5d 	bl	80036ac <__NVIC_SetPriority>
}
 80037f2:	bf00      	nop
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	af00      	add	r7, sp, #0
 8003800:	4603      	mov	r3, r0
 8003802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff ff0d 	bl	8003628 <__NVIC_EnableIRQ>
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	4603      	mov	r3, r0
 800381e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff ff1d 	bl	8003664 <__NVIC_DisableIRQ>
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7ff ff94 	bl	8003768 <SysTick_Config>
 8003840:	4603      	mov	r3, r0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800384c:	b480      	push	{r7}
 800384e:	b089      	sub	sp, #36	@ 0x24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800385e:	2300      	movs	r3, #0
 8003860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	e177      	b.n	8003b58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003868:	2201      	movs	r2, #1
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4013      	ands	r3, r2
 800387a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	429a      	cmp	r2, r3
 8003882:	f040 8166 	bne.w	8003b52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d005      	beq.n	800389e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800389a:	2b02      	cmp	r3, #2
 800389c:	d130      	bne.n	8003900 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	2203      	movs	r2, #3
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43db      	mvns	r3, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4013      	ands	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038d4:	2201      	movs	r2, #1
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 0201 	and.w	r2, r3, #1
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	2b03      	cmp	r3, #3
 800390a:	d017      	beq.n	800393c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	2203      	movs	r2, #3
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4013      	ands	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d123      	bne.n	8003990 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	08da      	lsrs	r2, r3, #3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3208      	adds	r2, #8
 8003950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	220f      	movs	r2, #15
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	08da      	lsrs	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3208      	adds	r2, #8
 800398a:	69b9      	ldr	r1, [r7, #24]
 800398c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	2203      	movs	r2, #3
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 0203 	and.w	r2, r3, #3
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 80c0 	beq.w	8003b52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	4b66      	ldr	r3, [pc, #408]	@ (8003b70 <HAL_GPIO_Init+0x324>)
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	4a65      	ldr	r2, [pc, #404]	@ (8003b70 <HAL_GPIO_Init+0x324>)
 80039dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80039e2:	4b63      	ldr	r3, [pc, #396]	@ (8003b70 <HAL_GPIO_Init+0x324>)
 80039e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ee:	4a61      	ldr	r2, [pc, #388]	@ (8003b74 <HAL_GPIO_Init+0x328>)
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	089b      	lsrs	r3, r3, #2
 80039f4:	3302      	adds	r3, #2
 80039f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	220f      	movs	r2, #15
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a58      	ldr	r2, [pc, #352]	@ (8003b78 <HAL_GPIO_Init+0x32c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d037      	beq.n	8003a8a <HAL_GPIO_Init+0x23e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a57      	ldr	r2, [pc, #348]	@ (8003b7c <HAL_GPIO_Init+0x330>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d031      	beq.n	8003a86 <HAL_GPIO_Init+0x23a>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a56      	ldr	r2, [pc, #344]	@ (8003b80 <HAL_GPIO_Init+0x334>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d02b      	beq.n	8003a82 <HAL_GPIO_Init+0x236>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a55      	ldr	r2, [pc, #340]	@ (8003b84 <HAL_GPIO_Init+0x338>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d025      	beq.n	8003a7e <HAL_GPIO_Init+0x232>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a54      	ldr	r2, [pc, #336]	@ (8003b88 <HAL_GPIO_Init+0x33c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d01f      	beq.n	8003a7a <HAL_GPIO_Init+0x22e>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a53      	ldr	r2, [pc, #332]	@ (8003b8c <HAL_GPIO_Init+0x340>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d019      	beq.n	8003a76 <HAL_GPIO_Init+0x22a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a52      	ldr	r2, [pc, #328]	@ (8003b90 <HAL_GPIO_Init+0x344>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d013      	beq.n	8003a72 <HAL_GPIO_Init+0x226>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a51      	ldr	r2, [pc, #324]	@ (8003b94 <HAL_GPIO_Init+0x348>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00d      	beq.n	8003a6e <HAL_GPIO_Init+0x222>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a50      	ldr	r2, [pc, #320]	@ (8003b98 <HAL_GPIO_Init+0x34c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d007      	beq.n	8003a6a <HAL_GPIO_Init+0x21e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a4f      	ldr	r2, [pc, #316]	@ (8003b9c <HAL_GPIO_Init+0x350>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d101      	bne.n	8003a66 <HAL_GPIO_Init+0x21a>
 8003a62:	2309      	movs	r3, #9
 8003a64:	e012      	b.n	8003a8c <HAL_GPIO_Init+0x240>
 8003a66:	230a      	movs	r3, #10
 8003a68:	e010      	b.n	8003a8c <HAL_GPIO_Init+0x240>
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	e00e      	b.n	8003a8c <HAL_GPIO_Init+0x240>
 8003a6e:	2307      	movs	r3, #7
 8003a70:	e00c      	b.n	8003a8c <HAL_GPIO_Init+0x240>
 8003a72:	2306      	movs	r3, #6
 8003a74:	e00a      	b.n	8003a8c <HAL_GPIO_Init+0x240>
 8003a76:	2305      	movs	r3, #5
 8003a78:	e008      	b.n	8003a8c <HAL_GPIO_Init+0x240>
 8003a7a:	2304      	movs	r3, #4
 8003a7c:	e006      	b.n	8003a8c <HAL_GPIO_Init+0x240>
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e004      	b.n	8003a8c <HAL_GPIO_Init+0x240>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e002      	b.n	8003a8c <HAL_GPIO_Init+0x240>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <HAL_GPIO_Init+0x240>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	f002 0203 	and.w	r2, r2, #3
 8003a92:	0092      	lsls	r2, r2, #2
 8003a94:	4093      	lsls	r3, r2
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a9c:	4935      	ldr	r1, [pc, #212]	@ (8003b74 <HAL_GPIO_Init+0x328>)
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	089b      	lsrs	r3, r3, #2
 8003aa2:	3302      	adds	r3, #2
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aaa:	4b3d      	ldr	r3, [pc, #244]	@ (8003ba0 <HAL_GPIO_Init+0x354>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ace:	4a34      	ldr	r2, [pc, #208]	@ (8003ba0 <HAL_GPIO_Init+0x354>)
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ad4:	4b32      	ldr	r3, [pc, #200]	@ (8003ba0 <HAL_GPIO_Init+0x354>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003af8:	4a29      	ldr	r2, [pc, #164]	@ (8003ba0 <HAL_GPIO_Init+0x354>)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003afe:	4b28      	ldr	r3, [pc, #160]	@ (8003ba0 <HAL_GPIO_Init+0x354>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	43db      	mvns	r3, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b22:	4a1f      	ldr	r2, [pc, #124]	@ (8003ba0 <HAL_GPIO_Init+0x354>)
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b28:	4b1d      	ldr	r3, [pc, #116]	@ (8003ba0 <HAL_GPIO_Init+0x354>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	43db      	mvns	r3, r3
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4013      	ands	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b4c:	4a14      	ldr	r2, [pc, #80]	@ (8003ba0 <HAL_GPIO_Init+0x354>)
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	3301      	adds	r3, #1
 8003b56:	61fb      	str	r3, [r7, #28]
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	2b0f      	cmp	r3, #15
 8003b5c:	f67f ae84 	bls.w	8003868 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	3724      	adds	r7, #36	@ 0x24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40023800 	.word	0x40023800
 8003b74:	40013800 	.word	0x40013800
 8003b78:	40020000 	.word	0x40020000
 8003b7c:	40020400 	.word	0x40020400
 8003b80:	40020800 	.word	0x40020800
 8003b84:	40020c00 	.word	0x40020c00
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	40021400 	.word	0x40021400
 8003b90:	40021800 	.word	0x40021800
 8003b94:	40021c00 	.word	0x40021c00
 8003b98:	40022000 	.word	0x40022000
 8003b9c:	40022400 	.word	0x40022400
 8003ba0:	40013c00 	.word	0x40013c00

08003ba4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	e0d9      	b.n	8003d74 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	f040 80c9 	bne.w	8003d6e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003bdc:	4a6b      	ldr	r2, [pc, #428]	@ (8003d8c <HAL_GPIO_DeInit+0x1e8>)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	089b      	lsrs	r3, r3, #2
 8003be2:	3302      	adds	r3, #2
 8003be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	220f      	movs	r2, #15
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a63      	ldr	r2, [pc, #396]	@ (8003d90 <HAL_GPIO_DeInit+0x1ec>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d037      	beq.n	8003c76 <HAL_GPIO_DeInit+0xd2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a62      	ldr	r2, [pc, #392]	@ (8003d94 <HAL_GPIO_DeInit+0x1f0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d031      	beq.n	8003c72 <HAL_GPIO_DeInit+0xce>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a61      	ldr	r2, [pc, #388]	@ (8003d98 <HAL_GPIO_DeInit+0x1f4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d02b      	beq.n	8003c6e <HAL_GPIO_DeInit+0xca>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a60      	ldr	r2, [pc, #384]	@ (8003d9c <HAL_GPIO_DeInit+0x1f8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d025      	beq.n	8003c6a <HAL_GPIO_DeInit+0xc6>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a5f      	ldr	r2, [pc, #380]	@ (8003da0 <HAL_GPIO_DeInit+0x1fc>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d01f      	beq.n	8003c66 <HAL_GPIO_DeInit+0xc2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a5e      	ldr	r2, [pc, #376]	@ (8003da4 <HAL_GPIO_DeInit+0x200>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d019      	beq.n	8003c62 <HAL_GPIO_DeInit+0xbe>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a5d      	ldr	r2, [pc, #372]	@ (8003da8 <HAL_GPIO_DeInit+0x204>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d013      	beq.n	8003c5e <HAL_GPIO_DeInit+0xba>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a5c      	ldr	r2, [pc, #368]	@ (8003dac <HAL_GPIO_DeInit+0x208>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00d      	beq.n	8003c5a <HAL_GPIO_DeInit+0xb6>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a5b      	ldr	r2, [pc, #364]	@ (8003db0 <HAL_GPIO_DeInit+0x20c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d007      	beq.n	8003c56 <HAL_GPIO_DeInit+0xb2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a5a      	ldr	r2, [pc, #360]	@ (8003db4 <HAL_GPIO_DeInit+0x210>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d101      	bne.n	8003c52 <HAL_GPIO_DeInit+0xae>
 8003c4e:	2309      	movs	r3, #9
 8003c50:	e012      	b.n	8003c78 <HAL_GPIO_DeInit+0xd4>
 8003c52:	230a      	movs	r3, #10
 8003c54:	e010      	b.n	8003c78 <HAL_GPIO_DeInit+0xd4>
 8003c56:	2308      	movs	r3, #8
 8003c58:	e00e      	b.n	8003c78 <HAL_GPIO_DeInit+0xd4>
 8003c5a:	2307      	movs	r3, #7
 8003c5c:	e00c      	b.n	8003c78 <HAL_GPIO_DeInit+0xd4>
 8003c5e:	2306      	movs	r3, #6
 8003c60:	e00a      	b.n	8003c78 <HAL_GPIO_DeInit+0xd4>
 8003c62:	2305      	movs	r3, #5
 8003c64:	e008      	b.n	8003c78 <HAL_GPIO_DeInit+0xd4>
 8003c66:	2304      	movs	r3, #4
 8003c68:	e006      	b.n	8003c78 <HAL_GPIO_DeInit+0xd4>
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e004      	b.n	8003c78 <HAL_GPIO_DeInit+0xd4>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e002      	b.n	8003c78 <HAL_GPIO_DeInit+0xd4>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_GPIO_DeInit+0xd4>
 8003c76:	2300      	movs	r3, #0
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	f002 0203 	and.w	r2, r2, #3
 8003c7e:	0092      	lsls	r2, r2, #2
 8003c80:	4093      	lsls	r3, r2
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d132      	bne.n	8003cee <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003c88:	4b4b      	ldr	r3, [pc, #300]	@ (8003db8 <HAL_GPIO_DeInit+0x214>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	4949      	ldr	r1, [pc, #292]	@ (8003db8 <HAL_GPIO_DeInit+0x214>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003c96:	4b48      	ldr	r3, [pc, #288]	@ (8003db8 <HAL_GPIO_DeInit+0x214>)
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	4946      	ldr	r1, [pc, #280]	@ (8003db8 <HAL_GPIO_DeInit+0x214>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003ca4:	4b44      	ldr	r3, [pc, #272]	@ (8003db8 <HAL_GPIO_DeInit+0x214>)
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	43db      	mvns	r3, r3
 8003cac:	4942      	ldr	r1, [pc, #264]	@ (8003db8 <HAL_GPIO_DeInit+0x214>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003cb2:	4b41      	ldr	r3, [pc, #260]	@ (8003db8 <HAL_GPIO_DeInit+0x214>)
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	493f      	ldr	r1, [pc, #252]	@ (8003db8 <HAL_GPIO_DeInit+0x214>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	220f      	movs	r2, #15
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003cd0:	4a2e      	ldr	r2, [pc, #184]	@ (8003d8c <HAL_GPIO_DeInit+0x1e8>)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	3302      	adds	r3, #2
 8003cd8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	482a      	ldr	r0, [pc, #168]	@ (8003d8c <HAL_GPIO_DeInit+0x1e8>)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	089b      	lsrs	r3, r3, #2
 8003ce6:	400a      	ands	r2, r1
 8003ce8:	3302      	adds	r3, #2
 8003cea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	2103      	movs	r1, #3
 8003cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	401a      	ands	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	08da      	lsrs	r2, r3, #3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3208      	adds	r2, #8
 8003d0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	220f      	movs	r2, #15
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	08d2      	lsrs	r2, r2, #3
 8003d24:	4019      	ands	r1, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3208      	adds	r2, #8
 8003d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	2103      	movs	r1, #3
 8003d38:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	401a      	ands	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	2101      	movs	r1, #1
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d50:	43db      	mvns	r3, r3
 8003d52:	401a      	ands	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	2103      	movs	r1, #3
 8003d62:	fa01 f303 	lsl.w	r3, r1, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	401a      	ands	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	3301      	adds	r3, #1
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	2b0f      	cmp	r3, #15
 8003d78:	f67f af22 	bls.w	8003bc0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40013800 	.word	0x40013800
 8003d90:	40020000 	.word	0x40020000
 8003d94:	40020400 	.word	0x40020400
 8003d98:	40020800 	.word	0x40020800
 8003d9c:	40020c00 	.word	0x40020c00
 8003da0:	40021000 	.word	0x40021000
 8003da4:	40021400 	.word	0x40021400
 8003da8:	40021800 	.word	0x40021800
 8003dac:	40021c00 	.word	0x40021c00
 8003db0:	40022000 	.word	0x40022000
 8003db4:	40022400 	.word	0x40022400
 8003db8:	40013c00 	.word	0x40013c00

08003dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	807b      	strh	r3, [r7, #2]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dcc:	787b      	ldrb	r3, [r7, #1]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dd2:	887a      	ldrh	r2, [r7, #2]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dd8:	e003      	b.n	8003de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dda:	887b      	ldrh	r3, [r7, #2]
 8003ddc:	041a      	lsls	r2, r3, #16
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	619a      	str	r2, [r3, #24]
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
	...

08003df0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e12b      	b.n	800405a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7fe fd12 	bl	8002840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2224      	movs	r2, #36	@ 0x24
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0201 	bic.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e54:	f001 ff82 	bl	8005d5c <HAL_RCC_GetPCLK1Freq>
 8003e58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	4a81      	ldr	r2, [pc, #516]	@ (8004064 <HAL_I2C_Init+0x274>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d807      	bhi.n	8003e74 <HAL_I2C_Init+0x84>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4a80      	ldr	r2, [pc, #512]	@ (8004068 <HAL_I2C_Init+0x278>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	bf94      	ite	ls
 8003e6c:	2301      	movls	r3, #1
 8003e6e:	2300      	movhi	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	e006      	b.n	8003e82 <HAL_I2C_Init+0x92>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4a7d      	ldr	r2, [pc, #500]	@ (800406c <HAL_I2C_Init+0x27c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	bf94      	ite	ls
 8003e7c:	2301      	movls	r3, #1
 8003e7e:	2300      	movhi	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e0e7      	b.n	800405a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4a78      	ldr	r2, [pc, #480]	@ (8004070 <HAL_I2C_Init+0x280>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	0c9b      	lsrs	r3, r3, #18
 8003e94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	4a6a      	ldr	r2, [pc, #424]	@ (8004064 <HAL_I2C_Init+0x274>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d802      	bhi.n	8003ec4 <HAL_I2C_Init+0xd4>
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	e009      	b.n	8003ed8 <HAL_I2C_Init+0xe8>
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003eca:	fb02 f303 	mul.w	r3, r2, r3
 8003ece:	4a69      	ldr	r2, [pc, #420]	@ (8004074 <HAL_I2C_Init+0x284>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	099b      	lsrs	r3, r3, #6
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6812      	ldr	r2, [r2, #0]
 8003edc:	430b      	orrs	r3, r1
 8003ede:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003eea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	495c      	ldr	r1, [pc, #368]	@ (8004064 <HAL_I2C_Init+0x274>)
 8003ef4:	428b      	cmp	r3, r1
 8003ef6:	d819      	bhi.n	8003f2c <HAL_I2C_Init+0x13c>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	1e59      	subs	r1, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f06:	1c59      	adds	r1, r3, #1
 8003f08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f0c:	400b      	ands	r3, r1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <HAL_I2C_Init+0x138>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1e59      	subs	r1, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f20:	3301      	adds	r3, #1
 8003f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f26:	e051      	b.n	8003fcc <HAL_I2C_Init+0x1dc>
 8003f28:	2304      	movs	r3, #4
 8003f2a:	e04f      	b.n	8003fcc <HAL_I2C_Init+0x1dc>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d111      	bne.n	8003f58 <HAL_I2C_Init+0x168>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	1e58      	subs	r0, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6859      	ldr	r1, [r3, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	440b      	add	r3, r1
 8003f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f46:	3301      	adds	r3, #1
 8003f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	bf0c      	ite	eq
 8003f50:	2301      	moveq	r3, #1
 8003f52:	2300      	movne	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	e012      	b.n	8003f7e <HAL_I2C_Init+0x18e>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	1e58      	subs	r0, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6859      	ldr	r1, [r3, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	0099      	lsls	r1, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f6e:	3301      	adds	r3, #1
 8003f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	bf0c      	ite	eq
 8003f78:	2301      	moveq	r3, #1
 8003f7a:	2300      	movne	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_I2C_Init+0x196>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e022      	b.n	8003fcc <HAL_I2C_Init+0x1dc>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10e      	bne.n	8003fac <HAL_I2C_Init+0x1bc>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1e58      	subs	r0, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6859      	ldr	r1, [r3, #4]
 8003f96:	460b      	mov	r3, r1
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	440b      	add	r3, r1
 8003f9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003faa:	e00f      	b.n	8003fcc <HAL_I2C_Init+0x1dc>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	1e58      	subs	r0, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6859      	ldr	r1, [r3, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	0099      	lsls	r1, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	6809      	ldr	r1, [r1, #0]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69da      	ldr	r2, [r3, #28]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ffa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6911      	ldr	r1, [r2, #16]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68d2      	ldr	r2, [r2, #12]
 8004006:	4311      	orrs	r1, r2
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6812      	ldr	r2, [r2, #0]
 800400c:	430b      	orrs	r3, r1
 800400e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695a      	ldr	r2, [r3, #20]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	000186a0 	.word	0x000186a0
 8004068:	001e847f 	.word	0x001e847f
 800406c:	003d08ff 	.word	0x003d08ff
 8004070:	431bde83 	.word	0x431bde83
 8004074:	10624dd3 	.word	0x10624dd3

08004078 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af02      	add	r7, sp, #8
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	4608      	mov	r0, r1
 8004082:	4611      	mov	r1, r2
 8004084:	461a      	mov	r2, r3
 8004086:	4603      	mov	r3, r0
 8004088:	817b      	strh	r3, [r7, #10]
 800408a:	460b      	mov	r3, r1
 800408c:	813b      	strh	r3, [r7, #8]
 800408e:	4613      	mov	r3, r2
 8004090:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004092:	f7ff fa67 	bl	8003564 <HAL_GetTick>
 8004096:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	f040 80d9 	bne.w	8004258 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	2319      	movs	r3, #25
 80040ac:	2201      	movs	r2, #1
 80040ae:	496d      	ldr	r1, [pc, #436]	@ (8004264 <HAL_I2C_Mem_Write+0x1ec>)
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fc8b 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040bc:	2302      	movs	r3, #2
 80040be:	e0cc      	b.n	800425a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_I2C_Mem_Write+0x56>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e0c5      	b.n	800425a <HAL_I2C_Mem_Write+0x1e2>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d007      	beq.n	80040f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004102:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2221      	movs	r2, #33	@ 0x21
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2240      	movs	r2, #64	@ 0x40
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a3a      	ldr	r2, [r7, #32]
 800411e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004124:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4a4d      	ldr	r2, [pc, #308]	@ (8004268 <HAL_I2C_Mem_Write+0x1f0>)
 8004134:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004136:	88f8      	ldrh	r0, [r7, #6]
 8004138:	893a      	ldrh	r2, [r7, #8]
 800413a:	8979      	ldrh	r1, [r7, #10]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	4603      	mov	r3, r0
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 fac2 	bl	80046d0 <I2C_RequestMemoryWrite>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d052      	beq.n	80041f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e081      	b.n	800425a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 fd50 	bl	8004c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00d      	beq.n	8004182 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	2b04      	cmp	r3, #4
 800416c:	d107      	bne.n	800417e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800417c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e06b      	b.n	800425a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004186:	781a      	ldrb	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d11b      	bne.n	80041f8 <HAL_I2C_Mem_Write+0x180>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d017      	beq.n	80041f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041cc:	781a      	ldrb	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1aa      	bne.n	8004156 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 fd43 	bl	8004c90 <I2C_WaitOnBTFFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00d      	beq.n	800422c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004214:	2b04      	cmp	r3, #4
 8004216:	d107      	bne.n	8004228 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004226:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e016      	b.n	800425a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800423a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	e000      	b.n	800425a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004258:	2302      	movs	r3, #2
  }
}
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	00100002 	.word	0x00100002
 8004268:	ffff0000 	.word	0xffff0000

0800426c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08c      	sub	sp, #48	@ 0x30
 8004270:	af02      	add	r7, sp, #8
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	4608      	mov	r0, r1
 8004276:	4611      	mov	r1, r2
 8004278:	461a      	mov	r2, r3
 800427a:	4603      	mov	r3, r0
 800427c:	817b      	strh	r3, [r7, #10]
 800427e:	460b      	mov	r3, r1
 8004280:	813b      	strh	r3, [r7, #8]
 8004282:	4613      	mov	r3, r2
 8004284:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004286:	f7ff f96d 	bl	8003564 <HAL_GetTick>
 800428a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b20      	cmp	r3, #32
 8004296:	f040 8214 	bne.w	80046c2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800429a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	2319      	movs	r3, #25
 80042a0:	2201      	movs	r2, #1
 80042a2:	497b      	ldr	r1, [pc, #492]	@ (8004490 <HAL_I2C_Mem_Read+0x224>)
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 fb91 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80042b0:	2302      	movs	r3, #2
 80042b2:	e207      	b.n	80046c4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_I2C_Mem_Read+0x56>
 80042be:	2302      	movs	r3, #2
 80042c0:	e200      	b.n	80046c4 <HAL_I2C_Mem_Read+0x458>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d007      	beq.n	80042e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2222      	movs	r2, #34	@ 0x22
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2240      	movs	r2, #64	@ 0x40
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004312:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004318:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4a5b      	ldr	r2, [pc, #364]	@ (8004494 <HAL_I2C_Mem_Read+0x228>)
 8004328:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800432a:	88f8      	ldrh	r0, [r7, #6]
 800432c:	893a      	ldrh	r2, [r7, #8]
 800432e:	8979      	ldrh	r1, [r7, #10]
 8004330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004332:	9301      	str	r3, [sp, #4]
 8004334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	4603      	mov	r3, r0
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 fa5e 	bl	80047fc <I2C_RequestMemoryRead>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e1bc      	b.n	80046c4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434e:	2b00      	cmp	r3, #0
 8004350:	d113      	bne.n	800437a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004352:	2300      	movs	r3, #0
 8004354:	623b      	str	r3, [r7, #32]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	623b      	str	r3, [r7, #32]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	623b      	str	r3, [r7, #32]
 8004366:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	e190      	b.n	800469c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437e:	2b01      	cmp	r3, #1
 8004380:	d11b      	bne.n	80043ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004390:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	61fb      	str	r3, [r7, #28]
 80043a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	e170      	b.n	800469c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d11b      	bne.n	80043fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e2:	2300      	movs	r3, #0
 80043e4:	61bb      	str	r3, [r7, #24]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	e150      	b.n	800469c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fa:	2300      	movs	r3, #0
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	617b      	str	r3, [r7, #20]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004410:	e144      	b.n	800469c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004416:	2b03      	cmp	r3, #3
 8004418:	f200 80f1 	bhi.w	80045fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004420:	2b01      	cmp	r3, #1
 8004422:	d123      	bne.n	800446c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004426:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 fc79 	bl	8004d20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e145      	b.n	80046c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800446a:	e117      	b.n	800469c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004470:	2b02      	cmp	r3, #2
 8004472:	d14e      	bne.n	8004512 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447a:	2200      	movs	r2, #0
 800447c:	4906      	ldr	r1, [pc, #24]	@ (8004498 <HAL_I2C_Mem_Read+0x22c>)
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 faa4 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d008      	beq.n	800449c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e11a      	b.n	80046c4 <HAL_I2C_Mem_Read+0x458>
 800448e:	bf00      	nop
 8004490:	00100002 	.word	0x00100002
 8004494:	ffff0000 	.word	0xffff0000
 8004498:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004510:	e0c4      	b.n	800469c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004518:	2200      	movs	r2, #0
 800451a:	496c      	ldr	r1, [pc, #432]	@ (80046cc <HAL_I2C_Mem_Read+0x460>)
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 fa55 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0cb      	b.n	80046c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800453a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004574:	2200      	movs	r2, #0
 8004576:	4955      	ldr	r1, [pc, #340]	@ (80046cc <HAL_I2C_Mem_Read+0x460>)
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 fa27 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e09d      	b.n	80046c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004596:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045fc:	e04e      	b.n	800469c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004600:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 fb8c 	bl	8004d20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e058      	b.n	80046c4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	2b04      	cmp	r3, #4
 8004650:	d124      	bne.n	800469c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004656:	2b03      	cmp	r3, #3
 8004658:	d107      	bne.n	800466a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004668:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004692:	b29b      	uxth	r3, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f47f aeb6 	bne.w	8004412 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	e000      	b.n	80046c4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
  }
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3728      	adds	r7, #40	@ 0x28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	00010004 	.word	0x00010004

080046d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	4608      	mov	r0, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	461a      	mov	r2, r3
 80046de:	4603      	mov	r3, r0
 80046e0:	817b      	strh	r3, [r7, #10]
 80046e2:	460b      	mov	r3, r1
 80046e4:	813b      	strh	r3, [r7, #8]
 80046e6:	4613      	mov	r3, r2
 80046e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	2200      	movs	r2, #0
 8004702:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f960 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800471c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004720:	d103      	bne.n	800472a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004728:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e05f      	b.n	80047ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800472e:	897b      	ldrh	r3, [r7, #10]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	461a      	mov	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800473c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	6a3a      	ldr	r2, [r7, #32]
 8004742:	492d      	ldr	r1, [pc, #180]	@ (80047f8 <I2C_RequestMemoryWrite+0x128>)
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f9bb 	bl	8004ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e04c      	b.n	80047ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	617b      	str	r3, [r7, #20]
 8004768:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800476a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800476c:	6a39      	ldr	r1, [r7, #32]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fa46 	bl	8004c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00d      	beq.n	8004796 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477e:	2b04      	cmp	r3, #4
 8004780:	d107      	bne.n	8004792 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004790:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e02b      	b.n	80047ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d105      	bne.n	80047a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800479c:	893b      	ldrh	r3, [r7, #8]
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	611a      	str	r2, [r3, #16]
 80047a6:	e021      	b.n	80047ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047a8:	893b      	ldrh	r3, [r7, #8]
 80047aa:	0a1b      	lsrs	r3, r3, #8
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b8:	6a39      	ldr	r1, [r7, #32]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 fa20 	bl	8004c00 <I2C_WaitOnTXEFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00d      	beq.n	80047e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d107      	bne.n	80047de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e005      	b.n	80047ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047e2:	893b      	ldrh	r3, [r7, #8]
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	00010002 	.word	0x00010002

080047fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	4608      	mov	r0, r1
 8004806:	4611      	mov	r1, r2
 8004808:	461a      	mov	r2, r3
 800480a:	4603      	mov	r3, r0
 800480c:	817b      	strh	r3, [r7, #10]
 800480e:	460b      	mov	r3, r1
 8004810:	813b      	strh	r3, [r7, #8]
 8004812:	4613      	mov	r3, r2
 8004814:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004824:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004834:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	2200      	movs	r2, #0
 800483e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f8c2 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00d      	beq.n	800486a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004858:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800485c:	d103      	bne.n	8004866 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004864:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e0aa      	b.n	80049c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800486a:	897b      	ldrh	r3, [r7, #10]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	461a      	mov	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004878:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800487a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487c:	6a3a      	ldr	r2, [r7, #32]
 800487e:	4952      	ldr	r1, [pc, #328]	@ (80049c8 <I2C_RequestMemoryRead+0x1cc>)
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 f91d 	bl	8004ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e097      	b.n	80049c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a8:	6a39      	ldr	r1, [r7, #32]
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f9a8 	bl	8004c00 <I2C_WaitOnTXEFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00d      	beq.n	80048d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d107      	bne.n	80048ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e076      	b.n	80049c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d105      	bne.n	80048e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048d8:	893b      	ldrh	r3, [r7, #8]
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	611a      	str	r2, [r3, #16]
 80048e2:	e021      	b.n	8004928 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048e4:	893b      	ldrh	r3, [r7, #8]
 80048e6:	0a1b      	lsrs	r3, r3, #8
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f4:	6a39      	ldr	r1, [r7, #32]
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f982 	bl	8004c00 <I2C_WaitOnTXEFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00d      	beq.n	800491e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004906:	2b04      	cmp	r3, #4
 8004908:	d107      	bne.n	800491a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004918:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e050      	b.n	80049c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800491e:	893b      	ldrh	r3, [r7, #8]
 8004920:	b2da      	uxtb	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800492a:	6a39      	ldr	r1, [r7, #32]
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f967 	bl	8004c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00d      	beq.n	8004954 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493c:	2b04      	cmp	r3, #4
 800493e:	d107      	bne.n	8004950 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800494e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e035      	b.n	80049c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004962:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	2200      	movs	r2, #0
 800496c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f82b 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00d      	beq.n	8004998 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800498a:	d103      	bne.n	8004994 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004992:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e013      	b.n	80049c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004998:	897b      	ldrh	r3, [r7, #10]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	f043 0301 	orr.w	r3, r3, #1
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049aa:	6a3a      	ldr	r2, [r7, #32]
 80049ac:	4906      	ldr	r1, [pc, #24]	@ (80049c8 <I2C_RequestMemoryRead+0x1cc>)
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 f886 	bl	8004ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	00010002 	.word	0x00010002

080049cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049dc:	e048      	b.n	8004a70 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e4:	d044      	beq.n	8004a70 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e6:	f7fe fdbd 	bl	8003564 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d302      	bcc.n	80049fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d139      	bne.n	8004a70 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	0c1b      	lsrs	r3, r3, #16
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d10d      	bne.n	8004a22 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	43da      	mvns	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	4013      	ands	r3, r2
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	bf0c      	ite	eq
 8004a18:	2301      	moveq	r3, #1
 8004a1a:	2300      	movne	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	e00c      	b.n	8004a3c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	43da      	mvns	r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bf0c      	ite	eq
 8004a34:	2301      	moveq	r3, #1
 8004a36:	2300      	movne	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	79fb      	ldrb	r3, [r7, #7]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d116      	bne.n	8004a70 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5c:	f043 0220 	orr.w	r2, r3, #32
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e023      	b.n	8004ab8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	0c1b      	lsrs	r3, r3, #16
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d10d      	bne.n	8004a96 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	43da      	mvns	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	4013      	ands	r3, r2
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	bf0c      	ite	eq
 8004a8c:	2301      	moveq	r3, #1
 8004a8e:	2300      	movne	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	e00c      	b.n	8004ab0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	43da      	mvns	r2, r3
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bf0c      	ite	eq
 8004aa8:	2301      	moveq	r3, #1
 8004aaa:	2300      	movne	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d093      	beq.n	80049de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ace:	e071      	b.n	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ade:	d123      	bne.n	8004b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004af8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b14:	f043 0204 	orr.w	r2, r3, #4
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e067      	b.n	8004bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2e:	d041      	beq.n	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b30:	f7fe fd18 	bl	8003564 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d302      	bcc.n	8004b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d136      	bne.n	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	0c1b      	lsrs	r3, r3, #16
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d10c      	bne.n	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	43da      	mvns	r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	bf14      	ite	ne
 8004b62:	2301      	movne	r3, #1
 8004b64:	2300      	moveq	r3, #0
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	e00b      	b.n	8004b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	43da      	mvns	r2, r3
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	4013      	ands	r3, r2
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bf14      	ite	ne
 8004b7c:	2301      	movne	r3, #1
 8004b7e:	2300      	moveq	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d016      	beq.n	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba0:	f043 0220 	orr.w	r2, r3, #32
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e021      	b.n	8004bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	0c1b      	lsrs	r3, r3, #16
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d10c      	bne.n	8004bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	43da      	mvns	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bf14      	ite	ne
 8004bd0:	2301      	movne	r3, #1
 8004bd2:	2300      	moveq	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	e00b      	b.n	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	43da      	mvns	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4013      	ands	r3, r2
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	bf14      	ite	ne
 8004bea:	2301      	movne	r3, #1
 8004bec:	2300      	moveq	r3, #0
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f47f af6d 	bne.w	8004ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c0c:	e034      	b.n	8004c78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 f8e3 	bl	8004dda <I2C_IsAcknowledgeFailed>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e034      	b.n	8004c88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c24:	d028      	beq.n	8004c78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c26:	f7fe fc9d 	bl	8003564 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d302      	bcc.n	8004c3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d11d      	bne.n	8004c78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c46:	2b80      	cmp	r3, #128	@ 0x80
 8004c48:	d016      	beq.n	8004c78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c64:	f043 0220 	orr.w	r2, r3, #32
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e007      	b.n	8004c88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c82:	2b80      	cmp	r3, #128	@ 0x80
 8004c84:	d1c3      	bne.n	8004c0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c9c:	e034      	b.n	8004d08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f89b 	bl	8004dda <I2C_IsAcknowledgeFailed>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e034      	b.n	8004d18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb4:	d028      	beq.n	8004d08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb6:	f7fe fc55 	bl	8003564 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d302      	bcc.n	8004ccc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d11d      	bne.n	8004d08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	f003 0304 	and.w	r3, r3, #4
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d016      	beq.n	8004d08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf4:	f043 0220 	orr.w	r2, r3, #32
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e007      	b.n	8004d18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d1c3      	bne.n	8004c9e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d2c:	e049      	b.n	8004dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	2b10      	cmp	r3, #16
 8004d3a:	d119      	bne.n	8004d70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0210 	mvn.w	r2, #16
 8004d44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e030      	b.n	8004dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d70:	f7fe fbf8 	bl	8003564 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d302      	bcc.n	8004d86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d11d      	bne.n	8004dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d90:	2b40      	cmp	r3, #64	@ 0x40
 8004d92:	d016      	beq.n	8004dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dae:	f043 0220 	orr.w	r2, r3, #32
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e007      	b.n	8004dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dcc:	2b40      	cmp	r3, #64	@ 0x40
 8004dce:	d1ae      	bne.n	8004d2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df0:	d11b      	bne.n	8004e2a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004dfa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e16:	f043 0204 	orr.w	r2, r3, #4
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b20      	cmp	r3, #32
 8004e4c:	d129      	bne.n	8004ea2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2224      	movs	r2, #36	@ 0x24
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0201 	bic.w	r2, r2, #1
 8004e64:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0210 	bic.w	r2, r2, #16
 8004e74:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0201 	orr.w	r2, r2, #1
 8004e94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e000      	b.n	8004ea4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
  }
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d12a      	bne.n	8004f20 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2224      	movs	r2, #36	@ 0x24
 8004ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004eea:	89fb      	ldrh	r3, [r7, #14]
 8004eec:	f023 030f 	bic.w	r3, r3, #15
 8004ef0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	89fb      	ldrh	r3, [r7, #14]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	89fa      	ldrh	r2, [r7, #14]
 8004f02:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0201 	orr.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	e000      	b.n	8004f22 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004f20:	2302      	movs	r3, #2
  }
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
	...

08004f30 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e0bf      	b.n	80050c2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7fd fcdc 	bl	8002914 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004f72:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6999      	ldr	r1, [r3, #24]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f88:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6899      	ldr	r1, [r3, #8]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	4b4a      	ldr	r3, [pc, #296]	@ (80050cc <HAL_LTDC_Init+0x19c>)
 8004fa4:	400b      	ands	r3, r1
 8004fa6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	041b      	lsls	r3, r3, #16
 8004fae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6899      	ldr	r1, [r3, #8]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699a      	ldr	r2, [r3, #24]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68d9      	ldr	r1, [r3, #12]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	4b3e      	ldr	r3, [pc, #248]	@ (80050cc <HAL_LTDC_Init+0x19c>)
 8004fd2:	400b      	ands	r3, r1
 8004fd4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	041b      	lsls	r3, r3, #16
 8004fdc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68d9      	ldr	r1, [r3, #12]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a1a      	ldr	r2, [r3, #32]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6919      	ldr	r1, [r3, #16]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	4b33      	ldr	r3, [pc, #204]	@ (80050cc <HAL_LTDC_Init+0x19c>)
 8005000:	400b      	ands	r3, r1
 8005002:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005008:	041b      	lsls	r3, r3, #16
 800500a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6919      	ldr	r1, [r3, #16]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6959      	ldr	r1, [r3, #20]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	4b27      	ldr	r3, [pc, #156]	@ (80050cc <HAL_LTDC_Init+0x19c>)
 800502e:	400b      	ands	r3, r1
 8005030:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005036:	041b      	lsls	r3, r3, #16
 8005038:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6959      	ldr	r1, [r3, #20]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005060:	041b      	lsls	r3, r3, #16
 8005062:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005072:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0206 	orr.w	r2, r2, #6
 800509e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699a      	ldr	r2, [r3, #24]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	f000f800 	.word	0xf000f800

080050d0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80050d0:	b5b0      	push	{r4, r5, r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <HAL_LTDC_ConfigLayer+0x1a>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e02c      	b.n	8005144 <HAL_LTDC_ConfigLayer+0x74>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2202      	movs	r2, #2
 80050f6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2134      	movs	r1, #52	@ 0x34
 8005100:	fb01 f303 	mul.w	r3, r1, r3
 8005104:	4413      	add	r3, r2
 8005106:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	4614      	mov	r4, r2
 800510e:	461d      	mov	r5, r3
 8005110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800511a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 f811 	bl	800514c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2201      	movs	r2, #1
 8005130:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bdb0      	pop	{r4, r5, r7, pc}

0800514c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800514c:	b480      	push	{r7}
 800514e:	b089      	sub	sp, #36	@ 0x24
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	0c1b      	lsrs	r3, r3, #16
 8005164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005168:	4413      	add	r3, r2
 800516a:	041b      	lsls	r3, r3, #16
 800516c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	01db      	lsls	r3, r3, #7
 8005178:	4413      	add	r3, r2
 800517a:	3384      	adds	r3, #132	@ 0x84
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	6812      	ldr	r2, [r2, #0]
 8005182:	4611      	mov	r1, r2
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	01d2      	lsls	r2, r2, #7
 8005188:	440a      	add	r2, r1
 800518a:	3284      	adds	r2, #132	@ 0x84
 800518c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005190:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	0c1b      	lsrs	r3, r3, #16
 800519e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80051a2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80051a4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4619      	mov	r1, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	01db      	lsls	r3, r3, #7
 80051b0:	440b      	add	r3, r1
 80051b2:	3384      	adds	r3, #132	@ 0x84
 80051b4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80051ba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051ca:	4413      	add	r3, r2
 80051cc:	041b      	lsls	r3, r3, #16
 80051ce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	01db      	lsls	r3, r3, #7
 80051da:	4413      	add	r3, r2
 80051dc:	3384      	adds	r3, #132	@ 0x84
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	6812      	ldr	r2, [r2, #0]
 80051e4:	4611      	mov	r1, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	01d2      	lsls	r2, r2, #7
 80051ea:	440a      	add	r2, r1
 80051ec:	3284      	adds	r2, #132	@ 0x84
 80051ee:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80051f2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005202:	4413      	add	r3, r2
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4619      	mov	r1, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	01db      	lsls	r3, r3, #7
 8005210:	440b      	add	r3, r1
 8005212:	3384      	adds	r3, #132	@ 0x84
 8005214:	4619      	mov	r1, r3
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	4313      	orrs	r3, r2
 800521a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	461a      	mov	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	01db      	lsls	r3, r3, #7
 8005226:	4413      	add	r3, r2
 8005228:	3384      	adds	r3, #132	@ 0x84
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	6812      	ldr	r2, [r2, #0]
 8005230:	4611      	mov	r1, r2
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	01d2      	lsls	r2, r2, #7
 8005236:	440a      	add	r2, r1
 8005238:	3284      	adds	r2, #132	@ 0x84
 800523a:	f023 0307 	bic.w	r3, r3, #7
 800523e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	461a      	mov	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	01db      	lsls	r3, r3, #7
 800524a:	4413      	add	r3, r2
 800524c:	3384      	adds	r3, #132	@ 0x84
 800524e:	461a      	mov	r2, r3
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005266:	041b      	lsls	r3, r3, #16
 8005268:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	061b      	lsls	r3, r3, #24
 8005270:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	01db      	lsls	r3, r3, #7
 800527c:	4413      	add	r3, r2
 800527e:	3384      	adds	r3, #132	@ 0x84
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	01db      	lsls	r3, r3, #7
 800528c:	4413      	add	r3, r2
 800528e:	3384      	adds	r3, #132	@ 0x84
 8005290:	461a      	mov	r2, r3
 8005292:	2300      	movs	r3, #0
 8005294:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800529c:	461a      	mov	r2, r3
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	431a      	orrs	r2, r3
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	431a      	orrs	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4619      	mov	r1, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	01db      	lsls	r3, r3, #7
 80052b0:	440b      	add	r3, r1
 80052b2:	3384      	adds	r3, #132	@ 0x84
 80052b4:	4619      	mov	r1, r3
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	461a      	mov	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	01db      	lsls	r3, r3, #7
 80052c6:	4413      	add	r3, r2
 80052c8:	3384      	adds	r3, #132	@ 0x84
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	6812      	ldr	r2, [r2, #0]
 80052d0:	4611      	mov	r1, r2
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	01d2      	lsls	r2, r2, #7
 80052d6:	440a      	add	r2, r1
 80052d8:	3284      	adds	r2, #132	@ 0x84
 80052da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80052de:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	461a      	mov	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	01db      	lsls	r3, r3, #7
 80052ea:	4413      	add	r3, r2
 80052ec:	3384      	adds	r3, #132	@ 0x84
 80052ee:	461a      	mov	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	01db      	lsls	r3, r3, #7
 8005300:	4413      	add	r3, r2
 8005302:	3384      	adds	r3, #132	@ 0x84
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	6812      	ldr	r2, [r2, #0]
 800530a:	4611      	mov	r1, r2
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	01d2      	lsls	r2, r2, #7
 8005310:	440a      	add	r2, r1
 8005312:	3284      	adds	r2, #132	@ 0x84
 8005314:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005318:	f023 0307 	bic.w	r3, r3, #7
 800531c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	69da      	ldr	r2, [r3, #28]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	68f9      	ldr	r1, [r7, #12]
 8005328:	6809      	ldr	r1, [r1, #0]
 800532a:	4608      	mov	r0, r1
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	01c9      	lsls	r1, r1, #7
 8005330:	4401      	add	r1, r0
 8005332:	3184      	adds	r1, #132	@ 0x84
 8005334:	4313      	orrs	r3, r2
 8005336:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	461a      	mov	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	01db      	lsls	r3, r3, #7
 8005342:	4413      	add	r3, r2
 8005344:	3384      	adds	r3, #132	@ 0x84
 8005346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	461a      	mov	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	01db      	lsls	r3, r3, #7
 8005352:	4413      	add	r3, r2
 8005354:	3384      	adds	r3, #132	@ 0x84
 8005356:	461a      	mov	r2, r3
 8005358:	2300      	movs	r3, #0
 800535a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	01db      	lsls	r3, r3, #7
 8005366:	4413      	add	r3, r2
 8005368:	3384      	adds	r3, #132	@ 0x84
 800536a:	461a      	mov	r2, r3
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005370:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d102      	bne.n	8005380 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800537a:	2304      	movs	r3, #4
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	e01b      	b.n	80053b8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d102      	bne.n	800538e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005388:	2303      	movs	r3, #3
 800538a:	61fb      	str	r3, [r7, #28]
 800538c:	e014      	b.n	80053b8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	2b04      	cmp	r3, #4
 8005394:	d00b      	beq.n	80053ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800539a:	2b02      	cmp	r3, #2
 800539c:	d007      	beq.n	80053ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d003      	beq.n	80053ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80053aa:	2b07      	cmp	r3, #7
 80053ac:	d102      	bne.n	80053b4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80053ae:	2302      	movs	r3, #2
 80053b0:	61fb      	str	r3, [r7, #28]
 80053b2:	e001      	b.n	80053b8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80053b4:	2301      	movs	r3, #1
 80053b6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	01db      	lsls	r3, r3, #7
 80053c2:	4413      	add	r3, r2
 80053c4:	3384      	adds	r3, #132	@ 0x84
 80053c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	6812      	ldr	r2, [r2, #0]
 80053cc:	4611      	mov	r1, r2
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	01d2      	lsls	r2, r2, #7
 80053d2:	440a      	add	r2, r1
 80053d4:	3284      	adds	r2, #132	@ 0x84
 80053d6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80053da:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	fb02 f303 	mul.w	r3, r2, r3
 80053e6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	6859      	ldr	r1, [r3, #4]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	1acb      	subs	r3, r1, r3
 80053f2:	69f9      	ldr	r1, [r7, #28]
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80053fa:	68f9      	ldr	r1, [r7, #12]
 80053fc:	6809      	ldr	r1, [r1, #0]
 80053fe:	4608      	mov	r0, r1
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	01c9      	lsls	r1, r1, #7
 8005404:	4401      	add	r1, r0
 8005406:	3184      	adds	r1, #132	@ 0x84
 8005408:	4313      	orrs	r3, r2
 800540a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	461a      	mov	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	01db      	lsls	r3, r3, #7
 8005416:	4413      	add	r3, r2
 8005418:	3384      	adds	r3, #132	@ 0x84
 800541a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	6812      	ldr	r2, [r2, #0]
 8005420:	4611      	mov	r1, r2
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	01d2      	lsls	r2, r2, #7
 8005426:	440a      	add	r2, r1
 8005428:	3284      	adds	r2, #132	@ 0x84
 800542a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800542e:	f023 0307 	bic.w	r3, r3, #7
 8005432:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	01db      	lsls	r3, r3, #7
 800543e:	4413      	add	r3, r2
 8005440:	3384      	adds	r3, #132	@ 0x84
 8005442:	461a      	mov	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005448:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	461a      	mov	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	01db      	lsls	r3, r3, #7
 8005454:	4413      	add	r3, r2
 8005456:	3384      	adds	r3, #132	@ 0x84
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	4611      	mov	r1, r2
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	01d2      	lsls	r2, r2, #7
 8005464:	440a      	add	r2, r1
 8005466:	3284      	adds	r2, #132	@ 0x84
 8005468:	f043 0301 	orr.w	r3, r3, #1
 800546c:	6013      	str	r3, [r2, #0]
}
 800546e:	bf00      	nop
 8005470:	3724      	adds	r7, #36	@ 0x24
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
	...

0800547c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e267      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d075      	beq.n	8005586 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800549a:	4b88      	ldr	r3, [pc, #544]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f003 030c 	and.w	r3, r3, #12
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d00c      	beq.n	80054c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054a6:	4b85      	ldr	r3, [pc, #532]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80054ae:	2b08      	cmp	r3, #8
 80054b0:	d112      	bne.n	80054d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054b2:	4b82      	ldr	r3, [pc, #520]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054be:	d10b      	bne.n	80054d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c0:	4b7e      	ldr	r3, [pc, #504]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d05b      	beq.n	8005584 <HAL_RCC_OscConfig+0x108>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d157      	bne.n	8005584 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e242      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054e0:	d106      	bne.n	80054f0 <HAL_RCC_OscConfig+0x74>
 80054e2:	4b76      	ldr	r3, [pc, #472]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a75      	ldr	r2, [pc, #468]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 80054e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	e01d      	b.n	800552c <HAL_RCC_OscConfig+0xb0>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054f8:	d10c      	bne.n	8005514 <HAL_RCC_OscConfig+0x98>
 80054fa:	4b70      	ldr	r3, [pc, #448]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a6f      	ldr	r2, [pc, #444]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 8005500:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	4b6d      	ldr	r3, [pc, #436]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a6c      	ldr	r2, [pc, #432]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 800550c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	e00b      	b.n	800552c <HAL_RCC_OscConfig+0xb0>
 8005514:	4b69      	ldr	r3, [pc, #420]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a68      	ldr	r2, [pc, #416]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 800551a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	4b66      	ldr	r3, [pc, #408]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a65      	ldr	r2, [pc, #404]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 8005526:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800552a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d013      	beq.n	800555c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005534:	f7fe f816 	bl	8003564 <HAL_GetTick>
 8005538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800553c:	f7fe f812 	bl	8003564 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b64      	cmp	r3, #100	@ 0x64
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e207      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554e:	4b5b      	ldr	r3, [pc, #364]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0f0      	beq.n	800553c <HAL_RCC_OscConfig+0xc0>
 800555a:	e014      	b.n	8005586 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555c:	f7fe f802 	bl	8003564 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005564:	f7fd fffe 	bl	8003564 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b64      	cmp	r3, #100	@ 0x64
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e1f3      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005576:	4b51      	ldr	r3, [pc, #324]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f0      	bne.n	8005564 <HAL_RCC_OscConfig+0xe8>
 8005582:	e000      	b.n	8005586 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d063      	beq.n	800565a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005592:	4b4a      	ldr	r3, [pc, #296]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 030c 	and.w	r3, r3, #12
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00b      	beq.n	80055b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800559e:	4b47      	ldr	r3, [pc, #284]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d11c      	bne.n	80055e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055aa:	4b44      	ldr	r3, [pc, #272]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d116      	bne.n	80055e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055b6:	4b41      	ldr	r3, [pc, #260]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d005      	beq.n	80055ce <HAL_RCC_OscConfig+0x152>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d001      	beq.n	80055ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e1c7      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ce:	4b3b      	ldr	r3, [pc, #236]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	4937      	ldr	r1, [pc, #220]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055e2:	e03a      	b.n	800565a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d020      	beq.n	800562e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055ec:	4b34      	ldr	r3, [pc, #208]	@ (80056c0 <HAL_RCC_OscConfig+0x244>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f2:	f7fd ffb7 	bl	8003564 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f8:	e008      	b.n	800560c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055fa:	f7fd ffb3 	bl	8003564 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e1a8      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800560c:	4b2b      	ldr	r3, [pc, #172]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0f0      	beq.n	80055fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005618:	4b28      	ldr	r3, [pc, #160]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4925      	ldr	r1, [pc, #148]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 8005628:	4313      	orrs	r3, r2
 800562a:	600b      	str	r3, [r1, #0]
 800562c:	e015      	b.n	800565a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800562e:	4b24      	ldr	r3, [pc, #144]	@ (80056c0 <HAL_RCC_OscConfig+0x244>)
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005634:	f7fd ff96 	bl	8003564 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800563c:	f7fd ff92 	bl	8003564 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e187      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800564e:	4b1b      	ldr	r3, [pc, #108]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f0      	bne.n	800563c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d036      	beq.n	80056d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d016      	beq.n	800569c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800566e:	4b15      	ldr	r3, [pc, #84]	@ (80056c4 <HAL_RCC_OscConfig+0x248>)
 8005670:	2201      	movs	r2, #1
 8005672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005674:	f7fd ff76 	bl	8003564 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800567c:	f7fd ff72 	bl	8003564 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e167      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800568e:	4b0b      	ldr	r3, [pc, #44]	@ (80056bc <HAL_RCC_OscConfig+0x240>)
 8005690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0f0      	beq.n	800567c <HAL_RCC_OscConfig+0x200>
 800569a:	e01b      	b.n	80056d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800569c:	4b09      	ldr	r3, [pc, #36]	@ (80056c4 <HAL_RCC_OscConfig+0x248>)
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a2:	f7fd ff5f 	bl	8003564 <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056a8:	e00e      	b.n	80056c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056aa:	f7fd ff5b 	bl	8003564 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d907      	bls.n	80056c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e150      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
 80056bc:	40023800 	.word	0x40023800
 80056c0:	42470000 	.word	0x42470000
 80056c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056c8:	4b88      	ldr	r3, [pc, #544]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 80056ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1ea      	bne.n	80056aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 8097 	beq.w	8005810 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056e2:	2300      	movs	r3, #0
 80056e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056e6:	4b81      	ldr	r3, [pc, #516]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 80056e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10f      	bne.n	8005712 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056f2:	2300      	movs	r3, #0
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	4b7d      	ldr	r3, [pc, #500]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fa:	4a7c      	ldr	r2, [pc, #496]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 80056fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005700:	6413      	str	r3, [r2, #64]	@ 0x40
 8005702:	4b7a      	ldr	r3, [pc, #488]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 8005704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800570a:	60bb      	str	r3, [r7, #8]
 800570c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800570e:	2301      	movs	r3, #1
 8005710:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005712:	4b77      	ldr	r3, [pc, #476]	@ (80058f0 <HAL_RCC_OscConfig+0x474>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800571a:	2b00      	cmp	r3, #0
 800571c:	d118      	bne.n	8005750 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800571e:	4b74      	ldr	r3, [pc, #464]	@ (80058f0 <HAL_RCC_OscConfig+0x474>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a73      	ldr	r2, [pc, #460]	@ (80058f0 <HAL_RCC_OscConfig+0x474>)
 8005724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800572a:	f7fd ff1b 	bl	8003564 <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005732:	f7fd ff17 	bl	8003564 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e10c      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005744:	4b6a      	ldr	r3, [pc, #424]	@ (80058f0 <HAL_RCC_OscConfig+0x474>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f0      	beq.n	8005732 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d106      	bne.n	8005766 <HAL_RCC_OscConfig+0x2ea>
 8005758:	4b64      	ldr	r3, [pc, #400]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 800575a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800575c:	4a63      	ldr	r2, [pc, #396]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	6713      	str	r3, [r2, #112]	@ 0x70
 8005764:	e01c      	b.n	80057a0 <HAL_RCC_OscConfig+0x324>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	2b05      	cmp	r3, #5
 800576c:	d10c      	bne.n	8005788 <HAL_RCC_OscConfig+0x30c>
 800576e:	4b5f      	ldr	r3, [pc, #380]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 8005770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005772:	4a5e      	ldr	r2, [pc, #376]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 8005774:	f043 0304 	orr.w	r3, r3, #4
 8005778:	6713      	str	r3, [r2, #112]	@ 0x70
 800577a:	4b5c      	ldr	r3, [pc, #368]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 800577c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800577e:	4a5b      	ldr	r2, [pc, #364]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 8005780:	f043 0301 	orr.w	r3, r3, #1
 8005784:	6713      	str	r3, [r2, #112]	@ 0x70
 8005786:	e00b      	b.n	80057a0 <HAL_RCC_OscConfig+0x324>
 8005788:	4b58      	ldr	r3, [pc, #352]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 800578a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800578c:	4a57      	ldr	r2, [pc, #348]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 800578e:	f023 0301 	bic.w	r3, r3, #1
 8005792:	6713      	str	r3, [r2, #112]	@ 0x70
 8005794:	4b55      	ldr	r3, [pc, #340]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 8005796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005798:	4a54      	ldr	r2, [pc, #336]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 800579a:	f023 0304 	bic.w	r3, r3, #4
 800579e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d015      	beq.n	80057d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a8:	f7fd fedc 	bl	8003564 <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ae:	e00a      	b.n	80057c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b0:	f7fd fed8 	bl	8003564 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057be:	4293      	cmp	r3, r2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e0cb      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c6:	4b49      	ldr	r3, [pc, #292]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 80057c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0ee      	beq.n	80057b0 <HAL_RCC_OscConfig+0x334>
 80057d2:	e014      	b.n	80057fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057d4:	f7fd fec6 	bl	8003564 <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057da:	e00a      	b.n	80057f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057dc:	f7fd fec2 	bl	8003564 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e0b5      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057f2:	4b3e      	ldr	r3, [pc, #248]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 80057f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1ee      	bne.n	80057dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057fe:	7dfb      	ldrb	r3, [r7, #23]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d105      	bne.n	8005810 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005804:	4b39      	ldr	r3, [pc, #228]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 8005806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005808:	4a38      	ldr	r2, [pc, #224]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 800580a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800580e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 80a1 	beq.w	800595c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800581a:	4b34      	ldr	r3, [pc, #208]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 030c 	and.w	r3, r3, #12
 8005822:	2b08      	cmp	r3, #8
 8005824:	d05c      	beq.n	80058e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2b02      	cmp	r3, #2
 800582c:	d141      	bne.n	80058b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800582e:	4b31      	ldr	r3, [pc, #196]	@ (80058f4 <HAL_RCC_OscConfig+0x478>)
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005834:	f7fd fe96 	bl	8003564 <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800583c:	f7fd fe92 	bl	8003564 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e087      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584e:	4b27      	ldr	r3, [pc, #156]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f0      	bne.n	800583c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69da      	ldr	r2, [r3, #28]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005868:	019b      	lsls	r3, r3, #6
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005870:	085b      	lsrs	r3, r3, #1
 8005872:	3b01      	subs	r3, #1
 8005874:	041b      	lsls	r3, r3, #16
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587c:	061b      	lsls	r3, r3, #24
 800587e:	491b      	ldr	r1, [pc, #108]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 8005880:	4313      	orrs	r3, r2
 8005882:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005884:	4b1b      	ldr	r3, [pc, #108]	@ (80058f4 <HAL_RCC_OscConfig+0x478>)
 8005886:	2201      	movs	r2, #1
 8005888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800588a:	f7fd fe6b 	bl	8003564 <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005890:	e008      	b.n	80058a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005892:	f7fd fe67 	bl	8003564 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e05c      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a4:	4b11      	ldr	r3, [pc, #68]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0f0      	beq.n	8005892 <HAL_RCC_OscConfig+0x416>
 80058b0:	e054      	b.n	800595c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058b2:	4b10      	ldr	r3, [pc, #64]	@ (80058f4 <HAL_RCC_OscConfig+0x478>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b8:	f7fd fe54 	bl	8003564 <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058c0:	f7fd fe50 	bl	8003564 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e045      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d2:	4b06      	ldr	r3, [pc, #24]	@ (80058ec <HAL_RCC_OscConfig+0x470>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f0      	bne.n	80058c0 <HAL_RCC_OscConfig+0x444>
 80058de:	e03d      	b.n	800595c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d107      	bne.n	80058f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e038      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
 80058ec:	40023800 	.word	0x40023800
 80058f0:	40007000 	.word	0x40007000
 80058f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005968 <HAL_RCC_OscConfig+0x4ec>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d028      	beq.n	8005958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005910:	429a      	cmp	r2, r3
 8005912:	d121      	bne.n	8005958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800591e:	429a      	cmp	r2, r3
 8005920:	d11a      	bne.n	8005958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005928:	4013      	ands	r3, r2
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800592e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005930:	4293      	cmp	r3, r2
 8005932:	d111      	bne.n	8005958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593e:	085b      	lsrs	r3, r3, #1
 8005940:	3b01      	subs	r3, #1
 8005942:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005944:	429a      	cmp	r2, r3
 8005946:	d107      	bne.n	8005958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005952:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005954:	429a      	cmp	r2, r3
 8005956:	d001      	beq.n	800595c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e000      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40023800 	.word	0x40023800

0800596c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e0cc      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005980:	4b68      	ldr	r3, [pc, #416]	@ (8005b24 <HAL_RCC_ClockConfig+0x1b8>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 030f 	and.w	r3, r3, #15
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d90c      	bls.n	80059a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598e:	4b65      	ldr	r3, [pc, #404]	@ (8005b24 <HAL_RCC_ClockConfig+0x1b8>)
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005996:	4b63      	ldr	r3, [pc, #396]	@ (8005b24 <HAL_RCC_ClockConfig+0x1b8>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 030f 	and.w	r3, r3, #15
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d001      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e0b8      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d020      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059c0:	4b59      	ldr	r3, [pc, #356]	@ (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	4a58      	ldr	r2, [pc, #352]	@ (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80059ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059d8:	4b53      	ldr	r3, [pc, #332]	@ (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	4a52      	ldr	r2, [pc, #328]	@ (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 80059de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80059e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059e4:	4b50      	ldr	r3, [pc, #320]	@ (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	494d      	ldr	r1, [pc, #308]	@ (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d044      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d107      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a0a:	4b47      	ldr	r3, [pc, #284]	@ (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d119      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e07f      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d003      	beq.n	8005a2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d107      	bne.n	8005a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a2a:	4b3f      	ldr	r3, [pc, #252]	@ (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d109      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e06f      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a3a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e067      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a4a:	4b37      	ldr	r3, [pc, #220]	@ (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f023 0203 	bic.w	r2, r3, #3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	4934      	ldr	r1, [pc, #208]	@ (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a5c:	f7fd fd82 	bl	8003564 <HAL_GetTick>
 8005a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a62:	e00a      	b.n	8005a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a64:	f7fd fd7e 	bl	8003564 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e04f      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 020c 	and.w	r2, r3, #12
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d1eb      	bne.n	8005a64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a8c:	4b25      	ldr	r3, [pc, #148]	@ (8005b24 <HAL_RCC_ClockConfig+0x1b8>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 030f 	and.w	r3, r3, #15
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d20c      	bcs.n	8005ab4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a9a:	4b22      	ldr	r3, [pc, #136]	@ (8005b24 <HAL_RCC_ClockConfig+0x1b8>)
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa2:	4b20      	ldr	r3, [pc, #128]	@ (8005b24 <HAL_RCC_ClockConfig+0x1b8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d001      	beq.n	8005ab4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e032      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ac0:	4b19      	ldr	r3, [pc, #100]	@ (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	4916      	ldr	r1, [pc, #88]	@ (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d009      	beq.n	8005af2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ade:	4b12      	ldr	r3, [pc, #72]	@ (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	490e      	ldr	r1, [pc, #56]	@ (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005af2:	f000 f821 	bl	8005b38 <HAL_RCC_GetSysClockFreq>
 8005af6:	4602      	mov	r2, r0
 8005af8:	4b0b      	ldr	r3, [pc, #44]	@ (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	091b      	lsrs	r3, r3, #4
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	490a      	ldr	r1, [pc, #40]	@ (8005b2c <HAL_RCC_ClockConfig+0x1c0>)
 8005b04:	5ccb      	ldrb	r3, [r1, r3]
 8005b06:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0a:	4a09      	ldr	r2, [pc, #36]	@ (8005b30 <HAL_RCC_ClockConfig+0x1c4>)
 8005b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005b0e:	4b09      	ldr	r3, [pc, #36]	@ (8005b34 <HAL_RCC_ClockConfig+0x1c8>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fd fce2 	bl	80034dc <HAL_InitTick>

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	40023c00 	.word	0x40023c00
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	080087f8 	.word	0x080087f8
 8005b30:	20000010 	.word	0x20000010
 8005b34:	20000014 	.word	0x20000014

08005b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b3c:	b094      	sub	sp, #80	@ 0x50
 8005b3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b50:	4b79      	ldr	r3, [pc, #484]	@ (8005d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 030c 	and.w	r3, r3, #12
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d00d      	beq.n	8005b78 <HAL_RCC_GetSysClockFreq+0x40>
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	f200 80e1 	bhi.w	8005d24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <HAL_RCC_GetSysClockFreq+0x34>
 8005b66:	2b04      	cmp	r3, #4
 8005b68:	d003      	beq.n	8005b72 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b6a:	e0db      	b.n	8005d24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b6c:	4b73      	ldr	r3, [pc, #460]	@ (8005d3c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b70:	e0db      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b72:	4b73      	ldr	r3, [pc, #460]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b76:	e0d8      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b78:	4b6f      	ldr	r3, [pc, #444]	@ (8005d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b80:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b82:	4b6d      	ldr	r3, [pc, #436]	@ (8005d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d063      	beq.n	8005c56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b8e:	4b6a      	ldr	r3, [pc, #424]	@ (8005d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	099b      	lsrs	r3, r3, #6
 8005b94:	2200      	movs	r2, #0
 8005b96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ba6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005baa:	4622      	mov	r2, r4
 8005bac:	462b      	mov	r3, r5
 8005bae:	f04f 0000 	mov.w	r0, #0
 8005bb2:	f04f 0100 	mov.w	r1, #0
 8005bb6:	0159      	lsls	r1, r3, #5
 8005bb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bbc:	0150      	lsls	r0, r2, #5
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	1a51      	subs	r1, r2, r1
 8005bc6:	6139      	str	r1, [r7, #16]
 8005bc8:	4629      	mov	r1, r5
 8005bca:	eb63 0301 	sbc.w	r3, r3, r1
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bdc:	4659      	mov	r1, fp
 8005bde:	018b      	lsls	r3, r1, #6
 8005be0:	4651      	mov	r1, sl
 8005be2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005be6:	4651      	mov	r1, sl
 8005be8:	018a      	lsls	r2, r1, #6
 8005bea:	4651      	mov	r1, sl
 8005bec:	ebb2 0801 	subs.w	r8, r2, r1
 8005bf0:	4659      	mov	r1, fp
 8005bf2:	eb63 0901 	sbc.w	r9, r3, r1
 8005bf6:	f04f 0200 	mov.w	r2, #0
 8005bfa:	f04f 0300 	mov.w	r3, #0
 8005bfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c0a:	4690      	mov	r8, r2
 8005c0c:	4699      	mov	r9, r3
 8005c0e:	4623      	mov	r3, r4
 8005c10:	eb18 0303 	adds.w	r3, r8, r3
 8005c14:	60bb      	str	r3, [r7, #8]
 8005c16:	462b      	mov	r3, r5
 8005c18:	eb49 0303 	adc.w	r3, r9, r3
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	f04f 0200 	mov.w	r2, #0
 8005c22:	f04f 0300 	mov.w	r3, #0
 8005c26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	024b      	lsls	r3, r1, #9
 8005c2e:	4621      	mov	r1, r4
 8005c30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c34:	4621      	mov	r1, r4
 8005c36:	024a      	lsls	r2, r1, #9
 8005c38:	4610      	mov	r0, r2
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c3e:	2200      	movs	r2, #0
 8005c40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c48:	f7fa fb22 	bl	8000290 <__aeabi_uldivmod>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4613      	mov	r3, r2
 8005c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c54:	e058      	b.n	8005d08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c56:	4b38      	ldr	r3, [pc, #224]	@ (8005d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	099b      	lsrs	r3, r3, #6
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	4618      	mov	r0, r3
 8005c60:	4611      	mov	r1, r2
 8005c62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c66:	623b      	str	r3, [r7, #32]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c70:	4642      	mov	r2, r8
 8005c72:	464b      	mov	r3, r9
 8005c74:	f04f 0000 	mov.w	r0, #0
 8005c78:	f04f 0100 	mov.w	r1, #0
 8005c7c:	0159      	lsls	r1, r3, #5
 8005c7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c82:	0150      	lsls	r0, r2, #5
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	4641      	mov	r1, r8
 8005c8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c8e:	4649      	mov	r1, r9
 8005c90:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c94:	f04f 0200 	mov.w	r2, #0
 8005c98:	f04f 0300 	mov.w	r3, #0
 8005c9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ca0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ca4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ca8:	ebb2 040a 	subs.w	r4, r2, sl
 8005cac:	eb63 050b 	sbc.w	r5, r3, fp
 8005cb0:	f04f 0200 	mov.w	r2, #0
 8005cb4:	f04f 0300 	mov.w	r3, #0
 8005cb8:	00eb      	lsls	r3, r5, #3
 8005cba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cbe:	00e2      	lsls	r2, r4, #3
 8005cc0:	4614      	mov	r4, r2
 8005cc2:	461d      	mov	r5, r3
 8005cc4:	4643      	mov	r3, r8
 8005cc6:	18e3      	adds	r3, r4, r3
 8005cc8:	603b      	str	r3, [r7, #0]
 8005cca:	464b      	mov	r3, r9
 8005ccc:	eb45 0303 	adc.w	r3, r5, r3
 8005cd0:	607b      	str	r3, [r7, #4]
 8005cd2:	f04f 0200 	mov.w	r2, #0
 8005cd6:	f04f 0300 	mov.w	r3, #0
 8005cda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cde:	4629      	mov	r1, r5
 8005ce0:	028b      	lsls	r3, r1, #10
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ce8:	4621      	mov	r1, r4
 8005cea:	028a      	lsls	r2, r1, #10
 8005cec:	4610      	mov	r0, r2
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	61bb      	str	r3, [r7, #24]
 8005cf6:	61fa      	str	r2, [r7, #28]
 8005cf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cfc:	f7fa fac8 	bl	8000290 <__aeabi_uldivmod>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4613      	mov	r3, r2
 8005d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005d08:	4b0b      	ldr	r3, [pc, #44]	@ (8005d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	0c1b      	lsrs	r3, r3, #16
 8005d0e:	f003 0303 	and.w	r3, r3, #3
 8005d12:	3301      	adds	r3, #1
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005d18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d22:	e002      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d24:	4b05      	ldr	r3, [pc, #20]	@ (8005d3c <HAL_RCC_GetSysClockFreq+0x204>)
 8005d26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3750      	adds	r7, #80	@ 0x50
 8005d30:	46bd      	mov	sp, r7
 8005d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d36:	bf00      	nop
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	00f42400 	.word	0x00f42400
 8005d40:	007a1200 	.word	0x007a1200

08005d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d48:	4b03      	ldr	r3, [pc, #12]	@ (8005d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	20000010 	.word	0x20000010

08005d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d60:	f7ff fff0 	bl	8005d44 <HAL_RCC_GetHCLKFreq>
 8005d64:	4602      	mov	r2, r0
 8005d66:	4b05      	ldr	r3, [pc, #20]	@ (8005d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	0a9b      	lsrs	r3, r3, #10
 8005d6c:	f003 0307 	and.w	r3, r3, #7
 8005d70:	4903      	ldr	r1, [pc, #12]	@ (8005d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d72:	5ccb      	ldrb	r3, [r1, r3]
 8005d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40023800 	.word	0x40023800
 8005d80:	08008808 	.word	0x08008808

08005d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10b      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d105      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d075      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005db8:	4b91      	ldr	r3, [pc, #580]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dbe:	f7fd fbd1 	bl	8003564 <HAL_GetTick>
 8005dc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005dc4:	e008      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005dc6:	f7fd fbcd 	bl	8003564 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d901      	bls.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e189      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005dd8:	4b8a      	ldr	r3, [pc, #552]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1f0      	bne.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d009      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	019a      	lsls	r2, r3, #6
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	071b      	lsls	r3, r3, #28
 8005dfc:	4981      	ldr	r1, [pc, #516]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01f      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e10:	4b7c      	ldr	r3, [pc, #496]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e16:	0f1b      	lsrs	r3, r3, #28
 8005e18:	f003 0307 	and.w	r3, r3, #7
 8005e1c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	019a      	lsls	r2, r3, #6
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	061b      	lsls	r3, r3, #24
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	071b      	lsls	r3, r3, #28
 8005e30:	4974      	ldr	r1, [pc, #464]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005e38:	4b72      	ldr	r3, [pc, #456]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e3e:	f023 021f 	bic.w	r2, r3, #31
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	496e      	ldr	r1, [pc, #440]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00d      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	019a      	lsls	r2, r3, #6
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	061b      	lsls	r3, r3, #24
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	071b      	lsls	r3, r3, #28
 8005e70:	4964      	ldr	r1, [pc, #400]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e78:	4b61      	ldr	r3, [pc, #388]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e7e:	f7fd fb71 	bl	8003564 <HAL_GetTick>
 8005e82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e84:	e008      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e86:	f7fd fb6d 	bl	8003564 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d901      	bls.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e129      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e98:	4b5a      	ldr	r3, [pc, #360]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0f0      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d105      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d079      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005ebc:	4b52      	ldr	r3, [pc, #328]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ec2:	f7fd fb4f 	bl	8003564 <HAL_GetTick>
 8005ec6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ec8:	e008      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005eca:	f7fd fb4b 	bl	8003564 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d901      	bls.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e107      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005edc:	4b49      	ldr	r3, [pc, #292]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ee8:	d0ef      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0304 	and.w	r3, r3, #4
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d020      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ef6:	4b43      	ldr	r3, [pc, #268]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005efc:	0f1b      	lsrs	r3, r3, #28
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	019a      	lsls	r2, r3, #6
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	061b      	lsls	r3, r3, #24
 8005f10:	431a      	orrs	r2, r3
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	071b      	lsls	r3, r3, #28
 8005f16:	493b      	ldr	r1, [pc, #236]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f1e:	4b39      	ldr	r3, [pc, #228]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f24:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	021b      	lsls	r3, r3, #8
 8005f30:	4934      	ldr	r1, [pc, #208]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0308 	and.w	r3, r3, #8
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d01e      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f44:	4b2f      	ldr	r3, [pc, #188]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f4a:	0e1b      	lsrs	r3, r3, #24
 8005f4c:	f003 030f 	and.w	r3, r3, #15
 8005f50:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	019a      	lsls	r2, r3, #6
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	061b      	lsls	r3, r3, #24
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	071b      	lsls	r3, r3, #28
 8005f64:	4927      	ldr	r1, [pc, #156]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f6c:	4b25      	ldr	r3, [pc, #148]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f72:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7a:	4922      	ldr	r1, [pc, #136]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f82:	4b21      	ldr	r3, [pc, #132]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005f84:	2201      	movs	r2, #1
 8005f86:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f88:	f7fd faec 	bl	8003564 <HAL_GetTick>
 8005f8c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f90:	f7fd fae8 	bl	8003564 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e0a4      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005fa2:	4b18      	ldr	r3, [pc, #96]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005faa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fae:	d1ef      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0320 	and.w	r3, r3, #32
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 808b 	beq.w	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	4b10      	ldr	r3, [pc, #64]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc6:	4a0f      	ldr	r2, [pc, #60]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fce:	4b0d      	ldr	r3, [pc, #52]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005fda:	4b0c      	ldr	r3, [pc, #48]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a0b      	ldr	r2, [pc, #44]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fe4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fe6:	f7fd fabd 	bl	8003564 <HAL_GetTick>
 8005fea:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005fec:	e010      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fee:	f7fd fab9 	bl	8003564 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d909      	bls.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e075      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006000:	42470068 	.word	0x42470068
 8006004:	40023800 	.word	0x40023800
 8006008:	42470070 	.word	0x42470070
 800600c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006010:	4b38      	ldr	r3, [pc, #224]	@ (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0e8      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800601c:	4b36      	ldr	r3, [pc, #216]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800601e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006020:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006024:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d02f      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006030:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	429a      	cmp	r2, r3
 8006038:	d028      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800603a:	4b2f      	ldr	r3, [pc, #188]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800603c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800603e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006042:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006044:	4b2d      	ldr	r3, [pc, #180]	@ (80060fc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006046:	2201      	movs	r2, #1
 8006048:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800604a:	4b2c      	ldr	r3, [pc, #176]	@ (80060fc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006050:	4a29      	ldr	r2, [pc, #164]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006056:	4b28      	ldr	r3, [pc, #160]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b01      	cmp	r3, #1
 8006060:	d114      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006062:	f7fd fa7f 	bl	8003564 <HAL_GetTick>
 8006066:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006068:	e00a      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800606a:	f7fd fa7b 	bl	8003564 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006078:	4293      	cmp	r3, r2
 800607a:	d901      	bls.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e035      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006080:	4b1d      	ldr	r3, [pc, #116]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0ee      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006090:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006094:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006098:	d10d      	bne.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800609a:	4b17      	ldr	r3, [pc, #92]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80060aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060ae:	4912      	ldr	r1, [pc, #72]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	608b      	str	r3, [r1, #8]
 80060b4:	e005      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80060b6:	4b10      	ldr	r3, [pc, #64]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	4a0f      	ldr	r2, [pc, #60]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060bc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80060c0:	6093      	str	r3, [r2, #8]
 80060c2:	4b0d      	ldr	r3, [pc, #52]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060c4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060ce:	490a      	ldr	r1, [pc, #40]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0310 	and.w	r3, r3, #16
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d004      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80060e6:	4b06      	ldr	r3, [pc, #24]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80060e8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3718      	adds	r7, #24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	40007000 	.word	0x40007000
 80060f8:	40023800 	.word	0x40023800
 80060fc:	42470e40 	.word	0x42470e40
 8006100:	424711e0 	.word	0x424711e0

08006104 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e01c      	b.n	8006150 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	795b      	ldrb	r3, [r3, #5]
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d105      	bne.n	800612c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7fc fd1c 	bl	8002b64 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f042 0204 	orr.w	r2, r2, #4
 8006140:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e07b      	b.n	8006262 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616e:	2b00      	cmp	r3, #0
 8006170:	d108      	bne.n	8006184 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800617a:	d009      	beq.n	8006190 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	61da      	str	r2, [r3, #28]
 8006182:	e005      	b.n	8006190 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fc fcfc 	bl	8002ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80061d8:	431a      	orrs	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	431a      	orrs	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	431a      	orrs	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006200:	431a      	orrs	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006214:	ea42 0103 	orr.w	r1, r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	0c1b      	lsrs	r3, r3, #16
 800622e:	f003 0104 	and.w	r1, r3, #4
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006236:	f003 0210 	and.w	r2, r3, #16
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69da      	ldr	r2, [r3, #28]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006250:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b082      	sub	sp, #8
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e01a      	b.n	80062b2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006292:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7fc fccf 	bl	8002c38 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b088      	sub	sp, #32
 80062be:	af00      	add	r7, sp, #0
 80062c0:	60f8      	str	r0, [r7, #12]
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	603b      	str	r3, [r7, #0]
 80062c6:	4613      	mov	r3, r2
 80062c8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062ca:	f7fd f94b 	bl	8003564 <HAL_GetTick>
 80062ce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80062d0:	88fb      	ldrh	r3, [r7, #6]
 80062d2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d001      	beq.n	80062e4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80062e0:	2302      	movs	r3, #2
 80062e2:	e12a      	b.n	800653a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <HAL_SPI_Transmit+0x36>
 80062ea:	88fb      	ldrh	r3, [r7, #6]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e122      	b.n	800653a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d101      	bne.n	8006302 <HAL_SPI_Transmit+0x48>
 80062fe:	2302      	movs	r3, #2
 8006300:	e11b      	b.n	800653a <HAL_SPI_Transmit+0x280>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2203      	movs	r2, #3
 800630e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	88fa      	ldrh	r2, [r7, #6]
 8006322:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	88fa      	ldrh	r2, [r7, #6]
 8006328:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006350:	d10f      	bne.n	8006372 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006360:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006370:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800637c:	2b40      	cmp	r3, #64	@ 0x40
 800637e:	d007      	beq.n	8006390 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800638e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006398:	d152      	bne.n	8006440 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <HAL_SPI_Transmit+0xee>
 80063a2:	8b7b      	ldrh	r3, [r7, #26]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d145      	bne.n	8006434 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ac:	881a      	ldrh	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b8:	1c9a      	adds	r2, r3, #2
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	3b01      	subs	r3, #1
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80063cc:	e032      	b.n	8006434 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d112      	bne.n	8006402 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e0:	881a      	ldrh	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ec:	1c9a      	adds	r2, r3, #2
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006400:	e018      	b.n	8006434 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006402:	f7fd f8af 	bl	8003564 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d803      	bhi.n	800641a <HAL_SPI_Transmit+0x160>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006418:	d102      	bne.n	8006420 <HAL_SPI_Transmit+0x166>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d109      	bne.n	8006434 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e082      	b.n	800653a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1c7      	bne.n	80063ce <HAL_SPI_Transmit+0x114>
 800643e:	e053      	b.n	80064e8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <HAL_SPI_Transmit+0x194>
 8006448:	8b7b      	ldrh	r3, [r7, #26]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d147      	bne.n	80064de <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	330c      	adds	r3, #12
 8006458:	7812      	ldrb	r2, [r2, #0]
 800645a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800646a:	b29b      	uxth	r3, r3
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006474:	e033      	b.n	80064de <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b02      	cmp	r3, #2
 8006482:	d113      	bne.n	80064ac <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	330c      	adds	r3, #12
 800648e:	7812      	ldrb	r2, [r2, #0]
 8006490:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3b01      	subs	r3, #1
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80064aa:	e018      	b.n	80064de <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064ac:	f7fd f85a 	bl	8003564 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d803      	bhi.n	80064c4 <HAL_SPI_Transmit+0x20a>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c2:	d102      	bne.n	80064ca <HAL_SPI_Transmit+0x210>
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d109      	bne.n	80064de <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e02d      	b.n	800653a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1c6      	bne.n	8006476 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064e8:	69fa      	ldr	r2, [r7, #28]
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 f8bf 	bl	8006670 <SPI_EndRxTxTransaction>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2220      	movs	r2, #32
 80064fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10a      	bne.n	800651c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006506:	2300      	movs	r3, #0
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	617b      	str	r3, [r7, #20]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	617b      	str	r3, [r7, #20]
 800651a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e000      	b.n	800653a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006538:	2300      	movs	r3, #0
  }
}
 800653a:	4618      	mov	r0, r3
 800653c:	3720      	adds	r7, #32
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006542:	b480      	push	{r7}
 8006544:	b083      	sub	sp, #12
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006550:	b2db      	uxtb	r3, r3
}
 8006552:	4618      	mov	r0, r3
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
	...

08006560 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	603b      	str	r3, [r7, #0]
 800656c:	4613      	mov	r3, r2
 800656e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006570:	f7fc fff8 	bl	8003564 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006578:	1a9b      	subs	r3, r3, r2
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	4413      	add	r3, r2
 800657e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006580:	f7fc fff0 	bl	8003564 <HAL_GetTick>
 8006584:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006586:	4b39      	ldr	r3, [pc, #228]	@ (800666c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	015b      	lsls	r3, r3, #5
 800658c:	0d1b      	lsrs	r3, r3, #20
 800658e:	69fa      	ldr	r2, [r7, #28]
 8006590:	fb02 f303 	mul.w	r3, r2, r3
 8006594:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006596:	e054      	b.n	8006642 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659e:	d050      	beq.n	8006642 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065a0:	f7fc ffe0 	bl	8003564 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	69fa      	ldr	r2, [r7, #28]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d902      	bls.n	80065b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d13d      	bne.n	8006632 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80065c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065ce:	d111      	bne.n	80065f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065d8:	d004      	beq.n	80065e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065e2:	d107      	bne.n	80065f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065fc:	d10f      	bne.n	800661e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800661c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e017      	b.n	8006662 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	3b01      	subs	r3, #1
 8006640:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	4013      	ands	r3, r2
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	429a      	cmp	r2, r3
 8006650:	bf0c      	ite	eq
 8006652:	2301      	moveq	r3, #1
 8006654:	2300      	movne	r3, #0
 8006656:	b2db      	uxtb	r3, r3
 8006658:	461a      	mov	r2, r3
 800665a:	79fb      	ldrb	r3, [r7, #7]
 800665c:	429a      	cmp	r2, r3
 800665e:	d19b      	bne.n	8006598 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3720      	adds	r7, #32
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	20000010 	.word	0x20000010

08006670 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b088      	sub	sp, #32
 8006674:	af02      	add	r7, sp, #8
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2201      	movs	r2, #1
 8006684:	2102      	movs	r1, #2
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f7ff ff6a 	bl	8006560 <SPI_WaitFlagStateUntilTimeout>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d007      	beq.n	80066a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006696:	f043 0220 	orr.w	r2, r3, #32
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e032      	b.n	8006708 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80066a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006710 <SPI_EndRxTxTransaction+0xa0>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006714 <SPI_EndRxTxTransaction+0xa4>)
 80066a8:	fba2 2303 	umull	r2, r3, r2, r3
 80066ac:	0d5b      	lsrs	r3, r3, #21
 80066ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80066b2:	fb02 f303 	mul.w	r3, r2, r3
 80066b6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066c0:	d112      	bne.n	80066e8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2200      	movs	r2, #0
 80066ca:	2180      	movs	r1, #128	@ 0x80
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f7ff ff47 	bl	8006560 <SPI_WaitFlagStateUntilTimeout>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d016      	beq.n	8006706 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066dc:	f043 0220 	orr.w	r2, r3, #32
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e00f      	b.n	8006708 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00a      	beq.n	8006704 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066fe:	2b80      	cmp	r3, #128	@ 0x80
 8006700:	d0f2      	beq.n	80066e8 <SPI_EndRxTxTransaction+0x78>
 8006702:	e000      	b.n	8006706 <SPI_EndRxTxTransaction+0x96>
        break;
 8006704:	bf00      	nop
  }

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	20000010 	.word	0x20000010
 8006714:	165e9f81 	.word	0x165e9f81

08006718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e041      	b.n	80067ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d106      	bne.n	8006744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f7fc fa98 	bl	8002c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3304      	adds	r3, #4
 8006754:	4619      	mov	r1, r3
 8006756:	4610      	mov	r0, r2
 8006758:	f000 f8f4 	bl	8006944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b084      	sub	sp, #16
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067c0:	2300      	movs	r3, #0
 80067c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d101      	bne.n	80067d2 <HAL_TIM_ConfigClockSource+0x1c>
 80067ce:	2302      	movs	r3, #2
 80067d0:	e0b4      	b.n	800693c <HAL_TIM_ConfigClockSource+0x186>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2202      	movs	r2, #2
 80067de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80067f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067f8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800680a:	d03e      	beq.n	800688a <HAL_TIM_ConfigClockSource+0xd4>
 800680c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006810:	f200 8087 	bhi.w	8006922 <HAL_TIM_ConfigClockSource+0x16c>
 8006814:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006818:	f000 8086 	beq.w	8006928 <HAL_TIM_ConfigClockSource+0x172>
 800681c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006820:	d87f      	bhi.n	8006922 <HAL_TIM_ConfigClockSource+0x16c>
 8006822:	2b70      	cmp	r3, #112	@ 0x70
 8006824:	d01a      	beq.n	800685c <HAL_TIM_ConfigClockSource+0xa6>
 8006826:	2b70      	cmp	r3, #112	@ 0x70
 8006828:	d87b      	bhi.n	8006922 <HAL_TIM_ConfigClockSource+0x16c>
 800682a:	2b60      	cmp	r3, #96	@ 0x60
 800682c:	d050      	beq.n	80068d0 <HAL_TIM_ConfigClockSource+0x11a>
 800682e:	2b60      	cmp	r3, #96	@ 0x60
 8006830:	d877      	bhi.n	8006922 <HAL_TIM_ConfigClockSource+0x16c>
 8006832:	2b50      	cmp	r3, #80	@ 0x50
 8006834:	d03c      	beq.n	80068b0 <HAL_TIM_ConfigClockSource+0xfa>
 8006836:	2b50      	cmp	r3, #80	@ 0x50
 8006838:	d873      	bhi.n	8006922 <HAL_TIM_ConfigClockSource+0x16c>
 800683a:	2b40      	cmp	r3, #64	@ 0x40
 800683c:	d058      	beq.n	80068f0 <HAL_TIM_ConfigClockSource+0x13a>
 800683e:	2b40      	cmp	r3, #64	@ 0x40
 8006840:	d86f      	bhi.n	8006922 <HAL_TIM_ConfigClockSource+0x16c>
 8006842:	2b30      	cmp	r3, #48	@ 0x30
 8006844:	d064      	beq.n	8006910 <HAL_TIM_ConfigClockSource+0x15a>
 8006846:	2b30      	cmp	r3, #48	@ 0x30
 8006848:	d86b      	bhi.n	8006922 <HAL_TIM_ConfigClockSource+0x16c>
 800684a:	2b20      	cmp	r3, #32
 800684c:	d060      	beq.n	8006910 <HAL_TIM_ConfigClockSource+0x15a>
 800684e:	2b20      	cmp	r3, #32
 8006850:	d867      	bhi.n	8006922 <HAL_TIM_ConfigClockSource+0x16c>
 8006852:	2b00      	cmp	r3, #0
 8006854:	d05c      	beq.n	8006910 <HAL_TIM_ConfigClockSource+0x15a>
 8006856:	2b10      	cmp	r3, #16
 8006858:	d05a      	beq.n	8006910 <HAL_TIM_ConfigClockSource+0x15a>
 800685a:	e062      	b.n	8006922 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800686c:	f000 f990 	bl	8006b90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800687e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	609a      	str	r2, [r3, #8]
      break;
 8006888:	e04f      	b.n	800692a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800689a:	f000 f979 	bl	8006b90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068ac:	609a      	str	r2, [r3, #8]
      break;
 80068ae:	e03c      	b.n	800692a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068bc:	461a      	mov	r2, r3
 80068be:	f000 f8ed 	bl	8006a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2150      	movs	r1, #80	@ 0x50
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 f946 	bl	8006b5a <TIM_ITRx_SetConfig>
      break;
 80068ce:	e02c      	b.n	800692a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068dc:	461a      	mov	r2, r3
 80068de:	f000 f90c 	bl	8006afa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2160      	movs	r1, #96	@ 0x60
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 f936 	bl	8006b5a <TIM_ITRx_SetConfig>
      break;
 80068ee:	e01c      	b.n	800692a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068fc:	461a      	mov	r2, r3
 80068fe:	f000 f8cd 	bl	8006a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2140      	movs	r1, #64	@ 0x40
 8006908:	4618      	mov	r0, r3
 800690a:	f000 f926 	bl	8006b5a <TIM_ITRx_SetConfig>
      break;
 800690e:	e00c      	b.n	800692a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4619      	mov	r1, r3
 800691a:	4610      	mov	r0, r2
 800691c:	f000 f91d 	bl	8006b5a <TIM_ITRx_SetConfig>
      break;
 8006920:	e003      	b.n	800692a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	73fb      	strb	r3, [r7, #15]
      break;
 8006926:	e000      	b.n	800692a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006928:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800693a:	7bfb      	ldrb	r3, [r7, #15]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a46      	ldr	r2, [pc, #280]	@ (8006a70 <TIM_Base_SetConfig+0x12c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d013      	beq.n	8006984 <TIM_Base_SetConfig+0x40>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006962:	d00f      	beq.n	8006984 <TIM_Base_SetConfig+0x40>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a43      	ldr	r2, [pc, #268]	@ (8006a74 <TIM_Base_SetConfig+0x130>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00b      	beq.n	8006984 <TIM_Base_SetConfig+0x40>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a42      	ldr	r2, [pc, #264]	@ (8006a78 <TIM_Base_SetConfig+0x134>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d007      	beq.n	8006984 <TIM_Base_SetConfig+0x40>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a41      	ldr	r2, [pc, #260]	@ (8006a7c <TIM_Base_SetConfig+0x138>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d003      	beq.n	8006984 <TIM_Base_SetConfig+0x40>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a40      	ldr	r2, [pc, #256]	@ (8006a80 <TIM_Base_SetConfig+0x13c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d108      	bne.n	8006996 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800698a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a35      	ldr	r2, [pc, #212]	@ (8006a70 <TIM_Base_SetConfig+0x12c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d02b      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069a4:	d027      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a32      	ldr	r2, [pc, #200]	@ (8006a74 <TIM_Base_SetConfig+0x130>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d023      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a31      	ldr	r2, [pc, #196]	@ (8006a78 <TIM_Base_SetConfig+0x134>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d01f      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a30      	ldr	r2, [pc, #192]	@ (8006a7c <TIM_Base_SetConfig+0x138>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d01b      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a2f      	ldr	r2, [pc, #188]	@ (8006a80 <TIM_Base_SetConfig+0x13c>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d017      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a2e      	ldr	r2, [pc, #184]	@ (8006a84 <TIM_Base_SetConfig+0x140>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d013      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006a88 <TIM_Base_SetConfig+0x144>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d00f      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a2c      	ldr	r2, [pc, #176]	@ (8006a8c <TIM_Base_SetConfig+0x148>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d00b      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a2b      	ldr	r2, [pc, #172]	@ (8006a90 <TIM_Base_SetConfig+0x14c>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d007      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a2a      	ldr	r2, [pc, #168]	@ (8006a94 <TIM_Base_SetConfig+0x150>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d003      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a29      	ldr	r2, [pc, #164]	@ (8006a98 <TIM_Base_SetConfig+0x154>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d108      	bne.n	8006a08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a10      	ldr	r2, [pc, #64]	@ (8006a70 <TIM_Base_SetConfig+0x12c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d003      	beq.n	8006a3c <TIM_Base_SetConfig+0xf8>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a12      	ldr	r2, [pc, #72]	@ (8006a80 <TIM_Base_SetConfig+0x13c>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d103      	bne.n	8006a44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	691a      	ldr	r2, [r3, #16]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d105      	bne.n	8006a62 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f023 0201 	bic.w	r2, r3, #1
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	611a      	str	r2, [r3, #16]
  }
}
 8006a62:	bf00      	nop
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	40010000 	.word	0x40010000
 8006a74:	40000400 	.word	0x40000400
 8006a78:	40000800 	.word	0x40000800
 8006a7c:	40000c00 	.word	0x40000c00
 8006a80:	40010400 	.word	0x40010400
 8006a84:	40014000 	.word	0x40014000
 8006a88:	40014400 	.word	0x40014400
 8006a8c:	40014800 	.word	0x40014800
 8006a90:	40001800 	.word	0x40001800
 8006a94:	40001c00 	.word	0x40001c00
 8006a98:	40002000 	.word	0x40002000

08006a9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	f023 0201 	bic.w	r2, r3, #1
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	011b      	lsls	r3, r3, #4
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f023 030a 	bic.w	r3, r3, #10
 8006ad8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	621a      	str	r2, [r3, #32]
}
 8006aee:	bf00      	nop
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b087      	sub	sp, #28
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	f023 0210 	bic.w	r2, r3, #16
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	031b      	lsls	r3, r3, #12
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	011b      	lsls	r3, r3, #4
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	621a      	str	r2, [r3, #32]
}
 8006b4e:	bf00      	nop
 8006b50:	371c      	adds	r7, #28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	f043 0307 	orr.w	r3, r3, #7
 8006b7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	609a      	str	r2, [r3, #8]
}
 8006b84:	bf00      	nop
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006baa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	021a      	lsls	r2, r3, #8
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	609a      	str	r2, [r3, #8]
}
 8006bc4:	bf00      	nop
 8006bc6:	371c      	adds	r7, #28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d101      	bne.n	8006be8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006be4:	2302      	movs	r3, #2
 8006be6:	e05a      	b.n	8006c9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a21      	ldr	r2, [pc, #132]	@ (8006cac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d022      	beq.n	8006c72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c34:	d01d      	beq.n	8006c72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a1d      	ldr	r2, [pc, #116]	@ (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d018      	beq.n	8006c72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a1b      	ldr	r2, [pc, #108]	@ (8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d013      	beq.n	8006c72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d00e      	beq.n	8006c72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a18      	ldr	r2, [pc, #96]	@ (8006cbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d009      	beq.n	8006c72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a17      	ldr	r2, [pc, #92]	@ (8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d004      	beq.n	8006c72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a15      	ldr	r2, [pc, #84]	@ (8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d10c      	bne.n	8006c8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	40010000 	.word	0x40010000
 8006cb0:	40000400 	.word	0x40000400
 8006cb4:	40000800 	.word	0x40000800
 8006cb8:	40000c00 	.word	0x40000c00
 8006cbc:	40010400 	.word	0x40010400
 8006cc0:	40014000 	.word	0x40014000
 8006cc4:	40001800 	.word	0x40001800

08006cc8 <siprintf>:
 8006cc8:	b40e      	push	{r1, r2, r3}
 8006cca:	b500      	push	{lr}
 8006ccc:	b09c      	sub	sp, #112	@ 0x70
 8006cce:	ab1d      	add	r3, sp, #116	@ 0x74
 8006cd0:	9002      	str	r0, [sp, #8]
 8006cd2:	9006      	str	r0, [sp, #24]
 8006cd4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006cd8:	4809      	ldr	r0, [pc, #36]	@ (8006d00 <siprintf+0x38>)
 8006cda:	9107      	str	r1, [sp, #28]
 8006cdc:	9104      	str	r1, [sp, #16]
 8006cde:	4909      	ldr	r1, [pc, #36]	@ (8006d04 <siprintf+0x3c>)
 8006ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ce4:	9105      	str	r1, [sp, #20]
 8006ce6:	6800      	ldr	r0, [r0, #0]
 8006ce8:	9301      	str	r3, [sp, #4]
 8006cea:	a902      	add	r1, sp, #8
 8006cec:	f000 f994 	bl	8007018 <_svfiprintf_r>
 8006cf0:	9b02      	ldr	r3, [sp, #8]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	701a      	strb	r2, [r3, #0]
 8006cf6:	b01c      	add	sp, #112	@ 0x70
 8006cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cfc:	b003      	add	sp, #12
 8006cfe:	4770      	bx	lr
 8006d00:	2000001c 	.word	0x2000001c
 8006d04:	ffff0208 	.word	0xffff0208

08006d08 <memset>:
 8006d08:	4402      	add	r2, r0
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d100      	bne.n	8006d12 <memset+0xa>
 8006d10:	4770      	bx	lr
 8006d12:	f803 1b01 	strb.w	r1, [r3], #1
 8006d16:	e7f9      	b.n	8006d0c <memset+0x4>

08006d18 <__errno>:
 8006d18:	4b01      	ldr	r3, [pc, #4]	@ (8006d20 <__errno+0x8>)
 8006d1a:	6818      	ldr	r0, [r3, #0]
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	2000001c 	.word	0x2000001c

08006d24 <__libc_init_array>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	4d0d      	ldr	r5, [pc, #52]	@ (8006d5c <__libc_init_array+0x38>)
 8006d28:	4c0d      	ldr	r4, [pc, #52]	@ (8006d60 <__libc_init_array+0x3c>)
 8006d2a:	1b64      	subs	r4, r4, r5
 8006d2c:	10a4      	asrs	r4, r4, #2
 8006d2e:	2600      	movs	r6, #0
 8006d30:	42a6      	cmp	r6, r4
 8006d32:	d109      	bne.n	8006d48 <__libc_init_array+0x24>
 8006d34:	4d0b      	ldr	r5, [pc, #44]	@ (8006d64 <__libc_init_array+0x40>)
 8006d36:	4c0c      	ldr	r4, [pc, #48]	@ (8006d68 <__libc_init_array+0x44>)
 8006d38:	f000 fc66 	bl	8007608 <_init>
 8006d3c:	1b64      	subs	r4, r4, r5
 8006d3e:	10a4      	asrs	r4, r4, #2
 8006d40:	2600      	movs	r6, #0
 8006d42:	42a6      	cmp	r6, r4
 8006d44:	d105      	bne.n	8006d52 <__libc_init_array+0x2e>
 8006d46:	bd70      	pop	{r4, r5, r6, pc}
 8006d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d4c:	4798      	blx	r3
 8006d4e:	3601      	adds	r6, #1
 8006d50:	e7ee      	b.n	8006d30 <__libc_init_array+0xc>
 8006d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d56:	4798      	blx	r3
 8006d58:	3601      	adds	r6, #1
 8006d5a:	e7f2      	b.n	8006d42 <__libc_init_array+0x1e>
 8006d5c:	0800884c 	.word	0x0800884c
 8006d60:	0800884c 	.word	0x0800884c
 8006d64:	0800884c 	.word	0x0800884c
 8006d68:	08008850 	.word	0x08008850

08006d6c <__retarget_lock_acquire_recursive>:
 8006d6c:	4770      	bx	lr

08006d6e <__retarget_lock_release_recursive>:
 8006d6e:	4770      	bx	lr

08006d70 <_free_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	4605      	mov	r5, r0
 8006d74:	2900      	cmp	r1, #0
 8006d76:	d041      	beq.n	8006dfc <_free_r+0x8c>
 8006d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d7c:	1f0c      	subs	r4, r1, #4
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	bfb8      	it	lt
 8006d82:	18e4      	addlt	r4, r4, r3
 8006d84:	f000 f8e0 	bl	8006f48 <__malloc_lock>
 8006d88:	4a1d      	ldr	r2, [pc, #116]	@ (8006e00 <_free_r+0x90>)
 8006d8a:	6813      	ldr	r3, [r2, #0]
 8006d8c:	b933      	cbnz	r3, 8006d9c <_free_r+0x2c>
 8006d8e:	6063      	str	r3, [r4, #4]
 8006d90:	6014      	str	r4, [r2, #0]
 8006d92:	4628      	mov	r0, r5
 8006d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d98:	f000 b8dc 	b.w	8006f54 <__malloc_unlock>
 8006d9c:	42a3      	cmp	r3, r4
 8006d9e:	d908      	bls.n	8006db2 <_free_r+0x42>
 8006da0:	6820      	ldr	r0, [r4, #0]
 8006da2:	1821      	adds	r1, r4, r0
 8006da4:	428b      	cmp	r3, r1
 8006da6:	bf01      	itttt	eq
 8006da8:	6819      	ldreq	r1, [r3, #0]
 8006daa:	685b      	ldreq	r3, [r3, #4]
 8006dac:	1809      	addeq	r1, r1, r0
 8006dae:	6021      	streq	r1, [r4, #0]
 8006db0:	e7ed      	b.n	8006d8e <_free_r+0x1e>
 8006db2:	461a      	mov	r2, r3
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	b10b      	cbz	r3, 8006dbc <_free_r+0x4c>
 8006db8:	42a3      	cmp	r3, r4
 8006dba:	d9fa      	bls.n	8006db2 <_free_r+0x42>
 8006dbc:	6811      	ldr	r1, [r2, #0]
 8006dbe:	1850      	adds	r0, r2, r1
 8006dc0:	42a0      	cmp	r0, r4
 8006dc2:	d10b      	bne.n	8006ddc <_free_r+0x6c>
 8006dc4:	6820      	ldr	r0, [r4, #0]
 8006dc6:	4401      	add	r1, r0
 8006dc8:	1850      	adds	r0, r2, r1
 8006dca:	4283      	cmp	r3, r0
 8006dcc:	6011      	str	r1, [r2, #0]
 8006dce:	d1e0      	bne.n	8006d92 <_free_r+0x22>
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	6053      	str	r3, [r2, #4]
 8006dd6:	4408      	add	r0, r1
 8006dd8:	6010      	str	r0, [r2, #0]
 8006dda:	e7da      	b.n	8006d92 <_free_r+0x22>
 8006ddc:	d902      	bls.n	8006de4 <_free_r+0x74>
 8006dde:	230c      	movs	r3, #12
 8006de0:	602b      	str	r3, [r5, #0]
 8006de2:	e7d6      	b.n	8006d92 <_free_r+0x22>
 8006de4:	6820      	ldr	r0, [r4, #0]
 8006de6:	1821      	adds	r1, r4, r0
 8006de8:	428b      	cmp	r3, r1
 8006dea:	bf04      	itt	eq
 8006dec:	6819      	ldreq	r1, [r3, #0]
 8006dee:	685b      	ldreq	r3, [r3, #4]
 8006df0:	6063      	str	r3, [r4, #4]
 8006df2:	bf04      	itt	eq
 8006df4:	1809      	addeq	r1, r1, r0
 8006df6:	6021      	streq	r1, [r4, #0]
 8006df8:	6054      	str	r4, [r2, #4]
 8006dfa:	e7ca      	b.n	8006d92 <_free_r+0x22>
 8006dfc:	bd38      	pop	{r3, r4, r5, pc}
 8006dfe:	bf00      	nop
 8006e00:	20025db0 	.word	0x20025db0

08006e04 <sbrk_aligned>:
 8006e04:	b570      	push	{r4, r5, r6, lr}
 8006e06:	4e0f      	ldr	r6, [pc, #60]	@ (8006e44 <sbrk_aligned+0x40>)
 8006e08:	460c      	mov	r4, r1
 8006e0a:	6831      	ldr	r1, [r6, #0]
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	b911      	cbnz	r1, 8006e16 <sbrk_aligned+0x12>
 8006e10:	f000 fba6 	bl	8007560 <_sbrk_r>
 8006e14:	6030      	str	r0, [r6, #0]
 8006e16:	4621      	mov	r1, r4
 8006e18:	4628      	mov	r0, r5
 8006e1a:	f000 fba1 	bl	8007560 <_sbrk_r>
 8006e1e:	1c43      	adds	r3, r0, #1
 8006e20:	d103      	bne.n	8006e2a <sbrk_aligned+0x26>
 8006e22:	f04f 34ff 	mov.w	r4, #4294967295
 8006e26:	4620      	mov	r0, r4
 8006e28:	bd70      	pop	{r4, r5, r6, pc}
 8006e2a:	1cc4      	adds	r4, r0, #3
 8006e2c:	f024 0403 	bic.w	r4, r4, #3
 8006e30:	42a0      	cmp	r0, r4
 8006e32:	d0f8      	beq.n	8006e26 <sbrk_aligned+0x22>
 8006e34:	1a21      	subs	r1, r4, r0
 8006e36:	4628      	mov	r0, r5
 8006e38:	f000 fb92 	bl	8007560 <_sbrk_r>
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	d1f2      	bne.n	8006e26 <sbrk_aligned+0x22>
 8006e40:	e7ef      	b.n	8006e22 <sbrk_aligned+0x1e>
 8006e42:	bf00      	nop
 8006e44:	20025dac 	.word	0x20025dac

08006e48 <_malloc_r>:
 8006e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e4c:	1ccd      	adds	r5, r1, #3
 8006e4e:	f025 0503 	bic.w	r5, r5, #3
 8006e52:	3508      	adds	r5, #8
 8006e54:	2d0c      	cmp	r5, #12
 8006e56:	bf38      	it	cc
 8006e58:	250c      	movcc	r5, #12
 8006e5a:	2d00      	cmp	r5, #0
 8006e5c:	4606      	mov	r6, r0
 8006e5e:	db01      	blt.n	8006e64 <_malloc_r+0x1c>
 8006e60:	42a9      	cmp	r1, r5
 8006e62:	d904      	bls.n	8006e6e <_malloc_r+0x26>
 8006e64:	230c      	movs	r3, #12
 8006e66:	6033      	str	r3, [r6, #0]
 8006e68:	2000      	movs	r0, #0
 8006e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f44 <_malloc_r+0xfc>
 8006e72:	f000 f869 	bl	8006f48 <__malloc_lock>
 8006e76:	f8d8 3000 	ldr.w	r3, [r8]
 8006e7a:	461c      	mov	r4, r3
 8006e7c:	bb44      	cbnz	r4, 8006ed0 <_malloc_r+0x88>
 8006e7e:	4629      	mov	r1, r5
 8006e80:	4630      	mov	r0, r6
 8006e82:	f7ff ffbf 	bl	8006e04 <sbrk_aligned>
 8006e86:	1c43      	adds	r3, r0, #1
 8006e88:	4604      	mov	r4, r0
 8006e8a:	d158      	bne.n	8006f3e <_malloc_r+0xf6>
 8006e8c:	f8d8 4000 	ldr.w	r4, [r8]
 8006e90:	4627      	mov	r7, r4
 8006e92:	2f00      	cmp	r7, #0
 8006e94:	d143      	bne.n	8006f1e <_malloc_r+0xd6>
 8006e96:	2c00      	cmp	r4, #0
 8006e98:	d04b      	beq.n	8006f32 <_malloc_r+0xea>
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	4639      	mov	r1, r7
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	eb04 0903 	add.w	r9, r4, r3
 8006ea4:	f000 fb5c 	bl	8007560 <_sbrk_r>
 8006ea8:	4581      	cmp	r9, r0
 8006eaa:	d142      	bne.n	8006f32 <_malloc_r+0xea>
 8006eac:	6821      	ldr	r1, [r4, #0]
 8006eae:	1a6d      	subs	r5, r5, r1
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f7ff ffa6 	bl	8006e04 <sbrk_aligned>
 8006eb8:	3001      	adds	r0, #1
 8006eba:	d03a      	beq.n	8006f32 <_malloc_r+0xea>
 8006ebc:	6823      	ldr	r3, [r4, #0]
 8006ebe:	442b      	add	r3, r5
 8006ec0:	6023      	str	r3, [r4, #0]
 8006ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	bb62      	cbnz	r2, 8006f24 <_malloc_r+0xdc>
 8006eca:	f8c8 7000 	str.w	r7, [r8]
 8006ece:	e00f      	b.n	8006ef0 <_malloc_r+0xa8>
 8006ed0:	6822      	ldr	r2, [r4, #0]
 8006ed2:	1b52      	subs	r2, r2, r5
 8006ed4:	d420      	bmi.n	8006f18 <_malloc_r+0xd0>
 8006ed6:	2a0b      	cmp	r2, #11
 8006ed8:	d917      	bls.n	8006f0a <_malloc_r+0xc2>
 8006eda:	1961      	adds	r1, r4, r5
 8006edc:	42a3      	cmp	r3, r4
 8006ede:	6025      	str	r5, [r4, #0]
 8006ee0:	bf18      	it	ne
 8006ee2:	6059      	strne	r1, [r3, #4]
 8006ee4:	6863      	ldr	r3, [r4, #4]
 8006ee6:	bf08      	it	eq
 8006ee8:	f8c8 1000 	streq.w	r1, [r8]
 8006eec:	5162      	str	r2, [r4, r5]
 8006eee:	604b      	str	r3, [r1, #4]
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	f000 f82f 	bl	8006f54 <__malloc_unlock>
 8006ef6:	f104 000b 	add.w	r0, r4, #11
 8006efa:	1d23      	adds	r3, r4, #4
 8006efc:	f020 0007 	bic.w	r0, r0, #7
 8006f00:	1ac2      	subs	r2, r0, r3
 8006f02:	bf1c      	itt	ne
 8006f04:	1a1b      	subne	r3, r3, r0
 8006f06:	50a3      	strne	r3, [r4, r2]
 8006f08:	e7af      	b.n	8006e6a <_malloc_r+0x22>
 8006f0a:	6862      	ldr	r2, [r4, #4]
 8006f0c:	42a3      	cmp	r3, r4
 8006f0e:	bf0c      	ite	eq
 8006f10:	f8c8 2000 	streq.w	r2, [r8]
 8006f14:	605a      	strne	r2, [r3, #4]
 8006f16:	e7eb      	b.n	8006ef0 <_malloc_r+0xa8>
 8006f18:	4623      	mov	r3, r4
 8006f1a:	6864      	ldr	r4, [r4, #4]
 8006f1c:	e7ae      	b.n	8006e7c <_malloc_r+0x34>
 8006f1e:	463c      	mov	r4, r7
 8006f20:	687f      	ldr	r7, [r7, #4]
 8006f22:	e7b6      	b.n	8006e92 <_malloc_r+0x4a>
 8006f24:	461a      	mov	r2, r3
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	42a3      	cmp	r3, r4
 8006f2a:	d1fb      	bne.n	8006f24 <_malloc_r+0xdc>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	6053      	str	r3, [r2, #4]
 8006f30:	e7de      	b.n	8006ef0 <_malloc_r+0xa8>
 8006f32:	230c      	movs	r3, #12
 8006f34:	6033      	str	r3, [r6, #0]
 8006f36:	4630      	mov	r0, r6
 8006f38:	f000 f80c 	bl	8006f54 <__malloc_unlock>
 8006f3c:	e794      	b.n	8006e68 <_malloc_r+0x20>
 8006f3e:	6005      	str	r5, [r0, #0]
 8006f40:	e7d6      	b.n	8006ef0 <_malloc_r+0xa8>
 8006f42:	bf00      	nop
 8006f44:	20025db0 	.word	0x20025db0

08006f48 <__malloc_lock>:
 8006f48:	4801      	ldr	r0, [pc, #4]	@ (8006f50 <__malloc_lock+0x8>)
 8006f4a:	f7ff bf0f 	b.w	8006d6c <__retarget_lock_acquire_recursive>
 8006f4e:	bf00      	nop
 8006f50:	20025da8 	.word	0x20025da8

08006f54 <__malloc_unlock>:
 8006f54:	4801      	ldr	r0, [pc, #4]	@ (8006f5c <__malloc_unlock+0x8>)
 8006f56:	f7ff bf0a 	b.w	8006d6e <__retarget_lock_release_recursive>
 8006f5a:	bf00      	nop
 8006f5c:	20025da8 	.word	0x20025da8

08006f60 <__ssputs_r>:
 8006f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f64:	688e      	ldr	r6, [r1, #8]
 8006f66:	461f      	mov	r7, r3
 8006f68:	42be      	cmp	r6, r7
 8006f6a:	680b      	ldr	r3, [r1, #0]
 8006f6c:	4682      	mov	sl, r0
 8006f6e:	460c      	mov	r4, r1
 8006f70:	4690      	mov	r8, r2
 8006f72:	d82d      	bhi.n	8006fd0 <__ssputs_r+0x70>
 8006f74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f7c:	d026      	beq.n	8006fcc <__ssputs_r+0x6c>
 8006f7e:	6965      	ldr	r5, [r4, #20]
 8006f80:	6909      	ldr	r1, [r1, #16]
 8006f82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f86:	eba3 0901 	sub.w	r9, r3, r1
 8006f8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f8e:	1c7b      	adds	r3, r7, #1
 8006f90:	444b      	add	r3, r9
 8006f92:	106d      	asrs	r5, r5, #1
 8006f94:	429d      	cmp	r5, r3
 8006f96:	bf38      	it	cc
 8006f98:	461d      	movcc	r5, r3
 8006f9a:	0553      	lsls	r3, r2, #21
 8006f9c:	d527      	bpl.n	8006fee <__ssputs_r+0x8e>
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	f7ff ff52 	bl	8006e48 <_malloc_r>
 8006fa4:	4606      	mov	r6, r0
 8006fa6:	b360      	cbz	r0, 8007002 <__ssputs_r+0xa2>
 8006fa8:	6921      	ldr	r1, [r4, #16]
 8006faa:	464a      	mov	r2, r9
 8006fac:	f000 fae8 	bl	8007580 <memcpy>
 8006fb0:	89a3      	ldrh	r3, [r4, #12]
 8006fb2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fba:	81a3      	strh	r3, [r4, #12]
 8006fbc:	6126      	str	r6, [r4, #16]
 8006fbe:	6165      	str	r5, [r4, #20]
 8006fc0:	444e      	add	r6, r9
 8006fc2:	eba5 0509 	sub.w	r5, r5, r9
 8006fc6:	6026      	str	r6, [r4, #0]
 8006fc8:	60a5      	str	r5, [r4, #8]
 8006fca:	463e      	mov	r6, r7
 8006fcc:	42be      	cmp	r6, r7
 8006fce:	d900      	bls.n	8006fd2 <__ssputs_r+0x72>
 8006fd0:	463e      	mov	r6, r7
 8006fd2:	6820      	ldr	r0, [r4, #0]
 8006fd4:	4632      	mov	r2, r6
 8006fd6:	4641      	mov	r1, r8
 8006fd8:	f000 faa8 	bl	800752c <memmove>
 8006fdc:	68a3      	ldr	r3, [r4, #8]
 8006fde:	1b9b      	subs	r3, r3, r6
 8006fe0:	60a3      	str	r3, [r4, #8]
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	4433      	add	r3, r6
 8006fe6:	6023      	str	r3, [r4, #0]
 8006fe8:	2000      	movs	r0, #0
 8006fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fee:	462a      	mov	r2, r5
 8006ff0:	f000 fad4 	bl	800759c <_realloc_r>
 8006ff4:	4606      	mov	r6, r0
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d1e0      	bne.n	8006fbc <__ssputs_r+0x5c>
 8006ffa:	6921      	ldr	r1, [r4, #16]
 8006ffc:	4650      	mov	r0, sl
 8006ffe:	f7ff feb7 	bl	8006d70 <_free_r>
 8007002:	230c      	movs	r3, #12
 8007004:	f8ca 3000 	str.w	r3, [sl]
 8007008:	89a3      	ldrh	r3, [r4, #12]
 800700a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800700e:	81a3      	strh	r3, [r4, #12]
 8007010:	f04f 30ff 	mov.w	r0, #4294967295
 8007014:	e7e9      	b.n	8006fea <__ssputs_r+0x8a>
	...

08007018 <_svfiprintf_r>:
 8007018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800701c:	4698      	mov	r8, r3
 800701e:	898b      	ldrh	r3, [r1, #12]
 8007020:	061b      	lsls	r3, r3, #24
 8007022:	b09d      	sub	sp, #116	@ 0x74
 8007024:	4607      	mov	r7, r0
 8007026:	460d      	mov	r5, r1
 8007028:	4614      	mov	r4, r2
 800702a:	d510      	bpl.n	800704e <_svfiprintf_r+0x36>
 800702c:	690b      	ldr	r3, [r1, #16]
 800702e:	b973      	cbnz	r3, 800704e <_svfiprintf_r+0x36>
 8007030:	2140      	movs	r1, #64	@ 0x40
 8007032:	f7ff ff09 	bl	8006e48 <_malloc_r>
 8007036:	6028      	str	r0, [r5, #0]
 8007038:	6128      	str	r0, [r5, #16]
 800703a:	b930      	cbnz	r0, 800704a <_svfiprintf_r+0x32>
 800703c:	230c      	movs	r3, #12
 800703e:	603b      	str	r3, [r7, #0]
 8007040:	f04f 30ff 	mov.w	r0, #4294967295
 8007044:	b01d      	add	sp, #116	@ 0x74
 8007046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704a:	2340      	movs	r3, #64	@ 0x40
 800704c:	616b      	str	r3, [r5, #20]
 800704e:	2300      	movs	r3, #0
 8007050:	9309      	str	r3, [sp, #36]	@ 0x24
 8007052:	2320      	movs	r3, #32
 8007054:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007058:	f8cd 800c 	str.w	r8, [sp, #12]
 800705c:	2330      	movs	r3, #48	@ 0x30
 800705e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80071fc <_svfiprintf_r+0x1e4>
 8007062:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007066:	f04f 0901 	mov.w	r9, #1
 800706a:	4623      	mov	r3, r4
 800706c:	469a      	mov	sl, r3
 800706e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007072:	b10a      	cbz	r2, 8007078 <_svfiprintf_r+0x60>
 8007074:	2a25      	cmp	r2, #37	@ 0x25
 8007076:	d1f9      	bne.n	800706c <_svfiprintf_r+0x54>
 8007078:	ebba 0b04 	subs.w	fp, sl, r4
 800707c:	d00b      	beq.n	8007096 <_svfiprintf_r+0x7e>
 800707e:	465b      	mov	r3, fp
 8007080:	4622      	mov	r2, r4
 8007082:	4629      	mov	r1, r5
 8007084:	4638      	mov	r0, r7
 8007086:	f7ff ff6b 	bl	8006f60 <__ssputs_r>
 800708a:	3001      	adds	r0, #1
 800708c:	f000 80a7 	beq.w	80071de <_svfiprintf_r+0x1c6>
 8007090:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007092:	445a      	add	r2, fp
 8007094:	9209      	str	r2, [sp, #36]	@ 0x24
 8007096:	f89a 3000 	ldrb.w	r3, [sl]
 800709a:	2b00      	cmp	r3, #0
 800709c:	f000 809f 	beq.w	80071de <_svfiprintf_r+0x1c6>
 80070a0:	2300      	movs	r3, #0
 80070a2:	f04f 32ff 	mov.w	r2, #4294967295
 80070a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070aa:	f10a 0a01 	add.w	sl, sl, #1
 80070ae:	9304      	str	r3, [sp, #16]
 80070b0:	9307      	str	r3, [sp, #28]
 80070b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80070b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80070b8:	4654      	mov	r4, sl
 80070ba:	2205      	movs	r2, #5
 80070bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070c0:	484e      	ldr	r0, [pc, #312]	@ (80071fc <_svfiprintf_r+0x1e4>)
 80070c2:	f7f9 f895 	bl	80001f0 <memchr>
 80070c6:	9a04      	ldr	r2, [sp, #16]
 80070c8:	b9d8      	cbnz	r0, 8007102 <_svfiprintf_r+0xea>
 80070ca:	06d0      	lsls	r0, r2, #27
 80070cc:	bf44      	itt	mi
 80070ce:	2320      	movmi	r3, #32
 80070d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070d4:	0711      	lsls	r1, r2, #28
 80070d6:	bf44      	itt	mi
 80070d8:	232b      	movmi	r3, #43	@ 0x2b
 80070da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070de:	f89a 3000 	ldrb.w	r3, [sl]
 80070e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80070e4:	d015      	beq.n	8007112 <_svfiprintf_r+0xfa>
 80070e6:	9a07      	ldr	r2, [sp, #28]
 80070e8:	4654      	mov	r4, sl
 80070ea:	2000      	movs	r0, #0
 80070ec:	f04f 0c0a 	mov.w	ip, #10
 80070f0:	4621      	mov	r1, r4
 80070f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070f6:	3b30      	subs	r3, #48	@ 0x30
 80070f8:	2b09      	cmp	r3, #9
 80070fa:	d94b      	bls.n	8007194 <_svfiprintf_r+0x17c>
 80070fc:	b1b0      	cbz	r0, 800712c <_svfiprintf_r+0x114>
 80070fe:	9207      	str	r2, [sp, #28]
 8007100:	e014      	b.n	800712c <_svfiprintf_r+0x114>
 8007102:	eba0 0308 	sub.w	r3, r0, r8
 8007106:	fa09 f303 	lsl.w	r3, r9, r3
 800710a:	4313      	orrs	r3, r2
 800710c:	9304      	str	r3, [sp, #16]
 800710e:	46a2      	mov	sl, r4
 8007110:	e7d2      	b.n	80070b8 <_svfiprintf_r+0xa0>
 8007112:	9b03      	ldr	r3, [sp, #12]
 8007114:	1d19      	adds	r1, r3, #4
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	9103      	str	r1, [sp, #12]
 800711a:	2b00      	cmp	r3, #0
 800711c:	bfbb      	ittet	lt
 800711e:	425b      	neglt	r3, r3
 8007120:	f042 0202 	orrlt.w	r2, r2, #2
 8007124:	9307      	strge	r3, [sp, #28]
 8007126:	9307      	strlt	r3, [sp, #28]
 8007128:	bfb8      	it	lt
 800712a:	9204      	strlt	r2, [sp, #16]
 800712c:	7823      	ldrb	r3, [r4, #0]
 800712e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007130:	d10a      	bne.n	8007148 <_svfiprintf_r+0x130>
 8007132:	7863      	ldrb	r3, [r4, #1]
 8007134:	2b2a      	cmp	r3, #42	@ 0x2a
 8007136:	d132      	bne.n	800719e <_svfiprintf_r+0x186>
 8007138:	9b03      	ldr	r3, [sp, #12]
 800713a:	1d1a      	adds	r2, r3, #4
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	9203      	str	r2, [sp, #12]
 8007140:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007144:	3402      	adds	r4, #2
 8007146:	9305      	str	r3, [sp, #20]
 8007148:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800720c <_svfiprintf_r+0x1f4>
 800714c:	7821      	ldrb	r1, [r4, #0]
 800714e:	2203      	movs	r2, #3
 8007150:	4650      	mov	r0, sl
 8007152:	f7f9 f84d 	bl	80001f0 <memchr>
 8007156:	b138      	cbz	r0, 8007168 <_svfiprintf_r+0x150>
 8007158:	9b04      	ldr	r3, [sp, #16]
 800715a:	eba0 000a 	sub.w	r0, r0, sl
 800715e:	2240      	movs	r2, #64	@ 0x40
 8007160:	4082      	lsls	r2, r0
 8007162:	4313      	orrs	r3, r2
 8007164:	3401      	adds	r4, #1
 8007166:	9304      	str	r3, [sp, #16]
 8007168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800716c:	4824      	ldr	r0, [pc, #144]	@ (8007200 <_svfiprintf_r+0x1e8>)
 800716e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007172:	2206      	movs	r2, #6
 8007174:	f7f9 f83c 	bl	80001f0 <memchr>
 8007178:	2800      	cmp	r0, #0
 800717a:	d036      	beq.n	80071ea <_svfiprintf_r+0x1d2>
 800717c:	4b21      	ldr	r3, [pc, #132]	@ (8007204 <_svfiprintf_r+0x1ec>)
 800717e:	bb1b      	cbnz	r3, 80071c8 <_svfiprintf_r+0x1b0>
 8007180:	9b03      	ldr	r3, [sp, #12]
 8007182:	3307      	adds	r3, #7
 8007184:	f023 0307 	bic.w	r3, r3, #7
 8007188:	3308      	adds	r3, #8
 800718a:	9303      	str	r3, [sp, #12]
 800718c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800718e:	4433      	add	r3, r6
 8007190:	9309      	str	r3, [sp, #36]	@ 0x24
 8007192:	e76a      	b.n	800706a <_svfiprintf_r+0x52>
 8007194:	fb0c 3202 	mla	r2, ip, r2, r3
 8007198:	460c      	mov	r4, r1
 800719a:	2001      	movs	r0, #1
 800719c:	e7a8      	b.n	80070f0 <_svfiprintf_r+0xd8>
 800719e:	2300      	movs	r3, #0
 80071a0:	3401      	adds	r4, #1
 80071a2:	9305      	str	r3, [sp, #20]
 80071a4:	4619      	mov	r1, r3
 80071a6:	f04f 0c0a 	mov.w	ip, #10
 80071aa:	4620      	mov	r0, r4
 80071ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071b0:	3a30      	subs	r2, #48	@ 0x30
 80071b2:	2a09      	cmp	r2, #9
 80071b4:	d903      	bls.n	80071be <_svfiprintf_r+0x1a6>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d0c6      	beq.n	8007148 <_svfiprintf_r+0x130>
 80071ba:	9105      	str	r1, [sp, #20]
 80071bc:	e7c4      	b.n	8007148 <_svfiprintf_r+0x130>
 80071be:	fb0c 2101 	mla	r1, ip, r1, r2
 80071c2:	4604      	mov	r4, r0
 80071c4:	2301      	movs	r3, #1
 80071c6:	e7f0      	b.n	80071aa <_svfiprintf_r+0x192>
 80071c8:	ab03      	add	r3, sp, #12
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	462a      	mov	r2, r5
 80071ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007208 <_svfiprintf_r+0x1f0>)
 80071d0:	a904      	add	r1, sp, #16
 80071d2:	4638      	mov	r0, r7
 80071d4:	f3af 8000 	nop.w
 80071d8:	1c42      	adds	r2, r0, #1
 80071da:	4606      	mov	r6, r0
 80071dc:	d1d6      	bne.n	800718c <_svfiprintf_r+0x174>
 80071de:	89ab      	ldrh	r3, [r5, #12]
 80071e0:	065b      	lsls	r3, r3, #25
 80071e2:	f53f af2d 	bmi.w	8007040 <_svfiprintf_r+0x28>
 80071e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071e8:	e72c      	b.n	8007044 <_svfiprintf_r+0x2c>
 80071ea:	ab03      	add	r3, sp, #12
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	462a      	mov	r2, r5
 80071f0:	4b05      	ldr	r3, [pc, #20]	@ (8007208 <_svfiprintf_r+0x1f0>)
 80071f2:	a904      	add	r1, sp, #16
 80071f4:	4638      	mov	r0, r7
 80071f6:	f000 f879 	bl	80072ec <_printf_i>
 80071fa:	e7ed      	b.n	80071d8 <_svfiprintf_r+0x1c0>
 80071fc:	08008810 	.word	0x08008810
 8007200:	0800881a 	.word	0x0800881a
 8007204:	00000000 	.word	0x00000000
 8007208:	08006f61 	.word	0x08006f61
 800720c:	08008816 	.word	0x08008816

08007210 <_printf_common>:
 8007210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007214:	4616      	mov	r6, r2
 8007216:	4698      	mov	r8, r3
 8007218:	688a      	ldr	r2, [r1, #8]
 800721a:	690b      	ldr	r3, [r1, #16]
 800721c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007220:	4293      	cmp	r3, r2
 8007222:	bfb8      	it	lt
 8007224:	4613      	movlt	r3, r2
 8007226:	6033      	str	r3, [r6, #0]
 8007228:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800722c:	4607      	mov	r7, r0
 800722e:	460c      	mov	r4, r1
 8007230:	b10a      	cbz	r2, 8007236 <_printf_common+0x26>
 8007232:	3301      	adds	r3, #1
 8007234:	6033      	str	r3, [r6, #0]
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	0699      	lsls	r1, r3, #26
 800723a:	bf42      	ittt	mi
 800723c:	6833      	ldrmi	r3, [r6, #0]
 800723e:	3302      	addmi	r3, #2
 8007240:	6033      	strmi	r3, [r6, #0]
 8007242:	6825      	ldr	r5, [r4, #0]
 8007244:	f015 0506 	ands.w	r5, r5, #6
 8007248:	d106      	bne.n	8007258 <_printf_common+0x48>
 800724a:	f104 0a19 	add.w	sl, r4, #25
 800724e:	68e3      	ldr	r3, [r4, #12]
 8007250:	6832      	ldr	r2, [r6, #0]
 8007252:	1a9b      	subs	r3, r3, r2
 8007254:	42ab      	cmp	r3, r5
 8007256:	dc26      	bgt.n	80072a6 <_printf_common+0x96>
 8007258:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800725c:	6822      	ldr	r2, [r4, #0]
 800725e:	3b00      	subs	r3, #0
 8007260:	bf18      	it	ne
 8007262:	2301      	movne	r3, #1
 8007264:	0692      	lsls	r2, r2, #26
 8007266:	d42b      	bmi.n	80072c0 <_printf_common+0xb0>
 8007268:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800726c:	4641      	mov	r1, r8
 800726e:	4638      	mov	r0, r7
 8007270:	47c8      	blx	r9
 8007272:	3001      	adds	r0, #1
 8007274:	d01e      	beq.n	80072b4 <_printf_common+0xa4>
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	6922      	ldr	r2, [r4, #16]
 800727a:	f003 0306 	and.w	r3, r3, #6
 800727e:	2b04      	cmp	r3, #4
 8007280:	bf02      	ittt	eq
 8007282:	68e5      	ldreq	r5, [r4, #12]
 8007284:	6833      	ldreq	r3, [r6, #0]
 8007286:	1aed      	subeq	r5, r5, r3
 8007288:	68a3      	ldr	r3, [r4, #8]
 800728a:	bf0c      	ite	eq
 800728c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007290:	2500      	movne	r5, #0
 8007292:	4293      	cmp	r3, r2
 8007294:	bfc4      	itt	gt
 8007296:	1a9b      	subgt	r3, r3, r2
 8007298:	18ed      	addgt	r5, r5, r3
 800729a:	2600      	movs	r6, #0
 800729c:	341a      	adds	r4, #26
 800729e:	42b5      	cmp	r5, r6
 80072a0:	d11a      	bne.n	80072d8 <_printf_common+0xc8>
 80072a2:	2000      	movs	r0, #0
 80072a4:	e008      	b.n	80072b8 <_printf_common+0xa8>
 80072a6:	2301      	movs	r3, #1
 80072a8:	4652      	mov	r2, sl
 80072aa:	4641      	mov	r1, r8
 80072ac:	4638      	mov	r0, r7
 80072ae:	47c8      	blx	r9
 80072b0:	3001      	adds	r0, #1
 80072b2:	d103      	bne.n	80072bc <_printf_common+0xac>
 80072b4:	f04f 30ff 	mov.w	r0, #4294967295
 80072b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072bc:	3501      	adds	r5, #1
 80072be:	e7c6      	b.n	800724e <_printf_common+0x3e>
 80072c0:	18e1      	adds	r1, r4, r3
 80072c2:	1c5a      	adds	r2, r3, #1
 80072c4:	2030      	movs	r0, #48	@ 0x30
 80072c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80072ca:	4422      	add	r2, r4
 80072cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80072d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80072d4:	3302      	adds	r3, #2
 80072d6:	e7c7      	b.n	8007268 <_printf_common+0x58>
 80072d8:	2301      	movs	r3, #1
 80072da:	4622      	mov	r2, r4
 80072dc:	4641      	mov	r1, r8
 80072de:	4638      	mov	r0, r7
 80072e0:	47c8      	blx	r9
 80072e2:	3001      	adds	r0, #1
 80072e4:	d0e6      	beq.n	80072b4 <_printf_common+0xa4>
 80072e6:	3601      	adds	r6, #1
 80072e8:	e7d9      	b.n	800729e <_printf_common+0x8e>
	...

080072ec <_printf_i>:
 80072ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072f0:	7e0f      	ldrb	r7, [r1, #24]
 80072f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80072f4:	2f78      	cmp	r7, #120	@ 0x78
 80072f6:	4691      	mov	r9, r2
 80072f8:	4680      	mov	r8, r0
 80072fa:	460c      	mov	r4, r1
 80072fc:	469a      	mov	sl, r3
 80072fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007302:	d807      	bhi.n	8007314 <_printf_i+0x28>
 8007304:	2f62      	cmp	r7, #98	@ 0x62
 8007306:	d80a      	bhi.n	800731e <_printf_i+0x32>
 8007308:	2f00      	cmp	r7, #0
 800730a:	f000 80d2 	beq.w	80074b2 <_printf_i+0x1c6>
 800730e:	2f58      	cmp	r7, #88	@ 0x58
 8007310:	f000 80b9 	beq.w	8007486 <_printf_i+0x19a>
 8007314:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007318:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800731c:	e03a      	b.n	8007394 <_printf_i+0xa8>
 800731e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007322:	2b15      	cmp	r3, #21
 8007324:	d8f6      	bhi.n	8007314 <_printf_i+0x28>
 8007326:	a101      	add	r1, pc, #4	@ (adr r1, 800732c <_printf_i+0x40>)
 8007328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800732c:	08007385 	.word	0x08007385
 8007330:	08007399 	.word	0x08007399
 8007334:	08007315 	.word	0x08007315
 8007338:	08007315 	.word	0x08007315
 800733c:	08007315 	.word	0x08007315
 8007340:	08007315 	.word	0x08007315
 8007344:	08007399 	.word	0x08007399
 8007348:	08007315 	.word	0x08007315
 800734c:	08007315 	.word	0x08007315
 8007350:	08007315 	.word	0x08007315
 8007354:	08007315 	.word	0x08007315
 8007358:	08007499 	.word	0x08007499
 800735c:	080073c3 	.word	0x080073c3
 8007360:	08007453 	.word	0x08007453
 8007364:	08007315 	.word	0x08007315
 8007368:	08007315 	.word	0x08007315
 800736c:	080074bb 	.word	0x080074bb
 8007370:	08007315 	.word	0x08007315
 8007374:	080073c3 	.word	0x080073c3
 8007378:	08007315 	.word	0x08007315
 800737c:	08007315 	.word	0x08007315
 8007380:	0800745b 	.word	0x0800745b
 8007384:	6833      	ldr	r3, [r6, #0]
 8007386:	1d1a      	adds	r2, r3, #4
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6032      	str	r2, [r6, #0]
 800738c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007390:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007394:	2301      	movs	r3, #1
 8007396:	e09d      	b.n	80074d4 <_printf_i+0x1e8>
 8007398:	6833      	ldr	r3, [r6, #0]
 800739a:	6820      	ldr	r0, [r4, #0]
 800739c:	1d19      	adds	r1, r3, #4
 800739e:	6031      	str	r1, [r6, #0]
 80073a0:	0606      	lsls	r6, r0, #24
 80073a2:	d501      	bpl.n	80073a8 <_printf_i+0xbc>
 80073a4:	681d      	ldr	r5, [r3, #0]
 80073a6:	e003      	b.n	80073b0 <_printf_i+0xc4>
 80073a8:	0645      	lsls	r5, r0, #25
 80073aa:	d5fb      	bpl.n	80073a4 <_printf_i+0xb8>
 80073ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80073b0:	2d00      	cmp	r5, #0
 80073b2:	da03      	bge.n	80073bc <_printf_i+0xd0>
 80073b4:	232d      	movs	r3, #45	@ 0x2d
 80073b6:	426d      	negs	r5, r5
 80073b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073bc:	4859      	ldr	r0, [pc, #356]	@ (8007524 <_printf_i+0x238>)
 80073be:	230a      	movs	r3, #10
 80073c0:	e011      	b.n	80073e6 <_printf_i+0xfa>
 80073c2:	6821      	ldr	r1, [r4, #0]
 80073c4:	6833      	ldr	r3, [r6, #0]
 80073c6:	0608      	lsls	r0, r1, #24
 80073c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80073cc:	d402      	bmi.n	80073d4 <_printf_i+0xe8>
 80073ce:	0649      	lsls	r1, r1, #25
 80073d0:	bf48      	it	mi
 80073d2:	b2ad      	uxthmi	r5, r5
 80073d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80073d6:	4853      	ldr	r0, [pc, #332]	@ (8007524 <_printf_i+0x238>)
 80073d8:	6033      	str	r3, [r6, #0]
 80073da:	bf14      	ite	ne
 80073dc:	230a      	movne	r3, #10
 80073de:	2308      	moveq	r3, #8
 80073e0:	2100      	movs	r1, #0
 80073e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80073e6:	6866      	ldr	r6, [r4, #4]
 80073e8:	60a6      	str	r6, [r4, #8]
 80073ea:	2e00      	cmp	r6, #0
 80073ec:	bfa2      	ittt	ge
 80073ee:	6821      	ldrge	r1, [r4, #0]
 80073f0:	f021 0104 	bicge.w	r1, r1, #4
 80073f4:	6021      	strge	r1, [r4, #0]
 80073f6:	b90d      	cbnz	r5, 80073fc <_printf_i+0x110>
 80073f8:	2e00      	cmp	r6, #0
 80073fa:	d04b      	beq.n	8007494 <_printf_i+0x1a8>
 80073fc:	4616      	mov	r6, r2
 80073fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8007402:	fb03 5711 	mls	r7, r3, r1, r5
 8007406:	5dc7      	ldrb	r7, [r0, r7]
 8007408:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800740c:	462f      	mov	r7, r5
 800740e:	42bb      	cmp	r3, r7
 8007410:	460d      	mov	r5, r1
 8007412:	d9f4      	bls.n	80073fe <_printf_i+0x112>
 8007414:	2b08      	cmp	r3, #8
 8007416:	d10b      	bne.n	8007430 <_printf_i+0x144>
 8007418:	6823      	ldr	r3, [r4, #0]
 800741a:	07df      	lsls	r7, r3, #31
 800741c:	d508      	bpl.n	8007430 <_printf_i+0x144>
 800741e:	6923      	ldr	r3, [r4, #16]
 8007420:	6861      	ldr	r1, [r4, #4]
 8007422:	4299      	cmp	r1, r3
 8007424:	bfde      	ittt	le
 8007426:	2330      	movle	r3, #48	@ 0x30
 8007428:	f806 3c01 	strble.w	r3, [r6, #-1]
 800742c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007430:	1b92      	subs	r2, r2, r6
 8007432:	6122      	str	r2, [r4, #16]
 8007434:	f8cd a000 	str.w	sl, [sp]
 8007438:	464b      	mov	r3, r9
 800743a:	aa03      	add	r2, sp, #12
 800743c:	4621      	mov	r1, r4
 800743e:	4640      	mov	r0, r8
 8007440:	f7ff fee6 	bl	8007210 <_printf_common>
 8007444:	3001      	adds	r0, #1
 8007446:	d14a      	bne.n	80074de <_printf_i+0x1f2>
 8007448:	f04f 30ff 	mov.w	r0, #4294967295
 800744c:	b004      	add	sp, #16
 800744e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	f043 0320 	orr.w	r3, r3, #32
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	4833      	ldr	r0, [pc, #204]	@ (8007528 <_printf_i+0x23c>)
 800745c:	2778      	movs	r7, #120	@ 0x78
 800745e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	6831      	ldr	r1, [r6, #0]
 8007466:	061f      	lsls	r7, r3, #24
 8007468:	f851 5b04 	ldr.w	r5, [r1], #4
 800746c:	d402      	bmi.n	8007474 <_printf_i+0x188>
 800746e:	065f      	lsls	r7, r3, #25
 8007470:	bf48      	it	mi
 8007472:	b2ad      	uxthmi	r5, r5
 8007474:	6031      	str	r1, [r6, #0]
 8007476:	07d9      	lsls	r1, r3, #31
 8007478:	bf44      	itt	mi
 800747a:	f043 0320 	orrmi.w	r3, r3, #32
 800747e:	6023      	strmi	r3, [r4, #0]
 8007480:	b11d      	cbz	r5, 800748a <_printf_i+0x19e>
 8007482:	2310      	movs	r3, #16
 8007484:	e7ac      	b.n	80073e0 <_printf_i+0xf4>
 8007486:	4827      	ldr	r0, [pc, #156]	@ (8007524 <_printf_i+0x238>)
 8007488:	e7e9      	b.n	800745e <_printf_i+0x172>
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	f023 0320 	bic.w	r3, r3, #32
 8007490:	6023      	str	r3, [r4, #0]
 8007492:	e7f6      	b.n	8007482 <_printf_i+0x196>
 8007494:	4616      	mov	r6, r2
 8007496:	e7bd      	b.n	8007414 <_printf_i+0x128>
 8007498:	6833      	ldr	r3, [r6, #0]
 800749a:	6825      	ldr	r5, [r4, #0]
 800749c:	6961      	ldr	r1, [r4, #20]
 800749e:	1d18      	adds	r0, r3, #4
 80074a0:	6030      	str	r0, [r6, #0]
 80074a2:	062e      	lsls	r6, r5, #24
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	d501      	bpl.n	80074ac <_printf_i+0x1c0>
 80074a8:	6019      	str	r1, [r3, #0]
 80074aa:	e002      	b.n	80074b2 <_printf_i+0x1c6>
 80074ac:	0668      	lsls	r0, r5, #25
 80074ae:	d5fb      	bpl.n	80074a8 <_printf_i+0x1bc>
 80074b0:	8019      	strh	r1, [r3, #0]
 80074b2:	2300      	movs	r3, #0
 80074b4:	6123      	str	r3, [r4, #16]
 80074b6:	4616      	mov	r6, r2
 80074b8:	e7bc      	b.n	8007434 <_printf_i+0x148>
 80074ba:	6833      	ldr	r3, [r6, #0]
 80074bc:	1d1a      	adds	r2, r3, #4
 80074be:	6032      	str	r2, [r6, #0]
 80074c0:	681e      	ldr	r6, [r3, #0]
 80074c2:	6862      	ldr	r2, [r4, #4]
 80074c4:	2100      	movs	r1, #0
 80074c6:	4630      	mov	r0, r6
 80074c8:	f7f8 fe92 	bl	80001f0 <memchr>
 80074cc:	b108      	cbz	r0, 80074d2 <_printf_i+0x1e6>
 80074ce:	1b80      	subs	r0, r0, r6
 80074d0:	6060      	str	r0, [r4, #4]
 80074d2:	6863      	ldr	r3, [r4, #4]
 80074d4:	6123      	str	r3, [r4, #16]
 80074d6:	2300      	movs	r3, #0
 80074d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074dc:	e7aa      	b.n	8007434 <_printf_i+0x148>
 80074de:	6923      	ldr	r3, [r4, #16]
 80074e0:	4632      	mov	r2, r6
 80074e2:	4649      	mov	r1, r9
 80074e4:	4640      	mov	r0, r8
 80074e6:	47d0      	blx	sl
 80074e8:	3001      	adds	r0, #1
 80074ea:	d0ad      	beq.n	8007448 <_printf_i+0x15c>
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	079b      	lsls	r3, r3, #30
 80074f0:	d413      	bmi.n	800751a <_printf_i+0x22e>
 80074f2:	68e0      	ldr	r0, [r4, #12]
 80074f4:	9b03      	ldr	r3, [sp, #12]
 80074f6:	4298      	cmp	r0, r3
 80074f8:	bfb8      	it	lt
 80074fa:	4618      	movlt	r0, r3
 80074fc:	e7a6      	b.n	800744c <_printf_i+0x160>
 80074fe:	2301      	movs	r3, #1
 8007500:	4632      	mov	r2, r6
 8007502:	4649      	mov	r1, r9
 8007504:	4640      	mov	r0, r8
 8007506:	47d0      	blx	sl
 8007508:	3001      	adds	r0, #1
 800750a:	d09d      	beq.n	8007448 <_printf_i+0x15c>
 800750c:	3501      	adds	r5, #1
 800750e:	68e3      	ldr	r3, [r4, #12]
 8007510:	9903      	ldr	r1, [sp, #12]
 8007512:	1a5b      	subs	r3, r3, r1
 8007514:	42ab      	cmp	r3, r5
 8007516:	dcf2      	bgt.n	80074fe <_printf_i+0x212>
 8007518:	e7eb      	b.n	80074f2 <_printf_i+0x206>
 800751a:	2500      	movs	r5, #0
 800751c:	f104 0619 	add.w	r6, r4, #25
 8007520:	e7f5      	b.n	800750e <_printf_i+0x222>
 8007522:	bf00      	nop
 8007524:	08008821 	.word	0x08008821
 8007528:	08008832 	.word	0x08008832

0800752c <memmove>:
 800752c:	4288      	cmp	r0, r1
 800752e:	b510      	push	{r4, lr}
 8007530:	eb01 0402 	add.w	r4, r1, r2
 8007534:	d902      	bls.n	800753c <memmove+0x10>
 8007536:	4284      	cmp	r4, r0
 8007538:	4623      	mov	r3, r4
 800753a:	d807      	bhi.n	800754c <memmove+0x20>
 800753c:	1e43      	subs	r3, r0, #1
 800753e:	42a1      	cmp	r1, r4
 8007540:	d008      	beq.n	8007554 <memmove+0x28>
 8007542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800754a:	e7f8      	b.n	800753e <memmove+0x12>
 800754c:	4402      	add	r2, r0
 800754e:	4601      	mov	r1, r0
 8007550:	428a      	cmp	r2, r1
 8007552:	d100      	bne.n	8007556 <memmove+0x2a>
 8007554:	bd10      	pop	{r4, pc}
 8007556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800755a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800755e:	e7f7      	b.n	8007550 <memmove+0x24>

08007560 <_sbrk_r>:
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	4d06      	ldr	r5, [pc, #24]	@ (800757c <_sbrk_r+0x1c>)
 8007564:	2300      	movs	r3, #0
 8007566:	4604      	mov	r4, r0
 8007568:	4608      	mov	r0, r1
 800756a:	602b      	str	r3, [r5, #0]
 800756c:	f7fb ff22 	bl	80033b4 <_sbrk>
 8007570:	1c43      	adds	r3, r0, #1
 8007572:	d102      	bne.n	800757a <_sbrk_r+0x1a>
 8007574:	682b      	ldr	r3, [r5, #0]
 8007576:	b103      	cbz	r3, 800757a <_sbrk_r+0x1a>
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	bd38      	pop	{r3, r4, r5, pc}
 800757c:	20025da4 	.word	0x20025da4

08007580 <memcpy>:
 8007580:	440a      	add	r2, r1
 8007582:	4291      	cmp	r1, r2
 8007584:	f100 33ff 	add.w	r3, r0, #4294967295
 8007588:	d100      	bne.n	800758c <memcpy+0xc>
 800758a:	4770      	bx	lr
 800758c:	b510      	push	{r4, lr}
 800758e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007592:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007596:	4291      	cmp	r1, r2
 8007598:	d1f9      	bne.n	800758e <memcpy+0xe>
 800759a:	bd10      	pop	{r4, pc}

0800759c <_realloc_r>:
 800759c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a0:	4680      	mov	r8, r0
 80075a2:	4615      	mov	r5, r2
 80075a4:	460c      	mov	r4, r1
 80075a6:	b921      	cbnz	r1, 80075b2 <_realloc_r+0x16>
 80075a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075ac:	4611      	mov	r1, r2
 80075ae:	f7ff bc4b 	b.w	8006e48 <_malloc_r>
 80075b2:	b92a      	cbnz	r2, 80075c0 <_realloc_r+0x24>
 80075b4:	f7ff fbdc 	bl	8006d70 <_free_r>
 80075b8:	2400      	movs	r4, #0
 80075ba:	4620      	mov	r0, r4
 80075bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c0:	f000 f81a 	bl	80075f8 <_malloc_usable_size_r>
 80075c4:	4285      	cmp	r5, r0
 80075c6:	4606      	mov	r6, r0
 80075c8:	d802      	bhi.n	80075d0 <_realloc_r+0x34>
 80075ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80075ce:	d8f4      	bhi.n	80075ba <_realloc_r+0x1e>
 80075d0:	4629      	mov	r1, r5
 80075d2:	4640      	mov	r0, r8
 80075d4:	f7ff fc38 	bl	8006e48 <_malloc_r>
 80075d8:	4607      	mov	r7, r0
 80075da:	2800      	cmp	r0, #0
 80075dc:	d0ec      	beq.n	80075b8 <_realloc_r+0x1c>
 80075de:	42b5      	cmp	r5, r6
 80075e0:	462a      	mov	r2, r5
 80075e2:	4621      	mov	r1, r4
 80075e4:	bf28      	it	cs
 80075e6:	4632      	movcs	r2, r6
 80075e8:	f7ff ffca 	bl	8007580 <memcpy>
 80075ec:	4621      	mov	r1, r4
 80075ee:	4640      	mov	r0, r8
 80075f0:	f7ff fbbe 	bl	8006d70 <_free_r>
 80075f4:	463c      	mov	r4, r7
 80075f6:	e7e0      	b.n	80075ba <_realloc_r+0x1e>

080075f8 <_malloc_usable_size_r>:
 80075f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075fc:	1f18      	subs	r0, r3, #4
 80075fe:	2b00      	cmp	r3, #0
 8007600:	bfbc      	itt	lt
 8007602:	580b      	ldrlt	r3, [r1, r0]
 8007604:	18c0      	addlt	r0, r0, r3
 8007606:	4770      	bx	lr

08007608 <_init>:
 8007608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760a:	bf00      	nop
 800760c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800760e:	bc08      	pop	{r3}
 8007610:	469e      	mov	lr, r3
 8007612:	4770      	bx	lr

08007614 <_fini>:
 8007614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007616:	bf00      	nop
 8007618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761a:	bc08      	pop	{r3}
 800761c:	469e      	mov	lr, r3
 800761e:	4770      	bx	lr
