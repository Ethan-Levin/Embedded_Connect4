
Embedded_Connect4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076e8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001224  08007898  08007898  00008898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008abc  08008abc  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  08008abc  08008abc  00009abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ac4  08008ac4  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ac4  08008ac4  00009ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ac8  08008ac8  00009ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008acc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a06c  2**0
                  CONTENTS
 10 .bss          00025d4c  2000006c  2000006c  0000a06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025db8  20025db8  0000a06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014336  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003306  00000000  00000000  0001e3d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  000216d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001054  00000000  00000000  00022c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000270ed  00000000  00000000  00023c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000193e3  00000000  00000000  0004ad51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e325b  00000000  00000000  00064134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014738f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d74  00000000  00000000  001473d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  0014d148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007880 	.word	0x08007880

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08007880 	.word	0x08007880

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
uint8_t playerMode        = 0;
uint8_t computerColor     = 0;


void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f003 f84a 	bl	800361c <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 fb2c 	bl	8000be4 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fae9 	bl	8000b64 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fd9a 	bl	80010d0 <LCD_Clear>

    buttonInit();
 800059c:	f000 f83e 	bl	800061c <buttonInit>
    addSchedulerEvent(START_MENU_EVENT);
 80005a0:	2001      	movs	r0, #1
 80005a2:	f001 fb6d 	bl	8001c80 <addSchedulerEvent>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005a6:	f001 fb47 	bl	8001c38 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005aa:	4b02      	ldr	r3, [pc, #8]	@ (80005b4 <ApplicationInit+0x34>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000088 	.word	0x20000088

080005b8 <LCD_Start_Screen>:
void LCD_Visual_Demo(void)
{
	visualDemo();
}

void LCD_Start_Screen(){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	LCD_Draw_Start_Screen();
 80005bc:	f001 f8de 	bl	800177c <LCD_Draw_Start_Screen>
	addSchedulerEvent(POLLING_MODE_SELECT_EVENT);
 80005c0:	2002      	movs	r0, #2
 80005c2:	f001 fb5d 	bl	8001c80 <addSchedulerEvent>
	removeSchedulerEvent(START_MENU_EVENT);
 80005c6:	2001      	movs	r0, #1
 80005c8:	f001 fb6c 	bl	8001ca4 <removeSchedulerEvent>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <LCD_Select_Color_Screen>:

void LCD_Select_Color_Screen(){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	LCD_Draw_Select_Color_Screen();
 80005d4:	f001 f90e 	bl	80017f4 <LCD_Draw_Select_Color_Screen>
	removeSchedulerEvent(COLOR_SELECT_EVENT);
 80005d8:	2004      	movs	r0, #4
 80005da:	f001 fb63 	bl	8001ca4 <removeSchedulerEvent>
	addSchedulerEvent(POLLING_COLOR_SELECT_EVENT);
 80005de:	2008      	movs	r0, #8
 80005e0:	f001 fb4e 	bl	8001c80 <addSchedulerEvent>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <LCD_Game_Screen>:

void LCD_Game_Screen(){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	LCD_Update_Game_Start_Time();
 80005ec:	f000 f942 	bl	8000874 <LCD_Update_Game_Start_Time>
	//update the game starting time
	LCD_Draw_Game_Grid();
 80005f0:	f001 f952 	bl	8001898 <LCD_Draw_Game_Grid>
	removeSchedulerEvent(BUILD_NEW_GAME_EVENT);
 80005f4:	2010      	movs	r0, #16
 80005f6:	f001 fb55 	bl	8001ca4 <removeSchedulerEvent>
	addSchedulerEvent(POLLING_GAME_EVENT);
 80005fa:	2020      	movs	r0, #32
 80005fc:	f001 fb40 	bl	8001c80 <addSchedulerEvent>

}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <LCD_Score_Screen>:

void LCD_Score_Screen(){
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	LCD_Draw_Score_Screen();
 8000608:	f001 f9c8 	bl	800199c <LCD_Draw_Score_Screen>
	removeSchedulerEvent(SCORE_SCREEN_EVENT);
 800060c:	2040      	movs	r0, #64	@ 0x40
 800060e:	f001 fb49 	bl	8001ca4 <removeSchedulerEvent>
	addSchedulerEvent(POLLING_RESTART_EVENT);
 8000612:	2080      	movs	r0, #128	@ 0x80
 8000614:	f001 fb34 	bl	8001c80 <addSchedulerEvent>
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}

0800061c <buttonInit>:

void buttonInit(){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	Button_Init();
 8000620:	f000 f8c6 	bl	80007b0 <Button_Init>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <AI_Drop_Chip>:

void AI_Drop_Chip(uint8_t columnToDrop){
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
	uint8_t currentColumn =  LCD_Get_Chip_To_Drop_Column();
 8000632:	f000 fb6f 	bl	8000d14 <LCD_Get_Chip_To_Drop_Column>
 8000636:	4603      	mov	r3, r0
 8000638:	73fb      	strb	r3, [r7, #15]
	//gets the current column
	while(currentColumn != columnToDrop){
 800063a:	e010      	b.n	800065e <AI_Drop_Chip+0x36>
		if(columnToDrop < currentColumn){
 800063c:	79fa      	ldrb	r2, [r7, #7]
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	429a      	cmp	r2, r3
 8000642:	d206      	bcs.n	8000652 <AI_Drop_Chip+0x2a>
			LCD_Update_Chip_To_Drop(LEFT);
 8000644:	2001      	movs	r0, #1
 8000646:	f000 fbaf 	bl	8000da8 <LCD_Update_Chip_To_Drop>
			currentColumn--;
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	3b01      	subs	r3, #1
 800064e:	73fb      	strb	r3, [r7, #15]
 8000650:	e005      	b.n	800065e <AI_Drop_Chip+0x36>
//			HAL_Delay(100);
			//move left until we get to the column we want
		}
		else{
			LCD_Update_Chip_To_Drop(RIGHT);
 8000652:	2000      	movs	r0, #0
 8000654:	f000 fba8 	bl	8000da8 <LCD_Update_Chip_To_Drop>
			currentColumn++;
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	3301      	adds	r3, #1
 800065c:	73fb      	strb	r3, [r7, #15]
	while(currentColumn != columnToDrop){
 800065e:	7bfa      	ldrb	r2, [r7, #15]
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	429a      	cmp	r2, r3
 8000664:	d1ea      	bne.n	800063c <AI_Drop_Chip+0x14>
//			HAL_Delay(100);
			//unable to get the delay working for the display so it will appear to just jump there
		}
	}
	LCD_Insert_Chip_Game_Grid();
 8000666:	f000 ffb3 	bl	80015d0 <LCD_Insert_Chip_Game_Grid>
	//after its in place then drop it
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <AI_Find_Best_Spot>:

void AI_Find_Best_Spot(){
 8000672:	b580      	push	{r7, lr}
 8000674:	b082      	sub	sp, #8
 8000676:	af00      	add	r7, sp, #0
	uint8_t columnToDrop = LCD_Find_Best_Move();
 8000678:	f000 f938 	bl	80008ec <LCD_Find_Best_Move>
 800067c:	4603      	mov	r3, r0
 800067e:	71fb      	strb	r3, [r7, #7]
	AI_Drop_Chip(columnToDrop);
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ffd0 	bl	8000628 <AI_Drop_Chip>
	//drops the chip after finding the best move
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <LCD_Polling_Mode>:
				LCD_Clear(0, LCD_COLOR_GREEN);
			}
		}
}

void LCD_Polling_Mode(){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000694:	480c      	ldr	r0, [pc, #48]	@ (80006c8 <LCD_Polling_Mode+0x38>)
 8000696:	f001 fada 	bl	8001c4e <returnTouchStateAndLocation>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d110      	bne.n	80006c2 <LCD_Polling_Mode+0x32>
		/* Touch valid */
		if(StaticTouchData.x > LCD_PIXEL_WIDTH/2){
 80006a0:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <LCD_Polling_Mode+0x38>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	2b78      	cmp	r3, #120	@ 0x78
 80006a6:	d903      	bls.n	80006b0 <LCD_Polling_Mode+0x20>
			//2 player mode
			playerMode = TWOPLAYER;
 80006a8:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <LCD_Polling_Mode+0x3c>)
 80006aa:	2202      	movs	r2, #2
 80006ac:	701a      	strb	r2, [r3, #0]
 80006ae:	e002      	b.n	80006b6 <LCD_Polling_Mode+0x26>
		}
		else{
			playerMode = ONEPLAYER;
 80006b0:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <LCD_Polling_Mode+0x3c>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
		}
		removeSchedulerEvent(POLLING_MODE_SELECT_EVENT);
 80006b6:	2002      	movs	r0, #2
 80006b8:	f001 faf4 	bl	8001ca4 <removeSchedulerEvent>
		addSchedulerEvent(COLOR_SELECT_EVENT);
 80006bc:	2004      	movs	r0, #4
 80006be:	f001 fadf 	bl	8001c80 <addSchedulerEvent>
	}
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000088 	.word	0x20000088
 80006cc:	20000090 	.word	0x20000090

080006d0 <LCD_Polling_Color>:

void LCD_Polling_Color(){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80006d4:	480c      	ldr	r0, [pc, #48]	@ (8000708 <LCD_Polling_Color+0x38>)
 80006d6:	f001 faba 	bl	8001c4e <returnTouchStateAndLocation>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d110      	bne.n	8000702 <LCD_Polling_Color+0x32>
			/* Touch valid */
			if(StaticTouchData.x < LCD_PIXEL_WIDTH/2){
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <LCD_Polling_Color+0x38>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	2b77      	cmp	r3, #119	@ 0x77
 80006e6:	d803      	bhi.n	80006f0 <LCD_Polling_Color+0x20>
				//left side
				LCD_Set_Player(PLAYER_RED);
 80006e8:	2002      	movs	r0, #2
 80006ea:	f000 f8ef 	bl	80008cc <LCD_Set_Player>
 80006ee:	e002      	b.n	80006f6 <LCD_Polling_Color+0x26>
			}
			else{
				//right side
				LCD_Set_Player(PLAYER_YELLOW);
 80006f0:	2001      	movs	r0, #1
 80006f2:	f000 f8eb 	bl	80008cc <LCD_Set_Player>
			}
			removeSchedulerEvent(POLLING_COLOR_SELECT_EVENT);
 80006f6:	2008      	movs	r0, #8
 80006f8:	f001 fad4 	bl	8001ca4 <removeSchedulerEvent>
			addSchedulerEvent(BUILD_NEW_GAME_EVENT);
 80006fc:	2010      	movs	r0, #16
 80006fe:	f001 fabf 	bl	8001c80 <addSchedulerEvent>
		}
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000088 	.word	0x20000088

0800070c <LCD_Polling_Game>:

void LCD_Polling_Game(){
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	/* If touch pressed */
	if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000710:	4809      	ldr	r0, [pc, #36]	@ (8000738 <LCD_Polling_Game+0x2c>)
 8000712:	f001 fa9c 	bl	8001c4e <returnTouchStateAndLocation>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d10a      	bne.n	8000732 <LCD_Polling_Game+0x26>
		/* Touch valid */
		if(StaticTouchData.x < LCD_PIXEL_WIDTH/2){
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <LCD_Polling_Game+0x2c>)
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	2b77      	cmp	r3, #119	@ 0x77
 8000722:	d803      	bhi.n	800072c <LCD_Polling_Game+0x20>
			//left side
			LCD_Update_Chip_To_Drop(LEFT);
 8000724:	2001      	movs	r0, #1
 8000726:	f000 fb3f 	bl	8000da8 <LCD_Update_Chip_To_Drop>
			LCD_Update_Chip_To_Drop(RIGHT);
		}
	}
	/* Touch not pressed */
	//do nothing
}
 800072a:	e002      	b.n	8000732 <LCD_Polling_Game+0x26>
			LCD_Update_Chip_To_Drop(RIGHT);
 800072c:	2000      	movs	r0, #0
 800072e:	f000 fb3b 	bl	8000da8 <LCD_Update_Chip_To_Drop>
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000088 	.word	0x20000088

0800073c <LCD_Polling_Restart>:

void LCD_Polling_Restart(){
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000740:	4808      	ldr	r0, [pc, #32]	@ (8000764 <LCD_Polling_Restart+0x28>)
 8000742:	f001 fa84 	bl	8001c4e <returnTouchStateAndLocation>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d109      	bne.n	8000760 <LCD_Polling_Restart+0x24>
		/* Touch valid */
		if(StaticTouchData.y < LCD_PIXEL_HEIGHT/2){
 800074c:	4b05      	ldr	r3, [pc, #20]	@ (8000764 <LCD_Polling_Restart+0x28>)
 800074e:	885b      	ldrh	r3, [r3, #2]
 8000750:	2b9f      	cmp	r3, #159	@ 0x9f
 8000752:	d805      	bhi.n	8000760 <LCD_Polling_Restart+0x24>
			//Bottom half
			removeSchedulerEvent(POLLING_RESTART_EVENT);
 8000754:	2080      	movs	r0, #128	@ 0x80
 8000756:	f001 faa5 	bl	8001ca4 <removeSchedulerEvent>
			addSchedulerEvent(START_MENU_EVENT);
 800075a:	2001      	movs	r0, #1
 800075c:	f001 fa90 	bl	8001c80 <addSchedulerEvent>
		}
	}
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000088 	.word	0x20000088

08000768 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(){
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800076e:	2006      	movs	r0, #6
 8000770:	f003 f98d 	bl	8003a8e <HAL_NVIC_DisableIRQ>

	uint32_t eventsToRun = getScheduledEvents();
 8000774:	f001 fa78 	bl	8001c68 <getScheduledEvents>
 8000778:	6078      	str	r0, [r7, #4]
	//only want to do stuff if the game screen is active
	if(eventsToRun & POLLING_GAME_EVENT){
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f003 0320 	and.w	r3, r3, #32
 8000780:	2b00      	cmp	r3, #0
 8000782:	d007      	beq.n	8000794 <EXTI0_IRQHandler+0x2c>
		LCD_Insert_Chip_Game_Grid();
 8000784:	f000 ff24 	bl	80015d0 <LCD_Insert_Chip_Game_Grid>
		//allows for you to insert a chip if the game is active
		if(playerMode == ONEPLAYER){
 8000788:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <EXTI0_IRQHandler+0x40>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d101      	bne.n	8000794 <EXTI0_IRQHandler+0x2c>
			//if one player mode then the AI will now act after this button got pressed
			AI_Find_Best_Spot();
 8000790:	f7ff ff6f 	bl	8000672 <AI_Find_Best_Spot>
		}
    }
	__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_0);
 8000794:	4b05      	ldr	r3, [pc, #20]	@ (80007ac <EXTI0_IRQHandler+0x44>)
 8000796:	2201      	movs	r2, #1
 8000798:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800079a:	2006      	movs	r0, #6
 800079c:	f003 f969 	bl	8003a72 <HAL_NVIC_EnableIRQ>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000090 	.word	0x20000090
 80007ac:	40013c00 	.word	0x40013c00

080007b0 <Button_Init>:
#include "Button_Driver.h"

void Button_Init(){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <Button_Init+0x54>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a11      	ldr	r2, [pc, #68]	@ (8000804 <Button_Init+0x54>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <Button_Init+0x54>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]
		GPIO_InitTypeDef buttonPin;
		buttonPin.Pin         = BUTTON_PIN;
 80007d2:	2301      	movs	r3, #1
 80007d4:	607b      	str	r3, [r7, #4]
		buttonPin.Mode        = GPIO_MODE_IT_RISING;
 80007d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007da:	60bb      	str	r3, [r7, #8]
		buttonPin.Pull        = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
		buttonPin.Speed       = GPIO_SPEED_FREQ_HIGH;
 80007e0:	2302      	movs	r3, #2
 80007e2:	613b      	str	r3, [r7, #16]
		//buttonPin.Alternate   = GPIO_AF1_TIM2;
		HAL_GPIO_Init(BUTTON_PORT, &buttonPin);
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	4619      	mov	r1, r3
 80007e8:	4807      	ldr	r0, [pc, #28]	@ (8000808 <Button_Init+0x58>)
 80007ea:	f003 f96b 	bl	8003ac4 <HAL_GPIO_Init>
		__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_0);
 80007ee:	4b07      	ldr	r3, [pc, #28]	@ (800080c <Button_Init+0x5c>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	615a      	str	r2, [r3, #20]

		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007f4:	2006      	movs	r0, #6
 80007f6:	f003 f93c 	bl	8003a72 <HAL_NVIC_EnableIRQ>
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40020000 	.word	0x40020000
 800080c:	40013c00 	.word	0x40013c00

08000810 <LCD_Animate_Falling>:
uint16_t color_of_pixel   = 0;
uint32_t gameStartTime    = 0;
uint32_t gameEndTime      = 0;
uint32_t gameLengthTime   = 0;

void LCD_Animate_Falling(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color){
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	4604      	mov	r4, r0
 8000818:	4608      	mov	r0, r1
 800081a:	4611      	mov	r1, r2
 800081c:	461a      	mov	r2, r3
 800081e:	4623      	mov	r3, r4
 8000820:	80fb      	strh	r3, [r7, #6]
 8000822:	4603      	mov	r3, r0
 8000824:	80bb      	strh	r3, [r7, #4]
 8000826:	460b      	mov	r3, r1
 8000828:	807b      	strh	r3, [r7, #2]
 800082a:	4613      	mov	r3, r2
 800082c:	803b      	strh	r3, [r7, #0]
	for(int i = chip.yPos; i<Ypos; i++){
 800082e:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <LCD_Animate_Falling+0x60>)
 8000830:	789b      	ldrb	r3, [r3, #2]
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	e013      	b.n	800085e <LCD_Animate_Falling+0x4e>
		LCD_DRAW_CIRCLE_SKIP_BLUE_BLACK(Xpos, i, radius, LCD_COLOR_WHITE);
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	b299      	uxth	r1, r3
 800083a:	887a      	ldrh	r2, [r7, #2]
 800083c:	88f8      	ldrh	r0, [r7, #6]
 800083e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000842:	f000 fac1 	bl	8000dc8 <LCD_DRAW_CIRCLE_SKIP_BLUE_BLACK>
		LCD_DRAW_CIRCLE_SKIP_BLUE_BLACK(Xpos, i+1, radius, color);
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	b29b      	uxth	r3, r3
 800084a:	3301      	adds	r3, #1
 800084c:	b299      	uxth	r1, r3
 800084e:	883b      	ldrh	r3, [r7, #0]
 8000850:	887a      	ldrh	r2, [r7, #2]
 8000852:	88f8      	ldrh	r0, [r7, #6]
 8000854:	f000 fab8 	bl	8000dc8 <LCD_DRAW_CIRCLE_SKIP_BLUE_BLACK>
	for(int i = chip.yPos; i<Ypos; i++){
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	3301      	adds	r3, #1
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	88bb      	ldrh	r3, [r7, #4]
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	429a      	cmp	r2, r3
 8000864:	dbe7      	blt.n	8000836 <LCD_Animate_Falling+0x26>
		//HAL_Delay(5);
		//seems to break the code if you include the delay
	}
}
 8000866:	bf00      	nop
 8000868:	bf00      	nop
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	bd90      	pop	{r4, r7, pc}
 8000870:	200259f0 	.word	0x200259f0

08000874 <LCD_Update_Game_Start_Time>:

void LCD_Update_Game_Start_Time(){
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	gameStartTime = HAL_GetTick();
 8000878:	f002 ffb0 	bl	80037dc <HAL_GetTick>
 800087c:	4603      	mov	r3, r0
 800087e:	4a02      	ldr	r2, [pc, #8]	@ (8000888 <LCD_Update_Game_Start_Time+0x14>)
 8000880:	6013      	str	r3, [r2, #0]
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200259f8 	.word	0x200259f8

0800088c <LCD_Update_Game_End_Time>:

void LCD_Update_Game_End_Time(){
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	gameEndTime = HAL_GetTick();
 8000890:	f002 ffa4 	bl	80037dc <HAL_GetTick>
 8000894:	4603      	mov	r3, r0
 8000896:	4a02      	ldr	r2, [pc, #8]	@ (80008a0 <LCD_Update_Game_End_Time+0x14>)
 8000898:	6013      	str	r3, [r2, #0]
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200259fc 	.word	0x200259fc

080008a4 <LCD_Update_Game_Length_Time>:

void LCD_Update_Game_Length_Time(){
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
	gameLengthTime = gameEndTime - gameStartTime;
 80008a8:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <LCD_Update_Game_Length_Time+0x1c>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <LCD_Update_Game_Length_Time+0x20>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	4a05      	ldr	r2, [pc, #20]	@ (80008c8 <LCD_Update_Game_Length_Time+0x24>)
 80008b4:	6013      	str	r3, [r2, #0]
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	200259fc 	.word	0x200259fc
 80008c4:	200259f8 	.word	0x200259f8
 80008c8:	20025a00 	.word	0x20025a00

080008cc <LCD_Set_Player>:

void LCD_Set_Player(uint8_t color){
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
	playerTurn = color;
 80008d6:	4a04      	ldr	r2, [pc, #16]	@ (80008e8 <LCD_Set_Player+0x1c>)
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	7013      	strb	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	20000002 	.word	0x20000002

080008ec <LCD_Find_Best_Move>:

uint8_t LCD_Get_Player(){
	return playerTurn;
}

uint8_t LCD_Find_Best_Move(){
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

}
 80008f0:	bf00      	nop
 80008f2:	4618      	mov	r0, r3
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <Init_Chip_To_Drop>:

void Init_Chip_To_Drop(){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	chip.yPos        = CHIP_Y_POS;
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <Init_Chip_To_Drop+0x20>)
 8000902:	223a      	movs	r2, #58	@ 0x3a
 8000904:	709a      	strb	r2, [r3, #2]
	chip.xPos        = CHIP_X_POS(CHIP_X_START_COLUMN);
 8000906:	4b05      	ldr	r3, [pc, #20]	@ (800091c <Init_Chip_To_Drop+0x20>)
 8000908:	2277      	movs	r2, #119	@ 0x77
 800090a:	705a      	strb	r2, [r3, #1]
	chip.column      = CHIP_X_START_COLUMN;
 800090c:	4b03      	ldr	r3, [pc, #12]	@ (800091c <Init_Chip_To_Drop+0x20>)
 800090e:	2203      	movs	r2, #3
 8000910:	701a      	strb	r2, [r3, #0]
	LCD_Draw_Chip_To_Drop();
 8000912:	f000 f9c5 	bl	8000ca0 <LCD_Draw_Chip_To_Drop>
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200259f0 	.word	0x200259f0

08000920 <Init_Grid>:

void Init_Grid(){
 8000920:	b490      	push	{r4, r7}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<COLUMNS; i++){
 8000926:	2300      	movs	r3, #0
 8000928:	71fb      	strb	r3, [r7, #7]
 800092a:	e047      	b.n	80009bc <Init_Grid+0x9c>
		for(uint8_t j =0; j<ROWS; j++){
 800092c:	2300      	movs	r3, #0
 800092e:	71bb      	strb	r3, [r7, #6]
 8000930:	e03e      	b.n	80009b0 <Init_Grid+0x90>
			grid[i][j].xPos = SQUARE_SIZE/2+SQUARE_SIZE*i;
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	461a      	mov	r2, r3
 8000936:	0112      	lsls	r2, r2, #4
 8000938:	4413      	add	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	b2da      	uxtb	r2, r3
 800093e:	79f9      	ldrb	r1, [r7, #7]
 8000940:	79bb      	ldrb	r3, [r7, #6]
 8000942:	3211      	adds	r2, #17
 8000944:	b2d4      	uxtb	r4, r2
 8000946:	4822      	ldr	r0, [pc, #136]	@ (80009d0 <Init_Grid+0xb0>)
 8000948:	461a      	mov	r2, r3
 800094a:	0052      	lsls	r2, r2, #1
 800094c:	441a      	add	r2, r3
 800094e:	460b      	mov	r3, r1
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	440b      	add	r3, r1
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	4413      	add	r3, r2
 8000958:	4403      	add	r3, r0
 800095a:	4622      	mov	r2, r4
 800095c:	701a      	strb	r2, [r3, #0]
			grid[i][j].yPos = SQUARE_SIZE/2 + SQUARE_SIZE*j;
 800095e:	79bb      	ldrb	r3, [r7, #6]
 8000960:	461a      	mov	r2, r3
 8000962:	0112      	lsls	r2, r2, #4
 8000964:	4413      	add	r3, r2
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	b2da      	uxtb	r2, r3
 800096a:	79f9      	ldrb	r1, [r7, #7]
 800096c:	79bb      	ldrb	r3, [r7, #6]
 800096e:	3211      	adds	r2, #17
 8000970:	b2d4      	uxtb	r4, r2
 8000972:	4817      	ldr	r0, [pc, #92]	@ (80009d0 <Init_Grid+0xb0>)
 8000974:	461a      	mov	r2, r3
 8000976:	0052      	lsls	r2, r2, #1
 8000978:	441a      	add	r2, r3
 800097a:	460b      	mov	r3, r1
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	440b      	add	r3, r1
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	4413      	add	r3, r2
 8000984:	4403      	add	r3, r0
 8000986:	3301      	adds	r3, #1
 8000988:	4622      	mov	r2, r4
 800098a:	701a      	strb	r2, [r3, #0]
			grid[i][j].playerColor = PLAYER_EMPTY;
 800098c:	79f9      	ldrb	r1, [r7, #7]
 800098e:	79bb      	ldrb	r3, [r7, #6]
 8000990:	480f      	ldr	r0, [pc, #60]	@ (80009d0 <Init_Grid+0xb0>)
 8000992:	461a      	mov	r2, r3
 8000994:	0052      	lsls	r2, r2, #1
 8000996:	441a      	add	r2, r3
 8000998:	460b      	mov	r3, r1
 800099a:	00db      	lsls	r3, r3, #3
 800099c:	440b      	add	r3, r1
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	4413      	add	r3, r2
 80009a2:	4403      	add	r3, r0
 80009a4:	3302      	adds	r3, #2
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
		for(uint8_t j =0; j<ROWS; j++){
 80009aa:	79bb      	ldrb	r3, [r7, #6]
 80009ac:	3301      	adds	r3, #1
 80009ae:	71bb      	strb	r3, [r7, #6]
 80009b0:	79bb      	ldrb	r3, [r7, #6]
 80009b2:	2b05      	cmp	r3, #5
 80009b4:	d9bd      	bls.n	8000932 <Init_Grid+0x12>
	for(uint8_t i = 0; i<COLUMNS; i++){
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	3301      	adds	r3, #1
 80009ba:	71fb      	strb	r3, [r7, #7]
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	2b06      	cmp	r3, #6
 80009c0:	d9b4      	bls.n	800092c <Init_Grid+0xc>
			//this clears any old information about the colors from the previous game
		}
	}
}
 80009c2:	bf00      	nop
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc90      	pop	{r4, r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20025970 	.word	0x20025970

080009d4 <LCD_GPIO_Init>:


void LCD_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	@ 0x30
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
 80009de:	4b5a      	ldr	r3, [pc, #360]	@ (8000b48 <LCD_GPIO_Init+0x174>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e2:	4a59      	ldr	r2, [pc, #356]	@ (8000b48 <LCD_GPIO_Init+0x174>)
 80009e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80009e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ea:	4b57      	ldr	r3, [pc, #348]	@ (8000b48 <LCD_GPIO_Init+0x174>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80009f2:	61bb      	str	r3, [r7, #24]
 80009f4:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	4b53      	ldr	r3, [pc, #332]	@ (8000b48 <LCD_GPIO_Init+0x174>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a52      	ldr	r2, [pc, #328]	@ (8000b48 <LCD_GPIO_Init+0x174>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b50      	ldr	r3, [pc, #320]	@ (8000b48 <LCD_GPIO_Init+0x174>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	4b4c      	ldr	r3, [pc, #304]	@ (8000b48 <LCD_GPIO_Init+0x174>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a4b      	ldr	r2, [pc, #300]	@ (8000b48 <LCD_GPIO_Init+0x174>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b49      	ldr	r3, [pc, #292]	@ (8000b48 <LCD_GPIO_Init+0x174>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b45      	ldr	r3, [pc, #276]	@ (8000b48 <LCD_GPIO_Init+0x174>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a44      	ldr	r2, [pc, #272]	@ (8000b48 <LCD_GPIO_Init+0x174>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b42      	ldr	r3, [pc, #264]	@ (8000b48 <LCD_GPIO_Init+0x174>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b48 <LCD_GPIO_Init+0x174>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a3d      	ldr	r2, [pc, #244]	@ (8000b48 <LCD_GPIO_Init+0x174>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b48 <LCD_GPIO_Init+0x174>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b37      	ldr	r3, [pc, #220]	@ (8000b48 <LCD_GPIO_Init+0x174>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a36      	ldr	r2, [pc, #216]	@ (8000b48 <LCD_GPIO_Init+0x174>)
 8000a70:	f043 0320 	orr.w	r3, r3, #32
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b34      	ldr	r3, [pc, #208]	@ (8000b48 <LCD_GPIO_Init+0x174>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0320 	and.w	r3, r3, #32
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b30      	ldr	r3, [pc, #192]	@ (8000b48 <LCD_GPIO_Init+0x174>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b48 <LCD_GPIO_Init+0x174>)
 8000a8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b2d      	ldr	r3, [pc, #180]	@ (8000b48 <LCD_GPIO_Init+0x174>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000a9e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000aa2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000aac:	2302      	movs	r3, #2
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000ab0:	230e      	movs	r3, #14
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4824      	ldr	r0, [pc, #144]	@ (8000b4c <LCD_GPIO_Init+0x178>)
 8000abc:	f003 f802 	bl	8003ac4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000ac0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000ac4:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	4820      	ldr	r0, [pc, #128]	@ (8000b50 <LCD_GPIO_Init+0x17c>)
 8000ace:	f002 fff9 	bl	8003ac4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000ad2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000ad6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	481d      	ldr	r0, [pc, #116]	@ (8000b54 <LCD_GPIO_Init+0x180>)
 8000ae0:	f002 fff0 	bl	8003ac4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000ae4:	2348      	movs	r3, #72	@ 0x48
 8000ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	481a      	ldr	r0, [pc, #104]	@ (8000b58 <LCD_GPIO_Init+0x184>)
 8000af0:	f002 ffe8 	bl	8003ac4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000af4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4816      	ldr	r0, [pc, #88]	@ (8000b5c <LCD_GPIO_Init+0x188>)
 8000b02:	f002 ffdf 	bl	8003ac4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000b06:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000b0a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	4813      	ldr	r0, [pc, #76]	@ (8000b60 <LCD_GPIO_Init+0x18c>)
 8000b14:	f002 ffd6 	bl	8003ac4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000b1c:	2309      	movs	r3, #9
 8000b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	480a      	ldr	r0, [pc, #40]	@ (8000b50 <LCD_GPIO_Init+0x17c>)
 8000b28:	f002 ffcc 	bl	8003ac4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000b2c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <LCD_GPIO_Init+0x18c>)
 8000b3a:	f002 ffc3 	bl	8003ac4 <HAL_GPIO_Init>
}
 8000b3e:	bf00      	nop
 8000b40:	3730      	adds	r7, #48	@ 0x30
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000
 8000b50:	40020400 	.word	0x40020400
 8000b54:	40020800 	.word	0x40020800
 8000b58:	40020c00 	.word	0x40020c00
 8000b5c:	40021400 	.word	0x40021400
 8000b60:	40021800 	.word	0x40021800

08000b64 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b090      	sub	sp, #64	@ 0x40
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000b72:	23f0      	movs	r3, #240	@ 0xf0
 8000b74:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000b7a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b7e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000b80:	2302      	movs	r3, #2
 8000b82:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000b84:	23ff      	movs	r3, #255	@ 0xff
 8000b86:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b90:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b92:	2305      	movs	r3, #5
 8000b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d101      	bne.n	8000ba0 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <LTCD_Layer_Init+0x78>)
 8000b9e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000ba0:	23f0      	movs	r3, #240	@ 0xf0
 8000ba2:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000ba4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000bbc:	79fa      	ldrb	r2, [r7, #7]
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4806      	ldr	r0, [pc, #24]	@ (8000be0 <LTCD_Layer_Init+0x7c>)
 8000bc6:	f004 fbbf 	bl	8005348 <HAL_LTDC_ConfigLayer>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000bd0:	f001 f82c 	bl	8001c2c <LCD_Error_Handler>
	}
}
 8000bd4:	bf00      	nop
 8000bd6:	3740      	adds	r7, #64	@ 0x40
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000170 	.word	0x20000170
 8000be0:	20000094 	.word	0x20000094

08000be4 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000be8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c94 <LTCD__Init+0xb0>)
 8000bea:	4a2b      	ldr	r2, [pc, #172]	@ (8000c98 <LTCD__Init+0xb4>)
 8000bec:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000bee:	4b29      	ldr	r3, [pc, #164]	@ (8000c94 <LTCD__Init+0xb0>)
 8000bf0:	2209      	movs	r2, #9
 8000bf2:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000bf4:	4b27      	ldr	r3, [pc, #156]	@ (8000c94 <LTCD__Init+0xb0>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000bfa:	4b26      	ldr	r3, [pc, #152]	@ (8000c94 <LTCD__Init+0xb0>)
 8000bfc:	221d      	movs	r2, #29
 8000bfe:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000c00:	4b24      	ldr	r3, [pc, #144]	@ (8000c94 <LTCD__Init+0xb0>)
 8000c02:	2203      	movs	r2, #3
 8000c04:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000c06:	4b23      	ldr	r3, [pc, #140]	@ (8000c94 <LTCD__Init+0xb0>)
 8000c08:	f240 120d 	movw	r2, #269	@ 0x10d
 8000c0c:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000c0e:	4b21      	ldr	r3, [pc, #132]	@ (8000c94 <LTCD__Init+0xb0>)
 8000c10:	f240 1243 	movw	r2, #323	@ 0x143
 8000c14:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000c16:	4b1f      	ldr	r3, [pc, #124]	@ (8000c94 <LTCD__Init+0xb0>)
 8000c18:	f240 1217 	movw	r2, #279	@ 0x117
 8000c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c94 <LTCD__Init+0xb0>)
 8000c20:	f240 1247 	movw	r2, #327	@ 0x147
 8000c24:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000c26:	4b1b      	ldr	r3, [pc, #108]	@ (8000c94 <LTCD__Init+0xb0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000c2e:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <LTCD__Init+0xb0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000c36:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <LTCD__Init+0xb0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000c3e:	4b17      	ldr	r3, [pc, #92]	@ (8000c9c <LTCD__Init+0xb8>)
 8000c40:	2208      	movs	r2, #8
 8000c42:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000c44:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <LTCD__Init+0xb8>)
 8000c46:	22c0      	movs	r2, #192	@ 0xc0
 8000c48:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000c4a:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <LTCD__Init+0xb8>)
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000c50:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <LTCD__Init+0xb8>)
 8000c52:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c56:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000c58:	4810      	ldr	r0, [pc, #64]	@ (8000c9c <LTCD__Init+0xb8>)
 8000c5a:	f005 f9cf 	bl	8005ffc <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c94 <LTCD__Init+0xb0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c64:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <LTCD__Init+0xb0>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <LTCD__Init+0xb0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c70:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <LTCD__Init+0xb0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000c76:	f7ff fead 	bl	80009d4 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c7a:	4806      	ldr	r0, [pc, #24]	@ (8000c94 <LTCD__Init+0xb0>)
 8000c7c:	f004 fa94 	bl	80051a8 <HAL_LTDC_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000c86:	f000 ffd1 	bl	8001c2c <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000c8a:	f001 f81f 	bl	8001ccc <ili9341_Init>
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000094 	.word	0x20000094
 8000c98:	40016800 	.word	0x40016800
 8000c9c:	2000013c 	.word	0x2000013c

08000ca0 <LCD_Draw_Chip_To_Drop>:
/*
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Chip_To_Drop(){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	if(playerTurn == PLAYER_RED){
 8000ca4:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <LCD_Draw_Chip_To_Drop+0x48>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d10b      	bne.n	8000cc4 <LCD_Draw_Chip_To_Drop+0x24>
		LCD_Draw_Circle_Fill(chip.xPos, chip.yPos, CIRCLE_RADIUS, LCD_COLOR_RED);
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <LCD_Draw_Chip_To_Drop+0x4c>)
 8000cae:	785b      	ldrb	r3, [r3, #1]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <LCD_Draw_Chip_To_Drop+0x4c>)
 8000cb4:	789b      	ldrb	r3, [r3, #2]
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000cbc:	220c      	movs	r2, #12
 8000cbe:	f000 f929 	bl	8000f14 <LCD_Draw_Circle_Fill>
	}
	else if(playerTurn == PLAYER_YELLOW){
		LCD_Draw_Circle_Fill(chip.xPos, chip.yPos, CIRCLE_RADIUS, LCD_COLOR_YELLOW);
	}
	//if nothing is updating then there is an error with playerTurn
}
 8000cc2:	e00e      	b.n	8000ce2 <LCD_Draw_Chip_To_Drop+0x42>
	else if(playerTurn == PLAYER_YELLOW){
 8000cc4:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <LCD_Draw_Chip_To_Drop+0x48>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d10a      	bne.n	8000ce2 <LCD_Draw_Chip_To_Drop+0x42>
		LCD_Draw_Circle_Fill(chip.xPos, chip.yPos, CIRCLE_RADIUS, LCD_COLOR_YELLOW);
 8000ccc:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <LCD_Draw_Chip_To_Drop+0x4c>)
 8000cce:	785b      	ldrb	r3, [r3, #1]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <LCD_Draw_Chip_To_Drop+0x4c>)
 8000cd4:	789b      	ldrb	r3, [r3, #2]
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000cdc:	220c      	movs	r2, #12
 8000cde:	f000 f919 	bl	8000f14 <LCD_Draw_Circle_Fill>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000002 	.word	0x20000002
 8000cec:	200259f0 	.word	0x200259f0

08000cf0 <LCD_Clear_Chip_To_Drop>:

void LCD_Clear_Chip_To_Drop(){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	LCD_Draw_Circle_Fill(chip.xPos, chip.yPos, CIRCLE_RADIUS, LCD_COLOR_WHITE);
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <LCD_Clear_Chip_To_Drop+0x20>)
 8000cf6:	785b      	ldrb	r3, [r3, #1]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <LCD_Clear_Chip_To_Drop+0x20>)
 8000cfc:	789b      	ldrb	r3, [r3, #2]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d04:	220c      	movs	r2, #12
 8000d06:	f000 f905 	bl	8000f14 <LCD_Draw_Circle_Fill>
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200259f0 	.word	0x200259f0

08000d14 <LCD_Get_Chip_To_Drop_Column>:

uint8_t LCD_Get_Chip_To_Drop_Column(){
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
	return chip.column;
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <LCD_Get_Chip_To_Drop_Column+0x14>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	200259f0 	.word	0x200259f0

08000d2c <LCD_Update_Chip_To_Drop_Column>:

void LCD_Update_Chip_To_Drop_Column(int direction){
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	if(direction == RIGHT && chip.column != RIGHT_MOST_COLUMN){
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d115      	bne.n	8000d66 <LCD_Update_Chip_To_Drop_Column+0x3a>
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d011      	beq.n	8000d66 <LCD_Update_Chip_To_Drop_Column+0x3a>
		//if its the 7th most do nothing
		chip.column = chip.column + 1;
 8000d42:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	3301      	adds	r3, #1
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000d4c:	701a      	strb	r2, [r3, #0]
		chip.xPos   = CHIP_X_POS(chip.column);
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	0112      	lsls	r2, r2, #4
 8000d56:	4413      	add	r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	3311      	adds	r3, #17
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000d62:	705a      	strb	r2, [r3, #1]
	else if(direction == LEFT && chip.column != LEFT_MOST_COLUMN){
		//if its the 1st column do nothing
		chip.column = chip.column - 1;
		chip.xPos   = CHIP_X_POS(chip.column);
	}
}
 8000d64:	e017      	b.n	8000d96 <LCD_Update_Chip_To_Drop_Column+0x6a>
	else if(direction == LEFT && chip.column != LEFT_MOST_COLUMN){
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d114      	bne.n	8000d96 <LCD_Update_Chip_To_Drop_Column+0x6a>
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d010      	beq.n	8000d96 <LCD_Update_Chip_To_Drop_Column+0x6a>
		chip.column = chip.column - 1;
 8000d74:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000d7e:	701a      	strb	r2, [r3, #0]
		chip.xPos   = CHIP_X_POS(chip.column);
 8000d80:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	4413      	add	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	3311      	adds	r3, #17
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000d94:	705a      	strb	r2, [r3, #1]
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	200259f0 	.word	0x200259f0

08000da8 <LCD_Update_Chip_To_Drop>:

void LCD_Update_Chip_To_Drop(int dir){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	LCD_Clear_Chip_To_Drop();
 8000db0:	f7ff ff9e 	bl	8000cf0 <LCD_Clear_Chip_To_Drop>
	LCD_Update_Chip_To_Drop_Column(dir);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ffb9 	bl	8000d2c <LCD_Update_Chip_To_Drop_Column>
	LCD_Draw_Chip_To_Drop();
 8000dba:	f7ff ff71 	bl	8000ca0 <LCD_Draw_Chip_To_Drop>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <LCD_DRAW_CIRCLE_SKIP_BLUE_BLACK>:

void LCD_DRAW_CIRCLE_SKIP_BLUE_BLACK(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color){
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4604      	mov	r4, r0
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4623      	mov	r3, r4
 8000dd8:	80fb      	strh	r3, [r7, #6]
 8000dda:	4603      	mov	r3, r0
 8000ddc:	80bb      	strh	r3, [r7, #4]
 8000dde:	460b      	mov	r3, r1
 8000de0:	807b      	strh	r3, [r7, #2]
 8000de2:	4613      	mov	r3, r2
 8000de4:	803b      	strh	r3, [r7, #0]
	for(int16_t y=-radius; y<=radius; y++)
 8000de6:	887b      	ldrh	r3, [r7, #2]
 8000de8:	425b      	negs	r3, r3
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	81fb      	strh	r3, [r7, #14]
 8000dee:	e047      	b.n	8000e80 <LCD_DRAW_CIRCLE_SKIP_BLUE_BLACK+0xb8>
	    {
	        for(int16_t x=-radius; x<=radius; x++)
 8000df0:	887b      	ldrh	r3, [r7, #2]
 8000df2:	425b      	negs	r3, r3
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	81bb      	strh	r3, [r7, #12]
 8000df8:	e037      	b.n	8000e6a <LCD_DRAW_CIRCLE_SKIP_BLUE_BLACK+0xa2>
	        {
	        	LCD_Get_Pixel_Color(x+Xpos, y+Ypos);
 8000dfa:	89ba      	ldrh	r2, [r7, #12]
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	4413      	add	r3, r2
 8000e00:	b298      	uxth	r0, r3
 8000e02:	89fa      	ldrh	r2, [r7, #14]
 8000e04:	88bb      	ldrh	r3, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f000 f862 	bl	8000ed4 <LCD_Get_Pixel_Color>
	            if(x*x+y*y <= radius*radius)
 8000e10:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e14:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000e18:	fb03 f202 	mul.w	r2, r3, r2
 8000e1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e20:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000e24:	fb01 f303 	mul.w	r3, r1, r3
 8000e28:	441a      	add	r2, r3
 8000e2a:	887b      	ldrh	r3, [r7, #2]
 8000e2c:	8879      	ldrh	r1, [r7, #2]
 8000e2e:	fb01 f303 	mul.w	r3, r1, r3
 8000e32:	429a      	cmp	r2, r3
 8000e34:	dc13      	bgt.n	8000e5e <LCD_DRAW_CIRCLE_SKIP_BLUE_BLACK+0x96>
	            {
	            	if(color_of_pixel != LCD_COLOR_BLUE && color_of_pixel != LCD_COLOR_BLACK){
 8000e36:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <LCD_DRAW_CIRCLE_SKIP_BLUE_BLACK+0xcc>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	2b1f      	cmp	r3, #31
 8000e3c:	d00f      	beq.n	8000e5e <LCD_DRAW_CIRCLE_SKIP_BLUE_BLACK+0x96>
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <LCD_DRAW_CIRCLE_SKIP_BLUE_BLACK+0xcc>)
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00b      	beq.n	8000e5e <LCD_DRAW_CIRCLE_SKIP_BLUE_BLACK+0x96>
	            		//ignore background grid and lines
	            		LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000e46:	89ba      	ldrh	r2, [r7, #12]
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	b298      	uxth	r0, r3
 8000e4e:	89fa      	ldrh	r2, [r7, #14]
 8000e50:	88bb      	ldrh	r3, [r7, #4]
 8000e52:	4413      	add	r3, r2
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	883a      	ldrh	r2, [r7, #0]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f000 f81d 	bl	8000e98 <LCD_Draw_Pixel>
	        for(int16_t x=-radius; x<=radius; x++)
 8000e5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	3301      	adds	r3, #1
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	81bb      	strh	r3, [r7, #12]
 8000e6a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000e6e:	887b      	ldrh	r3, [r7, #2]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	ddc2      	ble.n	8000dfa <LCD_DRAW_CIRCLE_SKIP_BLUE_BLACK+0x32>
	for(int16_t y=-radius; y<=radius; y++)
 8000e74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	81fb      	strh	r3, [r7, #14]
 8000e80:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000e84:	887b      	ldrh	r3, [r7, #2]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	ddb2      	ble.n	8000df0 <LCD_DRAW_CIRCLE_SKIP_BLUE_BLACK+0x28>
	            	}
	            }
	        }
	    }
}
 8000e8a:	bf00      	nop
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd90      	pop	{r4, r7, pc}
 8000e94:	200259f6 	.word	0x200259f6

08000e98 <LCD_Draw_Pixel>:

void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	80bb      	strh	r3, [r7, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000eaa:	88ba      	ldrh	r2, [r7, #4]
 8000eac:	4613      	mov	r3, r2
 8000eae:	011b      	lsls	r3, r3, #4
 8000eb0:	1a9b      	subs	r3, r3, r2
 8000eb2:	011b      	lsls	r3, r3, #4
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	4413      	add	r3, r2
 8000eba:	4905      	ldr	r1, [pc, #20]	@ (8000ed0 <LCD_Draw_Pixel+0x38>)
 8000ebc:	887a      	ldrh	r2, [r7, #2]
 8000ebe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000170 	.word	0x20000170

08000ed4 <LCD_Get_Pixel_Color>:

void LCD_Get_Pixel_Color(uint16_t x, uint16_t y){
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	460a      	mov	r2, r1
 8000ede:	80fb      	strh	r3, [r7, #6]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	80bb      	strh	r3, [r7, #4]
	color_of_pixel = frameBuffer[y*LCD_PIXEL_WIDTH+x];  //Returns the pixel color
 8000ee4:	88ba      	ldrh	r2, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	011b      	lsls	r3, r3, #4
 8000eea:	1a9b      	subs	r3, r3, r2
 8000eec:	011b      	lsls	r3, r3, #4
 8000eee:	461a      	mov	r2, r3
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a05      	ldr	r2, [pc, #20]	@ (8000f0c <LCD_Get_Pixel_Color+0x38>)
 8000ef6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000efa:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <LCD_Get_Pixel_Color+0x3c>)
 8000efc:	801a      	strh	r2, [r3, #0]
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000170 	.word	0x20000170
 8000f10:	200259f6 	.word	0x200259f6

08000f14 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4604      	mov	r4, r0
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	4611      	mov	r1, r2
 8000f20:	461a      	mov	r2, r3
 8000f22:	4623      	mov	r3, r4
 8000f24:	80fb      	strh	r3, [r7, #6]
 8000f26:	4603      	mov	r3, r0
 8000f28:	80bb      	strh	r3, [r7, #4]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	807b      	strh	r3, [r7, #2]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000f32:	887b      	ldrh	r3, [r7, #2]
 8000f34:	425b      	negs	r3, r3
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	81fb      	strh	r3, [r7, #14]
 8000f3a:	e034      	b.n	8000fa6 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000f3c:	887b      	ldrh	r3, [r7, #2]
 8000f3e:	425b      	negs	r3, r3
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	81bb      	strh	r3, [r7, #12]
 8000f44:	e024      	b.n	8000f90 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000f46:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f4a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000f4e:	fb03 f202 	mul.w	r2, r3, r2
 8000f52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f56:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000f5a:	fb01 f303 	mul.w	r3, r1, r3
 8000f5e:	441a      	add	r2, r3
 8000f60:	887b      	ldrh	r3, [r7, #2]
 8000f62:	8879      	ldrh	r1, [r7, #2]
 8000f64:	fb01 f303 	mul.w	r3, r1, r3
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	dc0b      	bgt.n	8000f84 <LCD_Draw_Circle_Fill+0x70>
            {
				LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000f6c:	89ba      	ldrh	r2, [r7, #12]
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	4413      	add	r3, r2
 8000f72:	b298      	uxth	r0, r3
 8000f74:	89fa      	ldrh	r2, [r7, #14]
 8000f76:	88bb      	ldrh	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	883a      	ldrh	r2, [r7, #0]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f7ff ff8a 	bl	8000e98 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000f84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	81bb      	strh	r3, [r7, #12]
 8000f90:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	ddd5      	ble.n	8000f46 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000f9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	81fb      	strh	r3, [r7, #14]
 8000fa6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000faa:	887b      	ldrh	r3, [r7, #2]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	ddc5      	ble.n	8000f3c <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd90      	pop	{r4, r7, pc}

08000fba <LCD_Draw_Rectangle_Fill>:

void LCD_Draw_Rectangle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint16_t Height, uint16_t color){
 8000fba:	b590      	push	{r4, r7, lr}
 8000fbc:	b085      	sub	sp, #20
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4604      	mov	r4, r0
 8000fc2:	4608      	mov	r0, r1
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4623      	mov	r3, r4
 8000fca:	80fb      	strh	r3, [r7, #6]
 8000fcc:	4603      	mov	r3, r0
 8000fce:	80bb      	strh	r3, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	803b      	strh	r3, [r7, #0]
	for(int16_t y=0; y<Height; y++){
 8000fd8:	2300      	movs	r3, #0
 8000fda:	81fb      	strh	r3, [r7, #14]
 8000fdc:	e01f      	b.n	800101e <LCD_Draw_Rectangle_Fill+0x64>
		for(int16_t x=0; x<Length; x++){
 8000fde:	2300      	movs	r3, #0
 8000fe0:	81bb      	strh	r3, [r7, #12]
 8000fe2:	e011      	b.n	8001008 <LCD_Draw_Rectangle_Fill+0x4e>
			LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000fe4:	89ba      	ldrh	r2, [r7, #12]
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	4413      	add	r3, r2
 8000fea:	b298      	uxth	r0, r3
 8000fec:	89fa      	ldrh	r2, [r7, #14]
 8000fee:	88bb      	ldrh	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	8c3a      	ldrh	r2, [r7, #32]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f7ff ff4e 	bl	8000e98 <LCD_Draw_Pixel>
		for(int16_t x=0; x<Length; x++){
 8000ffc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001000:	b29b      	uxth	r3, r3
 8001002:	3301      	adds	r3, #1
 8001004:	b29b      	uxth	r3, r3
 8001006:	81bb      	strh	r3, [r7, #12]
 8001008:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	429a      	cmp	r2, r3
 8001010:	dbe8      	blt.n	8000fe4 <LCD_Draw_Rectangle_Fill+0x2a>
	for(int16_t y=0; y<Height; y++){
 8001012:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001016:	b29b      	uxth	r3, r3
 8001018:	3301      	adds	r3, #1
 800101a:	b29b      	uxth	r3, r3
 800101c:	81fb      	strh	r3, [r7, #14]
 800101e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001022:	883b      	ldrh	r3, [r7, #0]
 8001024:	429a      	cmp	r2, r3
 8001026:	dbda      	blt.n	8000fde <LCD_Draw_Rectangle_Fill+0x24>
		}
	}
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	bd90      	pop	{r4, r7, pc}

08001032 <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001032:	b590      	push	{r4, r7, lr}
 8001034:	b085      	sub	sp, #20
 8001036:	af00      	add	r7, sp, #0
 8001038:	4604      	mov	r4, r0
 800103a:	4608      	mov	r0, r1
 800103c:	4611      	mov	r1, r2
 800103e:	461a      	mov	r2, r3
 8001040:	4623      	mov	r3, r4
 8001042:	80fb      	strh	r3, [r7, #6]
 8001044:	4603      	mov	r3, r0
 8001046:	80bb      	strh	r3, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
 800104c:	4613      	mov	r3, r2
 800104e:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001050:	2300      	movs	r3, #0
 8001052:	81fb      	strh	r3, [r7, #14]
 8001054:	e00b      	b.n	800106e <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8001056:	89fa      	ldrh	r2, [r7, #14]
 8001058:	88bb      	ldrh	r3, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	b299      	uxth	r1, r3
 800105e:	883a      	ldrh	r2, [r7, #0]
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff18 	bl	8000e98 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8001068:	89fb      	ldrh	r3, [r7, #14]
 800106a:	3301      	adds	r3, #1
 800106c:	81fb      	strh	r3, [r7, #14]
 800106e:	89fa      	ldrh	r2, [r7, #14]
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	429a      	cmp	r2, r3
 8001074:	d3ef      	bcc.n	8001056 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	bd90      	pop	{r4, r7, pc}

08001080 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	4604      	mov	r4, r0
 8001088:	4608      	mov	r0, r1
 800108a:	4611      	mov	r1, r2
 800108c:	461a      	mov	r2, r3
 800108e:	4623      	mov	r3, r4
 8001090:	80fb      	strh	r3, [r7, #6]
 8001092:	4603      	mov	r3, r0
 8001094:	80bb      	strh	r3, [r7, #4]
 8001096:	460b      	mov	r3, r1
 8001098:	807b      	strh	r3, [r7, #2]
 800109a:	4613      	mov	r3, r2
 800109c:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 800109e:	2300      	movs	r3, #0
 80010a0:	81fb      	strh	r3, [r7, #14]
 80010a2:	e00b      	b.n	80010bc <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 80010a4:	89fa      	ldrh	r2, [r7, #14]
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	4413      	add	r3, r2
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	883a      	ldrh	r2, [r7, #0]
 80010ae:	88b9      	ldrh	r1, [r7, #4]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fef1 	bl	8000e98 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80010b6:	89fb      	ldrh	r3, [r7, #14]
 80010b8:	3301      	adds	r3, #1
 80010ba:	81fb      	strh	r3, [r7, #14]
 80010bc:	89fa      	ldrh	r2, [r7, #14]
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d3ef      	bcc.n	80010a4 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd90      	pop	{r4, r7, pc}
	...

080010d0 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	460a      	mov	r2, r1
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	4613      	mov	r3, r2
 80010de:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10e      	bne.n	8001104 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	e007      	b.n	80010fc <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80010ec:	4908      	ldr	r1, [pc, #32]	@ (8001110 <LCD_Clear+0x40>)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	88ba      	ldrh	r2, [r7, #4]
 80010f2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3301      	adds	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001102:	d3f3      	bcc.n	80010ec <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	20000170 	.word	0x20000170

08001114 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 800111e:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <LCD_SetTextColor+0x1c>)
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	8013      	strh	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	20000000 	.word	0x20000000

08001134 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 800113c:	4a04      	ldr	r2, [pc, #16]	@ (8001150 <LCD_SetFont+0x1c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	2000016c 	.word	0x2000016c

08001154 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	603a      	str	r2, [r7, #0]
 800115e:	80fb      	strh	r3, [r7, #6]
 8001160:	460b      	mov	r3, r1
 8001162:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	e04c      	b.n	800120c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	e03f      	b.n	80011f8 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	4413      	add	r3, r2
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	4619      	mov	r1, r3
 8001184:	4b27      	ldr	r3, [pc, #156]	@ (8001224 <LCD_Draw_Char+0xd0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	889b      	ldrh	r3, [r3, #4]
 800118a:	4a27      	ldr	r2, [pc, #156]	@ (8001228 <LCD_Draw_Char+0xd4>)
 800118c:	fba2 2303 	umull	r2, r3, r2, r3
 8001190:	08db      	lsrs	r3, r3, #3
 8001192:	b29b      	uxth	r3, r3
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	2280      	movs	r2, #128	@ 0x80
 8001198:	409a      	lsls	r2, r3
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	fa42 f303 	asr.w	r3, r2, r3
 80011a0:	400b      	ands	r3, r1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d104      	bne.n	80011b0 <LCD_Draw_Char+0x5c>
 80011a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001224 <LCD_Draw_Char+0xd0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	889b      	ldrh	r3, [r3, #4]
 80011ac:	2b0c      	cmp	r3, #12
 80011ae:	d920      	bls.n	80011f2 <LCD_Draw_Char+0x9e>
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	fa42 f303 	asr.w	r3, r2, r3
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d104      	bne.n	80011d4 <LCD_Draw_Char+0x80>
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <LCD_Draw_Char+0xd0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	889b      	ldrh	r3, [r3, #4]
 80011d0:	2b0c      	cmp	r3, #12
 80011d2:	d80e      	bhi.n	80011f2 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	4413      	add	r3, r2
 80011dc:	b298      	uxth	r0, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	88bb      	ldrh	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	4a10      	ldr	r2, [pc, #64]	@ (800122c <LCD_Draw_Char+0xd8>)
 80011ea:	8812      	ldrh	r2, [r2, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fe53 	bl	8000e98 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	3301      	adds	r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <LCD_Draw_Char+0xd0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	889b      	ldrh	r3, [r3, #4]
 80011fe:	461a      	mov	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4293      	cmp	r3, r2
 8001204:	d3b8      	bcc.n	8001178 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	3301      	adds	r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <LCD_Draw_Char+0xd0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	88db      	ldrh	r3, [r3, #6]
 8001212:	461a      	mov	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4293      	cmp	r3, r2
 8001218:	d3ab      	bcc.n	8001172 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 800121a:	bf00      	nop
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2000016c 	.word	0x2000016c
 8001228:	aaaaaaab 	.word	0xaaaaaaab
 800122c:	20000000 	.word	0x20000000

08001230 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	80fb      	strh	r3, [r7, #6]
 800123a:	460b      	mov	r3, r1
 800123c:	80bb      	strh	r3, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	3b20      	subs	r3, #32
 8001246:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001248:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <LCD_DisplayChar+0x40>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	78fb      	ldrb	r3, [r7, #3]
 8001250:	4907      	ldr	r1, [pc, #28]	@ (8001270 <LCD_DisplayChar+0x40>)
 8001252:	6809      	ldr	r1, [r1, #0]
 8001254:	88c9      	ldrh	r1, [r1, #6]
 8001256:	fb01 f303 	mul.w	r3, r1, r3
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	441a      	add	r2, r3
 800125e:	88b9      	ldrh	r1, [r7, #4]
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff76 	bl	8001154 <LCD_Draw_Char>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	2000016c 	.word	0x2000016c

08001274 <LCD_Game_Tie>:

bool LCD_Game_Tie(){
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
	for(int i = 0; i<7; i++){
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	e00f      	b.n	80012a0 <LCD_Game_Tie+0x2c>
		//go through each of the the top most slots and see if its filled, if its not filled return false
		if(grid[i][5].playerColor == PLAYER_EMPTY){
 8001280:	490c      	ldr	r1, [pc, #48]	@ (80012b4 <LCD_Game_Tie+0x40>)
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4413      	add	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	440b      	add	r3, r1
 800128e:	3311      	adds	r3, #17
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <LCD_Game_Tie+0x26>
			//if a slot is empty then there is no way for a tie yet
			return false;
 8001296:	2300      	movs	r3, #0
 8001298:	e008      	b.n	80012ac <LCD_Game_Tie+0x38>
	for(int i = 0; i<7; i++){
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3301      	adds	r3, #1
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	ddec      	ble.n	8001280 <LCD_Game_Tie+0xc>
		}
	}
	LCD_Update_Game_End_Time();
 80012a6:	f7ff faf1 	bl	800088c <LCD_Update_Game_End_Time>
	//stop the clock as a tie occured
	return true;
 80012aa:	2301      	movs	r3, #1
	//if all are filled return true
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20025970 	.word	0x20025970

080012b8 <LCD_Space_Available_Game_Grid>:

bool LCD_Space_Available_Game_Grid(){
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
	if(grid[chip.column][5].playerColor != PLAYER_EMPTY){
 80012bc:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <LCD_Space_Available_Game_Grid+0x30>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <LCD_Space_Available_Game_Grid+0x34>)
 80012c4:	460b      	mov	r3, r1
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	440b      	add	r3, r1
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	3311      	adds	r3, #17
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <LCD_Space_Available_Game_Grid+0x22>
	//5 is the highest row so we need to see if its occupied and if it is false
		return false;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <LCD_Space_Available_Game_Grid+0x24>
	}
	//if there is space return true
	return true;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	200259f0 	.word	0x200259f0
 80012ec:	20025970 	.word	0x20025970

080012f0 <LCD_Get_Row_Game_Grid>:

uint8_t LCD_Get_Row_Game_Grid(){
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
	for(int j = 0; j<ROWS; j++){
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	e017      	b.n	800132c <LCD_Get_Row_Game_Grid+0x3c>
		if(grid[chip.column][j].playerColor == PLAYER_EMPTY){
 80012fc:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <LCD_Get_Row_Game_Grid+0x50>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	4910      	ldr	r1, [pc, #64]	@ (8001344 <LCD_Get_Row_Game_Grid+0x54>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	461a      	mov	r2, r3
 8001308:	0052      	lsls	r2, r2, #1
 800130a:	441a      	add	r2, r3
 800130c:	4603      	mov	r3, r0
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	4403      	add	r3, r0
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	440b      	add	r3, r1
 8001318:	3302      	adds	r3, #2
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <LCD_Get_Row_Game_Grid+0x36>
			//returns the first empty square
			return j;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	e006      	b.n	8001334 <LCD_Get_Row_Game_Grid+0x44>
	for(int j = 0; j<ROWS; j++){
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3301      	adds	r3, #1
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b05      	cmp	r3, #5
 8001330:	dde4      	ble.n	80012fc <LCD_Get_Row_Game_Grid+0xc>
		}
	}
	return -1; //out of bounds but should not occur
 8001332:	23ff      	movs	r3, #255	@ 0xff
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	200259f0 	.word	0x200259f0
 8001344:	20025970 	.word	0x20025970

08001348 <LCD_Game_Won_Check_Row>:


bool LCD_Game_Won_Check_Row(uint8_t row, uint8_t player){
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	460a      	mov	r2, r1
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	4613      	mov	r3, r2
 8001356:	71bb      	strb	r3, [r7, #6]
	uint8_t Consecutive = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	73fb      	strb	r3, [r7, #15]
	//Resets consecutive
	for(int i=0; i<COLUMNS; i++){
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	e01e      	b.n	80013a0 <LCD_Game_Won_Check_Row+0x58>
		if(grid[i][row].playerColor == player){
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	4813      	ldr	r0, [pc, #76]	@ (80013b4 <LCD_Game_Won_Check_Row+0x6c>)
 8001366:	68b9      	ldr	r1, [r7, #8]
 8001368:	461a      	mov	r2, r3
 800136a:	0052      	lsls	r2, r2, #1
 800136c:	441a      	add	r2, r3
 800136e:	460b      	mov	r3, r1
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	440b      	add	r3, r1
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4413      	add	r3, r2
 8001378:	4403      	add	r3, r0
 800137a:	3302      	adds	r3, #2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	79ba      	ldrb	r2, [r7, #6]
 8001380:	429a      	cmp	r2, r3
 8001382:	d103      	bne.n	800138c <LCD_Game_Won_Check_Row+0x44>
			Consecutive++;
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	3301      	adds	r3, #1
 8001388:	73fb      	strb	r3, [r7, #15]
 800138a:	e001      	b.n	8001390 <LCD_Game_Won_Check_Row+0x48>
		}
		else{
			Consecutive = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]
		}

		if(Consecutive == 4){
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	2b04      	cmp	r3, #4
 8001394:	d101      	bne.n	800139a <LCD_Game_Won_Check_Row+0x52>
			return true;
 8001396:	2301      	movs	r3, #1
 8001398:	e006      	b.n	80013a8 <LCD_Game_Won_Check_Row+0x60>
	for(int i=0; i<COLUMNS; i++){
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	3301      	adds	r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	dddd      	ble.n	8001362 <LCD_Game_Won_Check_Row+0x1a>
		}
	}

	return false;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	20025970 	.word	0x20025970

080013b8 <LCD_Game_Won_Check_Column>:

bool LCD_Game_Won_Check_Column(uint8_t column, uint8_t player){
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	460a      	mov	r2, r1
 80013c2:	71fb      	strb	r3, [r7, #7]
 80013c4:	4613      	mov	r3, r2
 80013c6:	71bb      	strb	r3, [r7, #6]
	uint8_t Consecutive = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	73fb      	strb	r3, [r7, #15]
	for(int j=0; j<ROWS; j++){
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	e01e      	b.n	8001410 <LCD_Game_Won_Check_Column+0x58>
		if(grid[column][j].playerColor == player){
 80013d2:	79f9      	ldrb	r1, [r7, #7]
 80013d4:	4813      	ldr	r0, [pc, #76]	@ (8001424 <LCD_Game_Won_Check_Column+0x6c>)
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	461a      	mov	r2, r3
 80013da:	0052      	lsls	r2, r2, #1
 80013dc:	441a      	add	r2, r3
 80013de:	460b      	mov	r3, r1
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	440b      	add	r3, r1
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	4403      	add	r3, r0
 80013ea:	3302      	adds	r3, #2
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	79ba      	ldrb	r2, [r7, #6]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d103      	bne.n	80013fc <LCD_Game_Won_Check_Column+0x44>
			Consecutive++;
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	3301      	adds	r3, #1
 80013f8:	73fb      	strb	r3, [r7, #15]
 80013fa:	e001      	b.n	8001400 <LCD_Game_Won_Check_Column+0x48>
		}
		else{
			Consecutive = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]
		}

		if(Consecutive == 4){
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	2b04      	cmp	r3, #4
 8001404:	d101      	bne.n	800140a <LCD_Game_Won_Check_Column+0x52>
			return true;
 8001406:	2301      	movs	r3, #1
 8001408:	e006      	b.n	8001418 <LCD_Game_Won_Check_Column+0x60>
	for(int j=0; j<ROWS; j++){
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	3301      	adds	r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2b05      	cmp	r3, #5
 8001414:	dddd      	ble.n	80013d2 <LCD_Game_Won_Check_Column+0x1a>
		}
	}

	return false;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	20025970 	.word	0x20025970

08001428 <LCD_Game_Won_Check_Up_Right_Diagonal>:


bool LCD_Game_Won_Check_Up_Right_Diagonal(uint8_t column, uint8_t row, uint8_t player){
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
 8001432:	460b      	mov	r3, r1
 8001434:	71bb      	strb	r3, [r7, #6]
 8001436:	4613      	mov	r3, r2
 8001438:	717b      	strb	r3, [r7, #5]
	uint8_t Consecutive = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	73fb      	strb	r3, [r7, #15]
	//need to find the bottom left spot and will go up right from there
	while( (row  > 0) && (column > 0) ){
 800143e:	e005      	b.n	800144c <LCD_Game_Won_Check_Up_Right_Diagonal+0x24>
		//look until we get to the bottom left
		row--;
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	3b01      	subs	r3, #1
 8001444:	71bb      	strb	r3, [r7, #6]
		column--;
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	3b01      	subs	r3, #1
 800144a:	71fb      	strb	r3, [r7, #7]
	while( (row  > 0) && (column > 0) ){
 800144c:	79bb      	ldrb	r3, [r7, #6]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d025      	beq.n	800149e <LCD_Game_Won_Check_Up_Right_Diagonal+0x76>
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f3      	bne.n	8001440 <LCD_Game_Won_Check_Up_Right_Diagonal+0x18>
	}

	while(row < ROWS && column < COLUMNS){
 8001458:	e021      	b.n	800149e <LCD_Game_Won_Check_Up_Right_Diagonal+0x76>
		//keep going until we encounter top right edge
		if(grid[column][row].playerColor == player){
 800145a:	79f9      	ldrb	r1, [r7, #7]
 800145c:	79bb      	ldrb	r3, [r7, #6]
 800145e:	4816      	ldr	r0, [pc, #88]	@ (80014b8 <LCD_Game_Won_Check_Up_Right_Diagonal+0x90>)
 8001460:	461a      	mov	r2, r3
 8001462:	0052      	lsls	r2, r2, #1
 8001464:	441a      	add	r2, r3
 8001466:	460b      	mov	r3, r1
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	440b      	add	r3, r1
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4413      	add	r3, r2
 8001470:	4403      	add	r3, r0
 8001472:	3302      	adds	r3, #2
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	797a      	ldrb	r2, [r7, #5]
 8001478:	429a      	cmp	r2, r3
 800147a:	d103      	bne.n	8001484 <LCD_Game_Won_Check_Up_Right_Diagonal+0x5c>
			Consecutive++;
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	3301      	adds	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
 8001482:	e001      	b.n	8001488 <LCD_Game_Won_Check_Up_Right_Diagonal+0x60>
		}
		else{
			Consecutive = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]
		}

		if(Consecutive == 4){
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	2b04      	cmp	r3, #4
 800148c:	d101      	bne.n	8001492 <LCD_Game_Won_Check_Up_Right_Diagonal+0x6a>
			return true;
 800148e:	2301      	movs	r3, #1
 8001490:	e00c      	b.n	80014ac <LCD_Game_Won_Check_Up_Right_Diagonal+0x84>
		}
		row++;
 8001492:	79bb      	ldrb	r3, [r7, #6]
 8001494:	3301      	adds	r3, #1
 8001496:	71bb      	strb	r3, [r7, #6]
		column++;
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	3301      	adds	r3, #1
 800149c:	71fb      	strb	r3, [r7, #7]
	while(row < ROWS && column < COLUMNS){
 800149e:	79bb      	ldrb	r3, [r7, #6]
 80014a0:	2b05      	cmp	r3, #5
 80014a2:	d802      	bhi.n	80014aa <LCD_Game_Won_Check_Up_Right_Diagonal+0x82>
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d9d7      	bls.n	800145a <LCD_Game_Won_Check_Up_Right_Diagonal+0x32>
	}
	return false;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	20025970 	.word	0x20025970

080014bc <LCD_Game_Won_Check_Up_Left_Diagonal>:

bool LCD_Game_Won_Check_Up_Left_Diagonal(uint8_t column, uint8_t row, uint8_t player){
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
 80014c6:	460b      	mov	r3, r1
 80014c8:	71bb      	strb	r3, [r7, #6]
 80014ca:	4613      	mov	r3, r2
 80014cc:	717b      	strb	r3, [r7, #5]
	uint8_t Consecutive = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	73fb      	strb	r3, [r7, #15]
	//need to find the bottom left spot and will go up right from there
	while( (row > 0) && (column + 1 < COLUMNS) ){
 80014d2:	e005      	b.n	80014e0 <LCD_Game_Won_Check_Up_Left_Diagonal+0x24>
		//loop until bottom right, stop once we might go out of bounds (-1 or COLUMNS)
		row--;
 80014d4:	79bb      	ldrb	r3, [r7, #6]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	71bb      	strb	r3, [r7, #6]
		column++;
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	3301      	adds	r3, #1
 80014de:	71fb      	strb	r3, [r7, #7]
	while( (row > 0) && (column + 1 < COLUMNS) ){
 80014e0:	79bb      	ldrb	r3, [r7, #6]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d025      	beq.n	8001532 <LCD_Game_Won_Check_Up_Left_Diagonal+0x76>
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2b05      	cmp	r3, #5
 80014ea:	d9f3      	bls.n	80014d4 <LCD_Game_Won_Check_Up_Left_Diagonal+0x18>
	}

	while(row < ROWS && column >= 0){
 80014ec:	e021      	b.n	8001532 <LCD_Game_Won_Check_Up_Left_Diagonal+0x76>
		//keep going until we encounter top right edge
		if(grid[column][row].playerColor == player){
 80014ee:	79f9      	ldrb	r1, [r7, #7]
 80014f0:	79bb      	ldrb	r3, [r7, #6]
 80014f2:	4815      	ldr	r0, [pc, #84]	@ (8001548 <LCD_Game_Won_Check_Up_Left_Diagonal+0x8c>)
 80014f4:	461a      	mov	r2, r3
 80014f6:	0052      	lsls	r2, r2, #1
 80014f8:	441a      	add	r2, r3
 80014fa:	460b      	mov	r3, r1
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	440b      	add	r3, r1
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	4403      	add	r3, r0
 8001506:	3302      	adds	r3, #2
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	797a      	ldrb	r2, [r7, #5]
 800150c:	429a      	cmp	r2, r3
 800150e:	d103      	bne.n	8001518 <LCD_Game_Won_Check_Up_Left_Diagonal+0x5c>
			Consecutive++;
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	3301      	adds	r3, #1
 8001514:	73fb      	strb	r3, [r7, #15]
 8001516:	e001      	b.n	800151c <LCD_Game_Won_Check_Up_Left_Diagonal+0x60>
		}
		else{
			Consecutive = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	73fb      	strb	r3, [r7, #15]
		}

		if(Consecutive == 4){
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	2b04      	cmp	r3, #4
 8001520:	d101      	bne.n	8001526 <LCD_Game_Won_Check_Up_Left_Diagonal+0x6a>
			return true;
 8001522:	2301      	movs	r3, #1
 8001524:	e009      	b.n	800153a <LCD_Game_Won_Check_Up_Left_Diagonal+0x7e>
		}
		row++;
 8001526:	79bb      	ldrb	r3, [r7, #6]
 8001528:	3301      	adds	r3, #1
 800152a:	71bb      	strb	r3, [r7, #6]
		column--;
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	3b01      	subs	r3, #1
 8001530:	71fb      	strb	r3, [r7, #7]
	while(row < ROWS && column >= 0){
 8001532:	79bb      	ldrb	r3, [r7, #6]
 8001534:	2b05      	cmp	r3, #5
 8001536:	d9da      	bls.n	80014ee <LCD_Game_Won_Check_Up_Left_Diagonal+0x32>
	}
	return false;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20025970 	.word	0x20025970

0800154c <LCD_Game_Won>:

bool LCD_Game_Won(uint8_t column, uint8_t row, uint8_t player){
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
 8001556:	460b      	mov	r3, r1
 8001558:	71bb      	strb	r3, [r7, #6]
 800155a:	4613      	mov	r3, r2
 800155c:	717b      	strb	r3, [r7, #5]
	//check all adjacent pieces colors
	if(LCD_Game_Won_Check_Row(row, player)){
 800155e:	797a      	ldrb	r2, [r7, #5]
 8001560:	79bb      	ldrb	r3, [r7, #6]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff feef 	bl	8001348 <LCD_Game_Won_Check_Row>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <LCD_Game_Won+0x2c>
		LCD_Update_Game_End_Time();
 8001570:	f7ff f98c 	bl	800088c <LCD_Update_Game_End_Time>
		//Get the game length as soon as a win is detected
		return true;
 8001574:	2301      	movs	r3, #1
 8001576:	e027      	b.n	80015c8 <LCD_Game_Won+0x7c>
	}
	else if(LCD_Game_Won_Check_Column(column, player)){
 8001578:	797a      	ldrb	r2, [r7, #5]
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	4611      	mov	r1, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ff1a 	bl	80013b8 <LCD_Game_Won_Check_Column>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <LCD_Game_Won+0x46>
		LCD_Update_Game_End_Time();
 800158a:	f7ff f97f 	bl	800088c <LCD_Update_Game_End_Time>
		//Get the game length as soon as a win is detected
		return true;
 800158e:	2301      	movs	r3, #1
 8001590:	e01a      	b.n	80015c8 <LCD_Game_Won+0x7c>
	}
	else if(LCD_Game_Won_Check_Up_Right_Diagonal(column, row, player)){
 8001592:	797a      	ldrb	r2, [r7, #5]
 8001594:	79b9      	ldrb	r1, [r7, #6]
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff45 	bl	8001428 <LCD_Game_Won_Check_Up_Right_Diagonal>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <LCD_Game_Won+0x60>
		LCD_Update_Game_End_Time();
 80015a4:	f7ff f972 	bl	800088c <LCD_Update_Game_End_Time>
		//Get the game length as soon as a win is detected
		return true;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e00d      	b.n	80015c8 <LCD_Game_Won+0x7c>
	}
	else if(LCD_Game_Won_Check_Up_Left_Diagonal(column, row, player)){
 80015ac:	797a      	ldrb	r2, [r7, #5]
 80015ae:	79b9      	ldrb	r1, [r7, #6]
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff ff82 	bl	80014bc <LCD_Game_Won_Check_Up_Left_Diagonal>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <LCD_Game_Won+0x7a>
		LCD_Update_Game_End_Time();
 80015be:	f7ff f965 	bl	800088c <LCD_Update_Game_End_Time>
		//Get the game length as soon as a win is detected
		return true;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <LCD_Game_Won+0x7c>
	}
return false;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <LCD_Insert_Chip_Game_Grid>:

void LCD_Insert_Chip_Game_Grid(){
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
	if((LCD_Space_Available_Game_Grid())){
 80015d6:	f7ff fe6f 	bl	80012b8 <LCD_Space_Available_Game_Grid>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80be 	beq.w	800175e <LCD_Insert_Chip_Game_Grid+0x18e>
		//check for space
		uint8_t row = LCD_Get_Row_Game_Grid();
 80015e2:	f7ff fe85 	bl	80012f0 <LCD_Get_Row_Game_Grid>
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
		//returns the highest row for a column
		if(playerTurn == PLAYER_RED){
 80015ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001768 <LCD_Insert_Chip_Game_Grid+0x198>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d155      	bne.n	800169e <LCD_Insert_Chip_Game_Grid+0xce>
			//if its Reds turn it will draw red
			//LCD_Draw_Circle_Fill(grid[chip.column][row].xPos, LCD_PIXEL_HEIGHT-grid[chip.column][row].yPos, CIRCLE_RADIUS, LCD_COLOR_RED);
			LCD_Animate_Falling(grid[chip.column][row].xPos, LCD_PIXEL_HEIGHT-grid[chip.column][row].yPos, CIRCLE_RADIUS, LCD_COLOR_RED);
 80015f2:	4b5e      	ldr	r3, [pc, #376]	@ (800176c <LCD_Insert_Chip_Game_Grid+0x19c>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	495d      	ldr	r1, [pc, #372]	@ (8001770 <LCD_Insert_Chip_Game_Grid+0x1a0>)
 80015fc:	461a      	mov	r2, r3
 80015fe:	0052      	lsls	r2, r2, #1
 8001600:	441a      	add	r2, r3
 8001602:	4603      	mov	r3, r0
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4403      	add	r3, r0
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	440b      	add	r3, r1
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461c      	mov	r4, r3
 8001612:	4b56      	ldr	r3, [pc, #344]	@ (800176c <LCD_Insert_Chip_Game_Grid+0x19c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	4955      	ldr	r1, [pc, #340]	@ (8001770 <LCD_Insert_Chip_Game_Grid+0x1a0>)
 800161c:	461a      	mov	r2, r3
 800161e:	0052      	lsls	r2, r2, #1
 8001620:	441a      	add	r2, r3
 8001622:	4603      	mov	r3, r0
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4403      	add	r3, r0
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	440b      	add	r3, r1
 800162e:	3301      	adds	r3, #1
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001636:	b299      	uxth	r1, r3
 8001638:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800163c:	220c      	movs	r2, #12
 800163e:	4620      	mov	r0, r4
 8001640:	f7ff f8e6 	bl	8000810 <LCD_Animate_Falling>
			grid[chip.column][row].playerColor = PLAYER_RED;
 8001644:	4b49      	ldr	r3, [pc, #292]	@ (800176c <LCD_Insert_Chip_Game_Grid+0x19c>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	4948      	ldr	r1, [pc, #288]	@ (8001770 <LCD_Insert_Chip_Game_Grid+0x1a0>)
 800164e:	461a      	mov	r2, r3
 8001650:	0052      	lsls	r2, r2, #1
 8001652:	441a      	add	r2, r3
 8001654:	4603      	mov	r3, r0
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4403      	add	r3, r0
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4413      	add	r3, r2
 800165e:	440b      	add	r3, r1
 8001660:	3302      	adds	r3, #2
 8001662:	2202      	movs	r2, #2
 8001664:	701a      	strb	r2, [r3, #0]
			playerTurn = PLAYER_YELLOW;
 8001666:	4b40      	ldr	r3, [pc, #256]	@ (8001768 <LCD_Insert_Chip_Game_Grid+0x198>)
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
			//update playerTurn to be other player
			LCD_Draw_Chip_To_Drop();
 800166c:	f7ff fb18 	bl	8000ca0 <LCD_Draw_Chip_To_Drop>
			//Update the display for the chip to drop
			if(LCD_Game_Won(chip.column, row, PLAYER_RED)){
 8001670:	4b3e      	ldr	r3, [pc, #248]	@ (800176c <LCD_Insert_Chip_Game_Grid+0x19c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	79f9      	ldrb	r1, [r7, #7]
 8001676:	2202      	movs	r2, #2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff67 	bl	800154c <LCD_Game_Won>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d061      	beq.n	8001748 <LCD_Insert_Chip_Game_Grid+0x178>
				redScore++;
 8001684:	4b3b      	ldr	r3, [pc, #236]	@ (8001774 <LCD_Insert_Chip_Game_Grid+0x1a4>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	3301      	adds	r3, #1
 800168a:	b2da      	uxtb	r2, r3
 800168c:	4b39      	ldr	r3, [pc, #228]	@ (8001774 <LCD_Insert_Chip_Game_Grid+0x1a4>)
 800168e:	701a      	strb	r2, [r3, #0]
				removeSchedulerEvent(POLLING_GAME_EVENT);
 8001690:	2020      	movs	r0, #32
 8001692:	f000 fb07 	bl	8001ca4 <removeSchedulerEvent>
				addSchedulerEvent(SCORE_SCREEN_EVENT);
 8001696:	2040      	movs	r0, #64	@ 0x40
 8001698:	f000 faf2 	bl	8001c80 <addSchedulerEvent>
 800169c:	e054      	b.n	8001748 <LCD_Insert_Chip_Game_Grid+0x178>
			}
		}
		else{
			//if its Yellows turn it will draw yellow
			//LCD_Draw_Circle_Fill(grid[chip.column][row].xPos, LCD_PIXEL_HEIGHT-grid[chip.column][row].yPos, CIRCLE_RADIUS, LCD_COLOR_YELLOW);
			LCD_Animate_Falling(grid[chip.column][row].xPos, LCD_PIXEL_HEIGHT-grid[chip.column][row].yPos, CIRCLE_RADIUS, LCD_COLOR_YELLOW);
 800169e:	4b33      	ldr	r3, [pc, #204]	@ (800176c <LCD_Insert_Chip_Game_Grid+0x19c>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	4932      	ldr	r1, [pc, #200]	@ (8001770 <LCD_Insert_Chip_Game_Grid+0x1a0>)
 80016a8:	461a      	mov	r2, r3
 80016aa:	0052      	lsls	r2, r2, #1
 80016ac:	441a      	add	r2, r3
 80016ae:	4603      	mov	r3, r0
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4403      	add	r3, r0
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	440b      	add	r3, r1
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461c      	mov	r4, r3
 80016be:	4b2b      	ldr	r3, [pc, #172]	@ (800176c <LCD_Insert_Chip_Game_Grid+0x19c>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	492a      	ldr	r1, [pc, #168]	@ (8001770 <LCD_Insert_Chip_Game_Grid+0x1a0>)
 80016c8:	461a      	mov	r2, r3
 80016ca:	0052      	lsls	r2, r2, #1
 80016cc:	441a      	add	r2, r3
 80016ce:	4603      	mov	r3, r0
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	4403      	add	r3, r0
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	440b      	add	r3, r1
 80016da:	3301      	adds	r3, #1
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80016e2:	b299      	uxth	r1, r3
 80016e4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80016e8:	220c      	movs	r2, #12
 80016ea:	4620      	mov	r0, r4
 80016ec:	f7ff f890 	bl	8000810 <LCD_Animate_Falling>
			grid[chip.column][row].playerColor = PLAYER_YELLOW;
 80016f0:	4b1e      	ldr	r3, [pc, #120]	@ (800176c <LCD_Insert_Chip_Game_Grid+0x19c>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	491d      	ldr	r1, [pc, #116]	@ (8001770 <LCD_Insert_Chip_Game_Grid+0x1a0>)
 80016fa:	461a      	mov	r2, r3
 80016fc:	0052      	lsls	r2, r2, #1
 80016fe:	441a      	add	r2, r3
 8001700:	4603      	mov	r3, r0
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4403      	add	r3, r0
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	440b      	add	r3, r1
 800170c:	3302      	adds	r3, #2
 800170e:	2201      	movs	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
			//update the memory of the grid
			playerTurn = PLAYER_RED;
 8001712:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <LCD_Insert_Chip_Game_Grid+0x198>)
 8001714:	2202      	movs	r2, #2
 8001716:	701a      	strb	r2, [r3, #0]
			//update playerTurn to be c other player
			LCD_Draw_Chip_To_Drop();
 8001718:	f7ff fac2 	bl	8000ca0 <LCD_Draw_Chip_To_Drop>
			//Update the display for the chip to drop
			if(LCD_Game_Won(chip.column, row, PLAYER_YELLOW)){
 800171c:	4b13      	ldr	r3, [pc, #76]	@ (800176c <LCD_Insert_Chip_Game_Grid+0x19c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	79f9      	ldrb	r1, [r7, #7]
 8001722:	2201      	movs	r2, #1
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff11 	bl	800154c <LCD_Game_Won>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00b      	beq.n	8001748 <LCD_Insert_Chip_Game_Grid+0x178>
				yellowScore++;
 8001730:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <LCD_Insert_Chip_Game_Grid+0x1a8>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	b2da      	uxtb	r2, r3
 8001738:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <LCD_Insert_Chip_Game_Grid+0x1a8>)
 800173a:	701a      	strb	r2, [r3, #0]
				removeSchedulerEvent(POLLING_GAME_EVENT);
 800173c:	2020      	movs	r0, #32
 800173e:	f000 fab1 	bl	8001ca4 <removeSchedulerEvent>
				addSchedulerEvent(SCORE_SCREEN_EVENT);
 8001742:	2040      	movs	r0, #64	@ 0x40
 8001744:	f000 fa9c 	bl	8001c80 <addSchedulerEvent>
			}			//Check if game is over
		}
		if(LCD_Game_Tie()){
 8001748:	f7ff fd94 	bl	8001274 <LCD_Game_Tie>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d005      	beq.n	800175e <LCD_Insert_Chip_Game_Grid+0x18e>
			removeSchedulerEvent(POLLING_GAME_EVENT);
 8001752:	2020      	movs	r0, #32
 8001754:	f000 faa6 	bl	8001ca4 <removeSchedulerEvent>
			addSchedulerEvent(SCORE_SCREEN_EVENT);
 8001758:	2040      	movs	r0, #64	@ 0x40
 800175a:	f000 fa91 	bl	8001c80 <addSchedulerEvent>
			//go to next screen if a tie occurs
		}
	}

}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bd90      	pop	{r4, r7, pc}
 8001766:	bf00      	nop
 8001768:	20000002 	.word	0x20000002
 800176c:	200259f0 	.word	0x200259f0
 8001770:	20025970 	.word	0x20025970
 8001774:	200259f3 	.word	0x200259f3
 8001778:	200259f4 	.word	0x200259f4

0800177c <LCD_Draw_Start_Screen>:
void LCD_Draw_Start_Screen(){
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_WHITE);
 8001780:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001784:	2000      	movs	r0, #0
 8001786:	f7ff fca3 	bl	80010d0 <LCD_Clear>

	LCD_Draw_Vertical_Line(LCD_PIXEL_WIDTH/2,40,LCD_PIXEL_HEIGHT-40,LCD_COLOR_BLACK);
 800178a:	2300      	movs	r3, #0
 800178c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001790:	2128      	movs	r1, #40	@ 0x28
 8001792:	2078      	movs	r0, #120	@ 0x78
 8001794:	f7ff fc4d 	bl	8001032 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(0,40,LCD_PIXEL_WIDTH,LCD_COLOR_BLACK);
 8001798:	2300      	movs	r3, #0
 800179a:	22f0      	movs	r2, #240	@ 0xf0
 800179c:	2128      	movs	r1, #40	@ 0x28
 800179e:	2000      	movs	r0, #0
 80017a0:	f7ff fc6e 	bl	8001080 <LCD_Draw_Horizontal_Line>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 80017a4:	2000      	movs	r0, #0
 80017a6:	f7ff fcb5 	bl	8001114 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80017aa:	4811      	ldr	r0, [pc, #68]	@ (80017f0 <LCD_Draw_Start_Screen+0x74>)
 80017ac:	f7ff fcc2 	bl	8001134 <LCD_SetFont>

	LCD_DisplayChar(80+2,  MODE_YPOS,'M');
 80017b0:	224d      	movs	r2, #77	@ 0x4d
 80017b2:	2114      	movs	r1, #20
 80017b4:	2052      	movs	r0, #82	@ 0x52
 80017b6:	f7ff fd3b 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(100,   MODE_YPOS,'O');
 80017ba:	224f      	movs	r2, #79	@ 0x4f
 80017bc:	2114      	movs	r1, #20
 80017be:	2064      	movs	r0, #100	@ 0x64
 80017c0:	f7ff fd36 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(120-2, MODE_YPOS,'D');
 80017c4:	2244      	movs	r2, #68	@ 0x44
 80017c6:	2114      	movs	r1, #20
 80017c8:	2076      	movs	r0, #118	@ 0x76
 80017ca:	f7ff fd31 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(135-2, MODE_YPOS,'E');
 80017ce:	2245      	movs	r2, #69	@ 0x45
 80017d0:	2114      	movs	r1, #20
 80017d2:	2085      	movs	r0, #133	@ 0x85
 80017d4:	f7ff fd2c 	bl	8001230 <LCD_DisplayChar>

	LCD_DisplayChar(50, 160,'1');
 80017d8:	2231      	movs	r2, #49	@ 0x31
 80017da:	21a0      	movs	r1, #160	@ 0xa0
 80017dc:	2032      	movs	r0, #50	@ 0x32
 80017de:	f7ff fd27 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(180, 160,'2');
 80017e2:	2232      	movs	r2, #50	@ 0x32
 80017e4:	21a0      	movs	r1, #160	@ 0xa0
 80017e6:	20b4      	movs	r0, #180	@ 0xb4
 80017e8:	f7ff fd22 	bl	8001230 <LCD_DisplayChar>
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000004 	.word	0x20000004

080017f4 <LCD_Draw_Select_Color_Screen>:

void LCD_Draw_Select_Color_Screen(){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af02      	add	r7, sp, #8
	LCD_Clear(0, LCD_COLOR_RED);
 80017fa:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80017fe:	2000      	movs	r0, #0
 8001800:	f7ff fc66 	bl	80010d0 <LCD_Clear>

	LCD_Draw_Vertical_Line(LCD_PIXEL_WIDTH/2,0,LCD_PIXEL_HEIGHT,LCD_COLOR_BLACK);
 8001804:	2300      	movs	r3, #0
 8001806:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800180a:	2100      	movs	r1, #0
 800180c:	2078      	movs	r0, #120	@ 0x78
 800180e:	f7ff fc10 	bl	8001032 <LCD_Draw_Vertical_Line>

	LCD_Draw_Rectangle_Fill(LCD_PIXEL_WIDTH/2, 0, LCD_PIXEL_WIDTH/2, LCD_PIXEL_HEIGHT, LCD_COLOR_YELLOW);
 8001812:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800181c:	2278      	movs	r2, #120	@ 0x78
 800181e:	2100      	movs	r1, #0
 8001820:	2078      	movs	r0, #120	@ 0x78
 8001822:	f7ff fbca 	bl	8000fba <LCD_Draw_Rectangle_Fill>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 8001826:	2000      	movs	r0, #0
 8001828:	f7ff fc74 	bl	8001114 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 800182c:	4819      	ldr	r0, [pc, #100]	@ (8001894 <LCD_Draw_Select_Color_Screen+0xa0>)
 800182e:	f7ff fc81 	bl	8001134 <LCD_SetFont>

	LCD_DisplayChar(95,  PICK_YPOS,'P');
 8001832:	2250      	movs	r2, #80	@ 0x50
 8001834:	2114      	movs	r1, #20
 8001836:	205f      	movs	r0, #95	@ 0x5f
 8001838:	f7ff fcfa 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(110, PICK_YPOS,'I');
 800183c:	2249      	movs	r2, #73	@ 0x49
 800183e:	2114      	movs	r1, #20
 8001840:	206e      	movs	r0, #110	@ 0x6e
 8001842:	f7ff fcf5 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(125, PICK_YPOS,'C');
 8001846:	2243      	movs	r2, #67	@ 0x43
 8001848:	2114      	movs	r1, #20
 800184a:	207d      	movs	r0, #125	@ 0x7d
 800184c:	f7ff fcf0 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(140, PICK_YPOS,'K');
 8001850:	224b      	movs	r2, #75	@ 0x4b
 8001852:	2114      	movs	r1, #20
 8001854:	208c      	movs	r0, #140	@ 0x8c
 8001856:	f7ff fceb 	bl	8001230 <LCD_DisplayChar>

	LCD_DisplayChar(90,  COLOR_YPOS,'C');
 800185a:	2243      	movs	r2, #67	@ 0x43
 800185c:	2128      	movs	r1, #40	@ 0x28
 800185e:	205a      	movs	r0, #90	@ 0x5a
 8001860:	f7ff fce6 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(105, COLOR_YPOS,'O');
 8001864:	224f      	movs	r2, #79	@ 0x4f
 8001866:	2128      	movs	r1, #40	@ 0x28
 8001868:	2069      	movs	r0, #105	@ 0x69
 800186a:	f7ff fce1 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(120, COLOR_YPOS,'L');
 800186e:	224c      	movs	r2, #76	@ 0x4c
 8001870:	2128      	movs	r1, #40	@ 0x28
 8001872:	2078      	movs	r0, #120	@ 0x78
 8001874:	f7ff fcdc 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(135, COLOR_YPOS,'O');
 8001878:	224f      	movs	r2, #79	@ 0x4f
 800187a:	2128      	movs	r1, #40	@ 0x28
 800187c:	2087      	movs	r0, #135	@ 0x87
 800187e:	f7ff fcd7 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(150, COLOR_YPOS,'R');
 8001882:	2252      	movs	r2, #82	@ 0x52
 8001884:	2128      	movs	r1, #40	@ 0x28
 8001886:	2096      	movs	r0, #150	@ 0x96
 8001888:	f7ff fcd2 	bl	8001230 <LCD_DisplayChar>

}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000004 	.word	0x20000004

08001898 <LCD_Draw_Game_Grid>:

void LCD_Draw_Game_Grid(){
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b085      	sub	sp, #20
 800189c:	af02      	add	r7, sp, #8
	LCD_Clear(0, LCD_COLOR_WHITE);
 800189e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80018a2:	2000      	movs	r0, #0
 80018a4:	f7ff fc14 	bl	80010d0 <LCD_Clear>
	//Clears screen

	Init_Grid();
 80018a8:	f7ff f83a 	bl	8000920 <Init_Grid>
	Init_Chip_To_Drop();
 80018ac:	f7ff f826 	bl	80008fc <Init_Chip_To_Drop>

	LCD_Draw_Rectangle_Fill(0, GRID_BACKGROUND_YPOS, LCD_PIXEL_WIDTH, SQUARE_SIZE*ROWS, LCD_COLOR_BLUE);
 80018b0:	231f      	movs	r3, #31
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	23cc      	movs	r3, #204	@ 0xcc
 80018b6:	22f0      	movs	r2, #240	@ 0xf0
 80018b8:	2174      	movs	r1, #116	@ 0x74
 80018ba:	2000      	movs	r0, #0
 80018bc:	f7ff fb7d 	bl	8000fba <LCD_Draw_Rectangle_Fill>

	for(uint8_t i=1; i<7; i++){
 80018c0:	2301      	movs	r3, #1
 80018c2:	71fb      	strb	r3, [r7, #7]
 80018c4:	e00e      	b.n	80018e4 <LCD_Draw_Game_Grid+0x4c>
		LCD_Draw_Vertical_Line(SQUARE_SIZE*i,GRID_OFFSET_HORIZONTAL,SQUARE_SIZE*ROWS,LCD_COLOR_BLACK);
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	0112      	lsls	r2, r2, #4
 80018ce:	4413      	add	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	b298      	uxth	r0, r3
 80018d4:	2300      	movs	r3, #0
 80018d6:	22cc      	movs	r2, #204	@ 0xcc
 80018d8:	2174      	movs	r1, #116	@ 0x74
 80018da:	f7ff fbaa 	bl	8001032 <LCD_Draw_Vertical_Line>
	for(uint8_t i=1; i<7; i++){
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	3301      	adds	r3, #1
 80018e2:	71fb      	strb	r3, [r7, #7]
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d9ed      	bls.n	80018c6 <LCD_Draw_Game_Grid+0x2e>
		//each tile is 34x34 so 180 is 6 height
		//15 is the offset from the edge, 34 is the size
	}
	for(uint8_t i =1; i<7; i++){
 80018ea:	2301      	movs	r3, #1
 80018ec:	71bb      	strb	r3, [r7, #6]
 80018ee:	e013      	b.n	8001918 <LCD_Draw_Game_Grid+0x80>
		LCD_Draw_Horizontal_Line(0,LCD_PIXEL_HEIGHT-(SQUARE_SIZE*i),LCD_PIXEL_WIDTH,LCD_COLOR_BLACK);
 80018f0:	79bb      	ldrb	r3, [r7, #6]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	02d2      	lsls	r2, r2, #11
 80018f8:	1ad2      	subs	r2, r2, r3
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	b29b      	uxth	r3, r3
 8001902:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8001906:	b299      	uxth	r1, r3
 8001908:	2300      	movs	r3, #0
 800190a:	22f0      	movs	r2, #240	@ 0xf0
 800190c:	2000      	movs	r0, #0
 800190e:	f7ff fbb7 	bl	8001080 <LCD_Draw_Horizontal_Line>
	for(uint8_t i =1; i<7; i++){
 8001912:	79bb      	ldrb	r3, [r7, #6]
 8001914:	3301      	adds	r3, #1
 8001916:	71bb      	strb	r3, [r7, #6]
 8001918:	79bb      	ldrb	r3, [r7, #6]
 800191a:	2b06      	cmp	r3, #6
 800191c:	d9e8      	bls.n	80018f0 <LCD_Draw_Game_Grid+0x58>
		//want each horizontal line to go across the screen
	}
	for(uint8_t i = 0; i<COLUMNS; i++){
 800191e:	2300      	movs	r3, #0
 8001920:	717b      	strb	r3, [r7, #5]
 8001922:	e030      	b.n	8001986 <LCD_Draw_Game_Grid+0xee>
		for(uint8_t j =0; j<ROWS; j++){
 8001924:	2300      	movs	r3, #0
 8001926:	713b      	strb	r3, [r7, #4]
 8001928:	e027      	b.n	800197a <LCD_Draw_Game_Grid+0xe2>
			LCD_Draw_Circle_Fill(grid[i][j].xPos, LCD_PIXEL_HEIGHT-grid[i][j].yPos, CIRCLE_RADIUS, LCD_COLOR_WHITE);
 800192a:	7979      	ldrb	r1, [r7, #5]
 800192c:	793b      	ldrb	r3, [r7, #4]
 800192e:	481a      	ldr	r0, [pc, #104]	@ (8001998 <LCD_Draw_Game_Grid+0x100>)
 8001930:	461a      	mov	r2, r3
 8001932:	0052      	lsls	r2, r2, #1
 8001934:	441a      	add	r2, r3
 8001936:	460b      	mov	r3, r1
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	440b      	add	r3, r1
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	4403      	add	r3, r0
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461c      	mov	r4, r3
 8001946:	7979      	ldrb	r1, [r7, #5]
 8001948:	793b      	ldrb	r3, [r7, #4]
 800194a:	4813      	ldr	r0, [pc, #76]	@ (8001998 <LCD_Draw_Game_Grid+0x100>)
 800194c:	461a      	mov	r2, r3
 800194e:	0052      	lsls	r2, r2, #1
 8001950:	441a      	add	r2, r3
 8001952:	460b      	mov	r3, r1
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	440b      	add	r3, r1
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	4403      	add	r3, r0
 800195e:	3301      	adds	r3, #1
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001966:	b299      	uxth	r1, r3
 8001968:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800196c:	220c      	movs	r2, #12
 800196e:	4620      	mov	r0, r4
 8001970:	f7ff fad0 	bl	8000f14 <LCD_Draw_Circle_Fill>
		for(uint8_t j =0; j<ROWS; j++){
 8001974:	793b      	ldrb	r3, [r7, #4]
 8001976:	3301      	adds	r3, #1
 8001978:	713b      	strb	r3, [r7, #4]
 800197a:	793b      	ldrb	r3, [r7, #4]
 800197c:	2b05      	cmp	r3, #5
 800197e:	d9d4      	bls.n	800192a <LCD_Draw_Game_Grid+0x92>
	for(uint8_t i = 0; i<COLUMNS; i++){
 8001980:	797b      	ldrb	r3, [r7, #5]
 8001982:	3301      	adds	r3, #1
 8001984:	717b      	strb	r3, [r7, #5]
 8001986:	797b      	ldrb	r3, [r7, #5]
 8001988:	2b06      	cmp	r3, #6
 800198a:	d9cb      	bls.n	8001924 <LCD_Draw_Game_Grid+0x8c>
		}
	}
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bd90      	pop	{r4, r7, pc}
 8001996:	bf00      	nop
 8001998:	20025970 	.word	0x20025970

0800199c <LCD_Draw_Score_Screen>:

void LCD_Draw_Score_Screen(){
 800199c:	b580      	push	{r7, lr}
 800199e:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 80019a2:	af02      	add	r7, sp, #8
	LCD_Update_Game_Length_Time();
 80019a4:	f7fe ff7e 	bl	80008a4 <LCD_Update_Game_Length_Time>

	LCD_Clear(0, LCD_COLOR_GREY);
 80019a8:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff fb8f 	bl	80010d0 <LCD_Clear>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f7ff fbae 	bl	8001114 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80019b8:	4895      	ldr	r0, [pc, #596]	@ (8001c10 <LCD_Draw_Score_Screen+0x274>)
 80019ba:	f7ff fbbb 	bl	8001134 <LCD_SetFont>

	LCD_DisplayChar(95,TIMER_YPOS,'T');
 80019be:	2254      	movs	r2, #84	@ 0x54
 80019c0:	2114      	movs	r1, #20
 80019c2:	205f      	movs	r0, #95	@ 0x5f
 80019c4:	f7ff fc34 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(105,TIMER_YPOS,'i');
 80019c8:	2269      	movs	r2, #105	@ 0x69
 80019ca:	2114      	movs	r1, #20
 80019cc:	2069      	movs	r0, #105	@ 0x69
 80019ce:	f7ff fc2f 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(115,TIMER_YPOS,'m');
 80019d2:	226d      	movs	r2, #109	@ 0x6d
 80019d4:	2114      	movs	r1, #20
 80019d6:	2073      	movs	r0, #115	@ 0x73
 80019d8:	f7ff fc2a 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(130,TIMER_YPOS,'e');
 80019dc:	2265      	movs	r2, #101	@ 0x65
 80019de:	2114      	movs	r1, #20
 80019e0:	2082      	movs	r0, #130	@ 0x82
 80019e2:	f7ff fc25 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(140,TIMER_YPOS,'r');
 80019e6:	2272      	movs	r2, #114	@ 0x72
 80019e8:	2114      	movs	r1, #20
 80019ea:	208c      	movs	r0, #140	@ 0x8c
 80019ec:	f7ff fc20 	bl	8001230 <LCD_DisplayChar>


	char seconds[1000];
	//converts the ms to seconds and allowing for 1000*9 seconds to be displayed
	sprintf(seconds, "%ld", gameLengthTime/1000);
 80019f0:	4b88      	ldr	r3, [pc, #544]	@ (8001c14 <LCD_Draw_Score_Screen+0x278>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a88      	ldr	r2, [pc, #544]	@ (8001c18 <LCD_Draw_Score_Screen+0x27c>)
 80019f6:	fba2 2303 	umull	r2, r3, r2, r3
 80019fa:	099a      	lsrs	r2, r3, #6
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	4986      	ldr	r1, [pc, #536]	@ (8001c1c <LCD_Draw_Score_Screen+0x280>)
 8001a02:	4618      	mov	r0, r3
 8001a04:	f005 fa9c 	bl	8006f40 <siprintf>

	for(uint32_t i = 0; seconds[i]!='\0'; i++){
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 8001a0e:	e019      	b.n	8001a44 <LCD_Draw_Score_Screen+0xa8>
		LCD_DisplayChar(105+i*15, TIMER_YPOS+30, seconds[i]);
 8001a10:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	3369      	adds	r3, #105	@ 0x69
 8001a20:	b298      	uxth	r0, r3
 8001a22:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001a26:	f5a3 727d 	sub.w	r2, r3, #1012	@ 0x3f4
 8001a2a:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 8001a2e:	4413      	add	r3, r2
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	2132      	movs	r1, #50	@ 0x32
 8001a36:	f7ff fbfb 	bl	8001230 <LCD_DisplayChar>
	for(uint32_t i = 0; seconds[i]!='\0'; i++){
 8001a3a:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 8001a3e:	3301      	adds	r3, #1
 8001a40:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 8001a44:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001a48:	f5a3 727d 	sub.w	r2, r3, #1012	@ 0x3f4
 8001a4c:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 8001a50:	4413      	add	r3, r2
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1db      	bne.n	8001a10 <LCD_Draw_Score_Screen+0x74>
	}

	LCD_DisplayChar(95,SCORE_YPOS,'S');
 8001a58:	2253      	movs	r2, #83	@ 0x53
 8001a5a:	2150      	movs	r1, #80	@ 0x50
 8001a5c:	205f      	movs	r0, #95	@ 0x5f
 8001a5e:	f7ff fbe7 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(107,SCORE_YPOS,'c');
 8001a62:	2263      	movs	r2, #99	@ 0x63
 8001a64:	2150      	movs	r1, #80	@ 0x50
 8001a66:	206b      	movs	r0, #107	@ 0x6b
 8001a68:	f7ff fbe2 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(117,SCORE_YPOS,'o');
 8001a6c:	226f      	movs	r2, #111	@ 0x6f
 8001a6e:	2150      	movs	r1, #80	@ 0x50
 8001a70:	2075      	movs	r0, #117	@ 0x75
 8001a72:	f7ff fbdd 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(127,SCORE_YPOS,'r');
 8001a76:	2272      	movs	r2, #114	@ 0x72
 8001a78:	2150      	movs	r1, #80	@ 0x50
 8001a7a:	207f      	movs	r0, #127	@ 0x7f
 8001a7c:	f7ff fbd8 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(135,SCORE_YPOS,'e');
 8001a80:	2265      	movs	r2, #101	@ 0x65
 8001a82:	2150      	movs	r1, #80	@ 0x50
 8001a84:	2087      	movs	r0, #135	@ 0x87
 8001a86:	f7ff fbd3 	bl	8001230 <LCD_DisplayChar>



	LCD_Draw_Circle_Fill(103, SCORE_YPOS+60, 16, LCD_COLOR_BLACK);
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	2210      	movs	r2, #16
 8001a8e:	218c      	movs	r1, #140	@ 0x8c
 8001a90:	2067      	movs	r0, #103	@ 0x67
 8001a92:	f7ff fa3f 	bl	8000f14 <LCD_Draw_Circle_Fill>
	LCD_Draw_Circle_Fill(144, SCORE_YPOS+60, 16, LCD_COLOR_BLACK);
 8001a96:	2300      	movs	r3, #0
 8001a98:	2210      	movs	r2, #16
 8001a9a:	218c      	movs	r1, #140	@ 0x8c
 8001a9c:	2090      	movs	r0, #144	@ 0x90
 8001a9e:	f7ff fa39 	bl	8000f14 <LCD_Draw_Circle_Fill>
	//Outlines for the circles

	LCD_Draw_Circle_Fill(103, SCORE_YPOS+60, 15, LCD_COLOR_RED);
 8001aa2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001aa6:	220f      	movs	r2, #15
 8001aa8:	218c      	movs	r1, #140	@ 0x8c
 8001aaa:	2067      	movs	r0, #103	@ 0x67
 8001aac:	f7ff fa32 	bl	8000f14 <LCD_Draw_Circle_Fill>
	LCD_Draw_Circle_Fill(144, SCORE_YPOS+60, 15, LCD_COLOR_YELLOW);
 8001ab0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	218c      	movs	r1, #140	@ 0x8c
 8001ab8:	2090      	movs	r0, #144	@ 0x90
 8001aba:	f7ff fa2b 	bl	8000f14 <LCD_Draw_Circle_Fill>

	char redScoreToDisplay[4];
	//displays up to 9999
	sprintf(redScoreToDisplay, "%d", redScore);
 8001abe:	4b58      	ldr	r3, [pc, #352]	@ (8001c20 <LCD_Draw_Score_Screen+0x284>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f107 0308 	add.w	r3, r7, #8
 8001ac8:	4956      	ldr	r1, [pc, #344]	@ (8001c24 <LCD_Draw_Score_Screen+0x288>)
 8001aca:	4618      	mov	r0, r3
 8001acc:	f005 fa38 	bl	8006f40 <siprintf>
	for(int i = 0; redScoreToDisplay[i] != '\0'; i++){
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8001ad6:	e019      	b.n	8001b0c <LCD_Draw_Score_Screen+0x170>
		LCD_DisplayChar(97+i*15, SCORE_YPOS+51, redScoreToDisplay[i]);
 8001ad8:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	461a      	mov	r2, r3
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	3361      	adds	r3, #97	@ 0x61
 8001ae8:	b298      	uxth	r0, r3
 8001aea:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001aee:	f5a3 727e 	sub.w	r2, r3, #1016	@ 0x3f8
 8001af2:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001af6:	4413      	add	r3, r2
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	2183      	movs	r1, #131	@ 0x83
 8001afe:	f7ff fb97 	bl	8001230 <LCD_DisplayChar>
	for(int i = 0; redScoreToDisplay[i] != '\0'; i++){
 8001b02:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001b06:	3301      	adds	r3, #1
 8001b08:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8001b0c:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001b10:	f5a3 727e 	sub.w	r2, r3, #1016	@ 0x3f8
 8001b14:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001b18:	4413      	add	r3, r2
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1db      	bne.n	8001ad8 <LCD_Draw_Score_Screen+0x13c>
	}

	char yellowScoreToDisplay[4];
	sprintf(yellowScoreToDisplay, "%d", yellowScore);
 8001b20:	4b41      	ldr	r3, [pc, #260]	@ (8001c28 <LCD_Draw_Score_Screen+0x28c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	493e      	ldr	r1, [pc, #248]	@ (8001c24 <LCD_Draw_Score_Screen+0x288>)
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f005 fa08 	bl	8006f40 <siprintf>
	for(int i = 0; redScoreToDisplay[i] != '\0'; i++){
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 8001b36:	e019      	b.n	8001b6c <LCD_Draw_Score_Screen+0x1d0>
		LCD_DisplayChar(137+i*15, SCORE_YPOS+51, yellowScoreToDisplay[i]);
 8001b38:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	461a      	mov	r2, r3
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	3389      	adds	r3, #137	@ 0x89
 8001b48:	b298      	uxth	r0, r3
 8001b4a:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001b4e:	f5a3 727f 	sub.w	r2, r3, #1020	@ 0x3fc
 8001b52:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	2183      	movs	r1, #131	@ 0x83
 8001b5e:	f7ff fb67 	bl	8001230 <LCD_DisplayChar>
	for(int i = 0; redScoreToDisplay[i] != '\0'; i++){
 8001b62:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8001b66:	3301      	adds	r3, #1
 8001b68:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 8001b6c:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001b70:	f5a3 727e 	sub.w	r2, r3, #1016	@ 0x3f8
 8001b74:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1db      	bne.n	8001b38 <LCD_Draw_Score_Screen+0x19c>
	}

//	LCD_DisplayChar(97, SCORE_YPOS+51, redScoreToDisplay);
//	LCD_DisplayChar(137, SCORE_YPOS+51, yellowScoreToDisplay);
	//RIGHT NOW ONLY CAN DISPLAY UP TO 9 FOR BOTH SIDES OTHERWISE OVERFLOW
	LCD_DisplayChar(116, SCORE_YPOS+48, '-');
 8001b80:	222d      	movs	r2, #45	@ 0x2d
 8001b82:	2180      	movs	r1, #128	@ 0x80
 8001b84:	2074      	movs	r0, #116	@ 0x74
 8001b86:	f7ff fb53 	bl	8001230 <LCD_DisplayChar>

	LCD_Draw_Rectangle_Fill(18, RESTART_BUTTON_YPOS-2, 204, 104, LCD_COLOR_BLACK);
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2368      	movs	r3, #104	@ 0x68
 8001b90:	22cc      	movs	r2, #204	@ 0xcc
 8001b92:	21c6      	movs	r1, #198	@ 0xc6
 8001b94:	2012      	movs	r0, #18
 8001b96:	f7ff fa10 	bl	8000fba <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(20, RESTART_BUTTON_YPOS, 200, 100, LCD_COLOR_CYAN);
 8001b9a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2364      	movs	r3, #100	@ 0x64
 8001ba2:	22c8      	movs	r2, #200	@ 0xc8
 8001ba4:	21c8      	movs	r1, #200	@ 0xc8
 8001ba6:	2014      	movs	r0, #20
 8001ba8:	f7ff fa07 	bl	8000fba <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(25, RESTART_BUTTON_YPOS+5, 190, 90, LCD_COLOR_BLUE2);
 8001bac:	f240 531f 	movw	r3, #1311	@ 0x51f
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	235a      	movs	r3, #90	@ 0x5a
 8001bb4:	22be      	movs	r2, #190	@ 0xbe
 8001bb6:	21cd      	movs	r1, #205	@ 0xcd
 8001bb8:	2019      	movs	r0, #25
 8001bba:	f7ff f9fe 	bl	8000fba <LCD_Draw_Rectangle_Fill>

	LCD_DisplayChar(95,  NEW_YPOS,'N');
 8001bbe:	224e      	movs	r2, #78	@ 0x4e
 8001bc0:	21e6      	movs	r1, #230	@ 0xe6
 8001bc2:	205f      	movs	r0, #95	@ 0x5f
 8001bc4:	f7ff fb34 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(110, NEW_YPOS,'E');
 8001bc8:	2245      	movs	r2, #69	@ 0x45
 8001bca:	21e6      	movs	r1, #230	@ 0xe6
 8001bcc:	206e      	movs	r0, #110	@ 0x6e
 8001bce:	f7ff fb2f 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(125, NEW_YPOS,'W');
 8001bd2:	2257      	movs	r2, #87	@ 0x57
 8001bd4:	21e6      	movs	r1, #230	@ 0xe6
 8001bd6:	207d      	movs	r0, #125	@ 0x7d
 8001bd8:	f7ff fb2a 	bl	8001230 <LCD_DisplayChar>

	LCD_DisplayChar(90,  GAME_YPOS,'G');
 8001bdc:	2247      	movs	r2, #71	@ 0x47
 8001bde:	21fa      	movs	r1, #250	@ 0xfa
 8001be0:	205a      	movs	r0, #90	@ 0x5a
 8001be2:	f7ff fb25 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(105, GAME_YPOS,'A');
 8001be6:	2241      	movs	r2, #65	@ 0x41
 8001be8:	21fa      	movs	r1, #250	@ 0xfa
 8001bea:	2069      	movs	r0, #105	@ 0x69
 8001bec:	f7ff fb20 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(120, GAME_YPOS,'M');
 8001bf0:	224d      	movs	r2, #77	@ 0x4d
 8001bf2:	21fa      	movs	r1, #250	@ 0xfa
 8001bf4:	2078      	movs	r0, #120	@ 0x78
 8001bf6:	f7ff fb1b 	bl	8001230 <LCD_DisplayChar>
	LCD_DisplayChar(135, GAME_YPOS,'E');
 8001bfa:	2245      	movs	r2, #69	@ 0x45
 8001bfc:	21fa      	movs	r1, #250	@ 0xfa
 8001bfe:	2087      	movs	r0, #135	@ 0x87
 8001c00:	f7ff fb16 	bl	8001230 <LCD_DisplayChar>
}
 8001c04:	bf00      	nop
 8001c06:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000004 	.word	0x20000004
 8001c14:	20025a00 	.word	0x20025a00
 8001c18:	10624dd3 	.word	0x10624dd3
 8001c1c:	08007898 	.word	0x08007898
 8001c20:	200259f3 	.word	0x200259f3
 8001c24:	0800789c 	.word	0x0800789c
 8001c28:	200259f4 	.word	0x200259f4

08001c2c <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c30:	b672      	cpsid	i
}
 8001c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <LCD_Error_Handler+0x8>

08001c38 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001c3c:	f001 f9a5 	bl	8002f8a <STMPE811_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d001      	beq.n	8001c4a <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001c46:	bf00      	nop
 8001c48:	e7fd      	b.n	8001c46 <InitializeLCDTouch+0xe>
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f001 fa4f 	bl	80030fa <STMPE811_ReadTouch>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <getScheduledEvents>:
#include "Scheduler.h"

static uint32_t scheduledEvents;

uint32_t getScheduledEvents(){
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	@ (8001c7c <getScheduledEvents+0x14>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20025a04 	.word	0x20025a04

08001c80 <addSchedulerEvent>:

void addSchedulerEvent(uint32_t event_to_schedule){
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event_to_schedule;
 8001c88:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <addSchedulerEvent+0x20>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	4a03      	ldr	r2, [pc, #12]	@ (8001ca0 <addSchedulerEvent+0x20>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	20025a04 	.word	0x20025a04

08001ca4 <removeSchedulerEvent>:


void removeSchedulerEvent(uint32_t event_to_remove){
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~event_to_remove;//this might be wrong
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <removeSchedulerEvent+0x24>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	4a04      	ldr	r2, [pc, #16]	@ (8001cc8 <removeSchedulerEvent+0x24>)
 8001cb8:	6013      	str	r3, [r2, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20025a04 	.word	0x20025a04

08001ccc <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001cd0:	f000 f9fe 	bl	80020d0 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001cd4:	20ca      	movs	r0, #202	@ 0xca
 8001cd6:	f000 f943 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001cda:	20c3      	movs	r0, #195	@ 0xc3
 8001cdc:	f000 f94d 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001ce0:	2008      	movs	r0, #8
 8001ce2:	f000 f94a 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001ce6:	2050      	movs	r0, #80	@ 0x50
 8001ce8:	f000 f947 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001cec:	20cf      	movs	r0, #207	@ 0xcf
 8001cee:	f000 f937 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f000 f941 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001cf8:	20c1      	movs	r0, #193	@ 0xc1
 8001cfa:	f000 f93e 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001cfe:	2030      	movs	r0, #48	@ 0x30
 8001d00:	f000 f93b 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001d04:	20ed      	movs	r0, #237	@ 0xed
 8001d06:	f000 f92b 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001d0a:	2064      	movs	r0, #100	@ 0x64
 8001d0c:	f000 f935 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001d10:	2003      	movs	r0, #3
 8001d12:	f000 f932 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001d16:	2012      	movs	r0, #18
 8001d18:	f000 f92f 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001d1c:	2081      	movs	r0, #129	@ 0x81
 8001d1e:	f000 f92c 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001d22:	20e8      	movs	r0, #232	@ 0xe8
 8001d24:	f000 f91c 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001d28:	2085      	movs	r0, #133	@ 0x85
 8001d2a:	f000 f926 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f000 f923 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001d34:	2078      	movs	r0, #120	@ 0x78
 8001d36:	f000 f920 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001d3a:	20cb      	movs	r0, #203	@ 0xcb
 8001d3c:	f000 f910 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001d40:	2039      	movs	r0, #57	@ 0x39
 8001d42:	f000 f91a 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001d46:	202c      	movs	r0, #44	@ 0x2c
 8001d48:	f000 f917 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f000 f914 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001d52:	2034      	movs	r0, #52	@ 0x34
 8001d54:	f000 f911 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001d58:	2002      	movs	r0, #2
 8001d5a:	f000 f90e 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001d5e:	20f7      	movs	r0, #247	@ 0xf7
 8001d60:	f000 f8fe 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001d64:	2020      	movs	r0, #32
 8001d66:	f000 f908 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001d6a:	20ea      	movs	r0, #234	@ 0xea
 8001d6c:	f000 f8f8 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d70:	2000      	movs	r0, #0
 8001d72:	f000 f902 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d76:	2000      	movs	r0, #0
 8001d78:	f000 f8ff 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001d7c:	20b1      	movs	r0, #177	@ 0xb1
 8001d7e:	f000 f8ef 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f000 f8f9 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001d88:	201b      	movs	r0, #27
 8001d8a:	f000 f8f6 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001d8e:	20b6      	movs	r0, #182	@ 0xb6
 8001d90:	f000 f8e6 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001d94:	200a      	movs	r0, #10
 8001d96:	f000 f8f0 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001d9a:	20a2      	movs	r0, #162	@ 0xa2
 8001d9c:	f000 f8ed 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001da0:	20c0      	movs	r0, #192	@ 0xc0
 8001da2:	f000 f8dd 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001da6:	2010      	movs	r0, #16
 8001da8:	f000 f8e7 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001dac:	20c1      	movs	r0, #193	@ 0xc1
 8001dae:	f000 f8d7 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001db2:	2010      	movs	r0, #16
 8001db4:	f000 f8e1 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001db8:	20c5      	movs	r0, #197	@ 0xc5
 8001dba:	f000 f8d1 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001dbe:	2045      	movs	r0, #69	@ 0x45
 8001dc0:	f000 f8db 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001dc4:	2015      	movs	r0, #21
 8001dc6:	f000 f8d8 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001dca:	20c7      	movs	r0, #199	@ 0xc7
 8001dcc:	f000 f8c8 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001dd0:	2090      	movs	r0, #144	@ 0x90
 8001dd2:	f000 f8d2 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001dd6:	2036      	movs	r0, #54	@ 0x36
 8001dd8:	f000 f8c2 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001ddc:	20c8      	movs	r0, #200	@ 0xc8
 8001dde:	f000 f8cc 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001de2:	20f2      	movs	r0, #242	@ 0xf2
 8001de4:	f000 f8bc 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001de8:	2000      	movs	r0, #0
 8001dea:	f000 f8c6 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001dee:	20b0      	movs	r0, #176	@ 0xb0
 8001df0:	f000 f8b6 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001df4:	20c2      	movs	r0, #194	@ 0xc2
 8001df6:	f000 f8c0 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001dfa:	20b6      	movs	r0, #182	@ 0xb6
 8001dfc:	f000 f8b0 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001e00:	200a      	movs	r0, #10
 8001e02:	f000 f8ba 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001e06:	20a7      	movs	r0, #167	@ 0xa7
 8001e08:	f000 f8b7 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001e0c:	2027      	movs	r0, #39	@ 0x27
 8001e0e:	f000 f8b4 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001e12:	2004      	movs	r0, #4
 8001e14:	f000 f8b1 	bl	8001f7a <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001e18:	202a      	movs	r0, #42	@ 0x2a
 8001e1a:	f000 f8a1 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f000 f8ab 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e24:	2000      	movs	r0, #0
 8001e26:	f000 f8a8 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f000 f8a5 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001e30:	20ef      	movs	r0, #239	@ 0xef
 8001e32:	f000 f8a2 	bl	8001f7a <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001e36:	202b      	movs	r0, #43	@ 0x2b
 8001e38:	f000 f892 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f000 f89c 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e42:	2000      	movs	r0, #0
 8001e44:	f000 f899 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001e48:	2001      	movs	r0, #1
 8001e4a:	f000 f896 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001e4e:	203f      	movs	r0, #63	@ 0x3f
 8001e50:	f000 f893 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001e54:	20f6      	movs	r0, #246	@ 0xf6
 8001e56:	f000 f883 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f000 f88d 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e60:	2000      	movs	r0, #0
 8001e62:	f000 f88a 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001e66:	2006      	movs	r0, #6
 8001e68:	f000 f887 	bl	8001f7a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001e6c:	202c      	movs	r0, #44	@ 0x2c
 8001e6e:	f000 f877 	bl	8001f60 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001e72:	20c8      	movs	r0, #200	@ 0xc8
 8001e74:	f000 f9e8 	bl	8002248 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001e78:	2026      	movs	r0, #38	@ 0x26
 8001e7a:	f000 f871 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f000 f87b 	bl	8001f7a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001e84:	20e0      	movs	r0, #224	@ 0xe0
 8001e86:	f000 f86b 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001e8a:	200f      	movs	r0, #15
 8001e8c:	f000 f875 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001e90:	2029      	movs	r0, #41	@ 0x29
 8001e92:	f000 f872 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001e96:	2024      	movs	r0, #36	@ 0x24
 8001e98:	f000 f86f 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001e9c:	200c      	movs	r0, #12
 8001e9e:	f000 f86c 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001ea2:	200e      	movs	r0, #14
 8001ea4:	f000 f869 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001ea8:	2009      	movs	r0, #9
 8001eaa:	f000 f866 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001eae:	204e      	movs	r0, #78	@ 0x4e
 8001eb0:	f000 f863 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001eb4:	2078      	movs	r0, #120	@ 0x78
 8001eb6:	f000 f860 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001eba:	203c      	movs	r0, #60	@ 0x3c
 8001ebc:	f000 f85d 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001ec0:	2009      	movs	r0, #9
 8001ec2:	f000 f85a 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001ec6:	2013      	movs	r0, #19
 8001ec8:	f000 f857 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001ecc:	2005      	movs	r0, #5
 8001ece:	f000 f854 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001ed2:	2017      	movs	r0, #23
 8001ed4:	f000 f851 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001ed8:	2011      	movs	r0, #17
 8001eda:	f000 f84e 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f000 f84b 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001ee4:	20e1      	movs	r0, #225	@ 0xe1
 8001ee6:	f000 f83b 	bl	8001f60 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001eea:	2000      	movs	r0, #0
 8001eec:	f000 f845 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001ef0:	2016      	movs	r0, #22
 8001ef2:	f000 f842 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001ef6:	201b      	movs	r0, #27
 8001ef8:	f000 f83f 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001efc:	2004      	movs	r0, #4
 8001efe:	f000 f83c 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001f02:	2011      	movs	r0, #17
 8001f04:	f000 f839 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001f08:	2007      	movs	r0, #7
 8001f0a:	f000 f836 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001f0e:	2031      	movs	r0, #49	@ 0x31
 8001f10:	f000 f833 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001f14:	2033      	movs	r0, #51	@ 0x33
 8001f16:	f000 f830 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001f1a:	2042      	movs	r0, #66	@ 0x42
 8001f1c:	f000 f82d 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001f20:	2005      	movs	r0, #5
 8001f22:	f000 f82a 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001f26:	200c      	movs	r0, #12
 8001f28:	f000 f827 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001f2c:	200a      	movs	r0, #10
 8001f2e:	f000 f824 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001f32:	2028      	movs	r0, #40	@ 0x28
 8001f34:	f000 f821 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001f38:	202f      	movs	r0, #47	@ 0x2f
 8001f3a:	f000 f81e 	bl	8001f7a <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001f3e:	200f      	movs	r0, #15
 8001f40:	f000 f81b 	bl	8001f7a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001f44:	2011      	movs	r0, #17
 8001f46:	f000 f80b 	bl	8001f60 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001f4a:	20c8      	movs	r0, #200	@ 0xc8
 8001f4c:	f000 f97c 	bl	8002248 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001f50:	2029      	movs	r0, #41	@ 0x29
 8001f52:	f000 f805 	bl	8001f60 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001f56:	202c      	movs	r0, #44	@ 0x2c
 8001f58:	f000 f802 	bl	8001f60 <ili9341_Write_Reg>
}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 f949 	bl	8002204 <LCD_IO_WriteReg>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 f91a 	bl	80021c0 <LCD_IO_WriteData>
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001f98:	4819      	ldr	r0, [pc, #100]	@ (8002000 <SPI_Init+0x6c>)
 8001f9a:	f004 fc0e 	bl	80067ba <HAL_SPI_GetState>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d12b      	bne.n	8001ffc <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001fa4:	4b16      	ldr	r3, [pc, #88]	@ (8002000 <SPI_Init+0x6c>)
 8001fa6:	4a17      	ldr	r2, [pc, #92]	@ (8002004 <SPI_Init+0x70>)
 8001fa8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001faa:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <SPI_Init+0x6c>)
 8001fac:	2218      	movs	r2, #24
 8001fae:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001fb0:	4b13      	ldr	r3, [pc, #76]	@ (8002000 <SPI_Init+0x6c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001fb6:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <SPI_Init+0x6c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001fbc:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <SPI_Init+0x6c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002000 <SPI_Init+0x6c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002000 <SPI_Init+0x6c>)
 8001fca:	2207      	movs	r2, #7
 8001fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001fce:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <SPI_Init+0x6c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002000 <SPI_Init+0x6c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <SPI_Init+0x6c>)
 8001fdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fe0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001fe2:	4b07      	ldr	r3, [pc, #28]	@ (8002000 <SPI_Init+0x6c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001fe8:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <SPI_Init+0x6c>)
 8001fea:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fee:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001ff0:	4803      	ldr	r0, [pc, #12]	@ (8002000 <SPI_Init+0x6c>)
 8001ff2:	f000 f833 	bl	800205c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001ff6:	4802      	ldr	r0, [pc, #8]	@ (8002000 <SPI_Init+0x6c>)
 8001ff8:	f004 f9ea 	bl	80063d0 <HAL_SPI_Init>
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20025a08 	.word	0x20025a08
 8002004:	40015000 	.word	0x40015000

08002008 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8002016:	4b09      	ldr	r3, [pc, #36]	@ (800203c <SPI_Write+0x34>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	1db9      	adds	r1, r7, #6
 800201c:	2201      	movs	r2, #1
 800201e:	4808      	ldr	r0, [pc, #32]	@ (8002040 <SPI_Write+0x38>)
 8002020:	f004 fa87 	bl	8006532 <HAL_SPI_Transmit>
 8002024:	4603      	mov	r3, r0
 8002026:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800202e:	f000 f809 	bl	8002044 <SPI_Error>
  }
}
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	2000000c 	.word	0x2000000c
 8002040:	20025a08 	.word	0x20025a08

08002044 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002048:	4803      	ldr	r0, [pc, #12]	@ (8002058 <SPI_Error+0x14>)
 800204a:	f004 fa4a 	bl	80064e2 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800204e:	f7ff ffa1 	bl	8001f94 <SPI_Init>
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20025a08 	.word	0x20025a08

0800205c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	@ 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	4b17      	ldr	r3, [pc, #92]	@ (80020c8 <SPI_MspInit+0x6c>)
 800206a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206c:	4a16      	ldr	r2, [pc, #88]	@ (80020c8 <SPI_MspInit+0x6c>)
 800206e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002072:	6453      	str	r3, [r2, #68]	@ 0x44
 8002074:	4b14      	ldr	r3, [pc, #80]	@ (80020c8 <SPI_MspInit+0x6c>)
 8002076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002078:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	4b10      	ldr	r3, [pc, #64]	@ (80020c8 <SPI_MspInit+0x6c>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002088:	4a0f      	ldr	r2, [pc, #60]	@ (80020c8 <SPI_MspInit+0x6c>)
 800208a:	f043 0320 	orr.w	r3, r3, #32
 800208e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002090:	4b0d      	ldr	r3, [pc, #52]	@ (80020c8 <SPI_MspInit+0x6c>)
 8002092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002094:	f003 0320 	and.w	r3, r3, #32
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 800209c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80020a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80020a6:	2302      	movs	r3, #2
 80020a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80020aa:	2301      	movs	r3, #1
 80020ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80020ae:	2305      	movs	r3, #5
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	4619      	mov	r1, r3
 80020b8:	4804      	ldr	r0, [pc, #16]	@ (80020cc <SPI_MspInit+0x70>)
 80020ba:	f001 fd03 	bl	8003ac4 <HAL_GPIO_Init>
}
 80020be:	bf00      	nop
 80020c0:	3728      	adds	r7, #40	@ 0x28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40021400 	.word	0x40021400

080020d0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80020d6:	4b36      	ldr	r3, [pc, #216]	@ (80021b0 <LCD_IO_Init+0xe0>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d164      	bne.n	80021a8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80020de:	4b34      	ldr	r3, [pc, #208]	@ (80021b0 <LCD_IO_Init+0xe0>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80020e4:	2300      	movs	r3, #0
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	4b32      	ldr	r3, [pc, #200]	@ (80021b4 <LCD_IO_Init+0xe4>)
 80020ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ec:	4a31      	ldr	r2, [pc, #196]	@ (80021b4 <LCD_IO_Init+0xe4>)
 80020ee:	f043 0308 	orr.w	r3, r3, #8
 80020f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f4:	4b2f      	ldr	r3, [pc, #188]	@ (80021b4 <LCD_IO_Init+0xe4>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002100:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002104:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002106:	2301      	movs	r3, #1
 8002108:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800210e:	2302      	movs	r3, #2
 8002110:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002112:	f107 030c 	add.w	r3, r7, #12
 8002116:	4619      	mov	r1, r3
 8002118:	4827      	ldr	r0, [pc, #156]	@ (80021b8 <LCD_IO_Init+0xe8>)
 800211a:	f001 fcd3 	bl	8003ac4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	4b24      	ldr	r3, [pc, #144]	@ (80021b4 <LCD_IO_Init+0xe4>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	4a23      	ldr	r2, [pc, #140]	@ (80021b4 <LCD_IO_Init+0xe4>)
 8002128:	f043 0308 	orr.w	r3, r3, #8
 800212c:	6313      	str	r3, [r2, #48]	@ 0x30
 800212e:	4b21      	ldr	r3, [pc, #132]	@ (80021b4 <LCD_IO_Init+0xe4>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800213a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800213e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002140:	2301      	movs	r3, #1
 8002142:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002148:	2302      	movs	r3, #2
 800214a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800214c:	f107 030c 	add.w	r3, r7, #12
 8002150:	4619      	mov	r1, r3
 8002152:	4819      	ldr	r0, [pc, #100]	@ (80021b8 <LCD_IO_Init+0xe8>)
 8002154:	f001 fcb6 	bl	8003ac4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002158:	2300      	movs	r3, #0
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <LCD_IO_Init+0xe4>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002160:	4a14      	ldr	r2, [pc, #80]	@ (80021b4 <LCD_IO_Init+0xe4>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6313      	str	r3, [r2, #48]	@ 0x30
 8002168:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <LCD_IO_Init+0xe4>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002174:	2304      	movs	r3, #4
 8002176:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002178:	2301      	movs	r3, #1
 800217a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002180:	2302      	movs	r3, #2
 8002182:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002184:	f107 030c 	add.w	r3, r7, #12
 8002188:	4619      	mov	r1, r3
 800218a:	480c      	ldr	r0, [pc, #48]	@ (80021bc <LCD_IO_Init+0xec>)
 800218c:	f001 fc9a 	bl	8003ac4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002190:	2200      	movs	r2, #0
 8002192:	2104      	movs	r1, #4
 8002194:	4809      	ldr	r0, [pc, #36]	@ (80021bc <LCD_IO_Init+0xec>)
 8002196:	f001 ff4d 	bl	8004034 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800219a:	2201      	movs	r2, #1
 800219c:	2104      	movs	r1, #4
 800219e:	4807      	ldr	r0, [pc, #28]	@ (80021bc <LCD_IO_Init+0xec>)
 80021a0:	f001 ff48 	bl	8004034 <HAL_GPIO_WritePin>

    SPI_Init();
 80021a4:	f7ff fef6 	bl	8001f94 <SPI_Init>
  }
}
 80021a8:	bf00      	nop
 80021aa:	3720      	adds	r7, #32
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20025a60 	.word	0x20025a60
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020c00 	.word	0x40020c00
 80021bc:	40020800 	.word	0x40020800

080021c0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80021ca:	2201      	movs	r2, #1
 80021cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021d0:	480a      	ldr	r0, [pc, #40]	@ (80021fc <LCD_IO_WriteData+0x3c>)
 80021d2:	f001 ff2f 	bl	8004034 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80021d6:	2200      	movs	r2, #0
 80021d8:	2104      	movs	r1, #4
 80021da:	4809      	ldr	r0, [pc, #36]	@ (8002200 <LCD_IO_WriteData+0x40>)
 80021dc:	f001 ff2a 	bl	8004034 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff ff10 	bl	8002008 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80021e8:	2201      	movs	r2, #1
 80021ea:	2104      	movs	r1, #4
 80021ec:	4804      	ldr	r0, [pc, #16]	@ (8002200 <LCD_IO_WriteData+0x40>)
 80021ee:	f001 ff21 	bl	8004034 <HAL_GPIO_WritePin>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40020c00 	.word	0x40020c00
 8002200:	40020800 	.word	0x40020800

08002204 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800220e:	2200      	movs	r2, #0
 8002210:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002214:	480a      	ldr	r0, [pc, #40]	@ (8002240 <LCD_IO_WriteReg+0x3c>)
 8002216:	f001 ff0d 	bl	8004034 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800221a:	2200      	movs	r2, #0
 800221c:	2104      	movs	r1, #4
 800221e:	4809      	ldr	r0, [pc, #36]	@ (8002244 <LCD_IO_WriteReg+0x40>)
 8002220:	f001 ff08 	bl	8004034 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	b29b      	uxth	r3, r3
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff feed 	bl	8002008 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800222e:	2201      	movs	r2, #1
 8002230:	2104      	movs	r1, #4
 8002232:	4804      	ldr	r0, [pc, #16]	@ (8002244 <LCD_IO_WriteReg+0x40>)
 8002234:	f001 fefe 	bl	8004034 <HAL_GPIO_WritePin>
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40020c00 	.word	0x40020c00
 8002244:	40020800 	.word	0x40020800

08002248 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f001 facf 	bl	80037f4 <HAL_Delay>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002264:	f001 fa54 	bl	8003710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002268:	f000 f858 	bl	800231c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800226c:	f000 fa48 	bl	8002700 <MX_GPIO_Init>
  MX_LTDC_Init();
 8002270:	f000 f8fe 	bl	8002470 <MX_LTDC_Init>
  MX_RNG_Init();
 8002274:	f000 f9ae 	bl	80025d4 <MX_RNG_Init>
  MX_TIM2_Init();
 8002278:	f000 f9f6 	bl	8002668 <MX_TIM2_Init>
  MX_SPI5_Init();
 800227c:	f000 f9be 	bl	80025fc <MX_SPI5_Init>
  MX_I2C3_Init();
 8002280:	f000 f8b6 	bl	80023f0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8002284:	f7fe f97c 	bl	8000580 <ApplicationInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  eventsToRun = getScheduledEvents();
 8002288:	f7ff fcee 	bl	8001c68 <getScheduledEvents>
 800228c:	6078      	str	r0, [r7, #4]

	  if(eventsToRun & START_MENU_EVENT){
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <main+0x3e>
		  LCD_Start_Screen();
 8002298:	f7fe f98e 	bl	80005b8 <LCD_Start_Screen>
	  }
	  if(eventsToRun & POLLING_MODE_SELECT_EVENT){
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d004      	beq.n	80022b0 <main+0x52>
		  LCD_Polling_Mode();
 80022a6:	f7fe f9f3 	bl	8000690 <LCD_Polling_Mode>
		  HAL_Delay(200);
 80022aa:	20c8      	movs	r0, #200	@ 0xc8
 80022ac:	f001 faa2 	bl	80037f4 <HAL_Delay>
	  }
	  if(eventsToRun & COLOR_SELECT_EVENT){
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <main+0x60>
		  LCD_Select_Color_Screen();
 80022ba:	f7fe f989 	bl	80005d0 <LCD_Select_Color_Screen>
	  }
	  if(eventsToRun & POLLING_COLOR_SELECT_EVENT){
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d004      	beq.n	80022d2 <main+0x74>
		  LCD_Polling_Color();
 80022c8:	f7fe fa02 	bl	80006d0 <LCD_Polling_Color>
		  HAL_Delay(200);
 80022cc:	20c8      	movs	r0, #200	@ 0xc8
 80022ce:	f001 fa91 	bl	80037f4 <HAL_Delay>
	  }
	  if(eventsToRun & BUILD_NEW_GAME_EVENT){
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <main+0x82>
		  LCD_Game_Screen();
 80022dc:	f7fe f984 	bl	80005e8 <LCD_Game_Screen>
	  }
	  if(eventsToRun & POLLING_GAME_EVENT){
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d004      	beq.n	80022f4 <main+0x96>
		  LCD_Polling_Game();
 80022ea:	f7fe fa0f 	bl	800070c <LCD_Polling_Game>
		  HAL_Delay(100);
 80022ee:	2064      	movs	r0, #100	@ 0x64
 80022f0:	f001 fa80 	bl	80037f4 <HAL_Delay>
	  }
	  if(eventsToRun & SCORE_SCREEN_EVENT){
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <main+0xac>
		  LCD_Score_Screen();
 80022fe:	f7fe f981 	bl	8000604 <LCD_Score_Screen>
		  HAL_Delay(1000);
 8002302:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002306:	f001 fa75 	bl	80037f4 <HAL_Delay>
	  }
	  if(eventsToRun & POLLING_RESTART_EVENT){
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0b9      	beq.n	8002288 <main+0x2a>
		  LCD_Polling_Restart();
 8002314:	f7fe fa12 	bl	800073c <LCD_Polling_Restart>
	  eventsToRun = getScheduledEvents();
 8002318:	e7b6      	b.n	8002288 <main+0x2a>
	...

0800231c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b094      	sub	sp, #80	@ 0x50
 8002320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002322:	f107 0320 	add.w	r3, r7, #32
 8002326:	2230      	movs	r2, #48	@ 0x30
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f004 fe28 	bl	8006f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002330:	f107 030c 	add.w	r3, r7, #12
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002340:	2300      	movs	r3, #0
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	4b28      	ldr	r3, [pc, #160]	@ (80023e8 <SystemClock_Config+0xcc>)
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	4a27      	ldr	r2, [pc, #156]	@ (80023e8 <SystemClock_Config+0xcc>)
 800234a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800234e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002350:	4b25      	ldr	r3, [pc, #148]	@ (80023e8 <SystemClock_Config+0xcc>)
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800235c:	2300      	movs	r3, #0
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	4b22      	ldr	r3, [pc, #136]	@ (80023ec <SystemClock_Config+0xd0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a21      	ldr	r2, [pc, #132]	@ (80023ec <SystemClock_Config+0xd0>)
 8002366:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	4b1f      	ldr	r3, [pc, #124]	@ (80023ec <SystemClock_Config+0xd0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002374:	607b      	str	r3, [r7, #4]
 8002376:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002378:	2301      	movs	r3, #1
 800237a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800237c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002380:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002382:	2302      	movs	r3, #2
 8002384:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002386:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800238a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800238c:	2308      	movs	r3, #8
 800238e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002390:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002394:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002396:	2302      	movs	r3, #2
 8002398:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800239a:	2307      	movs	r3, #7
 800239c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800239e:	f107 0320 	add.w	r3, r7, #32
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 f9a6 	bl	80056f4 <HAL_RCC_OscConfig>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80023ae:	f000 fb55 	bl	8002a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023b2:	230f      	movs	r3, #15
 80023b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023b6:	2302      	movs	r3, #2
 80023b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023ca:	f107 030c 	add.w	r3, r7, #12
 80023ce:	2105      	movs	r1, #5
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 fc07 	bl	8005be4 <HAL_RCC_ClockConfig>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80023dc:	f000 fb3e 	bl	8002a5c <Error_Handler>
  }
}
 80023e0:	bf00      	nop
 80023e2:	3750      	adds	r7, #80	@ 0x50
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40007000 	.word	0x40007000

080023f0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80023f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002464 <MX_I2C3_Init+0x74>)
 80023f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002468 <MX_I2C3_Init+0x78>)
 80023f8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80023fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002464 <MX_I2C3_Init+0x74>)
 80023fc:	4a1b      	ldr	r2, [pc, #108]	@ (800246c <MX_I2C3_Init+0x7c>)
 80023fe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002400:	4b18      	ldr	r3, [pc, #96]	@ (8002464 <MX_I2C3_Init+0x74>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002406:	4b17      	ldr	r3, [pc, #92]	@ (8002464 <MX_I2C3_Init+0x74>)
 8002408:	2200      	movs	r2, #0
 800240a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800240c:	4b15      	ldr	r3, [pc, #84]	@ (8002464 <MX_I2C3_Init+0x74>)
 800240e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002412:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002414:	4b13      	ldr	r3, [pc, #76]	@ (8002464 <MX_I2C3_Init+0x74>)
 8002416:	2200      	movs	r2, #0
 8002418:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800241a:	4b12      	ldr	r3, [pc, #72]	@ (8002464 <MX_I2C3_Init+0x74>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002420:	4b10      	ldr	r3, [pc, #64]	@ (8002464 <MX_I2C3_Init+0x74>)
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002426:	4b0f      	ldr	r3, [pc, #60]	@ (8002464 <MX_I2C3_Init+0x74>)
 8002428:	2200      	movs	r2, #0
 800242a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800242c:	480d      	ldr	r0, [pc, #52]	@ (8002464 <MX_I2C3_Init+0x74>)
 800242e:	f001 fe1b 	bl	8004068 <HAL_I2C_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002438:	f000 fb10 	bl	8002a5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800243c:	2100      	movs	r1, #0
 800243e:	4809      	ldr	r0, [pc, #36]	@ (8002464 <MX_I2C3_Init+0x74>)
 8002440:	f002 fe36 	bl	80050b0 <HAL_I2CEx_ConfigAnalogFilter>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800244a:	f000 fb07 	bl	8002a5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800244e:	2100      	movs	r1, #0
 8002450:	4804      	ldr	r0, [pc, #16]	@ (8002464 <MX_I2C3_Init+0x74>)
 8002452:	f002 fe69 	bl	8005128 <HAL_I2CEx_ConfigDigitalFilter>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800245c:	f000 fafe 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20025a64 	.word	0x20025a64
 8002468:	40005c00 	.word	0x40005c00
 800246c:	000186a0 	.word	0x000186a0

08002470 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b09a      	sub	sp, #104	@ 0x68
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002476:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800247a:	2234      	movs	r2, #52	@ 0x34
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f004 fd7e 	bl	8006f80 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002484:	463b      	mov	r3, r7
 8002486:	2234      	movs	r2, #52	@ 0x34
 8002488:	2100      	movs	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f004 fd78 	bl	8006f80 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002490:	4b4e      	ldr	r3, [pc, #312]	@ (80025cc <MX_LTDC_Init+0x15c>)
 8002492:	4a4f      	ldr	r2, [pc, #316]	@ (80025d0 <MX_LTDC_Init+0x160>)
 8002494:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002496:	4b4d      	ldr	r3, [pc, #308]	@ (80025cc <MX_LTDC_Init+0x15c>)
 8002498:	2200      	movs	r2, #0
 800249a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800249c:	4b4b      	ldr	r3, [pc, #300]	@ (80025cc <MX_LTDC_Init+0x15c>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80024a2:	4b4a      	ldr	r3, [pc, #296]	@ (80025cc <MX_LTDC_Init+0x15c>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80024a8:	4b48      	ldr	r3, [pc, #288]	@ (80025cc <MX_LTDC_Init+0x15c>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80024ae:	4b47      	ldr	r3, [pc, #284]	@ (80025cc <MX_LTDC_Init+0x15c>)
 80024b0:	2207      	movs	r2, #7
 80024b2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80024b4:	4b45      	ldr	r3, [pc, #276]	@ (80025cc <MX_LTDC_Init+0x15c>)
 80024b6:	2203      	movs	r2, #3
 80024b8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80024ba:	4b44      	ldr	r3, [pc, #272]	@ (80025cc <MX_LTDC_Init+0x15c>)
 80024bc:	220e      	movs	r2, #14
 80024be:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80024c0:	4b42      	ldr	r3, [pc, #264]	@ (80025cc <MX_LTDC_Init+0x15c>)
 80024c2:	2205      	movs	r2, #5
 80024c4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80024c6:	4b41      	ldr	r3, [pc, #260]	@ (80025cc <MX_LTDC_Init+0x15c>)
 80024c8:	f240 228e 	movw	r2, #654	@ 0x28e
 80024cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80024ce:	4b3f      	ldr	r3, [pc, #252]	@ (80025cc <MX_LTDC_Init+0x15c>)
 80024d0:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80024d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80024d6:	4b3d      	ldr	r3, [pc, #244]	@ (80025cc <MX_LTDC_Init+0x15c>)
 80024d8:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80024dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80024de:	4b3b      	ldr	r3, [pc, #236]	@ (80025cc <MX_LTDC_Init+0x15c>)
 80024e0:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80024e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80024e6:	4b39      	ldr	r3, [pc, #228]	@ (80025cc <MX_LTDC_Init+0x15c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80024ee:	4b37      	ldr	r3, [pc, #220]	@ (80025cc <MX_LTDC_Init+0x15c>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80024f6:	4b35      	ldr	r3, [pc, #212]	@ (80025cc <MX_LTDC_Init+0x15c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80024fe:	4833      	ldr	r0, [pc, #204]	@ (80025cc <MX_LTDC_Init+0x15c>)
 8002500:	f002 fe52 	bl	80051a8 <HAL_LTDC_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800250a:	f000 faa7 	bl	8002a5c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800251e:	2300      	movs	r3, #0
 8002520:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800252a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800252e:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002530:	2305      	movs	r3, #5
 8002532:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002552:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002556:	2200      	movs	r2, #0
 8002558:	4619      	mov	r1, r3
 800255a:	481c      	ldr	r0, [pc, #112]	@ (80025cc <MX_LTDC_Init+0x15c>)
 800255c:	f002 fef4 	bl	8005348 <HAL_LTDC_ConfigLayer>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8002566:	f000 fa79 	bl	8002a5c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002586:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800258a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800258c:	2305      	movs	r3, #5
 800258e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80025ae:	463b      	mov	r3, r7
 80025b0:	2201      	movs	r2, #1
 80025b2:	4619      	mov	r1, r3
 80025b4:	4805      	ldr	r0, [pc, #20]	@ (80025cc <MX_LTDC_Init+0x15c>)
 80025b6:	f002 fec7 	bl	8005348 <HAL_LTDC_ConfigLayer>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80025c0:	f000 fa4c 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80025c4:	bf00      	nop
 80025c6:	3768      	adds	r7, #104	@ 0x68
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20025ab8 	.word	0x20025ab8
 80025d0:	40016800 	.word	0x40016800

080025d4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80025d8:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <MX_RNG_Init+0x20>)
 80025da:	4a07      	ldr	r2, [pc, #28]	@ (80025f8 <MX_RNG_Init+0x24>)
 80025dc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80025de:	4805      	ldr	r0, [pc, #20]	@ (80025f4 <MX_RNG_Init+0x20>)
 80025e0:	f003 fecc 	bl	800637c <HAL_RNG_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80025ea:	f000 fa37 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20025b60 	.word	0x20025b60
 80025f8:	50060800 	.word	0x50060800

080025fc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002600:	4b17      	ldr	r3, [pc, #92]	@ (8002660 <MX_SPI5_Init+0x64>)
 8002602:	4a18      	ldr	r2, [pc, #96]	@ (8002664 <MX_SPI5_Init+0x68>)
 8002604:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002606:	4b16      	ldr	r3, [pc, #88]	@ (8002660 <MX_SPI5_Init+0x64>)
 8002608:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800260c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800260e:	4b14      	ldr	r3, [pc, #80]	@ (8002660 <MX_SPI5_Init+0x64>)
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002614:	4b12      	ldr	r3, [pc, #72]	@ (8002660 <MX_SPI5_Init+0x64>)
 8002616:	2200      	movs	r2, #0
 8002618:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800261a:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <MX_SPI5_Init+0x64>)
 800261c:	2200      	movs	r2, #0
 800261e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002620:	4b0f      	ldr	r3, [pc, #60]	@ (8002660 <MX_SPI5_Init+0x64>)
 8002622:	2200      	movs	r2, #0
 8002624:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002626:	4b0e      	ldr	r3, [pc, #56]	@ (8002660 <MX_SPI5_Init+0x64>)
 8002628:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800262c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800262e:	4b0c      	ldr	r3, [pc, #48]	@ (8002660 <MX_SPI5_Init+0x64>)
 8002630:	2200      	movs	r2, #0
 8002632:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002634:	4b0a      	ldr	r3, [pc, #40]	@ (8002660 <MX_SPI5_Init+0x64>)
 8002636:	2200      	movs	r2, #0
 8002638:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800263a:	4b09      	ldr	r3, [pc, #36]	@ (8002660 <MX_SPI5_Init+0x64>)
 800263c:	2200      	movs	r2, #0
 800263e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002640:	4b07      	ldr	r3, [pc, #28]	@ (8002660 <MX_SPI5_Init+0x64>)
 8002642:	2200      	movs	r2, #0
 8002644:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002646:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <MX_SPI5_Init+0x64>)
 8002648:	220a      	movs	r2, #10
 800264a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800264c:	4804      	ldr	r0, [pc, #16]	@ (8002660 <MX_SPI5_Init+0x64>)
 800264e:	f003 febf 	bl	80063d0 <HAL_SPI_Init>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002658:	f000 fa00 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800265c:	bf00      	nop
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20025b70 	.word	0x20025b70
 8002664:	40015000 	.word	0x40015000

08002668 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800266e:	f107 0308 	add.w	r3, r7, #8
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800267c:	463b      	mov	r3, r7
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002684:	4b1d      	ldr	r3, [pc, #116]	@ (80026fc <MX_TIM2_Init+0x94>)
 8002686:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800268a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800268c:	4b1b      	ldr	r3, [pc, #108]	@ (80026fc <MX_TIM2_Init+0x94>)
 800268e:	2200      	movs	r2, #0
 8002690:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002692:	4b1a      	ldr	r3, [pc, #104]	@ (80026fc <MX_TIM2_Init+0x94>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002698:	4b18      	ldr	r3, [pc, #96]	@ (80026fc <MX_TIM2_Init+0x94>)
 800269a:	f04f 32ff 	mov.w	r2, #4294967295
 800269e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a0:	4b16      	ldr	r3, [pc, #88]	@ (80026fc <MX_TIM2_Init+0x94>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a6:	4b15      	ldr	r3, [pc, #84]	@ (80026fc <MX_TIM2_Init+0x94>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026ac:	4813      	ldr	r0, [pc, #76]	@ (80026fc <MX_TIM2_Init+0x94>)
 80026ae:	f004 f96f 	bl	8006990 <HAL_TIM_Base_Init>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80026b8:	f000 f9d0 	bl	8002a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026c2:	f107 0308 	add.w	r3, r7, #8
 80026c6:	4619      	mov	r1, r3
 80026c8:	480c      	ldr	r0, [pc, #48]	@ (80026fc <MX_TIM2_Init+0x94>)
 80026ca:	f004 f9b0 	bl	8006a2e <HAL_TIM_ConfigClockSource>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80026d4:	f000 f9c2 	bl	8002a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d8:	2300      	movs	r3, #0
 80026da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026dc:	2300      	movs	r3, #0
 80026de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026e0:	463b      	mov	r3, r7
 80026e2:	4619      	mov	r1, r3
 80026e4:	4805      	ldr	r0, [pc, #20]	@ (80026fc <MX_TIM2_Init+0x94>)
 80026e6:	f004 fbaf 	bl	8006e48 <HAL_TIMEx_MasterConfigSynchronization>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80026f0:	f000 f9b4 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026f4:	bf00      	nop
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20025bc8 	.word	0x20025bc8

08002700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08e      	sub	sp, #56	@ 0x38
 8002704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	60da      	str	r2, [r3, #12]
 8002714:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	623b      	str	r3, [r7, #32]
 800271a:	4bb2      	ldr	r3, [pc, #712]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	4ab1      	ldr	r2, [pc, #708]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 8002720:	f043 0304 	orr.w	r3, r3, #4
 8002724:	6313      	str	r3, [r2, #48]	@ 0x30
 8002726:	4baf      	ldr	r3, [pc, #700]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	623b      	str	r3, [r7, #32]
 8002730:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	4bab      	ldr	r3, [pc, #684]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	4aaa      	ldr	r2, [pc, #680]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 800273c:	f043 0320 	orr.w	r3, r3, #32
 8002740:	6313      	str	r3, [r2, #48]	@ 0x30
 8002742:	4ba8      	ldr	r3, [pc, #672]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	4ba4      	ldr	r3, [pc, #656]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	4aa3      	ldr	r2, [pc, #652]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 8002758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800275c:	6313      	str	r3, [r2, #48]	@ 0x30
 800275e:	4ba1      	ldr	r3, [pc, #644]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002766:	61bb      	str	r3, [r7, #24]
 8002768:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	4b9d      	ldr	r3, [pc, #628]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	4a9c      	ldr	r2, [pc, #624]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6313      	str	r3, [r2, #48]	@ 0x30
 800277a:	4b9a      	ldr	r3, [pc, #616]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	4b96      	ldr	r3, [pc, #600]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	4a95      	ldr	r2, [pc, #596]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	6313      	str	r3, [r2, #48]	@ 0x30
 8002796:	4b93      	ldr	r3, [pc, #588]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	4b8f      	ldr	r3, [pc, #572]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	4a8e      	ldr	r2, [pc, #568]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 80027ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b2:	4b8c      	ldr	r3, [pc, #560]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	4b88      	ldr	r3, [pc, #544]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	4a87      	ldr	r2, [pc, #540]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 80027c8:	f043 0310 	orr.w	r3, r3, #16
 80027cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ce:	4b85      	ldr	r3, [pc, #532]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	4b81      	ldr	r3, [pc, #516]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	4a80      	ldr	r2, [pc, #512]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 80027e4:	f043 0308 	orr.w	r3, r3, #8
 80027e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ea:	4b7e      	ldr	r3, [pc, #504]	@ (80029e4 <MX_GPIO_Init+0x2e4>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2116      	movs	r1, #22
 80027fa:	487b      	ldr	r0, [pc, #492]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 80027fc:	f001 fc1a 	bl	8004034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002800:	2200      	movs	r2, #0
 8002802:	2180      	movs	r1, #128	@ 0x80
 8002804:	4879      	ldr	r0, [pc, #484]	@ (80029ec <MX_GPIO_Init+0x2ec>)
 8002806:	f001 fc15 	bl	8004034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800280a:	2200      	movs	r2, #0
 800280c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002810:	4877      	ldr	r0, [pc, #476]	@ (80029f0 <MX_GPIO_Init+0x2f0>)
 8002812:	f001 fc0f 	bl	8004034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002816:	2200      	movs	r2, #0
 8002818:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800281c:	4875      	ldr	r0, [pc, #468]	@ (80029f4 <MX_GPIO_Init+0x2f4>)
 800281e:	f001 fc09 	bl	8004034 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002822:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002826:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002830:	2303      	movs	r3, #3
 8002832:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002834:	230c      	movs	r3, #12
 8002836:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002838:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800283c:	4619      	mov	r1, r3
 800283e:	486e      	ldr	r0, [pc, #440]	@ (80029f8 <MX_GPIO_Init+0x2f8>)
 8002840:	f001 f940 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002844:	2301      	movs	r3, #1
 8002846:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002848:	2302      	movs	r3, #2
 800284a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002850:	2303      	movs	r3, #3
 8002852:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002854:	230c      	movs	r3, #12
 8002856:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800285c:	4619      	mov	r1, r3
 800285e:	4862      	ldr	r0, [pc, #392]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 8002860:	f001 f930 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002864:	2316      	movs	r3, #22
 8002866:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002868:	2301      	movs	r3, #1
 800286a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	2300      	movs	r3, #0
 8002872:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002878:	4619      	mov	r1, r3
 800287a:	485b      	ldr	r0, [pc, #364]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 800287c:	f001 f922 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002880:	f248 0307 	movw	r3, #32775	@ 0x8007
 8002884:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002886:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800288a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002890:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002894:	4619      	mov	r1, r3
 8002896:	4855      	ldr	r0, [pc, #340]	@ (80029ec <MX_GPIO_Init+0x2ec>)
 8002898:	f001 f914 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800289c:	2380      	movs	r3, #128	@ 0x80
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a0:	2301      	movs	r3, #1
 80028a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80028ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028b0:	4619      	mov	r1, r3
 80028b2:	484e      	ldr	r0, [pc, #312]	@ (80029ec <MX_GPIO_Init+0x2ec>)
 80028b4:	f001 f906 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80028b8:	2320      	movs	r3, #32
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80028bc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80028c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80028c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ca:	4619      	mov	r1, r3
 80028cc:	4846      	ldr	r0, [pc, #280]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 80028ce:	f001 f8f9 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80028d2:	2304      	movs	r3, #4
 80028d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028d6:	2300      	movs	r3, #0
 80028d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80028de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028e2:	4619      	mov	r1, r3
 80028e4:	4845      	ldr	r0, [pc, #276]	@ (80029fc <MX_GPIO_Init+0x2fc>)
 80028e6:	f001 f8ed 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80028ea:	f248 1333 	movw	r3, #33075	@ 0x8133
 80028ee:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f0:	2302      	movs	r3, #2
 80028f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f8:	2303      	movs	r3, #3
 80028fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028fc:	230c      	movs	r3, #12
 80028fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002904:	4619      	mov	r1, r3
 8002906:	483b      	ldr	r0, [pc, #236]	@ (80029f4 <MX_GPIO_Init+0x2f4>)
 8002908:	f001 f8dc 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800290c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002910:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
 8002914:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291a:	2303      	movs	r3, #3
 800291c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800291e:	230c      	movs	r3, #12
 8002920:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002926:	4619      	mov	r1, r3
 8002928:	4835      	ldr	r0, [pc, #212]	@ (8002a00 <MX_GPIO_Init+0x300>)
 800292a:	f001 f8cb 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800292e:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002932:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002934:	2302      	movs	r3, #2
 8002936:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293c:	2300      	movs	r3, #0
 800293e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002940:	230c      	movs	r3, #12
 8002942:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002944:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002948:	4619      	mov	r1, r3
 800294a:	482c      	ldr	r0, [pc, #176]	@ (80029fc <MX_GPIO_Init+0x2fc>)
 800294c:	f001 f8ba 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002950:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002954:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002956:	2300      	movs	r3, #0
 8002958:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800295e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002962:	4619      	mov	r1, r3
 8002964:	4825      	ldr	r0, [pc, #148]	@ (80029fc <MX_GPIO_Init+0x2fc>)
 8002966:	f001 f8ad 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800296a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002970:	2302      	movs	r3, #2
 8002972:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002978:	2303      	movs	r3, #3
 800297a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800297c:	230c      	movs	r3, #12
 800297e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002980:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002984:	4619      	mov	r1, r3
 8002986:	481a      	ldr	r0, [pc, #104]	@ (80029f0 <MX_GPIO_Init+0x2f0>)
 8002988:	f001 f89c 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800298c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002990:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002992:	2300      	movs	r3, #0
 8002994:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800299a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800299e:	4619      	mov	r1, r3
 80029a0:	4813      	ldr	r0, [pc, #76]	@ (80029f0 <MX_GPIO_Init+0x2f0>)
 80029a2:	f001 f88f 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80029a6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80029aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ac:	2301      	movs	r3, #1
 80029ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b4:	2300      	movs	r3, #0
 80029b6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029bc:	4619      	mov	r1, r3
 80029be:	480c      	ldr	r0, [pc, #48]	@ (80029f0 <MX_GPIO_Init+0x2f0>)
 80029c0:	f001 f880 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80029c4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80029c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ca:	2302      	movs	r3, #2
 80029cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d2:	2303      	movs	r3, #3
 80029d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029d6:	2307      	movs	r3, #7
 80029d8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029de:	4619      	mov	r1, r3
 80029e0:	e010      	b.n	8002a04 <MX_GPIO_Init+0x304>
 80029e2:	bf00      	nop
 80029e4:	40023800 	.word	0x40023800
 80029e8:	40020800 	.word	0x40020800
 80029ec:	40020000 	.word	0x40020000
 80029f0:	40020c00 	.word	0x40020c00
 80029f4:	40021800 	.word	0x40021800
 80029f8:	40021400 	.word	0x40021400
 80029fc:	40020400 	.word	0x40020400
 8002a00:	40021000 	.word	0x40021000
 8002a04:	4812      	ldr	r0, [pc, #72]	@ (8002a50 <MX_GPIO_Init+0x350>)
 8002a06:	f001 f85d 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002a0a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a10:	2301      	movs	r3, #1
 8002a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a20:	4619      	mov	r1, r3
 8002a22:	480c      	ldr	r0, [pc, #48]	@ (8002a54 <MX_GPIO_Init+0x354>)
 8002a24:	f001 f84e 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002a28:	2360      	movs	r3, #96	@ 0x60
 8002a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a34:	2303      	movs	r3, #3
 8002a36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a38:	230c      	movs	r3, #12
 8002a3a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a40:	4619      	mov	r1, r3
 8002a42:	4805      	ldr	r0, [pc, #20]	@ (8002a58 <MX_GPIO_Init+0x358>)
 8002a44:	f001 f83e 	bl	8003ac4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a48:	bf00      	nop
 8002a4a:	3738      	adds	r7, #56	@ 0x38
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40021800 	.word	0x40021800
 8002a58:	40020400 	.word	0x40020400

08002a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a60:	b672      	cpsid	i
}
 8002a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a64:	bf00      	nop
 8002a66:	e7fd      	b.n	8002a64 <Error_Handler+0x8>

08002a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	607b      	str	r3, [r7, #4]
 8002a72:	4b10      	ldr	r3, [pc, #64]	@ (8002ab4 <HAL_MspInit+0x4c>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a76:	4a0f      	ldr	r2, [pc, #60]	@ (8002ab4 <HAL_MspInit+0x4c>)
 8002a78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab4 <HAL_MspInit+0x4c>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a86:	607b      	str	r3, [r7, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	603b      	str	r3, [r7, #0]
 8002a8e:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <HAL_MspInit+0x4c>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	4a08      	ldr	r2, [pc, #32]	@ (8002ab4 <HAL_MspInit+0x4c>)
 8002a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a9a:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <HAL_MspInit+0x4c>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002aa6:	2007      	movs	r0, #7
 8002aa8:	f000 ffbc 	bl	8003a24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40023800 	.word	0x40023800

08002ab8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	@ 0x28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a29      	ldr	r2, [pc, #164]	@ (8002b7c <HAL_I2C_MspInit+0xc4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d14b      	bne.n	8002b72 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	4b28      	ldr	r3, [pc, #160]	@ (8002b80 <HAL_I2C_MspInit+0xc8>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	4a27      	ldr	r2, [pc, #156]	@ (8002b80 <HAL_I2C_MspInit+0xc8>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aea:	4b25      	ldr	r3, [pc, #148]	@ (8002b80 <HAL_I2C_MspInit+0xc8>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	4b21      	ldr	r3, [pc, #132]	@ (8002b80 <HAL_I2C_MspInit+0xc8>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afe:	4a20      	ldr	r2, [pc, #128]	@ (8002b80 <HAL_I2C_MspInit+0xc8>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b06:	4b1e      	ldr	r3, [pc, #120]	@ (8002b80 <HAL_I2C_MspInit+0xc8>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002b12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b18:	2312      	movs	r3, #18
 8002b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2300      	movs	r3, #0
 8002b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b24:	2304      	movs	r3, #4
 8002b26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002b28:	f107 0314 	add.w	r3, r7, #20
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4815      	ldr	r0, [pc, #84]	@ (8002b84 <HAL_I2C_MspInit+0xcc>)
 8002b30:	f000 ffc8 	bl	8003ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002b34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b3a:	2312      	movs	r3, #18
 8002b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b42:	2300      	movs	r3, #0
 8002b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b46:	2304      	movs	r3, #4
 8002b48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002b4a:	f107 0314 	add.w	r3, r7, #20
 8002b4e:	4619      	mov	r1, r3
 8002b50:	480d      	ldr	r0, [pc, #52]	@ (8002b88 <HAL_I2C_MspInit+0xd0>)
 8002b52:	f000 ffb7 	bl	8003ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <HAL_I2C_MspInit+0xc8>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	4a08      	ldr	r2, [pc, #32]	@ (8002b80 <HAL_I2C_MspInit+0xc8>)
 8002b60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b66:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <HAL_I2C_MspInit+0xc8>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002b72:	bf00      	nop
 8002b74:	3728      	adds	r7, #40	@ 0x28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40005c00 	.word	0x40005c00
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40020800 	.word	0x40020800
 8002b88:	40020000 	.word	0x40020000

08002b8c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b09a      	sub	sp, #104	@ 0x68
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ba8:	2230      	movs	r2, #48	@ 0x30
 8002baa:	2100      	movs	r1, #0
 8002bac:	4618      	mov	r0, r3
 8002bae:	f004 f9e7 	bl	8006f80 <memset>
  if(hltdc->Instance==LTDC)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a81      	ldr	r2, [pc, #516]	@ (8002dbc <HAL_LTDC_MspInit+0x230>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	f040 80fb 	bne.w	8002db4 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002bbe:	2308      	movs	r3, #8
 8002bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8002bc2:	23c8      	movs	r3, #200	@ 0xc8
 8002bc4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8002bca:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002bce:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f003 fa11 	bl	8005ffc <HAL_RCCEx_PeriphCLKConfig>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002be0:	f7ff ff3c 	bl	8002a5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002be4:	2300      	movs	r3, #0
 8002be6:	623b      	str	r3, [r7, #32]
 8002be8:	4b75      	ldr	r3, [pc, #468]	@ (8002dc0 <HAL_LTDC_MspInit+0x234>)
 8002bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bec:	4a74      	ldr	r2, [pc, #464]	@ (8002dc0 <HAL_LTDC_MspInit+0x234>)
 8002bee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002bf2:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bf4:	4b72      	ldr	r3, [pc, #456]	@ (8002dc0 <HAL_LTDC_MspInit+0x234>)
 8002bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bfc:	623b      	str	r3, [r7, #32]
 8002bfe:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	4b6e      	ldr	r3, [pc, #440]	@ (8002dc0 <HAL_LTDC_MspInit+0x234>)
 8002c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c08:	4a6d      	ldr	r2, [pc, #436]	@ (8002dc0 <HAL_LTDC_MspInit+0x234>)
 8002c0a:	f043 0320 	orr.w	r3, r3, #32
 8002c0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c10:	4b6b      	ldr	r3, [pc, #428]	@ (8002dc0 <HAL_LTDC_MspInit+0x234>)
 8002c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	61fb      	str	r3, [r7, #28]
 8002c1a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61bb      	str	r3, [r7, #24]
 8002c20:	4b67      	ldr	r3, [pc, #412]	@ (8002dc0 <HAL_LTDC_MspInit+0x234>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c24:	4a66      	ldr	r2, [pc, #408]	@ (8002dc0 <HAL_LTDC_MspInit+0x234>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c2c:	4b64      	ldr	r3, [pc, #400]	@ (8002dc0 <HAL_LTDC_MspInit+0x234>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	61bb      	str	r3, [r7, #24]
 8002c36:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	4b60      	ldr	r3, [pc, #384]	@ (8002dc0 <HAL_LTDC_MspInit+0x234>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c40:	4a5f      	ldr	r2, [pc, #380]	@ (8002dc0 <HAL_LTDC_MspInit+0x234>)
 8002c42:	f043 0302 	orr.w	r3, r3, #2
 8002c46:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c48:	4b5d      	ldr	r3, [pc, #372]	@ (8002dc0 <HAL_LTDC_MspInit+0x234>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c54:	2300      	movs	r3, #0
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	4b59      	ldr	r3, [pc, #356]	@ (8002dc0 <HAL_LTDC_MspInit+0x234>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5c:	4a58      	ldr	r2, [pc, #352]	@ (8002dc0 <HAL_LTDC_MspInit+0x234>)
 8002c5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c62:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c64:	4b56      	ldr	r3, [pc, #344]	@ (8002dc0 <HAL_LTDC_MspInit+0x234>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	4b52      	ldr	r3, [pc, #328]	@ (8002dc0 <HAL_LTDC_MspInit+0x234>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c78:	4a51      	ldr	r2, [pc, #324]	@ (8002dc0 <HAL_LTDC_MspInit+0x234>)
 8002c7a:	f043 0304 	orr.w	r3, r3, #4
 8002c7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c80:	4b4f      	ldr	r3, [pc, #316]	@ (8002dc0 <HAL_LTDC_MspInit+0x234>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	4b4b      	ldr	r3, [pc, #300]	@ (8002dc0 <HAL_LTDC_MspInit+0x234>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c94:	4a4a      	ldr	r2, [pc, #296]	@ (8002dc0 <HAL_LTDC_MspInit+0x234>)
 8002c96:	f043 0308 	orr.w	r3, r3, #8
 8002c9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c9c:	4b48      	ldr	r3, [pc, #288]	@ (8002dc0 <HAL_LTDC_MspInit+0x234>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002ca8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cac:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002cba:	230e      	movs	r3, #14
 8002cbc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002cbe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	483f      	ldr	r0, [pc, #252]	@ (8002dc4 <HAL_LTDC_MspInit+0x238>)
 8002cc6:	f000 fefd 	bl	8003ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002cca:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002cce:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002cdc:	230e      	movs	r3, #14
 8002cde:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4838      	ldr	r0, [pc, #224]	@ (8002dc8 <HAL_LTDC_MspInit+0x23c>)
 8002ce8:	f000 feec 	bl	8003ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002cec:	2303      	movs	r3, #3
 8002cee:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002cfc:	2309      	movs	r3, #9
 8002cfe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d04:	4619      	mov	r1, r3
 8002d06:	4831      	ldr	r0, [pc, #196]	@ (8002dcc <HAL_LTDC_MspInit+0x240>)
 8002d08:	f000 fedc 	bl	8003ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002d0c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002d10:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d12:	2302      	movs	r3, #2
 8002d14:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d1e:	230e      	movs	r3, #14
 8002d20:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d22:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d26:	4619      	mov	r1, r3
 8002d28:	4828      	ldr	r0, [pc, #160]	@ (8002dcc <HAL_LTDC_MspInit+0x240>)
 8002d2a:	f000 fecb 	bl	8003ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002d2e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002d32:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d34:	2302      	movs	r3, #2
 8002d36:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d40:	230e      	movs	r3, #14
 8002d42:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4821      	ldr	r0, [pc, #132]	@ (8002dd0 <HAL_LTDC_MspInit+0x244>)
 8002d4c:	f000 feba 	bl	8003ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002d50:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002d54:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d56:	2302      	movs	r3, #2
 8002d58:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d62:	230e      	movs	r3, #14
 8002d64:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d66:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4819      	ldr	r0, [pc, #100]	@ (8002dd4 <HAL_LTDC_MspInit+0x248>)
 8002d6e:	f000 fea9 	bl	8003ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002d72:	2348      	movs	r3, #72	@ 0x48
 8002d74:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d76:	2302      	movs	r3, #2
 8002d78:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d82:	230e      	movs	r3, #14
 8002d84:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d86:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4812      	ldr	r0, [pc, #72]	@ (8002dd8 <HAL_LTDC_MspInit+0x24c>)
 8002d8e:	f000 fe99 	bl	8003ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002d92:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002d96:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da0:	2300      	movs	r3, #0
 8002da2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002da4:	2309      	movs	r3, #9
 8002da6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002da8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002dac:	4619      	mov	r1, r3
 8002dae:	4808      	ldr	r0, [pc, #32]	@ (8002dd0 <HAL_LTDC_MspInit+0x244>)
 8002db0:	f000 fe88 	bl	8003ac4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002db4:	bf00      	nop
 8002db6:	3768      	adds	r7, #104	@ 0x68
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40016800 	.word	0x40016800
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40021400 	.word	0x40021400
 8002dc8:	40020000 	.word	0x40020000
 8002dcc:	40020400 	.word	0x40020400
 8002dd0:	40021800 	.word	0x40021800
 8002dd4:	40020800 	.word	0x40020800
 8002dd8:	40020c00 	.word	0x40020c00

08002ddc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a0b      	ldr	r2, [pc, #44]	@ (8002e18 <HAL_RNG_MspInit+0x3c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d10d      	bne.n	8002e0a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	4b0a      	ldr	r3, [pc, #40]	@ (8002e1c <HAL_RNG_MspInit+0x40>)
 8002df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df6:	4a09      	ldr	r2, [pc, #36]	@ (8002e1c <HAL_RNG_MspInit+0x40>)
 8002df8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dfc:	6353      	str	r3, [r2, #52]	@ 0x34
 8002dfe:	4b07      	ldr	r3, [pc, #28]	@ (8002e1c <HAL_RNG_MspInit+0x40>)
 8002e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	50060800 	.word	0x50060800
 8002e1c:	40023800 	.word	0x40023800

08002e20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	@ 0x28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a19      	ldr	r2, [pc, #100]	@ (8002ea4 <HAL_SPI_MspInit+0x84>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d12c      	bne.n	8002e9c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	4b18      	ldr	r3, [pc, #96]	@ (8002ea8 <HAL_SPI_MspInit+0x88>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4a:	4a17      	ldr	r2, [pc, #92]	@ (8002ea8 <HAL_SPI_MspInit+0x88>)
 8002e4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e52:	4b15      	ldr	r3, [pc, #84]	@ (8002ea8 <HAL_SPI_MspInit+0x88>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	4b11      	ldr	r3, [pc, #68]	@ (8002ea8 <HAL_SPI_MspInit+0x88>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e66:	4a10      	ldr	r2, [pc, #64]	@ (8002ea8 <HAL_SPI_MspInit+0x88>)
 8002e68:	f043 0320 	orr.w	r3, r3, #32
 8002e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea8 <HAL_SPI_MspInit+0x88>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002e7a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002e8c:	2305      	movs	r3, #5
 8002e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	4619      	mov	r1, r3
 8002e96:	4805      	ldr	r0, [pc, #20]	@ (8002eac <HAL_SPI_MspInit+0x8c>)
 8002e98:	f000 fe14 	bl	8003ac4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002e9c:	bf00      	nop
 8002e9e:	3728      	adds	r7, #40	@ 0x28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40015000 	.word	0x40015000
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40021400 	.word	0x40021400

08002eb0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a08      	ldr	r2, [pc, #32]	@ (8002ee0 <HAL_SPI_MspDeInit+0x30>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d10a      	bne.n	8002ed8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002ec2:	4b08      	ldr	r3, [pc, #32]	@ (8002ee4 <HAL_SPI_MspDeInit+0x34>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	4a07      	ldr	r2, [pc, #28]	@ (8002ee4 <HAL_SPI_MspDeInit+0x34>)
 8002ec8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002ecc:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002ece:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002ed2:	4805      	ldr	r0, [pc, #20]	@ (8002ee8 <HAL_SPI_MspDeInit+0x38>)
 8002ed4:	f000 ffa2 	bl	8003e1c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002ed8:	bf00      	nop
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40015000 	.word	0x40015000
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40021400 	.word	0x40021400

08002eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002efc:	d10d      	bne.n	8002f1a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	4b09      	ldr	r3, [pc, #36]	@ (8002f28 <HAL_TIM_Base_MspInit+0x3c>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	4a08      	ldr	r2, [pc, #32]	@ (8002f28 <HAL_TIM_Base_MspInit+0x3c>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f0e:	4b06      	ldr	r3, [pc, #24]	@ (8002f28 <HAL_TIM_Base_MspInit+0x3c>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40023800 	.word	0x40023800

08002f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f30:	bf00      	nop
 8002f32:	e7fd      	b.n	8002f30 <NMI_Handler+0x4>

08002f34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f38:	bf00      	nop
 8002f3a:	e7fd      	b.n	8002f38 <HardFault_Handler+0x4>

08002f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f40:	bf00      	nop
 8002f42:	e7fd      	b.n	8002f40 <MemManage_Handler+0x4>

08002f44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f48:	bf00      	nop
 8002f4a:	e7fd      	b.n	8002f48 <BusFault_Handler+0x4>

08002f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f50:	bf00      	nop
 8002f52:	e7fd      	b.n	8002f50 <UsageFault_Handler+0x4>

08002f54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f62:	b480      	push	{r7}
 8002f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f82:	f000 fc17 	bl	80037b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002f90:	f000 f9ce 	bl	8003330 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002f94:	f000 f98e 	bl	80032b4 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002f98:	2202      	movs	r2, #2
 8002f9a:	2103      	movs	r1, #3
 8002f9c:	2082      	movs	r0, #130	@ 0x82
 8002f9e:	f000 fa1b 	bl	80033d8 <I2C3_Write>
    HAL_Delay(5);
 8002fa2:	2005      	movs	r0, #5
 8002fa4:	f000 fc26 	bl	80037f4 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2103      	movs	r1, #3
 8002fac:	2082      	movs	r0, #130	@ 0x82
 8002fae:	f000 fa13 	bl	80033d8 <I2C3_Write>
    HAL_Delay(2);
 8002fb2:	2002      	movs	r0, #2
 8002fb4:	f000 fc1e 	bl	80037f4 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002fb8:	1cba      	adds	r2, r7, #2
 8002fba:	2302      	movs	r3, #2
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	2082      	movs	r0, #130	@ 0x82
 8002fc0:	f000 fa5a 	bl	8003478 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002fc4:	887b      	ldrh	r3, [r7, #2]
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002fca:	887b      	ldrh	r3, [r7, #2]
 8002fcc:	0a1b      	lsrs	r3, r3, #8
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	f640 0211 	movw	r2, #2065	@ 0x811
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d001      	beq.n	8002fe4 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e075      	b.n	80030d0 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	2103      	movs	r1, #3
 8002fe8:	2082      	movs	r0, #130	@ 0x82
 8002fea:	f000 f9f5 	bl	80033d8 <I2C3_Write>
    HAL_Delay(5);
 8002fee:	2005      	movs	r0, #5
 8002ff0:	f000 fc00 	bl	80037f4 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2103      	movs	r1, #3
 8002ff8:	2082      	movs	r0, #130	@ 0x82
 8002ffa:	f000 f9ed 	bl	80033d8 <I2C3_Write>
    HAL_Delay(2);
 8002ffe:	2002      	movs	r0, #2
 8003000:	f000 fbf8 	bl	80037f4 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003004:	2004      	movs	r0, #4
 8003006:	f000 f867 	bl	80030d8 <STMPE811_Read>
 800300a:	4603      	mov	r3, r0
 800300c:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 800300e:	797b      	ldrb	r3, [r7, #5]
 8003010:	f023 0301 	bic.w	r3, r3, #1
 8003014:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003016:	797b      	ldrb	r3, [r7, #5]
 8003018:	461a      	mov	r2, r3
 800301a:	2104      	movs	r1, #4
 800301c:	2082      	movs	r0, #130	@ 0x82
 800301e:	f000 f9db 	bl	80033d8 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003022:	2004      	movs	r0, #4
 8003024:	f000 f858 	bl	80030d8 <STMPE811_Read>
 8003028:	4603      	mov	r3, r0
 800302a:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 800302c:	797b      	ldrb	r3, [r7, #5]
 800302e:	f023 0302 	bic.w	r3, r3, #2
 8003032:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003034:	797b      	ldrb	r3, [r7, #5]
 8003036:	461a      	mov	r2, r3
 8003038:	2104      	movs	r1, #4
 800303a:	2082      	movs	r0, #130	@ 0x82
 800303c:	f000 f9cc 	bl	80033d8 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8003040:	2249      	movs	r2, #73	@ 0x49
 8003042:	2120      	movs	r1, #32
 8003044:	2082      	movs	r0, #130	@ 0x82
 8003046:	f000 f9c7 	bl	80033d8 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 800304a:	2002      	movs	r0, #2
 800304c:	f000 fbd2 	bl	80037f4 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8003050:	2201      	movs	r2, #1
 8003052:	2121      	movs	r1, #33	@ 0x21
 8003054:	2082      	movs	r0, #130	@ 0x82
 8003056:	f000 f9bf 	bl	80033d8 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 800305a:	2017      	movs	r0, #23
 800305c:	f000 f83c 	bl	80030d8 <STMPE811_Read>
 8003060:	4603      	mov	r3, r0
 8003062:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8003064:	797b      	ldrb	r3, [r7, #5]
 8003066:	f043 031e 	orr.w	r3, r3, #30
 800306a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 800306c:	797b      	ldrb	r3, [r7, #5]
 800306e:	461a      	mov	r2, r3
 8003070:	2117      	movs	r1, #23
 8003072:	2082      	movs	r0, #130	@ 0x82
 8003074:	f000 f9b0 	bl	80033d8 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8003078:	229a      	movs	r2, #154	@ 0x9a
 800307a:	2141      	movs	r1, #65	@ 0x41
 800307c:	2082      	movs	r0, #130	@ 0x82
 800307e:	f000 f9ab 	bl	80033d8 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8003082:	2201      	movs	r2, #1
 8003084:	214a      	movs	r1, #74	@ 0x4a
 8003086:	2082      	movs	r0, #130	@ 0x82
 8003088:	f000 f9a6 	bl	80033d8 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800308c:	2201      	movs	r2, #1
 800308e:	214b      	movs	r1, #75	@ 0x4b
 8003090:	2082      	movs	r0, #130	@ 0x82
 8003092:	f000 f9a1 	bl	80033d8 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003096:	2200      	movs	r2, #0
 8003098:	214b      	movs	r1, #75	@ 0x4b
 800309a:	2082      	movs	r0, #130	@ 0x82
 800309c:	f000 f99c 	bl	80033d8 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80030a0:	2201      	movs	r2, #1
 80030a2:	2156      	movs	r1, #86	@ 0x56
 80030a4:	2082      	movs	r0, #130	@ 0x82
 80030a6:	f000 f997 	bl	80033d8 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80030aa:	2201      	movs	r2, #1
 80030ac:	2158      	movs	r1, #88	@ 0x58
 80030ae:	2082      	movs	r0, #130	@ 0x82
 80030b0:	f000 f992 	bl	80033d8 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80030b4:	2203      	movs	r2, #3
 80030b6:	2140      	movs	r1, #64	@ 0x40
 80030b8:	2082      	movs	r0, #130	@ 0x82
 80030ba:	f000 f98d 	bl	80033d8 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80030be:	22ff      	movs	r2, #255	@ 0xff
 80030c0:	210b      	movs	r1, #11
 80030c2:	2082      	movs	r0, #130	@ 0x82
 80030c4:	f000 f988 	bl	80033d8 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 80030c8:	20c8      	movs	r0, #200	@ 0xc8
 80030ca:	f000 fb93 	bl	80037f4 <HAL_Delay>

    return STMPE811_State_Ok;
 80030ce:	2302      	movs	r3, #2

}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 80030e2:	f107 020f 	add.w	r2, r7, #15
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	4619      	mov	r1, r3
 80030ea:	2082      	movs	r0, #130	@ 0x82
 80030ec:	f000 f99e 	bl	800342c <I2C3_Read>

    return readData;
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	791a      	ldrb	r2, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 800310a:	2040      	movs	r0, #64	@ 0x40
 800310c:	f7ff ffe4 	bl	80030d8 <STMPE811_Read>
 8003110:	4603      	mov	r3, r0
 8003112:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8003114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003118:	2b00      	cmp	r3, #0
 800311a:	db0e      	blt.n	800313a <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003122:	2201      	movs	r2, #1
 8003124:	214b      	movs	r1, #75	@ 0x4b
 8003126:	2082      	movs	r0, #130	@ 0x82
 8003128:	f000 f956 	bl	80033d8 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800312c:	2200      	movs	r2, #0
 800312e:	214b      	movs	r1, #75	@ 0x4b
 8003130:	2082      	movs	r0, #130	@ 0x82
 8003132:	f000 f951 	bl	80033d8 <I2C3_Write>

        return STMPE811_State_Released;
 8003136:	2301      	movs	r3, #1
 8003138:	e0a7      	b.n	800328a <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	799b      	ldrb	r3, [r3, #6]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d117      	bne.n	8003172 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f9b8 	bl	80034bc <TM_STMPE811_ReadX>
 800314c:	4603      	mov	r3, r0
 800314e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003152:	b29a      	uxth	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	885b      	ldrh	r3, [r3, #2]
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fa0b 	bl	8003578 <TM_STMPE811_ReadY>
 8003162:	4603      	mov	r3, r0
 8003164:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003168:	3301      	adds	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	805a      	strh	r2, [r3, #2]
 8003170:	e048      	b.n	8003204 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	799b      	ldrb	r3, [r3, #6]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d112      	bne.n	80031a0 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f000 f99c 	bl	80034bc <TM_STMPE811_ReadX>
 8003184:	4603      	mov	r3, r0
 8003186:	461a      	mov	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	885b      	ldrh	r3, [r3, #2]
 8003190:	4618      	mov	r0, r3
 8003192:	f000 f9f1 	bl	8003578 <TM_STMPE811_ReadY>
 8003196:	4603      	mov	r3, r0
 8003198:	461a      	mov	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	805a      	strh	r2, [r3, #2]
 800319e:	e031      	b.n	8003204 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	799b      	ldrb	r3, [r3, #6]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d115      	bne.n	80031d4 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	885b      	ldrh	r3, [r3, #2]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 f985 	bl	80034bc <TM_STMPE811_ReadX>
 80031b2:	4603      	mov	r3, r0
 80031b4:	461a      	mov	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 f9da 	bl	8003578 <TM_STMPE811_ReadY>
 80031c4:	4603      	mov	r3, r0
 80031c6:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80031ca:	3301      	adds	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	801a      	strh	r2, [r3, #0]
 80031d2:	e017      	b.n	8003204 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	799b      	ldrb	r3, [r3, #6]
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d113      	bne.n	8003204 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 f96b 	bl	80034bc <TM_STMPE811_ReadX>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f9be 	bl	8003578 <TM_STMPE811_ReadY>
 80031fc:	4603      	mov	r3, r0
 80031fe:	461a      	mov	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003204:	2201      	movs	r2, #1
 8003206:	214b      	movs	r1, #75	@ 0x4b
 8003208:	2082      	movs	r0, #130	@ 0x82
 800320a:	f000 f8e5 	bl	80033d8 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800320e:	2200      	movs	r2, #0
 8003210:	214b      	movs	r1, #75	@ 0x4b
 8003212:	2082      	movs	r0, #130	@ 0x82
 8003214:	f000 f8e0 	bl	80033d8 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	799b      	ldrb	r3, [r3, #6]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <STMPE811_ReadTouch+0x12e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	799b      	ldrb	r3, [r3, #6]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d115      	bne.n	8003254 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d027      	beq.n	8003280 <STMPE811_ReadTouch+0x186>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	2bee      	cmp	r3, #238	@ 0xee
 8003236:	d823      	bhi.n	8003280 <STMPE811_ReadTouch+0x186>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	885b      	ldrh	r3, [r3, #2]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01f      	beq.n	8003280 <STMPE811_ReadTouch+0x186>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	885b      	ldrh	r3, [r3, #2]
 8003244:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8003248:	d81a      	bhi.n	8003280 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8003250:	2300      	movs	r3, #0
 8003252:	e01a      	b.n	800328a <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d012      	beq.n	8003282 <STMPE811_ReadTouch+0x188>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8003264:	d80d      	bhi.n	8003282 <STMPE811_ReadTouch+0x188>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	885b      	ldrh	r3, [r3, #2]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d009      	beq.n	8003282 <STMPE811_ReadTouch+0x188>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	885b      	ldrh	r3, [r3, #2]
 8003272:	2bee      	cmp	r3, #238	@ 0xee
 8003274:	d805      	bhi.n	8003282 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 800327c:	2300      	movs	r3, #0
 800327e:	e004      	b.n	800328a <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8003280:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8003288:	2301      	movs	r3, #1
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8003298:	4b05      	ldr	r3, [pc, #20]	@ (80032b0 <verifyHAL_I2C_IS_OKAY+0x1c>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80032a0:	bf00      	nop
 80032a2:	e7fd      	b.n	80032a0 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	20025c64 	.word	0x20025c64

080032b4 <I2C3_Init>:

static void I2C3_Init()
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	4b18      	ldr	r3, [pc, #96]	@ (8003320 <I2C3_Init+0x6c>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c2:	4a17      	ldr	r2, [pc, #92]	@ (8003320 <I2C3_Init+0x6c>)
 80032c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ca:	4b15      	ldr	r3, [pc, #84]	@ (8003320 <I2C3_Init+0x6c>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80032d6:	4b13      	ldr	r3, [pc, #76]	@ (8003324 <I2C3_Init+0x70>)
 80032d8:	4a13      	ldr	r2, [pc, #76]	@ (8003328 <I2C3_Init+0x74>)
 80032da:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80032dc:	4b11      	ldr	r3, [pc, #68]	@ (8003324 <I2C3_Init+0x70>)
 80032de:	4a13      	ldr	r2, [pc, #76]	@ (800332c <I2C3_Init+0x78>)
 80032e0:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80032e2:	4b10      	ldr	r3, [pc, #64]	@ (8003324 <I2C3_Init+0x70>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80032e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003324 <I2C3_Init+0x70>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003324 <I2C3_Init+0x70>)
 80032f0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80032f4:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80032f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003324 <I2C3_Init+0x70>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032fc:	4b09      	ldr	r3, [pc, #36]	@ (8003324 <I2C3_Init+0x70>)
 80032fe:	2200      	movs	r2, #0
 8003300:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8003302:	4808      	ldr	r0, [pc, #32]	@ (8003324 <I2C3_Init+0x70>)
 8003304:	f000 feb0 	bl	8004068 <HAL_I2C_Init>
 8003308:	4603      	mov	r3, r0
 800330a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8003312:	bf00      	nop
 8003314:	e7fd      	b.n	8003312 <I2C3_Init+0x5e>
    }
    return;
 8003316:	bf00      	nop
}
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800
 8003324:	20025c10 	.word	0x20025c10
 8003328:	40005c00 	.word	0x40005c00
 800332c:	000186a0 	.word	0x000186a0

08003330 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003336:	f107 030c 	add.w	r3, r7, #12
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	605a      	str	r2, [r3, #4]
 8003340:	609a      	str	r2, [r3, #8]
 8003342:	60da      	str	r2, [r3, #12]
 8003344:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	4b20      	ldr	r3, [pc, #128]	@ (80033cc <I2C3_MspInit+0x9c>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334e:	4a1f      	ldr	r2, [pc, #124]	@ (80033cc <I2C3_MspInit+0x9c>)
 8003350:	f043 0304 	orr.w	r3, r3, #4
 8003354:	6313      	str	r3, [r2, #48]	@ 0x30
 8003356:	4b1d      	ldr	r3, [pc, #116]	@ (80033cc <I2C3_MspInit+0x9c>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	60bb      	str	r3, [r7, #8]
 8003360:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	4b19      	ldr	r3, [pc, #100]	@ (80033cc <I2C3_MspInit+0x9c>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336a:	4a18      	ldr	r2, [pc, #96]	@ (80033cc <I2C3_MspInit+0x9c>)
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	6313      	str	r3, [r2, #48]	@ 0x30
 8003372:	4b16      	ldr	r3, [pc, #88]	@ (80033cc <I2C3_MspInit+0x9c>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	607b      	str	r3, [r7, #4]
 800337c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800337e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003382:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003384:	2312      	movs	r3, #18
 8003386:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338c:	2300      	movs	r3, #0
 800338e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003390:	2304      	movs	r3, #4
 8003392:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003394:	f107 030c 	add.w	r3, r7, #12
 8003398:	4619      	mov	r1, r3
 800339a:	480d      	ldr	r0, [pc, #52]	@ (80033d0 <I2C3_MspInit+0xa0>)
 800339c:	f000 fb92 	bl	8003ac4 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80033a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033a6:	2312      	movs	r3, #18
 80033a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80033b2:	2304      	movs	r3, #4
 80033b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80033b6:	f107 030c 	add.w	r3, r7, #12
 80033ba:	4619      	mov	r1, r3
 80033bc:	4805      	ldr	r0, [pc, #20]	@ (80033d4 <I2C3_MspInit+0xa4>)
 80033be:	f000 fb81 	bl	8003ac4 <HAL_GPIO_Init>
    
}
 80033c2:	bf00      	nop
 80033c4:	3720      	adds	r7, #32
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40020800 	.word	0x40020800
 80033d4:	40020000 	.word	0x40020000

080033d8 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af04      	add	r7, sp, #16
 80033de:	4603      	mov	r3, r0
 80033e0:	80fb      	strh	r3, [r7, #6]
 80033e2:	460b      	mov	r3, r1
 80033e4:	717b      	strb	r3, [r7, #5]
 80033e6:	4613      	mov	r3, r2
 80033e8:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80033ea:	793b      	ldrb	r3, [r7, #4]
 80033ec:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80033ee:	797b      	ldrb	r3, [r7, #5]
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	88f9      	ldrh	r1, [r7, #6]
 80033f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003420 <I2C3_Write+0x48>)
 80033f6:	9302      	str	r3, [sp, #8]
 80033f8:	2301      	movs	r3, #1
 80033fa:	9301      	str	r3, [sp, #4]
 80033fc:	f107 030f 	add.w	r3, r7, #15
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	2301      	movs	r3, #1
 8003404:	4807      	ldr	r0, [pc, #28]	@ (8003424 <I2C3_Write+0x4c>)
 8003406:	f000 ff73 	bl	80042f0 <HAL_I2C_Mem_Write>
 800340a:	4603      	mov	r3, r0
 800340c:	461a      	mov	r2, r3
 800340e:	4b06      	ldr	r3, [pc, #24]	@ (8003428 <I2C3_Write+0x50>)
 8003410:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003412:	f7ff ff3f 	bl	8003294 <verifyHAL_I2C_IS_OKAY>
}
 8003416:	bf00      	nop
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	0003d090 	.word	0x0003d090
 8003424:	20025c10 	.word	0x20025c10
 8003428:	20025c64 	.word	0x20025c64

0800342c <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af04      	add	r7, sp, #16
 8003432:	4603      	mov	r3, r0
 8003434:	603a      	str	r2, [r7, #0]
 8003436:	71fb      	strb	r3, [r7, #7]
 8003438:	460b      	mov	r3, r1
 800343a:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	b299      	uxth	r1, r3
 8003440:	79bb      	ldrb	r3, [r7, #6]
 8003442:	b29a      	uxth	r2, r3
 8003444:	4b09      	ldr	r3, [pc, #36]	@ (800346c <I2C3_Read+0x40>)
 8003446:	9302      	str	r3, [sp, #8]
 8003448:	2301      	movs	r3, #1
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	2301      	movs	r3, #1
 8003452:	4807      	ldr	r0, [pc, #28]	@ (8003470 <I2C3_Read+0x44>)
 8003454:	f001 f846 	bl	80044e4 <HAL_I2C_Mem_Read>
 8003458:	4603      	mov	r3, r0
 800345a:	461a      	mov	r2, r3
 800345c:	4b05      	ldr	r3, [pc, #20]	@ (8003474 <I2C3_Read+0x48>)
 800345e:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003460:	f7ff ff18 	bl	8003294 <verifyHAL_I2C_IS_OKAY>
}
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	0003d090 	.word	0x0003d090
 8003470:	20025c10 	.word	0x20025c10
 8003474:	20025c64 	.word	0x20025c64

08003478 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af04      	add	r7, sp, #16
 800347e:	603a      	str	r2, [r7, #0]
 8003480:	461a      	mov	r2, r3
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
 8003486:	460b      	mov	r3, r1
 8003488:	71bb      	strb	r3, [r7, #6]
 800348a:	4613      	mov	r3, r2
 800348c:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	b299      	uxth	r1, r3
 8003492:	79bb      	ldrb	r3, [r7, #6]
 8003494:	b29a      	uxth	r2, r3
 8003496:	4b07      	ldr	r3, [pc, #28]	@ (80034b4 <I2C3_MulitByteRead+0x3c>)
 8003498:	9302      	str	r3, [sp, #8]
 800349a:	88bb      	ldrh	r3, [r7, #4]
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	2301      	movs	r3, #1
 80034a4:	4804      	ldr	r0, [pc, #16]	@ (80034b8 <I2C3_MulitByteRead+0x40>)
 80034a6:	f001 f81d 	bl	80044e4 <HAL_I2C_Mem_Read>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	0003d090 	.word	0x0003d090
 80034b8:	20025c10 	.word	0x20025c10

080034bc <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80034c6:	204d      	movs	r0, #77	@ 0x4d
 80034c8:	f7ff fe06 	bl	80030d8 <STMPE811_Read>
 80034cc:	4603      	mov	r3, r0
 80034ce:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80034d0:	204e      	movs	r0, #78	@ 0x4e
 80034d2:	f7ff fe01 	bl	80030d8 <STMPE811_Read>
 80034d6:	4603      	mov	r3, r0
 80034d8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80034da:	7a7b      	ldrb	r3, [r7, #9]
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	b21a      	sxth	r2, r3
 80034e0:	7a3b      	ldrb	r3, [r7, #8]
 80034e2:	b21b      	sxth	r3, r3
 80034e4:	4313      	orrs	r3, r2
 80034e6:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80034e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034ec:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80034f0:	4293      	cmp	r3, r2
 80034f2:	dc06      	bgt.n	8003502 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 80034f4:	89fb      	ldrh	r3, [r7, #14]
 80034f6:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80034fa:	330c      	adds	r3, #12
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	81fb      	strh	r3, [r7, #14]
 8003500:	e005      	b.n	800350e <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8003502:	89fb      	ldrh	r3, [r7, #14]
 8003504:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8003508:	3308      	adds	r3, #8
 800350a:	b29b      	uxth	r3, r3
 800350c:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 800350e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003512:	4a18      	ldr	r2, [pc, #96]	@ (8003574 <TM_STMPE811_ReadX+0xb8>)
 8003514:	fb82 1203 	smull	r1, r2, r2, r3
 8003518:	441a      	add	r2, r3
 800351a:	10d2      	asrs	r2, r2, #3
 800351c:	17db      	asrs	r3, r3, #31
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8003522:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003526:	2bef      	cmp	r3, #239	@ 0xef
 8003528:	dd02      	ble.n	8003530 <TM_STMPE811_ReadX+0x74>
        val = 239;
 800352a:	23ef      	movs	r3, #239	@ 0xef
 800352c:	81fb      	strh	r3, [r7, #14]
 800352e:	e005      	b.n	800353c <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8003530:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003534:	2b00      	cmp	r3, #0
 8003536:	da01      	bge.n	800353c <TM_STMPE811_ReadX+0x80>
        val = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 800353c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	429a      	cmp	r2, r3
 8003544:	dd05      	ble.n	8003552 <TM_STMPE811_ReadX+0x96>
 8003546:	89fa      	ldrh	r2, [r7, #14]
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	b29b      	uxth	r3, r3
 800354e:	b21b      	sxth	r3, r3
 8003550:	e004      	b.n	800355c <TM_STMPE811_ReadX+0xa0>
 8003552:	89fb      	ldrh	r3, [r7, #14]
 8003554:	88fa      	ldrh	r2, [r7, #6]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	b29b      	uxth	r3, r3
 800355a:	b21b      	sxth	r3, r3
 800355c:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 800355e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003562:	2b04      	cmp	r3, #4
 8003564:	dd01      	ble.n	800356a <TM_STMPE811_ReadX+0xae>
        return val;
 8003566:	89fb      	ldrh	r3, [r7, #14]
 8003568:	e000      	b.n	800356c <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 800356a:	88fb      	ldrh	r3, [r7, #6]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	88888889 	.word	0x88888889

08003578 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8003582:	204f      	movs	r0, #79	@ 0x4f
 8003584:	f7ff fda8 	bl	80030d8 <STMPE811_Read>
 8003588:	4603      	mov	r3, r0
 800358a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 800358c:	2050      	movs	r0, #80	@ 0x50
 800358e:	f7ff fda3 	bl	80030d8 <STMPE811_Read>
 8003592:	4603      	mov	r3, r0
 8003594:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003596:	7a7b      	ldrb	r3, [r7, #9]
 8003598:	021b      	lsls	r3, r3, #8
 800359a:	b21a      	sxth	r2, r3
 800359c:	7a3b      	ldrb	r3, [r7, #8]
 800359e:	b21b      	sxth	r3, r3
 80035a0:	4313      	orrs	r3, r2
 80035a2:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80035a4:	89fb      	ldrh	r3, [r7, #14]
 80035a6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80035ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035b2:	4a19      	ldr	r2, [pc, #100]	@ (8003618 <TM_STMPE811_ReadY+0xa0>)
 80035b4:	fb82 1203 	smull	r1, r2, r2, r3
 80035b8:	1052      	asrs	r2, r2, #1
 80035ba:	17db      	asrs	r3, r3, #31
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80035c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	dc02      	bgt.n	80035ce <TM_STMPE811_ReadY+0x56>
        val = 0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	81fb      	strh	r3, [r7, #14]
 80035cc:	e007      	b.n	80035de <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 80035ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035d2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80035d6:	db02      	blt.n	80035de <TM_STMPE811_ReadY+0x66>
        val = 319;
 80035d8:	f240 133f 	movw	r3, #319	@ 0x13f
 80035dc:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80035de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	dd05      	ble.n	80035f4 <TM_STMPE811_ReadY+0x7c>
 80035e8:	89fa      	ldrh	r2, [r7, #14]
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	b21b      	sxth	r3, r3
 80035f2:	e004      	b.n	80035fe <TM_STMPE811_ReadY+0x86>
 80035f4:	89fb      	ldrh	r3, [r7, #14]
 80035f6:	88fa      	ldrh	r2, [r7, #6]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	b21b      	sxth	r3, r3
 80035fe:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003600:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003604:	2b04      	cmp	r3, #4
 8003606:	dd01      	ble.n	800360c <TM_STMPE811_ReadY+0x94>
        return val;
 8003608:	89fb      	ldrh	r3, [r7, #14]
 800360a:	e000      	b.n	800360e <TM_STMPE811_ReadY+0x96>
    }
    return y;
 800360c:	88fb      	ldrh	r3, [r7, #6]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	2e8ba2e9 	.word	0x2e8ba2e9

0800361c <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003634:	4a14      	ldr	r2, [pc, #80]	@ (8003688 <_sbrk+0x5c>)
 8003636:	4b15      	ldr	r3, [pc, #84]	@ (800368c <_sbrk+0x60>)
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003640:	4b13      	ldr	r3, [pc, #76]	@ (8003690 <_sbrk+0x64>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d102      	bne.n	800364e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003648:	4b11      	ldr	r3, [pc, #68]	@ (8003690 <_sbrk+0x64>)
 800364a:	4a12      	ldr	r2, [pc, #72]	@ (8003694 <_sbrk+0x68>)
 800364c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800364e:	4b10      	ldr	r3, [pc, #64]	@ (8003690 <_sbrk+0x64>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4413      	add	r3, r2
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	429a      	cmp	r2, r3
 800365a:	d207      	bcs.n	800366c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800365c:	f003 fc98 	bl	8006f90 <__errno>
 8003660:	4603      	mov	r3, r0
 8003662:	220c      	movs	r2, #12
 8003664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003666:	f04f 33ff 	mov.w	r3, #4294967295
 800366a:	e009      	b.n	8003680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800366c:	4b08      	ldr	r3, [pc, #32]	@ (8003690 <_sbrk+0x64>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003672:	4b07      	ldr	r3, [pc, #28]	@ (8003690 <_sbrk+0x64>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4413      	add	r3, r2
 800367a:	4a05      	ldr	r2, [pc, #20]	@ (8003690 <_sbrk+0x64>)
 800367c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800367e:	68fb      	ldr	r3, [r7, #12]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	20030000 	.word	0x20030000
 800368c:	00000400 	.word	0x00000400
 8003690:	20025c68 	.word	0x20025c68
 8003694:	20025db8 	.word	0x20025db8

08003698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800369c:	4b06      	ldr	r3, [pc, #24]	@ (80036b8 <SystemInit+0x20>)
 800369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a2:	4a05      	ldr	r2, [pc, #20]	@ (80036b8 <SystemInit+0x20>)
 80036a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <Reset_Handler>:





  ldr   sp, =_estack       /* set stack pointer */
 80036bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036c0:	f7ff ffea 	bl	8003698 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036c4:	480c      	ldr	r0, [pc, #48]	@ (80036f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036c6:	490d      	ldr	r1, [pc, #52]	@ (80036fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003700 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036cc:	e002      	b.n	80036d4 <LoopCopyDataInit>

080036ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036d2:	3304      	adds	r3, #4

080036d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036d8:	d3f9      	bcc.n	80036ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036da:	4a0a      	ldr	r2, [pc, #40]	@ (8003704 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036dc:	4c0a      	ldr	r4, [pc, #40]	@ (8003708 <LoopFillZerobss+0x22>)
  movs r3, #0
 80036de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036e0:	e001      	b.n	80036e6 <LoopFillZerobss>

080036e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036e4:	3204      	adds	r2, #4

080036e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036e8:	d3fb      	bcc.n	80036e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80036ea:	f003 fc57 	bl	8006f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036ee:	f7fe fdb6 	bl	800225e <main>
  bx  lr    
 80036f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80036f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80036f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036fc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8003700:	08008acc 	.word	0x08008acc
  ldr r2, =_sbss
 8003704:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8003708:	20025db8 	.word	0x20025db8

0800370c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800370c:	e7fe      	b.n	800370c <ADC_IRQHandler>
	...

08003710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003714:	4b0e      	ldr	r3, [pc, #56]	@ (8003750 <HAL_Init+0x40>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a0d      	ldr	r2, [pc, #52]	@ (8003750 <HAL_Init+0x40>)
 800371a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800371e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003720:	4b0b      	ldr	r3, [pc, #44]	@ (8003750 <HAL_Init+0x40>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a0a      	ldr	r2, [pc, #40]	@ (8003750 <HAL_Init+0x40>)
 8003726:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800372a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800372c:	4b08      	ldr	r3, [pc, #32]	@ (8003750 <HAL_Init+0x40>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a07      	ldr	r2, [pc, #28]	@ (8003750 <HAL_Init+0x40>)
 8003732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003736:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003738:	2003      	movs	r0, #3
 800373a:	f000 f973 	bl	8003a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800373e:	2000      	movs	r0, #0
 8003740:	f000 f808 	bl	8003754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003744:	f7ff f990 	bl	8002a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40023c00 	.word	0x40023c00

08003754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800375c:	4b12      	ldr	r3, [pc, #72]	@ (80037a8 <HAL_InitTick+0x54>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	4b12      	ldr	r3, [pc, #72]	@ (80037ac <HAL_InitTick+0x58>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	4619      	mov	r1, r3
 8003766:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800376a:	fbb3 f3f1 	udiv	r3, r3, r1
 800376e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003772:	4618      	mov	r0, r3
 8003774:	f000 f999 	bl	8003aaa <HAL_SYSTICK_Config>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e00e      	b.n	80037a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b0f      	cmp	r3, #15
 8003786:	d80a      	bhi.n	800379e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003788:	2200      	movs	r2, #0
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	f04f 30ff 	mov.w	r0, #4294967295
 8003790:	f000 f953 	bl	8003a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003794:	4a06      	ldr	r2, [pc, #24]	@ (80037b0 <HAL_InitTick+0x5c>)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	e000      	b.n	80037a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	20000010 	.word	0x20000010
 80037ac:	20000018 	.word	0x20000018
 80037b0:	20000014 	.word	0x20000014

080037b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037b8:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <HAL_IncTick+0x20>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <HAL_IncTick+0x24>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4413      	add	r3, r2
 80037c4:	4a04      	ldr	r2, [pc, #16]	@ (80037d8 <HAL_IncTick+0x24>)
 80037c6:	6013      	str	r3, [r2, #0]
}
 80037c8:	bf00      	nop
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20000018 	.word	0x20000018
 80037d8:	20025c6c 	.word	0x20025c6c

080037dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return uwTick;
 80037e0:	4b03      	ldr	r3, [pc, #12]	@ (80037f0 <HAL_GetTick+0x14>)
 80037e2:	681b      	ldr	r3, [r3, #0]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20025c6c 	.word	0x20025c6c

080037f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037fc:	f7ff ffee 	bl	80037dc <HAL_GetTick>
 8003800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d005      	beq.n	800381a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800380e:	4b0a      	ldr	r3, [pc, #40]	@ (8003838 <HAL_Delay+0x44>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	461a      	mov	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4413      	add	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800381a:	bf00      	nop
 800381c:	f7ff ffde 	bl	80037dc <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	429a      	cmp	r2, r3
 800382a:	d8f7      	bhi.n	800381c <HAL_Delay+0x28>
  {
  }
}
 800382c:	bf00      	nop
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20000018 	.word	0x20000018

0800383c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800384c:	4b0c      	ldr	r3, [pc, #48]	@ (8003880 <__NVIC_SetPriorityGrouping+0x44>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003858:	4013      	ands	r3, r2
 800385a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003864:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800386c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800386e:	4a04      	ldr	r2, [pc, #16]	@ (8003880 <__NVIC_SetPriorityGrouping+0x44>)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	60d3      	str	r3, [r2, #12]
}
 8003874:	bf00      	nop
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	e000ed00 	.word	0xe000ed00

08003884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003888:	4b04      	ldr	r3, [pc, #16]	@ (800389c <__NVIC_GetPriorityGrouping+0x18>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	0a1b      	lsrs	r3, r3, #8
 800388e:	f003 0307 	and.w	r3, r3, #7
}
 8003892:	4618      	mov	r0, r3
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	e000ed00 	.word	0xe000ed00

080038a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	db0b      	blt.n	80038ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	f003 021f 	and.w	r2, r3, #31
 80038b8:	4907      	ldr	r1, [pc, #28]	@ (80038d8 <__NVIC_EnableIRQ+0x38>)
 80038ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	2001      	movs	r0, #1
 80038c2:	fa00 f202 	lsl.w	r2, r0, r2
 80038c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	e000e100 	.word	0xe000e100

080038dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	4603      	mov	r3, r0
 80038e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	db12      	blt.n	8003914 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	f003 021f 	and.w	r2, r3, #31
 80038f4:	490a      	ldr	r1, [pc, #40]	@ (8003920 <__NVIC_DisableIRQ+0x44>)
 80038f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	2001      	movs	r0, #1
 80038fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003902:	3320      	adds	r3, #32
 8003904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003908:	f3bf 8f4f 	dsb	sy
}
 800390c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800390e:	f3bf 8f6f 	isb	sy
}
 8003912:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	e000e100 	.word	0xe000e100

08003924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	6039      	str	r1, [r7, #0]
 800392e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003934:	2b00      	cmp	r3, #0
 8003936:	db0a      	blt.n	800394e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	490c      	ldr	r1, [pc, #48]	@ (8003970 <__NVIC_SetPriority+0x4c>)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	0112      	lsls	r2, r2, #4
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	440b      	add	r3, r1
 8003948:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800394c:	e00a      	b.n	8003964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	4908      	ldr	r1, [pc, #32]	@ (8003974 <__NVIC_SetPriority+0x50>)
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	3b04      	subs	r3, #4
 800395c:	0112      	lsls	r2, r2, #4
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	440b      	add	r3, r1
 8003962:	761a      	strb	r2, [r3, #24]
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000e100 	.word	0xe000e100
 8003974:	e000ed00 	.word	0xe000ed00

08003978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003978:	b480      	push	{r7}
 800397a:	b089      	sub	sp, #36	@ 0x24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f1c3 0307 	rsb	r3, r3, #7
 8003992:	2b04      	cmp	r3, #4
 8003994:	bf28      	it	cs
 8003996:	2304      	movcs	r3, #4
 8003998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	3304      	adds	r3, #4
 800399e:	2b06      	cmp	r3, #6
 80039a0:	d902      	bls.n	80039a8 <NVIC_EncodePriority+0x30>
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	3b03      	subs	r3, #3
 80039a6:	e000      	b.n	80039aa <NVIC_EncodePriority+0x32>
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ac:	f04f 32ff 	mov.w	r2, #4294967295
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43da      	mvns	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	401a      	ands	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039c0:	f04f 31ff 	mov.w	r1, #4294967295
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ca:	43d9      	mvns	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d0:	4313      	orrs	r3, r2
         );
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3724      	adds	r7, #36	@ 0x24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
	...

080039e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039f0:	d301      	bcc.n	80039f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039f2:	2301      	movs	r3, #1
 80039f4:	e00f      	b.n	8003a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003a20 <SysTick_Config+0x40>)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039fe:	210f      	movs	r1, #15
 8003a00:	f04f 30ff 	mov.w	r0, #4294967295
 8003a04:	f7ff ff8e 	bl	8003924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a08:	4b05      	ldr	r3, [pc, #20]	@ (8003a20 <SysTick_Config+0x40>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a0e:	4b04      	ldr	r3, [pc, #16]	@ (8003a20 <SysTick_Config+0x40>)
 8003a10:	2207      	movs	r2, #7
 8003a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	e000e010 	.word	0xe000e010

08003a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff ff05 	bl	800383c <__NVIC_SetPriorityGrouping>
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b086      	sub	sp, #24
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	4603      	mov	r3, r0
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
 8003a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a4c:	f7ff ff1a 	bl	8003884 <__NVIC_GetPriorityGrouping>
 8003a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	6978      	ldr	r0, [r7, #20]
 8003a58:	f7ff ff8e 	bl	8003978 <NVIC_EncodePriority>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a62:	4611      	mov	r1, r2
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff ff5d 	bl	8003924 <__NVIC_SetPriority>
}
 8003a6a:	bf00      	nop
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	4603      	mov	r3, r0
 8003a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff ff0d 	bl	80038a0 <__NVIC_EnableIRQ>
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	4603      	mov	r3, r0
 8003a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff ff1d 	bl	80038dc <__NVIC_DisableIRQ>
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff ff94 	bl	80039e0 <SysTick_Config>
 8003ab8:	4603      	mov	r3, r0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
	...

08003ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	@ 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ada:	2300      	movs	r3, #0
 8003adc:	61fb      	str	r3, [r7, #28]
 8003ade:	e177      	b.n	8003dd0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4013      	ands	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	f040 8166 	bne.w	8003dca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d005      	beq.n	8003b16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d130      	bne.n	8003b78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	2203      	movs	r2, #3
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43db      	mvns	r3, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 0201 	and.w	r2, r3, #1
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d017      	beq.n	8003bb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	2203      	movs	r2, #3
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d123      	bne.n	8003c08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	08da      	lsrs	r2, r3, #3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3208      	adds	r2, #8
 8003bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	220f      	movs	r2, #15
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	08da      	lsrs	r2, r3, #3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3208      	adds	r2, #8
 8003c02:	69b9      	ldr	r1, [r7, #24]
 8003c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	2203      	movs	r2, #3
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 0203 	and.w	r2, r3, #3
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80c0 	beq.w	8003dca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	4b66      	ldr	r3, [pc, #408]	@ (8003de8 <HAL_GPIO_Init+0x324>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c52:	4a65      	ldr	r2, [pc, #404]	@ (8003de8 <HAL_GPIO_Init+0x324>)
 8003c54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c58:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c5a:	4b63      	ldr	r3, [pc, #396]	@ (8003de8 <HAL_GPIO_Init+0x324>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c66:	4a61      	ldr	r2, [pc, #388]	@ (8003dec <HAL_GPIO_Init+0x328>)
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	3302      	adds	r3, #2
 8003c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	220f      	movs	r2, #15
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a58      	ldr	r2, [pc, #352]	@ (8003df0 <HAL_GPIO_Init+0x32c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d037      	beq.n	8003d02 <HAL_GPIO_Init+0x23e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a57      	ldr	r2, [pc, #348]	@ (8003df4 <HAL_GPIO_Init+0x330>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d031      	beq.n	8003cfe <HAL_GPIO_Init+0x23a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a56      	ldr	r2, [pc, #344]	@ (8003df8 <HAL_GPIO_Init+0x334>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d02b      	beq.n	8003cfa <HAL_GPIO_Init+0x236>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a55      	ldr	r2, [pc, #340]	@ (8003dfc <HAL_GPIO_Init+0x338>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d025      	beq.n	8003cf6 <HAL_GPIO_Init+0x232>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a54      	ldr	r2, [pc, #336]	@ (8003e00 <HAL_GPIO_Init+0x33c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d01f      	beq.n	8003cf2 <HAL_GPIO_Init+0x22e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a53      	ldr	r2, [pc, #332]	@ (8003e04 <HAL_GPIO_Init+0x340>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d019      	beq.n	8003cee <HAL_GPIO_Init+0x22a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a52      	ldr	r2, [pc, #328]	@ (8003e08 <HAL_GPIO_Init+0x344>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d013      	beq.n	8003cea <HAL_GPIO_Init+0x226>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a51      	ldr	r2, [pc, #324]	@ (8003e0c <HAL_GPIO_Init+0x348>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00d      	beq.n	8003ce6 <HAL_GPIO_Init+0x222>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a50      	ldr	r2, [pc, #320]	@ (8003e10 <HAL_GPIO_Init+0x34c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d007      	beq.n	8003ce2 <HAL_GPIO_Init+0x21e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a4f      	ldr	r2, [pc, #316]	@ (8003e14 <HAL_GPIO_Init+0x350>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <HAL_GPIO_Init+0x21a>
 8003cda:	2309      	movs	r3, #9
 8003cdc:	e012      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003cde:	230a      	movs	r3, #10
 8003ce0:	e010      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003ce2:	2308      	movs	r3, #8
 8003ce4:	e00e      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003ce6:	2307      	movs	r3, #7
 8003ce8:	e00c      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003cea:	2306      	movs	r3, #6
 8003cec:	e00a      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003cee:	2305      	movs	r3, #5
 8003cf0:	e008      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003cf2:	2304      	movs	r3, #4
 8003cf4:	e006      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e004      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e002      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003d02:	2300      	movs	r3, #0
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	f002 0203 	and.w	r2, r2, #3
 8003d0a:	0092      	lsls	r2, r2, #2
 8003d0c:	4093      	lsls	r3, r2
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d14:	4935      	ldr	r1, [pc, #212]	@ (8003dec <HAL_GPIO_Init+0x328>)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	089b      	lsrs	r3, r3, #2
 8003d1a:	3302      	adds	r3, #2
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d22:	4b3d      	ldr	r3, [pc, #244]	@ (8003e18 <HAL_GPIO_Init+0x354>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d46:	4a34      	ldr	r2, [pc, #208]	@ (8003e18 <HAL_GPIO_Init+0x354>)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d4c:	4b32      	ldr	r3, [pc, #200]	@ (8003e18 <HAL_GPIO_Init+0x354>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	43db      	mvns	r3, r3
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d70:	4a29      	ldr	r2, [pc, #164]	@ (8003e18 <HAL_GPIO_Init+0x354>)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d76:	4b28      	ldr	r3, [pc, #160]	@ (8003e18 <HAL_GPIO_Init+0x354>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4013      	ands	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003e18 <HAL_GPIO_Init+0x354>)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003da0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e18 <HAL_GPIO_Init+0x354>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	43db      	mvns	r3, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dc4:	4a14      	ldr	r2, [pc, #80]	@ (8003e18 <HAL_GPIO_Init+0x354>)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	61fb      	str	r3, [r7, #28]
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	2b0f      	cmp	r3, #15
 8003dd4:	f67f ae84 	bls.w	8003ae0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	3724      	adds	r7, #36	@ 0x24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40023800 	.word	0x40023800
 8003dec:	40013800 	.word	0x40013800
 8003df0:	40020000 	.word	0x40020000
 8003df4:	40020400 	.word	0x40020400
 8003df8:	40020800 	.word	0x40020800
 8003dfc:	40020c00 	.word	0x40020c00
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40021400 	.word	0x40021400
 8003e08:	40021800 	.word	0x40021800
 8003e0c:	40021c00 	.word	0x40021c00
 8003e10:	40022000 	.word	0x40022000
 8003e14:	40022400 	.word	0x40022400
 8003e18:	40013c00 	.word	0x40013c00

08003e1c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	e0d9      	b.n	8003fec <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e38:	2201      	movs	r2, #1
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4013      	ands	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	f040 80c9 	bne.w	8003fe6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003e54:	4a6b      	ldr	r2, [pc, #428]	@ (8004004 <HAL_GPIO_DeInit+0x1e8>)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	089b      	lsrs	r3, r3, #2
 8003e5a:	3302      	adds	r3, #2
 8003e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e60:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	220f      	movs	r2, #15
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	4013      	ands	r3, r2
 8003e74:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a63      	ldr	r2, [pc, #396]	@ (8004008 <HAL_GPIO_DeInit+0x1ec>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d037      	beq.n	8003eee <HAL_GPIO_DeInit+0xd2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a62      	ldr	r2, [pc, #392]	@ (800400c <HAL_GPIO_DeInit+0x1f0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d031      	beq.n	8003eea <HAL_GPIO_DeInit+0xce>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a61      	ldr	r2, [pc, #388]	@ (8004010 <HAL_GPIO_DeInit+0x1f4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d02b      	beq.n	8003ee6 <HAL_GPIO_DeInit+0xca>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a60      	ldr	r2, [pc, #384]	@ (8004014 <HAL_GPIO_DeInit+0x1f8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d025      	beq.n	8003ee2 <HAL_GPIO_DeInit+0xc6>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a5f      	ldr	r2, [pc, #380]	@ (8004018 <HAL_GPIO_DeInit+0x1fc>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01f      	beq.n	8003ede <HAL_GPIO_DeInit+0xc2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a5e      	ldr	r2, [pc, #376]	@ (800401c <HAL_GPIO_DeInit+0x200>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d019      	beq.n	8003eda <HAL_GPIO_DeInit+0xbe>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a5d      	ldr	r2, [pc, #372]	@ (8004020 <HAL_GPIO_DeInit+0x204>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d013      	beq.n	8003ed6 <HAL_GPIO_DeInit+0xba>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a5c      	ldr	r2, [pc, #368]	@ (8004024 <HAL_GPIO_DeInit+0x208>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00d      	beq.n	8003ed2 <HAL_GPIO_DeInit+0xb6>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a5b      	ldr	r2, [pc, #364]	@ (8004028 <HAL_GPIO_DeInit+0x20c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d007      	beq.n	8003ece <HAL_GPIO_DeInit+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a5a      	ldr	r2, [pc, #360]	@ (800402c <HAL_GPIO_DeInit+0x210>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d101      	bne.n	8003eca <HAL_GPIO_DeInit+0xae>
 8003ec6:	2309      	movs	r3, #9
 8003ec8:	e012      	b.n	8003ef0 <HAL_GPIO_DeInit+0xd4>
 8003eca:	230a      	movs	r3, #10
 8003ecc:	e010      	b.n	8003ef0 <HAL_GPIO_DeInit+0xd4>
 8003ece:	2308      	movs	r3, #8
 8003ed0:	e00e      	b.n	8003ef0 <HAL_GPIO_DeInit+0xd4>
 8003ed2:	2307      	movs	r3, #7
 8003ed4:	e00c      	b.n	8003ef0 <HAL_GPIO_DeInit+0xd4>
 8003ed6:	2306      	movs	r3, #6
 8003ed8:	e00a      	b.n	8003ef0 <HAL_GPIO_DeInit+0xd4>
 8003eda:	2305      	movs	r3, #5
 8003edc:	e008      	b.n	8003ef0 <HAL_GPIO_DeInit+0xd4>
 8003ede:	2304      	movs	r3, #4
 8003ee0:	e006      	b.n	8003ef0 <HAL_GPIO_DeInit+0xd4>
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e004      	b.n	8003ef0 <HAL_GPIO_DeInit+0xd4>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e002      	b.n	8003ef0 <HAL_GPIO_DeInit+0xd4>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <HAL_GPIO_DeInit+0xd4>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	f002 0203 	and.w	r2, r2, #3
 8003ef6:	0092      	lsls	r2, r2, #2
 8003ef8:	4093      	lsls	r3, r2
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d132      	bne.n	8003f66 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003f00:	4b4b      	ldr	r3, [pc, #300]	@ (8004030 <HAL_GPIO_DeInit+0x214>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	43db      	mvns	r3, r3
 8003f08:	4949      	ldr	r1, [pc, #292]	@ (8004030 <HAL_GPIO_DeInit+0x214>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003f0e:	4b48      	ldr	r3, [pc, #288]	@ (8004030 <HAL_GPIO_DeInit+0x214>)
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	43db      	mvns	r3, r3
 8003f16:	4946      	ldr	r1, [pc, #280]	@ (8004030 <HAL_GPIO_DeInit+0x214>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003f1c:	4b44      	ldr	r3, [pc, #272]	@ (8004030 <HAL_GPIO_DeInit+0x214>)
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	43db      	mvns	r3, r3
 8003f24:	4942      	ldr	r1, [pc, #264]	@ (8004030 <HAL_GPIO_DeInit+0x214>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003f2a:	4b41      	ldr	r3, [pc, #260]	@ (8004030 <HAL_GPIO_DeInit+0x214>)
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	43db      	mvns	r3, r3
 8003f32:	493f      	ldr	r1, [pc, #252]	@ (8004030 <HAL_GPIO_DeInit+0x214>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	220f      	movs	r2, #15
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003f48:	4a2e      	ldr	r2, [pc, #184]	@ (8004004 <HAL_GPIO_DeInit+0x1e8>)
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	089b      	lsrs	r3, r3, #2
 8003f4e:	3302      	adds	r3, #2
 8003f50:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	43da      	mvns	r2, r3
 8003f58:	482a      	ldr	r0, [pc, #168]	@ (8004004 <HAL_GPIO_DeInit+0x1e8>)
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	089b      	lsrs	r3, r3, #2
 8003f5e:	400a      	ands	r2, r1
 8003f60:	3302      	adds	r3, #2
 8003f62:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	2103      	movs	r1, #3
 8003f70:	fa01 f303 	lsl.w	r3, r1, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	401a      	ands	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	08da      	lsrs	r2, r3, #3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3208      	adds	r2, #8
 8003f84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	220f      	movs	r2, #15
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	43db      	mvns	r3, r3
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	08d2      	lsrs	r2, r2, #3
 8003f9c:	4019      	ands	r1, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3208      	adds	r2, #8
 8003fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	2103      	movs	r1, #3
 8003fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	401a      	ands	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	2103      	movs	r1, #3
 8003fda:	fa01 f303 	lsl.w	r3, r1, r3
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	401a      	ands	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2b0f      	cmp	r3, #15
 8003ff0:	f67f af22 	bls.w	8003e38 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	371c      	adds	r7, #28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40013800 	.word	0x40013800
 8004008:	40020000 	.word	0x40020000
 800400c:	40020400 	.word	0x40020400
 8004010:	40020800 	.word	0x40020800
 8004014:	40020c00 	.word	0x40020c00
 8004018:	40021000 	.word	0x40021000
 800401c:	40021400 	.word	0x40021400
 8004020:	40021800 	.word	0x40021800
 8004024:	40021c00 	.word	0x40021c00
 8004028:	40022000 	.word	0x40022000
 800402c:	40022400 	.word	0x40022400
 8004030:	40013c00 	.word	0x40013c00

08004034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	807b      	strh	r3, [r7, #2]
 8004040:	4613      	mov	r3, r2
 8004042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004044:	787b      	ldrb	r3, [r7, #1]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800404a:	887a      	ldrh	r2, [r7, #2]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004050:	e003      	b.n	800405a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004052:	887b      	ldrh	r3, [r7, #2]
 8004054:	041a      	lsls	r2, r3, #16
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	619a      	str	r2, [r3, #24]
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
	...

08004068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e12b      	b.n	80042d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7fe fd12 	bl	8002ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2224      	movs	r2, #36	@ 0x24
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0201 	bic.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040cc:	f001 ff82 	bl	8005fd4 <HAL_RCC_GetPCLK1Freq>
 80040d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4a81      	ldr	r2, [pc, #516]	@ (80042dc <HAL_I2C_Init+0x274>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d807      	bhi.n	80040ec <HAL_I2C_Init+0x84>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4a80      	ldr	r2, [pc, #512]	@ (80042e0 <HAL_I2C_Init+0x278>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	bf94      	ite	ls
 80040e4:	2301      	movls	r3, #1
 80040e6:	2300      	movhi	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	e006      	b.n	80040fa <HAL_I2C_Init+0x92>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4a7d      	ldr	r2, [pc, #500]	@ (80042e4 <HAL_I2C_Init+0x27c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	bf94      	ite	ls
 80040f4:	2301      	movls	r3, #1
 80040f6:	2300      	movhi	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e0e7      	b.n	80042d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4a78      	ldr	r2, [pc, #480]	@ (80042e8 <HAL_I2C_Init+0x280>)
 8004106:	fba2 2303 	umull	r2, r3, r2, r3
 800410a:	0c9b      	lsrs	r3, r3, #18
 800410c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	4a6a      	ldr	r2, [pc, #424]	@ (80042dc <HAL_I2C_Init+0x274>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d802      	bhi.n	800413c <HAL_I2C_Init+0xd4>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	3301      	adds	r3, #1
 800413a:	e009      	b.n	8004150 <HAL_I2C_Init+0xe8>
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004142:	fb02 f303 	mul.w	r3, r2, r3
 8004146:	4a69      	ldr	r2, [pc, #420]	@ (80042ec <HAL_I2C_Init+0x284>)
 8004148:	fba2 2303 	umull	r2, r3, r2, r3
 800414c:	099b      	lsrs	r3, r3, #6
 800414e:	3301      	adds	r3, #1
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	430b      	orrs	r3, r1
 8004156:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004162:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	495c      	ldr	r1, [pc, #368]	@ (80042dc <HAL_I2C_Init+0x274>)
 800416c:	428b      	cmp	r3, r1
 800416e:	d819      	bhi.n	80041a4 <HAL_I2C_Init+0x13c>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	1e59      	subs	r1, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	fbb1 f3f3 	udiv	r3, r1, r3
 800417e:	1c59      	adds	r1, r3, #1
 8004180:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004184:	400b      	ands	r3, r1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <HAL_I2C_Init+0x138>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1e59      	subs	r1, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	fbb1 f3f3 	udiv	r3, r1, r3
 8004198:	3301      	adds	r3, #1
 800419a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800419e:	e051      	b.n	8004244 <HAL_I2C_Init+0x1dc>
 80041a0:	2304      	movs	r3, #4
 80041a2:	e04f      	b.n	8004244 <HAL_I2C_Init+0x1dc>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d111      	bne.n	80041d0 <HAL_I2C_Init+0x168>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	1e58      	subs	r0, r3, #1
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6859      	ldr	r1, [r3, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	440b      	add	r3, r1
 80041ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80041be:	3301      	adds	r3, #1
 80041c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	bf0c      	ite	eq
 80041c8:	2301      	moveq	r3, #1
 80041ca:	2300      	movne	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	e012      	b.n	80041f6 <HAL_I2C_Init+0x18e>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	1e58      	subs	r0, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6859      	ldr	r1, [r3, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	0099      	lsls	r1, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041e6:	3301      	adds	r3, #1
 80041e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	bf0c      	ite	eq
 80041f0:	2301      	moveq	r3, #1
 80041f2:	2300      	movne	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_I2C_Init+0x196>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e022      	b.n	8004244 <HAL_I2C_Init+0x1dc>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10e      	bne.n	8004224 <HAL_I2C_Init+0x1bc>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	1e58      	subs	r0, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6859      	ldr	r1, [r3, #4]
 800420e:	460b      	mov	r3, r1
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	440b      	add	r3, r1
 8004214:	fbb0 f3f3 	udiv	r3, r0, r3
 8004218:	3301      	adds	r3, #1
 800421a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800421e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004222:	e00f      	b.n	8004244 <HAL_I2C_Init+0x1dc>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	1e58      	subs	r0, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6859      	ldr	r1, [r3, #4]
 800422c:	460b      	mov	r3, r1
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	0099      	lsls	r1, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	fbb0 f3f3 	udiv	r3, r0, r3
 800423a:	3301      	adds	r3, #1
 800423c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004240:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	6809      	ldr	r1, [r1, #0]
 8004248:	4313      	orrs	r3, r2
 800424a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69da      	ldr	r2, [r3, #28]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004272:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6911      	ldr	r1, [r2, #16]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	68d2      	ldr	r2, [r2, #12]
 800427e:	4311      	orrs	r1, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	430b      	orrs	r3, r1
 8004286:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695a      	ldr	r2, [r3, #20]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0201 	orr.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	000186a0 	.word	0x000186a0
 80042e0:	001e847f 	.word	0x001e847f
 80042e4:	003d08ff 	.word	0x003d08ff
 80042e8:	431bde83 	.word	0x431bde83
 80042ec:	10624dd3 	.word	0x10624dd3

080042f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	4608      	mov	r0, r1
 80042fa:	4611      	mov	r1, r2
 80042fc:	461a      	mov	r2, r3
 80042fe:	4603      	mov	r3, r0
 8004300:	817b      	strh	r3, [r7, #10]
 8004302:	460b      	mov	r3, r1
 8004304:	813b      	strh	r3, [r7, #8]
 8004306:	4613      	mov	r3, r2
 8004308:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800430a:	f7ff fa67 	bl	80037dc <HAL_GetTick>
 800430e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b20      	cmp	r3, #32
 800431a:	f040 80d9 	bne.w	80044d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	2319      	movs	r3, #25
 8004324:	2201      	movs	r2, #1
 8004326:	496d      	ldr	r1, [pc, #436]	@ (80044dc <HAL_I2C_Mem_Write+0x1ec>)
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 fc8b 	bl	8004c44 <I2C_WaitOnFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004334:	2302      	movs	r3, #2
 8004336:	e0cc      	b.n	80044d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_I2C_Mem_Write+0x56>
 8004342:	2302      	movs	r3, #2
 8004344:	e0c5      	b.n	80044d2 <HAL_I2C_Mem_Write+0x1e2>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b01      	cmp	r3, #1
 800435a:	d007      	beq.n	800436c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800437a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2221      	movs	r2, #33	@ 0x21
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2240      	movs	r2, #64	@ 0x40
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a3a      	ldr	r2, [r7, #32]
 8004396:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800439c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4a4d      	ldr	r2, [pc, #308]	@ (80044e0 <HAL_I2C_Mem_Write+0x1f0>)
 80043ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043ae:	88f8      	ldrh	r0, [r7, #6]
 80043b0:	893a      	ldrh	r2, [r7, #8]
 80043b2:	8979      	ldrh	r1, [r7, #10]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	4603      	mov	r3, r0
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 fac2 	bl	8004948 <I2C_RequestMemoryWrite>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d052      	beq.n	8004470 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e081      	b.n	80044d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 fd50 	bl	8004e78 <I2C_WaitOnTXEFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00d      	beq.n	80043fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d107      	bne.n	80043f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e06b      	b.n	80044d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fe:	781a      	ldrb	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b04      	cmp	r3, #4
 8004436:	d11b      	bne.n	8004470 <HAL_I2C_Mem_Write+0x180>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800443c:	2b00      	cmp	r3, #0
 800443e:	d017      	beq.n	8004470 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004444:	781a      	ldrb	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1aa      	bne.n	80043ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 fd43 	bl	8004f08 <I2C_WaitOnBTFFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00d      	beq.n	80044a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	2b04      	cmp	r3, #4
 800448e:	d107      	bne.n	80044a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800449e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e016      	b.n	80044d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	e000      	b.n	80044d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80044d0:	2302      	movs	r3, #2
  }
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	00100002 	.word	0x00100002
 80044e0:	ffff0000 	.word	0xffff0000

080044e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08c      	sub	sp, #48	@ 0x30
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	4608      	mov	r0, r1
 80044ee:	4611      	mov	r1, r2
 80044f0:	461a      	mov	r2, r3
 80044f2:	4603      	mov	r3, r0
 80044f4:	817b      	strh	r3, [r7, #10]
 80044f6:	460b      	mov	r3, r1
 80044f8:	813b      	strh	r3, [r7, #8]
 80044fa:	4613      	mov	r3, r2
 80044fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044fe:	f7ff f96d 	bl	80037dc <HAL_GetTick>
 8004502:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b20      	cmp	r3, #32
 800450e:	f040 8214 	bne.w	800493a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	2319      	movs	r3, #25
 8004518:	2201      	movs	r2, #1
 800451a:	497b      	ldr	r1, [pc, #492]	@ (8004708 <HAL_I2C_Mem_Read+0x224>)
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 fb91 	bl	8004c44 <I2C_WaitOnFlagUntilTimeout>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004528:	2302      	movs	r3, #2
 800452a:	e207      	b.n	800493c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_I2C_Mem_Read+0x56>
 8004536:	2302      	movs	r3, #2
 8004538:	e200      	b.n	800493c <HAL_I2C_Mem_Read+0x458>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b01      	cmp	r3, #1
 800454e:	d007      	beq.n	8004560 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0201 	orr.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800456e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2222      	movs	r2, #34	@ 0x22
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2240      	movs	r2, #64	@ 0x40
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800458a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004590:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4a5b      	ldr	r2, [pc, #364]	@ (800470c <HAL_I2C_Mem_Read+0x228>)
 80045a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045a2:	88f8      	ldrh	r0, [r7, #6]
 80045a4:	893a      	ldrh	r2, [r7, #8]
 80045a6:	8979      	ldrh	r1, [r7, #10]
 80045a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045aa:	9301      	str	r3, [sp, #4]
 80045ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	4603      	mov	r3, r0
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 fa5e 	bl	8004a74 <I2C_RequestMemoryRead>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e1bc      	b.n	800493c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d113      	bne.n	80045f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ca:	2300      	movs	r3, #0
 80045cc:	623b      	str	r3, [r7, #32]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	623b      	str	r3, [r7, #32]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	623b      	str	r3, [r7, #32]
 80045de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	e190      	b.n	8004914 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d11b      	bne.n	8004632 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004608:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800460a:	2300      	movs	r3, #0
 800460c:	61fb      	str	r3, [r7, #28]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	61fb      	str	r3, [r7, #28]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	61fb      	str	r3, [r7, #28]
 800461e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	e170      	b.n	8004914 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004636:	2b02      	cmp	r3, #2
 8004638:	d11b      	bne.n	8004672 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004648:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004658:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800465a:	2300      	movs	r3, #0
 800465c:	61bb      	str	r3, [r7, #24]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	e150      	b.n	8004914 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004688:	e144      	b.n	8004914 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800468e:	2b03      	cmp	r3, #3
 8004690:	f200 80f1 	bhi.w	8004876 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004698:	2b01      	cmp	r3, #1
 800469a:	d123      	bne.n	80046e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800469c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800469e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 fc79 	bl	8004f98 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e145      	b.n	800493c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046e2:	e117      	b.n	8004914 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d14e      	bne.n	800478a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f2:	2200      	movs	r2, #0
 80046f4:	4906      	ldr	r1, [pc, #24]	@ (8004710 <HAL_I2C_Mem_Read+0x22c>)
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 faa4 	bl	8004c44 <I2C_WaitOnFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d008      	beq.n	8004714 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e11a      	b.n	800493c <HAL_I2C_Mem_Read+0x458>
 8004706:	bf00      	nop
 8004708:	00100002 	.word	0x00100002
 800470c:	ffff0000 	.word	0xffff0000
 8004710:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	691a      	ldr	r2, [r3, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800474c:	b29b      	uxth	r3, r3
 800474e:	3b01      	subs	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004788:	e0c4      	b.n	8004914 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004790:	2200      	movs	r2, #0
 8004792:	496c      	ldr	r1, [pc, #432]	@ (8004944 <HAL_I2C_Mem_Read+0x460>)
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 fa55 	bl	8004c44 <I2C_WaitOnFlagUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e0cb      	b.n	800493c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ec:	2200      	movs	r2, #0
 80047ee:	4955      	ldr	r1, [pc, #340]	@ (8004944 <HAL_I2C_Mem_Read+0x460>)
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 fa27 	bl	8004c44 <I2C_WaitOnFlagUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e09d      	b.n	800493c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800480e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004838:	b29b      	uxth	r3, r3
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004874:	e04e      	b.n	8004914 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004878:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 fb8c 	bl	8004f98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e058      	b.n	800493c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d124      	bne.n	8004914 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d107      	bne.n	80048e2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048e0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048fe:	3b01      	subs	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004918:	2b00      	cmp	r3, #0
 800491a:	f47f aeb6 	bne.w	800468a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	e000      	b.n	800493c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800493a:	2302      	movs	r3, #2
  }
}
 800493c:	4618      	mov	r0, r3
 800493e:	3728      	adds	r7, #40	@ 0x28
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	00010004 	.word	0x00010004

08004948 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	4608      	mov	r0, r1
 8004952:	4611      	mov	r1, r2
 8004954:	461a      	mov	r2, r3
 8004956:	4603      	mov	r3, r0
 8004958:	817b      	strh	r3, [r7, #10]
 800495a:	460b      	mov	r3, r1
 800495c:	813b      	strh	r3, [r7, #8]
 800495e:	4613      	mov	r3, r2
 8004960:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004970:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	2200      	movs	r2, #0
 800497a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f960 	bl	8004c44 <I2C_WaitOnFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00d      	beq.n	80049a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004998:	d103      	bne.n	80049a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e05f      	b.n	8004a66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049a6:	897b      	ldrh	r3, [r7, #10]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	461a      	mov	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80049b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b8:	6a3a      	ldr	r2, [r7, #32]
 80049ba:	492d      	ldr	r1, [pc, #180]	@ (8004a70 <I2C_RequestMemoryWrite+0x128>)
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f9bb 	bl	8004d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e04c      	b.n	8004a66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049e4:	6a39      	ldr	r1, [r7, #32]
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 fa46 	bl	8004e78 <I2C_WaitOnTXEFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00d      	beq.n	8004a0e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d107      	bne.n	8004a0a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e02b      	b.n	8004a66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a0e:	88fb      	ldrh	r3, [r7, #6]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d105      	bne.n	8004a20 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a14:	893b      	ldrh	r3, [r7, #8]
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	611a      	str	r2, [r3, #16]
 8004a1e:	e021      	b.n	8004a64 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a20:	893b      	ldrh	r3, [r7, #8]
 8004a22:	0a1b      	lsrs	r3, r3, #8
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a30:	6a39      	ldr	r1, [r7, #32]
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 fa20 	bl	8004e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00d      	beq.n	8004a5a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d107      	bne.n	8004a56 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e005      	b.n	8004a66 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a5a:	893b      	ldrh	r3, [r7, #8]
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	00010002 	.word	0x00010002

08004a74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af02      	add	r7, sp, #8
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	4608      	mov	r0, r1
 8004a7e:	4611      	mov	r1, r2
 8004a80:	461a      	mov	r2, r3
 8004a82:	4603      	mov	r3, r0
 8004a84:	817b      	strh	r3, [r7, #10]
 8004a86:	460b      	mov	r3, r1
 8004a88:	813b      	strh	r3, [r7, #8]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a9c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 f8c2 	bl	8004c44 <I2C_WaitOnFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00d      	beq.n	8004ae2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ad4:	d103      	bne.n	8004ade <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004adc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e0aa      	b.n	8004c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ae2:	897b      	ldrh	r3, [r7, #10]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004af0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	6a3a      	ldr	r2, [r7, #32]
 8004af6:	4952      	ldr	r1, [pc, #328]	@ (8004c40 <I2C_RequestMemoryRead+0x1cc>)
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 f91d 	bl	8004d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e097      	b.n	8004c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b20:	6a39      	ldr	r1, [r7, #32]
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f9a8 	bl	8004e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00d      	beq.n	8004b4a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d107      	bne.n	8004b46 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e076      	b.n	8004c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d105      	bne.n	8004b5c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b50:	893b      	ldrh	r3, [r7, #8]
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	611a      	str	r2, [r3, #16]
 8004b5a:	e021      	b.n	8004ba0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b5c:	893b      	ldrh	r3, [r7, #8]
 8004b5e:	0a1b      	lsrs	r3, r3, #8
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b6c:	6a39      	ldr	r1, [r7, #32]
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f982 	bl	8004e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00d      	beq.n	8004b96 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d107      	bne.n	8004b92 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e050      	b.n	8004c38 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b96:	893b      	ldrh	r3, [r7, #8]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ba2:	6a39      	ldr	r1, [r7, #32]
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 f967 	bl	8004e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00d      	beq.n	8004bcc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d107      	bne.n	8004bc8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bc6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e035      	b.n	8004c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bda:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 f82b 	bl	8004c44 <I2C_WaitOnFlagUntilTimeout>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00d      	beq.n	8004c10 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c02:	d103      	bne.n	8004c0c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e013      	b.n	8004c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c10:	897b      	ldrh	r3, [r7, #10]
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	f043 0301 	orr.w	r3, r3, #1
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c22:	6a3a      	ldr	r2, [r7, #32]
 8004c24:	4906      	ldr	r1, [pc, #24]	@ (8004c40 <I2C_RequestMemoryRead+0x1cc>)
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 f886 	bl	8004d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	00010002 	.word	0x00010002

08004c44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	4613      	mov	r3, r2
 8004c52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c54:	e048      	b.n	8004ce8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5c:	d044      	beq.n	8004ce8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c5e:	f7fe fdbd 	bl	80037dc <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d302      	bcc.n	8004c74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d139      	bne.n	8004ce8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	0c1b      	lsrs	r3, r3, #16
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d10d      	bne.n	8004c9a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	43da      	mvns	r2, r3
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	bf0c      	ite	eq
 8004c90:	2301      	moveq	r3, #1
 8004c92:	2300      	movne	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	e00c      	b.n	8004cb4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	43da      	mvns	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d116      	bne.n	8004ce8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd4:	f043 0220 	orr.w	r2, r3, #32
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e023      	b.n	8004d30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	0c1b      	lsrs	r3, r3, #16
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d10d      	bne.n	8004d0e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	43da      	mvns	r2, r3
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bf0c      	ite	eq
 8004d04:	2301      	moveq	r3, #1
 8004d06:	2300      	movne	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	e00c      	b.n	8004d28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	43da      	mvns	r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	bf0c      	ite	eq
 8004d20:	2301      	moveq	r3, #1
 8004d22:	2300      	movne	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	461a      	mov	r2, r3
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d093      	beq.n	8004c56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d46:	e071      	b.n	8004e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d56:	d123      	bne.n	8004da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8c:	f043 0204 	orr.w	r2, r3, #4
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e067      	b.n	8004e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da6:	d041      	beq.n	8004e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da8:	f7fe fd18 	bl	80037dc <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d302      	bcc.n	8004dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d136      	bne.n	8004e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	0c1b      	lsrs	r3, r3, #16
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d10c      	bne.n	8004de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	43da      	mvns	r2, r3
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	bf14      	ite	ne
 8004dda:	2301      	movne	r3, #1
 8004ddc:	2300      	moveq	r3, #0
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	e00b      	b.n	8004dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	43da      	mvns	r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	4013      	ands	r3, r2
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	bf14      	ite	ne
 8004df4:	2301      	movne	r3, #1
 8004df6:	2300      	moveq	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d016      	beq.n	8004e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e18:	f043 0220 	orr.w	r2, r3, #32
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e021      	b.n	8004e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	0c1b      	lsrs	r3, r3, #16
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d10c      	bne.n	8004e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	43da      	mvns	r2, r3
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	4013      	ands	r3, r2
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	bf14      	ite	ne
 8004e48:	2301      	movne	r3, #1
 8004e4a:	2300      	moveq	r3, #0
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	e00b      	b.n	8004e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	43da      	mvns	r2, r3
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	bf14      	ite	ne
 8004e62:	2301      	movne	r3, #1
 8004e64:	2300      	moveq	r3, #0
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f47f af6d 	bne.w	8004d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e84:	e034      	b.n	8004ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 f8e3 	bl	8005052 <I2C_IsAcknowledgeFailed>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e034      	b.n	8004f00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d028      	beq.n	8004ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9e:	f7fe fc9d 	bl	80037dc <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d302      	bcc.n	8004eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d11d      	bne.n	8004ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ebe:	2b80      	cmp	r3, #128	@ 0x80
 8004ec0:	d016      	beq.n	8004ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004edc:	f043 0220 	orr.w	r2, r3, #32
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e007      	b.n	8004f00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004efa:	2b80      	cmp	r3, #128	@ 0x80
 8004efc:	d1c3      	bne.n	8004e86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f14:	e034      	b.n	8004f80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 f89b 	bl	8005052 <I2C_IsAcknowledgeFailed>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e034      	b.n	8004f90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2c:	d028      	beq.n	8004f80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2e:	f7fe fc55 	bl	80037dc <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d302      	bcc.n	8004f44 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d11d      	bne.n	8004f80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d016      	beq.n	8004f80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6c:	f043 0220 	orr.w	r2, r3, #32
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e007      	b.n	8004f90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	f003 0304 	and.w	r3, r3, #4
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	d1c3      	bne.n	8004f16 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fa4:	e049      	b.n	800503a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d119      	bne.n	8004fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f06f 0210 	mvn.w	r2, #16
 8004fbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e030      	b.n	800504a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe8:	f7fe fbf8 	bl	80037dc <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d302      	bcc.n	8004ffe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d11d      	bne.n	800503a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005008:	2b40      	cmp	r3, #64	@ 0x40
 800500a:	d016      	beq.n	800503a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2220      	movs	r2, #32
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005026:	f043 0220 	orr.w	r2, r3, #32
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e007      	b.n	800504a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005044:	2b40      	cmp	r3, #64	@ 0x40
 8005046:	d1ae      	bne.n	8004fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005068:	d11b      	bne.n	80050a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005072:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508e:	f043 0204 	orr.w	r2, r3, #4
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b20      	cmp	r3, #32
 80050c4:	d129      	bne.n	800511a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2224      	movs	r2, #36	@ 0x24
 80050ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0201 	bic.w	r2, r2, #1
 80050dc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0210 	bic.w	r2, r2, #16
 80050ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 0201 	orr.w	r2, r2, #1
 800510c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2220      	movs	r2, #32
 8005112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	e000      	b.n	800511c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800511a:	2302      	movs	r3, #2
  }
}
 800511c:	4618      	mov	r0, r3
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005132:	2300      	movs	r3, #0
 8005134:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b20      	cmp	r3, #32
 8005140:	d12a      	bne.n	8005198 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2224      	movs	r2, #36	@ 0x24
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0201 	bic.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005160:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005162:	89fb      	ldrh	r3, [r7, #14]
 8005164:	f023 030f 	bic.w	r3, r3, #15
 8005168:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	b29a      	uxth	r2, r3
 800516e:	89fb      	ldrh	r3, [r7, #14]
 8005170:	4313      	orrs	r3, r2
 8005172:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	89fa      	ldrh	r2, [r7, #14]
 800517a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005194:	2300      	movs	r3, #0
 8005196:	e000      	b.n	800519a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005198:	2302      	movs	r3, #2
  }
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
	...

080051a8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e0bf      	b.n	800533a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d106      	bne.n	80051d4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7fd fcdc 	bl	8002b8c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80051ea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6999      	ldr	r1, [r3, #24]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005200:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6899      	ldr	r1, [r3, #8]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	4b4a      	ldr	r3, [pc, #296]	@ (8005344 <HAL_LTDC_Init+0x19c>)
 800521c:	400b      	ands	r3, r1
 800521e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	041b      	lsls	r3, r3, #16
 8005226:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6899      	ldr	r1, [r3, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699a      	ldr	r2, [r3, #24]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68d9      	ldr	r1, [r3, #12]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	4b3e      	ldr	r3, [pc, #248]	@ (8005344 <HAL_LTDC_Init+0x19c>)
 800524a:	400b      	ands	r3, r1
 800524c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	041b      	lsls	r3, r3, #16
 8005254:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68d9      	ldr	r1, [r3, #12]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1a      	ldr	r2, [r3, #32]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6919      	ldr	r1, [r3, #16]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4b33      	ldr	r3, [pc, #204]	@ (8005344 <HAL_LTDC_Init+0x19c>)
 8005278:	400b      	ands	r3, r1
 800527a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005280:	041b      	lsls	r3, r3, #16
 8005282:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6919      	ldr	r1, [r3, #16]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6959      	ldr	r1, [r3, #20]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	4b27      	ldr	r3, [pc, #156]	@ (8005344 <HAL_LTDC_Init+0x19c>)
 80052a6:	400b      	ands	r3, r1
 80052a8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ae:	041b      	lsls	r3, r3, #16
 80052b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6959      	ldr	r1, [r3, #20]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052ce:	021b      	lsls	r3, r3, #8
 80052d0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80052d8:	041b      	lsls	r3, r3, #16
 80052da:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80052ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0206 	orr.w	r2, r2, #6
 8005316:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0201 	orr.w	r2, r2, #1
 8005326:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	f000f800 	.word	0xf000f800

08005348 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005348:	b5b0      	push	{r4, r5, r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800535a:	2b01      	cmp	r3, #1
 800535c:	d101      	bne.n	8005362 <HAL_LTDC_ConfigLayer+0x1a>
 800535e:	2302      	movs	r3, #2
 8005360:	e02c      	b.n	80053bc <HAL_LTDC_ConfigLayer+0x74>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2202      	movs	r2, #2
 800536e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2134      	movs	r1, #52	@ 0x34
 8005378:	fb01 f303 	mul.w	r3, r1, r3
 800537c:	4413      	add	r3, r2
 800537e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4614      	mov	r4, r2
 8005386:	461d      	mov	r5, r3
 8005388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800538a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800538c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800538e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005394:	682b      	ldr	r3, [r5, #0]
 8005396:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	68b9      	ldr	r1, [r7, #8]
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f811 	bl	80053c4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2201      	movs	r2, #1
 80053a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bdb0      	pop	{r4, r5, r7, pc}

080053c4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b089      	sub	sp, #36	@ 0x24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	0c1b      	lsrs	r3, r3, #16
 80053dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053e0:	4413      	add	r3, r2
 80053e2:	041b      	lsls	r3, r3, #16
 80053e4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	01db      	lsls	r3, r3, #7
 80053f0:	4413      	add	r3, r2
 80053f2:	3384      	adds	r3, #132	@ 0x84
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	4611      	mov	r1, r2
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	01d2      	lsls	r2, r2, #7
 8005400:	440a      	add	r2, r1
 8005402:	3284      	adds	r2, #132	@ 0x84
 8005404:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005408:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	0c1b      	lsrs	r3, r3, #16
 8005416:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800541a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800541c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4619      	mov	r1, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	01db      	lsls	r3, r3, #7
 8005428:	440b      	add	r3, r1
 800542a:	3384      	adds	r3, #132	@ 0x84
 800542c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005432:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005442:	4413      	add	r3, r2
 8005444:	041b      	lsls	r3, r3, #16
 8005446:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	01db      	lsls	r3, r3, #7
 8005452:	4413      	add	r3, r2
 8005454:	3384      	adds	r3, #132	@ 0x84
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	6812      	ldr	r2, [r2, #0]
 800545c:	4611      	mov	r1, r2
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	01d2      	lsls	r2, r2, #7
 8005462:	440a      	add	r2, r1
 8005464:	3284      	adds	r2, #132	@ 0x84
 8005466:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800546a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800547a:	4413      	add	r3, r2
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4619      	mov	r1, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	01db      	lsls	r3, r3, #7
 8005488:	440b      	add	r3, r1
 800548a:	3384      	adds	r3, #132	@ 0x84
 800548c:	4619      	mov	r1, r3
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	4313      	orrs	r3, r2
 8005492:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	01db      	lsls	r3, r3, #7
 800549e:	4413      	add	r3, r2
 80054a0:	3384      	adds	r3, #132	@ 0x84
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	6812      	ldr	r2, [r2, #0]
 80054a8:	4611      	mov	r1, r2
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	01d2      	lsls	r2, r2, #7
 80054ae:	440a      	add	r2, r1
 80054b0:	3284      	adds	r2, #132	@ 0x84
 80054b2:	f023 0307 	bic.w	r3, r3, #7
 80054b6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	461a      	mov	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	01db      	lsls	r3, r3, #7
 80054c2:	4413      	add	r3, r2
 80054c4:	3384      	adds	r3, #132	@ 0x84
 80054c6:	461a      	mov	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80054de:	041b      	lsls	r3, r3, #16
 80054e0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	061b      	lsls	r3, r3, #24
 80054e8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	01db      	lsls	r3, r3, #7
 80054f4:	4413      	add	r3, r2
 80054f6:	3384      	adds	r3, #132	@ 0x84
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	01db      	lsls	r3, r3, #7
 8005504:	4413      	add	r3, r2
 8005506:	3384      	adds	r3, #132	@ 0x84
 8005508:	461a      	mov	r2, r3
 800550a:	2300      	movs	r3, #0
 800550c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005514:	461a      	mov	r2, r3
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	431a      	orrs	r2, r3
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	431a      	orrs	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4619      	mov	r1, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	01db      	lsls	r3, r3, #7
 8005528:	440b      	add	r3, r1
 800552a:	3384      	adds	r3, #132	@ 0x84
 800552c:	4619      	mov	r1, r3
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	461a      	mov	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	01db      	lsls	r3, r3, #7
 800553e:	4413      	add	r3, r2
 8005540:	3384      	adds	r3, #132	@ 0x84
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	6812      	ldr	r2, [r2, #0]
 8005548:	4611      	mov	r1, r2
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	01d2      	lsls	r2, r2, #7
 800554e:	440a      	add	r2, r1
 8005550:	3284      	adds	r2, #132	@ 0x84
 8005552:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005556:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	01db      	lsls	r3, r3, #7
 8005562:	4413      	add	r3, r2
 8005564:	3384      	adds	r3, #132	@ 0x84
 8005566:	461a      	mov	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	01db      	lsls	r3, r3, #7
 8005578:	4413      	add	r3, r2
 800557a:	3384      	adds	r3, #132	@ 0x84
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	6812      	ldr	r2, [r2, #0]
 8005582:	4611      	mov	r1, r2
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	01d2      	lsls	r2, r2, #7
 8005588:	440a      	add	r2, r1
 800558a:	3284      	adds	r2, #132	@ 0x84
 800558c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005590:	f023 0307 	bic.w	r3, r3, #7
 8005594:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	69da      	ldr	r2, [r3, #28]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	68f9      	ldr	r1, [r7, #12]
 80055a0:	6809      	ldr	r1, [r1, #0]
 80055a2:	4608      	mov	r0, r1
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	01c9      	lsls	r1, r1, #7
 80055a8:	4401      	add	r1, r0
 80055aa:	3184      	adds	r1, #132	@ 0x84
 80055ac:	4313      	orrs	r3, r2
 80055ae:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	461a      	mov	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	01db      	lsls	r3, r3, #7
 80055ba:	4413      	add	r3, r2
 80055bc:	3384      	adds	r3, #132	@ 0x84
 80055be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	01db      	lsls	r3, r3, #7
 80055ca:	4413      	add	r3, r2
 80055cc:	3384      	adds	r3, #132	@ 0x84
 80055ce:	461a      	mov	r2, r3
 80055d0:	2300      	movs	r3, #0
 80055d2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	01db      	lsls	r3, r3, #7
 80055de:	4413      	add	r3, r2
 80055e0:	3384      	adds	r3, #132	@ 0x84
 80055e2:	461a      	mov	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d102      	bne.n	80055f8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80055f2:	2304      	movs	r3, #4
 80055f4:	61fb      	str	r3, [r7, #28]
 80055f6:	e01b      	b.n	8005630 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d102      	bne.n	8005606 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005600:	2303      	movs	r3, #3
 8005602:	61fb      	str	r3, [r7, #28]
 8005604:	e014      	b.n	8005630 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b04      	cmp	r3, #4
 800560c:	d00b      	beq.n	8005626 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005612:	2b02      	cmp	r3, #2
 8005614:	d007      	beq.n	8005626 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800561a:	2b03      	cmp	r3, #3
 800561c:	d003      	beq.n	8005626 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005622:	2b07      	cmp	r3, #7
 8005624:	d102      	bne.n	800562c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005626:	2302      	movs	r3, #2
 8005628:	61fb      	str	r3, [r7, #28]
 800562a:	e001      	b.n	8005630 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800562c:	2301      	movs	r3, #1
 800562e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	01db      	lsls	r3, r3, #7
 800563a:	4413      	add	r3, r2
 800563c:	3384      	adds	r3, #132	@ 0x84
 800563e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	6812      	ldr	r2, [r2, #0]
 8005644:	4611      	mov	r1, r2
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	01d2      	lsls	r2, r2, #7
 800564a:	440a      	add	r2, r1
 800564c:	3284      	adds	r2, #132	@ 0x84
 800564e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005652:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005658:	69fa      	ldr	r2, [r7, #28]
 800565a:	fb02 f303 	mul.w	r3, r2, r3
 800565e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	6859      	ldr	r1, [r3, #4]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	1acb      	subs	r3, r1, r3
 800566a:	69f9      	ldr	r1, [r7, #28]
 800566c:	fb01 f303 	mul.w	r3, r1, r3
 8005670:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005672:	68f9      	ldr	r1, [r7, #12]
 8005674:	6809      	ldr	r1, [r1, #0]
 8005676:	4608      	mov	r0, r1
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	01c9      	lsls	r1, r1, #7
 800567c:	4401      	add	r1, r0
 800567e:	3184      	adds	r1, #132	@ 0x84
 8005680:	4313      	orrs	r3, r2
 8005682:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	01db      	lsls	r3, r3, #7
 800568e:	4413      	add	r3, r2
 8005690:	3384      	adds	r3, #132	@ 0x84
 8005692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	6812      	ldr	r2, [r2, #0]
 8005698:	4611      	mov	r1, r2
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	01d2      	lsls	r2, r2, #7
 800569e:	440a      	add	r2, r1
 80056a0:	3284      	adds	r2, #132	@ 0x84
 80056a2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80056a6:	f023 0307 	bic.w	r3, r3, #7
 80056aa:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	01db      	lsls	r3, r3, #7
 80056b6:	4413      	add	r3, r2
 80056b8:	3384      	adds	r3, #132	@ 0x84
 80056ba:	461a      	mov	r2, r3
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	01db      	lsls	r3, r3, #7
 80056cc:	4413      	add	r3, r2
 80056ce:	3384      	adds	r3, #132	@ 0x84
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	6812      	ldr	r2, [r2, #0]
 80056d6:	4611      	mov	r1, r2
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	01d2      	lsls	r2, r2, #7
 80056dc:	440a      	add	r2, r1
 80056de:	3284      	adds	r2, #132	@ 0x84
 80056e0:	f043 0301 	orr.w	r3, r3, #1
 80056e4:	6013      	str	r3, [r2, #0]
}
 80056e6:	bf00      	nop
 80056e8:	3724      	adds	r7, #36	@ 0x24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
	...

080056f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e267      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d075      	beq.n	80057fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005712:	4b88      	ldr	r3, [pc, #544]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 030c 	and.w	r3, r3, #12
 800571a:	2b04      	cmp	r3, #4
 800571c:	d00c      	beq.n	8005738 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800571e:	4b85      	ldr	r3, [pc, #532]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005726:	2b08      	cmp	r3, #8
 8005728:	d112      	bne.n	8005750 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800572a:	4b82      	ldr	r3, [pc, #520]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005732:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005736:	d10b      	bne.n	8005750 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005738:	4b7e      	ldr	r3, [pc, #504]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d05b      	beq.n	80057fc <HAL_RCC_OscConfig+0x108>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d157      	bne.n	80057fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e242      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005758:	d106      	bne.n	8005768 <HAL_RCC_OscConfig+0x74>
 800575a:	4b76      	ldr	r3, [pc, #472]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a75      	ldr	r2, [pc, #468]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 8005760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	e01d      	b.n	80057a4 <HAL_RCC_OscConfig+0xb0>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005770:	d10c      	bne.n	800578c <HAL_RCC_OscConfig+0x98>
 8005772:	4b70      	ldr	r3, [pc, #448]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a6f      	ldr	r2, [pc, #444]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 8005778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	4b6d      	ldr	r3, [pc, #436]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a6c      	ldr	r2, [pc, #432]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 8005784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	e00b      	b.n	80057a4 <HAL_RCC_OscConfig+0xb0>
 800578c:	4b69      	ldr	r3, [pc, #420]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a68      	ldr	r2, [pc, #416]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 8005792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	4b66      	ldr	r3, [pc, #408]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a65      	ldr	r2, [pc, #404]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 800579e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d013      	beq.n	80057d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ac:	f7fe f816 	bl	80037dc <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057b4:	f7fe f812 	bl	80037dc <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b64      	cmp	r3, #100	@ 0x64
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e207      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057c6:	4b5b      	ldr	r3, [pc, #364]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0f0      	beq.n	80057b4 <HAL_RCC_OscConfig+0xc0>
 80057d2:	e014      	b.n	80057fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d4:	f7fe f802 	bl	80037dc <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057dc:	f7fd fffe 	bl	80037dc <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b64      	cmp	r3, #100	@ 0x64
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e1f3      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ee:	4b51      	ldr	r3, [pc, #324]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1f0      	bne.n	80057dc <HAL_RCC_OscConfig+0xe8>
 80057fa:	e000      	b.n	80057fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d063      	beq.n	80058d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800580a:	4b4a      	ldr	r3, [pc, #296]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 030c 	and.w	r3, r3, #12
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00b      	beq.n	800582e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005816:	4b47      	ldr	r3, [pc, #284]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800581e:	2b08      	cmp	r3, #8
 8005820:	d11c      	bne.n	800585c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005822:	4b44      	ldr	r3, [pc, #272]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d116      	bne.n	800585c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800582e:	4b41      	ldr	r3, [pc, #260]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d005      	beq.n	8005846 <HAL_RCC_OscConfig+0x152>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d001      	beq.n	8005846 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e1c7      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005846:	4b3b      	ldr	r3, [pc, #236]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	4937      	ldr	r1, [pc, #220]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 8005856:	4313      	orrs	r3, r2
 8005858:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800585a:	e03a      	b.n	80058d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d020      	beq.n	80058a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005864:	4b34      	ldr	r3, [pc, #208]	@ (8005938 <HAL_RCC_OscConfig+0x244>)
 8005866:	2201      	movs	r2, #1
 8005868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586a:	f7fd ffb7 	bl	80037dc <HAL_GetTick>
 800586e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005872:	f7fd ffb3 	bl	80037dc <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e1a8      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005884:	4b2b      	ldr	r3, [pc, #172]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0f0      	beq.n	8005872 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005890:	4b28      	ldr	r3, [pc, #160]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	4925      	ldr	r1, [pc, #148]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	600b      	str	r3, [r1, #0]
 80058a4:	e015      	b.n	80058d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058a6:	4b24      	ldr	r3, [pc, #144]	@ (8005938 <HAL_RCC_OscConfig+0x244>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ac:	f7fd ff96 	bl	80037dc <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058b4:	f7fd ff92 	bl	80037dc <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e187      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1f0      	bne.n	80058b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d036      	beq.n	800594c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d016      	beq.n	8005914 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058e6:	4b15      	ldr	r3, [pc, #84]	@ (800593c <HAL_RCC_OscConfig+0x248>)
 80058e8:	2201      	movs	r2, #1
 80058ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ec:	f7fd ff76 	bl	80037dc <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058f4:	f7fd ff72 	bl	80037dc <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e167      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005906:	4b0b      	ldr	r3, [pc, #44]	@ (8005934 <HAL_RCC_OscConfig+0x240>)
 8005908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0f0      	beq.n	80058f4 <HAL_RCC_OscConfig+0x200>
 8005912:	e01b      	b.n	800594c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005914:	4b09      	ldr	r3, [pc, #36]	@ (800593c <HAL_RCC_OscConfig+0x248>)
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800591a:	f7fd ff5f 	bl	80037dc <HAL_GetTick>
 800591e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005920:	e00e      	b.n	8005940 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005922:	f7fd ff5b 	bl	80037dc <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d907      	bls.n	8005940 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e150      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
 8005934:	40023800 	.word	0x40023800
 8005938:	42470000 	.word	0x42470000
 800593c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005940:	4b88      	ldr	r3, [pc, #544]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1ea      	bne.n	8005922 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8097 	beq.w	8005a88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800595a:	2300      	movs	r3, #0
 800595c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800595e:	4b81      	ldr	r3, [pc, #516]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10f      	bne.n	800598a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800596a:	2300      	movs	r3, #0
 800596c:	60bb      	str	r3, [r7, #8]
 800596e:	4b7d      	ldr	r3, [pc, #500]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005972:	4a7c      	ldr	r2, [pc, #496]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005978:	6413      	str	r3, [r2, #64]	@ 0x40
 800597a:	4b7a      	ldr	r3, [pc, #488]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 800597c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005982:	60bb      	str	r3, [r7, #8]
 8005984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005986:	2301      	movs	r3, #1
 8005988:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800598a:	4b77      	ldr	r3, [pc, #476]	@ (8005b68 <HAL_RCC_OscConfig+0x474>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005992:	2b00      	cmp	r3, #0
 8005994:	d118      	bne.n	80059c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005996:	4b74      	ldr	r3, [pc, #464]	@ (8005b68 <HAL_RCC_OscConfig+0x474>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a73      	ldr	r2, [pc, #460]	@ (8005b68 <HAL_RCC_OscConfig+0x474>)
 800599c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059a2:	f7fd ff1b 	bl	80037dc <HAL_GetTick>
 80059a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a8:	e008      	b.n	80059bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059aa:	f7fd ff17 	bl	80037dc <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d901      	bls.n	80059bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e10c      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059bc:	4b6a      	ldr	r3, [pc, #424]	@ (8005b68 <HAL_RCC_OscConfig+0x474>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0f0      	beq.n	80059aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d106      	bne.n	80059de <HAL_RCC_OscConfig+0x2ea>
 80059d0:	4b64      	ldr	r3, [pc, #400]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 80059d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d4:	4a63      	ldr	r2, [pc, #396]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 80059d6:	f043 0301 	orr.w	r3, r3, #1
 80059da:	6713      	str	r3, [r2, #112]	@ 0x70
 80059dc:	e01c      	b.n	8005a18 <HAL_RCC_OscConfig+0x324>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	2b05      	cmp	r3, #5
 80059e4:	d10c      	bne.n	8005a00 <HAL_RCC_OscConfig+0x30c>
 80059e6:	4b5f      	ldr	r3, [pc, #380]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 80059e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ea:	4a5e      	ldr	r2, [pc, #376]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 80059ec:	f043 0304 	orr.w	r3, r3, #4
 80059f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80059f2:	4b5c      	ldr	r3, [pc, #368]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 80059f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f6:	4a5b      	ldr	r2, [pc, #364]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 80059f8:	f043 0301 	orr.w	r3, r3, #1
 80059fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80059fe:	e00b      	b.n	8005a18 <HAL_RCC_OscConfig+0x324>
 8005a00:	4b58      	ldr	r3, [pc, #352]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a04:	4a57      	ldr	r2, [pc, #348]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005a06:	f023 0301 	bic.w	r3, r3, #1
 8005a0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a0c:	4b55      	ldr	r3, [pc, #340]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a10:	4a54      	ldr	r2, [pc, #336]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005a12:	f023 0304 	bic.w	r3, r3, #4
 8005a16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d015      	beq.n	8005a4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a20:	f7fd fedc 	bl	80037dc <HAL_GetTick>
 8005a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a26:	e00a      	b.n	8005a3e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a28:	f7fd fed8 	bl	80037dc <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e0cb      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a3e:	4b49      	ldr	r3, [pc, #292]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0ee      	beq.n	8005a28 <HAL_RCC_OscConfig+0x334>
 8005a4a:	e014      	b.n	8005a76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a4c:	f7fd fec6 	bl	80037dc <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a52:	e00a      	b.n	8005a6a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a54:	f7fd fec2 	bl	80037dc <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e0b5      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1ee      	bne.n	8005a54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a76:	7dfb      	ldrb	r3, [r7, #23]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d105      	bne.n	8005a88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a7c:	4b39      	ldr	r3, [pc, #228]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a80:	4a38      	ldr	r2, [pc, #224]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005a82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 80a1 	beq.w	8005bd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a92:	4b34      	ldr	r3, [pc, #208]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 030c 	and.w	r3, r3, #12
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d05c      	beq.n	8005b58 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d141      	bne.n	8005b2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aa6:	4b31      	ldr	r3, [pc, #196]	@ (8005b6c <HAL_RCC_OscConfig+0x478>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aac:	f7fd fe96 	bl	80037dc <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab4:	f7fd fe92 	bl	80037dc <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e087      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ac6:	4b27      	ldr	r3, [pc, #156]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1f0      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69da      	ldr	r2, [r3, #28]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae0:	019b      	lsls	r3, r3, #6
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae8:	085b      	lsrs	r3, r3, #1
 8005aea:	3b01      	subs	r3, #1
 8005aec:	041b      	lsls	r3, r3, #16
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af4:	061b      	lsls	r3, r3, #24
 8005af6:	491b      	ldr	r1, [pc, #108]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005afc:	4b1b      	ldr	r3, [pc, #108]	@ (8005b6c <HAL_RCC_OscConfig+0x478>)
 8005afe:	2201      	movs	r2, #1
 8005b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b02:	f7fd fe6b 	bl	80037dc <HAL_GetTick>
 8005b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b08:	e008      	b.n	8005b1c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b0a:	f7fd fe67 	bl	80037dc <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e05c      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b1c:	4b11      	ldr	r3, [pc, #68]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0f0      	beq.n	8005b0a <HAL_RCC_OscConfig+0x416>
 8005b28:	e054      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b2a:	4b10      	ldr	r3, [pc, #64]	@ (8005b6c <HAL_RCC_OscConfig+0x478>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b30:	f7fd fe54 	bl	80037dc <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b38:	f7fd fe50 	bl	80037dc <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e045      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b4a:	4b06      	ldr	r3, [pc, #24]	@ (8005b64 <HAL_RCC_OscConfig+0x470>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1f0      	bne.n	8005b38 <HAL_RCC_OscConfig+0x444>
 8005b56:	e03d      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d107      	bne.n	8005b70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e038      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
 8005b64:	40023800 	.word	0x40023800
 8005b68:	40007000 	.word	0x40007000
 8005b6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b70:	4b1b      	ldr	r3, [pc, #108]	@ (8005be0 <HAL_RCC_OscConfig+0x4ec>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d028      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d121      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d11a      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ba6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d111      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb6:	085b      	lsrs	r3, r3, #1
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d107      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d001      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e000      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	40023800 	.word	0x40023800

08005be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e0cc      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bf8:	4b68      	ldr	r3, [pc, #416]	@ (8005d9c <HAL_RCC_ClockConfig+0x1b8>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 030f 	and.w	r3, r3, #15
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d90c      	bls.n	8005c20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c06:	4b65      	ldr	r3, [pc, #404]	@ (8005d9c <HAL_RCC_ClockConfig+0x1b8>)
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c0e:	4b63      	ldr	r3, [pc, #396]	@ (8005d9c <HAL_RCC_ClockConfig+0x1b8>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d001      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e0b8      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d020      	beq.n	8005c6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d005      	beq.n	8005c44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c38:	4b59      	ldr	r3, [pc, #356]	@ (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	4a58      	ldr	r2, [pc, #352]	@ (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c50:	4b53      	ldr	r3, [pc, #332]	@ (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	4a52      	ldr	r2, [pc, #328]	@ (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c5c:	4b50      	ldr	r3, [pc, #320]	@ (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	494d      	ldr	r1, [pc, #308]	@ (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d044      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d107      	bne.n	8005c92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c82:	4b47      	ldr	r3, [pc, #284]	@ (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d119      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e07f      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d003      	beq.n	8005ca2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d107      	bne.n	8005cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ca2:	4b3f      	ldr	r3, [pc, #252]	@ (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d109      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e06f      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e067      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cc2:	4b37      	ldr	r3, [pc, #220]	@ (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f023 0203 	bic.w	r2, r3, #3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	4934      	ldr	r1, [pc, #208]	@ (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cd4:	f7fd fd82 	bl	80037dc <HAL_GetTick>
 8005cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cda:	e00a      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cdc:	f7fd fd7e 	bl	80037dc <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e04f      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 020c 	and.w	r2, r3, #12
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d1eb      	bne.n	8005cdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d04:	4b25      	ldr	r3, [pc, #148]	@ (8005d9c <HAL_RCC_ClockConfig+0x1b8>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 030f 	and.w	r3, r3, #15
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d20c      	bcs.n	8005d2c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d12:	4b22      	ldr	r3, [pc, #136]	@ (8005d9c <HAL_RCC_ClockConfig+0x1b8>)
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d1a:	4b20      	ldr	r3, [pc, #128]	@ (8005d9c <HAL_RCC_ClockConfig+0x1b8>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d001      	beq.n	8005d2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e032      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d008      	beq.n	8005d4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d38:	4b19      	ldr	r3, [pc, #100]	@ (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	4916      	ldr	r1, [pc, #88]	@ (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0308 	and.w	r3, r3, #8
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d009      	beq.n	8005d6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d56:	4b12      	ldr	r3, [pc, #72]	@ (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	490e      	ldr	r1, [pc, #56]	@ (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d6a:	f000 f821 	bl	8005db0 <HAL_RCC_GetSysClockFreq>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	4b0b      	ldr	r3, [pc, #44]	@ (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	091b      	lsrs	r3, r3, #4
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	490a      	ldr	r1, [pc, #40]	@ (8005da4 <HAL_RCC_ClockConfig+0x1c0>)
 8005d7c:	5ccb      	ldrb	r3, [r1, r3]
 8005d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d82:	4a09      	ldr	r2, [pc, #36]	@ (8005da8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005d86:	4b09      	ldr	r3, [pc, #36]	@ (8005dac <HAL_RCC_ClockConfig+0x1c8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fd fce2 	bl	8003754 <HAL_InitTick>

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	40023c00 	.word	0x40023c00
 8005da0:	40023800 	.word	0x40023800
 8005da4:	08008a70 	.word	0x08008a70
 8005da8:	20000010 	.word	0x20000010
 8005dac:	20000014 	.word	0x20000014

08005db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005db4:	b094      	sub	sp, #80	@ 0x50
 8005db6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dc8:	4b79      	ldr	r3, [pc, #484]	@ (8005fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f003 030c 	and.w	r3, r3, #12
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d00d      	beq.n	8005df0 <HAL_RCC_GetSysClockFreq+0x40>
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	f200 80e1 	bhi.w	8005f9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <HAL_RCC_GetSysClockFreq+0x34>
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d003      	beq.n	8005dea <HAL_RCC_GetSysClockFreq+0x3a>
 8005de2:	e0db      	b.n	8005f9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005de4:	4b73      	ldr	r3, [pc, #460]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005de6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005de8:	e0db      	b.n	8005fa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005dea:	4b73      	ldr	r3, [pc, #460]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005dec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005dee:	e0d8      	b.n	8005fa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005df0:	4b6f      	ldr	r3, [pc, #444]	@ (8005fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005df8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dfa:	4b6d      	ldr	r3, [pc, #436]	@ (8005fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d063      	beq.n	8005ece <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e06:	4b6a      	ldr	r3, [pc, #424]	@ (8005fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	099b      	lsrs	r3, r3, #6
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005e22:	4622      	mov	r2, r4
 8005e24:	462b      	mov	r3, r5
 8005e26:	f04f 0000 	mov.w	r0, #0
 8005e2a:	f04f 0100 	mov.w	r1, #0
 8005e2e:	0159      	lsls	r1, r3, #5
 8005e30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e34:	0150      	lsls	r0, r2, #5
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4621      	mov	r1, r4
 8005e3c:	1a51      	subs	r1, r2, r1
 8005e3e:	6139      	str	r1, [r7, #16]
 8005e40:	4629      	mov	r1, r5
 8005e42:	eb63 0301 	sbc.w	r3, r3, r1
 8005e46:	617b      	str	r3, [r7, #20]
 8005e48:	f04f 0200 	mov.w	r2, #0
 8005e4c:	f04f 0300 	mov.w	r3, #0
 8005e50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e54:	4659      	mov	r1, fp
 8005e56:	018b      	lsls	r3, r1, #6
 8005e58:	4651      	mov	r1, sl
 8005e5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e5e:	4651      	mov	r1, sl
 8005e60:	018a      	lsls	r2, r1, #6
 8005e62:	4651      	mov	r1, sl
 8005e64:	ebb2 0801 	subs.w	r8, r2, r1
 8005e68:	4659      	mov	r1, fp
 8005e6a:	eb63 0901 	sbc.w	r9, r3, r1
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	f04f 0300 	mov.w	r3, #0
 8005e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e82:	4690      	mov	r8, r2
 8005e84:	4699      	mov	r9, r3
 8005e86:	4623      	mov	r3, r4
 8005e88:	eb18 0303 	adds.w	r3, r8, r3
 8005e8c:	60bb      	str	r3, [r7, #8]
 8005e8e:	462b      	mov	r3, r5
 8005e90:	eb49 0303 	adc.w	r3, r9, r3
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	f04f 0200 	mov.w	r2, #0
 8005e9a:	f04f 0300 	mov.w	r3, #0
 8005e9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	024b      	lsls	r3, r1, #9
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005eac:	4621      	mov	r1, r4
 8005eae:	024a      	lsls	r2, r1, #9
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ebc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ec0:	f7fa f9e6 	bl	8000290 <__aeabi_uldivmod>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4613      	mov	r3, r2
 8005eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ecc:	e058      	b.n	8005f80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ece:	4b38      	ldr	r3, [pc, #224]	@ (8005fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	099b      	lsrs	r3, r3, #6
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	4611      	mov	r1, r2
 8005eda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005ede:	623b      	str	r3, [r7, #32]
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ee4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ee8:	4642      	mov	r2, r8
 8005eea:	464b      	mov	r3, r9
 8005eec:	f04f 0000 	mov.w	r0, #0
 8005ef0:	f04f 0100 	mov.w	r1, #0
 8005ef4:	0159      	lsls	r1, r3, #5
 8005ef6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005efa:	0150      	lsls	r0, r2, #5
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4641      	mov	r1, r8
 8005f02:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f06:	4649      	mov	r1, r9
 8005f08:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	f04f 0300 	mov.w	r3, #0
 8005f14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f20:	ebb2 040a 	subs.w	r4, r2, sl
 8005f24:	eb63 050b 	sbc.w	r5, r3, fp
 8005f28:	f04f 0200 	mov.w	r2, #0
 8005f2c:	f04f 0300 	mov.w	r3, #0
 8005f30:	00eb      	lsls	r3, r5, #3
 8005f32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f36:	00e2      	lsls	r2, r4, #3
 8005f38:	4614      	mov	r4, r2
 8005f3a:	461d      	mov	r5, r3
 8005f3c:	4643      	mov	r3, r8
 8005f3e:	18e3      	adds	r3, r4, r3
 8005f40:	603b      	str	r3, [r7, #0]
 8005f42:	464b      	mov	r3, r9
 8005f44:	eb45 0303 	adc.w	r3, r5, r3
 8005f48:	607b      	str	r3, [r7, #4]
 8005f4a:	f04f 0200 	mov.w	r2, #0
 8005f4e:	f04f 0300 	mov.w	r3, #0
 8005f52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f56:	4629      	mov	r1, r5
 8005f58:	028b      	lsls	r3, r1, #10
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f60:	4621      	mov	r1, r4
 8005f62:	028a      	lsls	r2, r1, #10
 8005f64:	4610      	mov	r0, r2
 8005f66:	4619      	mov	r1, r3
 8005f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	61bb      	str	r3, [r7, #24]
 8005f6e:	61fa      	str	r2, [r7, #28]
 8005f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f74:	f7fa f98c 	bl	8000290 <__aeabi_uldivmod>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005f80:	4b0b      	ldr	r3, [pc, #44]	@ (8005fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	0c1b      	lsrs	r3, r3, #16
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005f90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f9a:	e002      	b.n	8005fa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f9c:	4b05      	ldr	r3, [pc, #20]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3750      	adds	r7, #80	@ 0x50
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fae:	bf00      	nop
 8005fb0:	40023800 	.word	0x40023800
 8005fb4:	00f42400 	.word	0x00f42400
 8005fb8:	007a1200 	.word	0x007a1200

08005fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fc0:	4b03      	ldr	r3, [pc, #12]	@ (8005fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	20000010 	.word	0x20000010

08005fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fd8:	f7ff fff0 	bl	8005fbc <HAL_RCC_GetHCLKFreq>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	4b05      	ldr	r3, [pc, #20]	@ (8005ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	0a9b      	lsrs	r3, r3, #10
 8005fe4:	f003 0307 	and.w	r3, r3, #7
 8005fe8:	4903      	ldr	r1, [pc, #12]	@ (8005ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fea:	5ccb      	ldrb	r3, [r1, r3]
 8005fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	40023800 	.word	0x40023800
 8005ff8:	08008a80 	.word	0x08008a80

08005ffc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006004:	2300      	movs	r3, #0
 8006006:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10b      	bne.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006020:	2b00      	cmp	r3, #0
 8006022:	d105      	bne.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800602c:	2b00      	cmp	r3, #0
 800602e:	d075      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006030:	4b91      	ldr	r3, [pc, #580]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006032:	2200      	movs	r2, #0
 8006034:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006036:	f7fd fbd1 	bl	80037dc <HAL_GetTick>
 800603a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800603c:	e008      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800603e:	f7fd fbcd 	bl	80037dc <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d901      	bls.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e189      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006050:	4b8a      	ldr	r3, [pc, #552]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1f0      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d009      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	019a      	lsls	r2, r3, #6
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	071b      	lsls	r3, r3, #28
 8006074:	4981      	ldr	r1, [pc, #516]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006076:	4313      	orrs	r3, r2
 8006078:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01f      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006088:	4b7c      	ldr	r3, [pc, #496]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800608a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800608e:	0f1b      	lsrs	r3, r3, #28
 8006090:	f003 0307 	and.w	r3, r3, #7
 8006094:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	019a      	lsls	r2, r3, #6
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	061b      	lsls	r3, r3, #24
 80060a2:	431a      	orrs	r2, r3
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	071b      	lsls	r3, r3, #28
 80060a8:	4974      	ldr	r1, [pc, #464]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80060b0:	4b72      	ldr	r3, [pc, #456]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060b6:	f023 021f 	bic.w	r2, r3, #31
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	3b01      	subs	r3, #1
 80060c0:	496e      	ldr	r1, [pc, #440]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00d      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	019a      	lsls	r2, r3, #6
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	061b      	lsls	r3, r3, #24
 80060e0:	431a      	orrs	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	071b      	lsls	r3, r3, #28
 80060e8:	4964      	ldr	r1, [pc, #400]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80060f0:	4b61      	ldr	r3, [pc, #388]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80060f2:	2201      	movs	r2, #1
 80060f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060f6:	f7fd fb71 	bl	80037dc <HAL_GetTick>
 80060fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060fc:	e008      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060fe:	f7fd fb6d 	bl	80037dc <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	2b02      	cmp	r3, #2
 800610a:	d901      	bls.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e129      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006110:	4b5a      	ldr	r3, [pc, #360]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0f0      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b00      	cmp	r3, #0
 8006126:	d105      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006130:	2b00      	cmp	r3, #0
 8006132:	d079      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006134:	4b52      	ldr	r3, [pc, #328]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006136:	2200      	movs	r2, #0
 8006138:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800613a:	f7fd fb4f 	bl	80037dc <HAL_GetTick>
 800613e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006140:	e008      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006142:	f7fd fb4b 	bl	80037dc <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	2b02      	cmp	r3, #2
 800614e:	d901      	bls.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e107      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006154:	4b49      	ldr	r3, [pc, #292]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800615c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006160:	d0ef      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	d020      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800616e:	4b43      	ldr	r3, [pc, #268]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006174:	0f1b      	lsrs	r3, r3, #28
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	019a      	lsls	r2, r3, #6
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	061b      	lsls	r3, r3, #24
 8006188:	431a      	orrs	r2, r3
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	071b      	lsls	r3, r3, #28
 800618e:	493b      	ldr	r1, [pc, #236]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006190:	4313      	orrs	r3, r2
 8006192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006196:	4b39      	ldr	r3, [pc, #228]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006198:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800619c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	3b01      	subs	r3, #1
 80061a6:	021b      	lsls	r3, r3, #8
 80061a8:	4934      	ldr	r1, [pc, #208]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0308 	and.w	r3, r3, #8
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d01e      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80061bc:	4b2f      	ldr	r3, [pc, #188]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c2:	0e1b      	lsrs	r3, r3, #24
 80061c4:	f003 030f 	and.w	r3, r3, #15
 80061c8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	019a      	lsls	r2, r3, #6
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	061b      	lsls	r3, r3, #24
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	071b      	lsls	r3, r3, #28
 80061dc:	4927      	ldr	r1, [pc, #156]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80061e4:	4b25      	ldr	r3, [pc, #148]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061ea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f2:	4922      	ldr	r1, [pc, #136]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80061fa:	4b21      	ldr	r3, [pc, #132]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80061fc:	2201      	movs	r2, #1
 80061fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006200:	f7fd faec 	bl	80037dc <HAL_GetTick>
 8006204:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006206:	e008      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006208:	f7fd fae8 	bl	80037dc <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b02      	cmp	r3, #2
 8006214:	d901      	bls.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e0a4      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800621a:	4b18      	ldr	r3, [pc, #96]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006222:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006226:	d1ef      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0320 	and.w	r3, r3, #32
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 808b 	beq.w	800634c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006236:	2300      	movs	r3, #0
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	4b10      	ldr	r3, [pc, #64]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800623c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623e:	4a0f      	ldr	r2, [pc, #60]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006244:	6413      	str	r3, [r2, #64]	@ 0x40
 8006246:	4b0d      	ldr	r3, [pc, #52]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006252:	4b0c      	ldr	r3, [pc, #48]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a0b      	ldr	r2, [pc, #44]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800625c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800625e:	f7fd fabd 	bl	80037dc <HAL_GetTick>
 8006262:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006264:	e010      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006266:	f7fd fab9 	bl	80037dc <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b02      	cmp	r3, #2
 8006272:	d909      	bls.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e075      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006278:	42470068 	.word	0x42470068
 800627c:	40023800 	.word	0x40023800
 8006280:	42470070 	.word	0x42470070
 8006284:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006288:	4b38      	ldr	r3, [pc, #224]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0e8      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006294:	4b36      	ldr	r3, [pc, #216]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006298:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800629c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d02f      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d028      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062b2:	4b2f      	ldr	r3, [pc, #188]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062bc:	4b2d      	ldr	r3, [pc, #180]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80062be:	2201      	movs	r2, #1
 80062c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062c2:	4b2c      	ldr	r3, [pc, #176]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80062c8:	4a29      	ldr	r2, [pc, #164]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80062ce:	4b28      	ldr	r3, [pc, #160]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d114      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80062da:	f7fd fa7f 	bl	80037dc <HAL_GetTick>
 80062de:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062e0:	e00a      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062e2:	f7fd fa7b 	bl	80037dc <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d901      	bls.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e035      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d0ee      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006308:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800630c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006310:	d10d      	bne.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006312:	4b17      	ldr	r3, [pc, #92]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800631e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006326:	4912      	ldr	r1, [pc, #72]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006328:	4313      	orrs	r3, r2
 800632a:	608b      	str	r3, [r1, #8]
 800632c:	e005      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800632e:	4b10      	ldr	r3, [pc, #64]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	4a0f      	ldr	r2, [pc, #60]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006334:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006338:	6093      	str	r3, [r2, #8]
 800633a:	4b0d      	ldr	r3, [pc, #52]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800633c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006346:	490a      	ldr	r1, [pc, #40]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006348:	4313      	orrs	r3, r2
 800634a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0310 	and.w	r3, r3, #16
 8006354:	2b00      	cmp	r3, #0
 8006356:	d004      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800635e:	4b06      	ldr	r3, [pc, #24]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006360:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3718      	adds	r7, #24
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	40007000 	.word	0x40007000
 8006370:	40023800 	.word	0x40023800
 8006374:	42470e40 	.word	0x42470e40
 8006378:	424711e0 	.word	0x424711e0

0800637c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e01c      	b.n	80063c8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	795b      	ldrb	r3, [r3, #5]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d105      	bne.n	80063a4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7fc fd1c 	bl	8002ddc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f042 0204 	orr.w	r2, r2, #4
 80063b8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e07b      	b.n	80064da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d108      	bne.n	80063fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063f2:	d009      	beq.n	8006408 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	61da      	str	r2, [r3, #28]
 80063fa:	e005      	b.n	8006408 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d106      	bne.n	8006428 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7fc fcfc 	bl	8002e20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800643e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006450:	431a      	orrs	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	431a      	orrs	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	431a      	orrs	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006478:	431a      	orrs	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006482:	431a      	orrs	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800648c:	ea42 0103 	orr.w	r1, r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006494:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	0c1b      	lsrs	r3, r3, #16
 80064a6:	f003 0104 	and.w	r1, r3, #4
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ae:	f003 0210 	and.w	r2, r3, #16
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69da      	ldr	r2, [r3, #28]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b082      	sub	sp, #8
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e01a      	b.n	800652a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800650a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7fc fccf 	bl	8002eb0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b088      	sub	sp, #32
 8006536:	af00      	add	r7, sp, #0
 8006538:	60f8      	str	r0, [r7, #12]
 800653a:	60b9      	str	r1, [r7, #8]
 800653c:	603b      	str	r3, [r7, #0]
 800653e:	4613      	mov	r3, r2
 8006540:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006542:	f7fd f94b 	bl	80037dc <HAL_GetTick>
 8006546:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006548:	88fb      	ldrh	r3, [r7, #6]
 800654a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b01      	cmp	r3, #1
 8006556:	d001      	beq.n	800655c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006558:	2302      	movs	r3, #2
 800655a:	e12a      	b.n	80067b2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <HAL_SPI_Transmit+0x36>
 8006562:	88fb      	ldrh	r3, [r7, #6]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e122      	b.n	80067b2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006572:	2b01      	cmp	r3, #1
 8006574:	d101      	bne.n	800657a <HAL_SPI_Transmit+0x48>
 8006576:	2302      	movs	r3, #2
 8006578:	e11b      	b.n	80067b2 <HAL_SPI_Transmit+0x280>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2203      	movs	r2, #3
 8006586:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	88fa      	ldrh	r2, [r7, #6]
 800659a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	88fa      	ldrh	r2, [r7, #6]
 80065a0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065c8:	d10f      	bne.n	80065ea <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f4:	2b40      	cmp	r3, #64	@ 0x40
 80065f6:	d007      	beq.n	8006608 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006606:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006610:	d152      	bne.n	80066b8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <HAL_SPI_Transmit+0xee>
 800661a:	8b7b      	ldrh	r3, [r7, #26]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d145      	bne.n	80066ac <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006624:	881a      	ldrh	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006630:	1c9a      	adds	r2, r3, #2
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006644:	e032      	b.n	80066ac <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b02      	cmp	r3, #2
 8006652:	d112      	bne.n	800667a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006658:	881a      	ldrh	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006664:	1c9a      	adds	r2, r3, #2
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800666e:	b29b      	uxth	r3, r3
 8006670:	3b01      	subs	r3, #1
 8006672:	b29a      	uxth	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006678:	e018      	b.n	80066ac <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800667a:	f7fd f8af 	bl	80037dc <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	429a      	cmp	r2, r3
 8006688:	d803      	bhi.n	8006692 <HAL_SPI_Transmit+0x160>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006690:	d102      	bne.n	8006698 <HAL_SPI_Transmit+0x166>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d109      	bne.n	80066ac <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e082      	b.n	80067b2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1c7      	bne.n	8006646 <HAL_SPI_Transmit+0x114>
 80066b6:	e053      	b.n	8006760 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <HAL_SPI_Transmit+0x194>
 80066c0:	8b7b      	ldrh	r3, [r7, #26]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d147      	bne.n	8006756 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	330c      	adds	r3, #12
 80066d0:	7812      	ldrb	r2, [r2, #0]
 80066d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80066ec:	e033      	b.n	8006756 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d113      	bne.n	8006724 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	330c      	adds	r3, #12
 8006706:	7812      	ldrb	r2, [r2, #0]
 8006708:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800670e:	1c5a      	adds	r2, r3, #1
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006718:	b29b      	uxth	r3, r3
 800671a:	3b01      	subs	r3, #1
 800671c:	b29a      	uxth	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006722:	e018      	b.n	8006756 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006724:	f7fd f85a 	bl	80037dc <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	429a      	cmp	r2, r3
 8006732:	d803      	bhi.n	800673c <HAL_SPI_Transmit+0x20a>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673a:	d102      	bne.n	8006742 <HAL_SPI_Transmit+0x210>
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d109      	bne.n	8006756 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e02d      	b.n	80067b2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800675a:	b29b      	uxth	r3, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1c6      	bne.n	80066ee <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006760:	69fa      	ldr	r2, [r7, #28]
 8006762:	6839      	ldr	r1, [r7, #0]
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f8bf 	bl	80068e8 <SPI_EndRxTxTransaction>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2220      	movs	r2, #32
 8006774:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10a      	bne.n	8006794 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800677e:	2300      	movs	r3, #0
 8006780:	617b      	str	r3, [r7, #20]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	617b      	str	r3, [r7, #20]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e000      	b.n	80067b2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80067b0:	2300      	movs	r3, #0
  }
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3720      	adds	r7, #32
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067c8:	b2db      	uxtb	r3, r3
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
	...

080067d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b088      	sub	sp, #32
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	603b      	str	r3, [r7, #0]
 80067e4:	4613      	mov	r3, r2
 80067e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067e8:	f7fc fff8 	bl	80037dc <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f0:	1a9b      	subs	r3, r3, r2
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	4413      	add	r3, r2
 80067f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067f8:	f7fc fff0 	bl	80037dc <HAL_GetTick>
 80067fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067fe:	4b39      	ldr	r3, [pc, #228]	@ (80068e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	015b      	lsls	r3, r3, #5
 8006804:	0d1b      	lsrs	r3, r3, #20
 8006806:	69fa      	ldr	r2, [r7, #28]
 8006808:	fb02 f303 	mul.w	r3, r2, r3
 800680c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800680e:	e054      	b.n	80068ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006816:	d050      	beq.n	80068ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006818:	f7fc ffe0 	bl	80037dc <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	69fa      	ldr	r2, [r7, #28]
 8006824:	429a      	cmp	r2, r3
 8006826:	d902      	bls.n	800682e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d13d      	bne.n	80068aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800683c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006846:	d111      	bne.n	800686c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006850:	d004      	beq.n	800685c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800685a:	d107      	bne.n	800686c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800686a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006870:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006874:	d10f      	bne.n	8006896 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006894:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e017      	b.n	80068da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	4013      	ands	r3, r2
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	bf0c      	ite	eq
 80068ca:	2301      	moveq	r3, #1
 80068cc:	2300      	movne	r3, #0
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	461a      	mov	r2, r3
 80068d2:	79fb      	ldrb	r3, [r7, #7]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d19b      	bne.n	8006810 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3720      	adds	r7, #32
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20000010 	.word	0x20000010

080068e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af02      	add	r7, sp, #8
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2201      	movs	r2, #1
 80068fc:	2102      	movs	r1, #2
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f7ff ff6a 	bl	80067d8 <SPI_WaitFlagStateUntilTimeout>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d007      	beq.n	800691a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800690e:	f043 0220 	orr.w	r2, r3, #32
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e032      	b.n	8006980 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800691a:	4b1b      	ldr	r3, [pc, #108]	@ (8006988 <SPI_EndRxTxTransaction+0xa0>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a1b      	ldr	r2, [pc, #108]	@ (800698c <SPI_EndRxTxTransaction+0xa4>)
 8006920:	fba2 2303 	umull	r2, r3, r2, r3
 8006924:	0d5b      	lsrs	r3, r3, #21
 8006926:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800692a:	fb02 f303 	mul.w	r3, r2, r3
 800692e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006938:	d112      	bne.n	8006960 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2200      	movs	r2, #0
 8006942:	2180      	movs	r1, #128	@ 0x80
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f7ff ff47 	bl	80067d8 <SPI_WaitFlagStateUntilTimeout>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d016      	beq.n	800697e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006954:	f043 0220 	orr.w	r2, r3, #32
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e00f      	b.n	8006980 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	3b01      	subs	r3, #1
 800696a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006976:	2b80      	cmp	r3, #128	@ 0x80
 8006978:	d0f2      	beq.n	8006960 <SPI_EndRxTxTransaction+0x78>
 800697a:	e000      	b.n	800697e <SPI_EndRxTxTransaction+0x96>
        break;
 800697c:	bf00      	nop
  }

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3718      	adds	r7, #24
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	20000010 	.word	0x20000010
 800698c:	165e9f81 	.word	0x165e9f81

08006990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e041      	b.n	8006a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7fc fa98 	bl	8002eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	3304      	adds	r3, #4
 80069cc:	4619      	mov	r1, r3
 80069ce:	4610      	mov	r0, r2
 80069d0:	f000 f8f4 	bl	8006bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d101      	bne.n	8006a4a <HAL_TIM_ConfigClockSource+0x1c>
 8006a46:	2302      	movs	r3, #2
 8006a48:	e0b4      	b.n	8006bb4 <HAL_TIM_ConfigClockSource+0x186>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2202      	movs	r2, #2
 8006a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006a68:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a70:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a82:	d03e      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0xd4>
 8006a84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a88:	f200 8087 	bhi.w	8006b9a <HAL_TIM_ConfigClockSource+0x16c>
 8006a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a90:	f000 8086 	beq.w	8006ba0 <HAL_TIM_ConfigClockSource+0x172>
 8006a94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a98:	d87f      	bhi.n	8006b9a <HAL_TIM_ConfigClockSource+0x16c>
 8006a9a:	2b70      	cmp	r3, #112	@ 0x70
 8006a9c:	d01a      	beq.n	8006ad4 <HAL_TIM_ConfigClockSource+0xa6>
 8006a9e:	2b70      	cmp	r3, #112	@ 0x70
 8006aa0:	d87b      	bhi.n	8006b9a <HAL_TIM_ConfigClockSource+0x16c>
 8006aa2:	2b60      	cmp	r3, #96	@ 0x60
 8006aa4:	d050      	beq.n	8006b48 <HAL_TIM_ConfigClockSource+0x11a>
 8006aa6:	2b60      	cmp	r3, #96	@ 0x60
 8006aa8:	d877      	bhi.n	8006b9a <HAL_TIM_ConfigClockSource+0x16c>
 8006aaa:	2b50      	cmp	r3, #80	@ 0x50
 8006aac:	d03c      	beq.n	8006b28 <HAL_TIM_ConfigClockSource+0xfa>
 8006aae:	2b50      	cmp	r3, #80	@ 0x50
 8006ab0:	d873      	bhi.n	8006b9a <HAL_TIM_ConfigClockSource+0x16c>
 8006ab2:	2b40      	cmp	r3, #64	@ 0x40
 8006ab4:	d058      	beq.n	8006b68 <HAL_TIM_ConfigClockSource+0x13a>
 8006ab6:	2b40      	cmp	r3, #64	@ 0x40
 8006ab8:	d86f      	bhi.n	8006b9a <HAL_TIM_ConfigClockSource+0x16c>
 8006aba:	2b30      	cmp	r3, #48	@ 0x30
 8006abc:	d064      	beq.n	8006b88 <HAL_TIM_ConfigClockSource+0x15a>
 8006abe:	2b30      	cmp	r3, #48	@ 0x30
 8006ac0:	d86b      	bhi.n	8006b9a <HAL_TIM_ConfigClockSource+0x16c>
 8006ac2:	2b20      	cmp	r3, #32
 8006ac4:	d060      	beq.n	8006b88 <HAL_TIM_ConfigClockSource+0x15a>
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	d867      	bhi.n	8006b9a <HAL_TIM_ConfigClockSource+0x16c>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d05c      	beq.n	8006b88 <HAL_TIM_ConfigClockSource+0x15a>
 8006ace:	2b10      	cmp	r3, #16
 8006ad0:	d05a      	beq.n	8006b88 <HAL_TIM_ConfigClockSource+0x15a>
 8006ad2:	e062      	b.n	8006b9a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ae4:	f000 f990 	bl	8006e08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006af6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	609a      	str	r2, [r3, #8]
      break;
 8006b00:	e04f      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b12:	f000 f979 	bl	8006e08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b24:	609a      	str	r2, [r3, #8]
      break;
 8006b26:	e03c      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b34:	461a      	mov	r2, r3
 8006b36:	f000 f8ed 	bl	8006d14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2150      	movs	r1, #80	@ 0x50
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 f946 	bl	8006dd2 <TIM_ITRx_SetConfig>
      break;
 8006b46:	e02c      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b54:	461a      	mov	r2, r3
 8006b56:	f000 f90c 	bl	8006d72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2160      	movs	r1, #96	@ 0x60
 8006b60:	4618      	mov	r0, r3
 8006b62:	f000 f936 	bl	8006dd2 <TIM_ITRx_SetConfig>
      break;
 8006b66:	e01c      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b74:	461a      	mov	r2, r3
 8006b76:	f000 f8cd 	bl	8006d14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2140      	movs	r1, #64	@ 0x40
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 f926 	bl	8006dd2 <TIM_ITRx_SetConfig>
      break;
 8006b86:	e00c      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4619      	mov	r1, r3
 8006b92:	4610      	mov	r0, r2
 8006b94:	f000 f91d 	bl	8006dd2 <TIM_ITRx_SetConfig>
      break;
 8006b98:	e003      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b9e:	e000      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ba0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a46      	ldr	r2, [pc, #280]	@ (8006ce8 <TIM_Base_SetConfig+0x12c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d013      	beq.n	8006bfc <TIM_Base_SetConfig+0x40>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bda:	d00f      	beq.n	8006bfc <TIM_Base_SetConfig+0x40>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a43      	ldr	r2, [pc, #268]	@ (8006cec <TIM_Base_SetConfig+0x130>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d00b      	beq.n	8006bfc <TIM_Base_SetConfig+0x40>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a42      	ldr	r2, [pc, #264]	@ (8006cf0 <TIM_Base_SetConfig+0x134>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d007      	beq.n	8006bfc <TIM_Base_SetConfig+0x40>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a41      	ldr	r2, [pc, #260]	@ (8006cf4 <TIM_Base_SetConfig+0x138>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d003      	beq.n	8006bfc <TIM_Base_SetConfig+0x40>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a40      	ldr	r2, [pc, #256]	@ (8006cf8 <TIM_Base_SetConfig+0x13c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d108      	bne.n	8006c0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a35      	ldr	r2, [pc, #212]	@ (8006ce8 <TIM_Base_SetConfig+0x12c>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d02b      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c1c:	d027      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a32      	ldr	r2, [pc, #200]	@ (8006cec <TIM_Base_SetConfig+0x130>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d023      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a31      	ldr	r2, [pc, #196]	@ (8006cf0 <TIM_Base_SetConfig+0x134>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d01f      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a30      	ldr	r2, [pc, #192]	@ (8006cf4 <TIM_Base_SetConfig+0x138>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d01b      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a2f      	ldr	r2, [pc, #188]	@ (8006cf8 <TIM_Base_SetConfig+0x13c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d017      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a2e      	ldr	r2, [pc, #184]	@ (8006cfc <TIM_Base_SetConfig+0x140>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d013      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a2d      	ldr	r2, [pc, #180]	@ (8006d00 <TIM_Base_SetConfig+0x144>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00f      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a2c      	ldr	r2, [pc, #176]	@ (8006d04 <TIM_Base_SetConfig+0x148>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00b      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a2b      	ldr	r2, [pc, #172]	@ (8006d08 <TIM_Base_SetConfig+0x14c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d007      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a2a      	ldr	r2, [pc, #168]	@ (8006d0c <TIM_Base_SetConfig+0x150>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d003      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a29      	ldr	r2, [pc, #164]	@ (8006d10 <TIM_Base_SetConfig+0x154>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d108      	bne.n	8006c80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a10      	ldr	r2, [pc, #64]	@ (8006ce8 <TIM_Base_SetConfig+0x12c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d003      	beq.n	8006cb4 <TIM_Base_SetConfig+0xf8>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a12      	ldr	r2, [pc, #72]	@ (8006cf8 <TIM_Base_SetConfig+0x13c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d103      	bne.n	8006cbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	691a      	ldr	r2, [r3, #16]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d105      	bne.n	8006cda <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	f023 0201 	bic.w	r2, r3, #1
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	611a      	str	r2, [r3, #16]
  }
}
 8006cda:	bf00      	nop
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	40010000 	.word	0x40010000
 8006cec:	40000400 	.word	0x40000400
 8006cf0:	40000800 	.word	0x40000800
 8006cf4:	40000c00 	.word	0x40000c00
 8006cf8:	40010400 	.word	0x40010400
 8006cfc:	40014000 	.word	0x40014000
 8006d00:	40014400 	.word	0x40014400
 8006d04:	40014800 	.word	0x40014800
 8006d08:	40001800 	.word	0x40001800
 8006d0c:	40001c00 	.word	0x40001c00
 8006d10:	40002000 	.word	0x40002000

08006d14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	f023 0201 	bic.w	r2, r3, #1
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	011b      	lsls	r3, r3, #4
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f023 030a 	bic.w	r3, r3, #10
 8006d50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	621a      	str	r2, [r3, #32]
}
 8006d66:	bf00      	nop
 8006d68:	371c      	adds	r7, #28
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b087      	sub	sp, #28
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	60f8      	str	r0, [r7, #12]
 8006d7a:	60b9      	str	r1, [r7, #8]
 8006d7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	f023 0210 	bic.w	r2, r3, #16
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	031b      	lsls	r3, r3, #12
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006dae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	011b      	lsls	r3, r3, #4
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	621a      	str	r2, [r3, #32]
}
 8006dc6:	bf00      	nop
 8006dc8:	371c      	adds	r7, #28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b085      	sub	sp, #20
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006de8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	f043 0307 	orr.w	r3, r3, #7
 8006df4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	609a      	str	r2, [r3, #8]
}
 8006dfc:	bf00      	nop
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
 8006e14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	021a      	lsls	r2, r3, #8
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	609a      	str	r2, [r3, #8]
}
 8006e3c:	bf00      	nop
 8006e3e:	371c      	adds	r7, #28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d101      	bne.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	e05a      	b.n	8006f16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a21      	ldr	r2, [pc, #132]	@ (8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d022      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eac:	d01d      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8006f28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d018      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8006f2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d013      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8006f30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d00e      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a18      	ldr	r2, [pc, #96]	@ (8006f34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d009      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a17      	ldr	r2, [pc, #92]	@ (8006f38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d004      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a15      	ldr	r2, [pc, #84]	@ (8006f3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d10c      	bne.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3714      	adds	r7, #20
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	40010000 	.word	0x40010000
 8006f28:	40000400 	.word	0x40000400
 8006f2c:	40000800 	.word	0x40000800
 8006f30:	40000c00 	.word	0x40000c00
 8006f34:	40010400 	.word	0x40010400
 8006f38:	40014000 	.word	0x40014000
 8006f3c:	40001800 	.word	0x40001800

08006f40 <siprintf>:
 8006f40:	b40e      	push	{r1, r2, r3}
 8006f42:	b500      	push	{lr}
 8006f44:	b09c      	sub	sp, #112	@ 0x70
 8006f46:	ab1d      	add	r3, sp, #116	@ 0x74
 8006f48:	9002      	str	r0, [sp, #8]
 8006f4a:	9006      	str	r0, [sp, #24]
 8006f4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f50:	4809      	ldr	r0, [pc, #36]	@ (8006f78 <siprintf+0x38>)
 8006f52:	9107      	str	r1, [sp, #28]
 8006f54:	9104      	str	r1, [sp, #16]
 8006f56:	4909      	ldr	r1, [pc, #36]	@ (8006f7c <siprintf+0x3c>)
 8006f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f5c:	9105      	str	r1, [sp, #20]
 8006f5e:	6800      	ldr	r0, [r0, #0]
 8006f60:	9301      	str	r3, [sp, #4]
 8006f62:	a902      	add	r1, sp, #8
 8006f64:	f000 f994 	bl	8007290 <_svfiprintf_r>
 8006f68:	9b02      	ldr	r3, [sp, #8]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	701a      	strb	r2, [r3, #0]
 8006f6e:	b01c      	add	sp, #112	@ 0x70
 8006f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f74:	b003      	add	sp, #12
 8006f76:	4770      	bx	lr
 8006f78:	2000001c 	.word	0x2000001c
 8006f7c:	ffff0208 	.word	0xffff0208

08006f80 <memset>:
 8006f80:	4402      	add	r2, r0
 8006f82:	4603      	mov	r3, r0
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d100      	bne.n	8006f8a <memset+0xa>
 8006f88:	4770      	bx	lr
 8006f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f8e:	e7f9      	b.n	8006f84 <memset+0x4>

08006f90 <__errno>:
 8006f90:	4b01      	ldr	r3, [pc, #4]	@ (8006f98 <__errno+0x8>)
 8006f92:	6818      	ldr	r0, [r3, #0]
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	2000001c 	.word	0x2000001c

08006f9c <__libc_init_array>:
 8006f9c:	b570      	push	{r4, r5, r6, lr}
 8006f9e:	4d0d      	ldr	r5, [pc, #52]	@ (8006fd4 <__libc_init_array+0x38>)
 8006fa0:	4c0d      	ldr	r4, [pc, #52]	@ (8006fd8 <__libc_init_array+0x3c>)
 8006fa2:	1b64      	subs	r4, r4, r5
 8006fa4:	10a4      	asrs	r4, r4, #2
 8006fa6:	2600      	movs	r6, #0
 8006fa8:	42a6      	cmp	r6, r4
 8006faa:	d109      	bne.n	8006fc0 <__libc_init_array+0x24>
 8006fac:	4d0b      	ldr	r5, [pc, #44]	@ (8006fdc <__libc_init_array+0x40>)
 8006fae:	4c0c      	ldr	r4, [pc, #48]	@ (8006fe0 <__libc_init_array+0x44>)
 8006fb0:	f000 fc66 	bl	8007880 <_init>
 8006fb4:	1b64      	subs	r4, r4, r5
 8006fb6:	10a4      	asrs	r4, r4, #2
 8006fb8:	2600      	movs	r6, #0
 8006fba:	42a6      	cmp	r6, r4
 8006fbc:	d105      	bne.n	8006fca <__libc_init_array+0x2e>
 8006fbe:	bd70      	pop	{r4, r5, r6, pc}
 8006fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fc4:	4798      	blx	r3
 8006fc6:	3601      	adds	r6, #1
 8006fc8:	e7ee      	b.n	8006fa8 <__libc_init_array+0xc>
 8006fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fce:	4798      	blx	r3
 8006fd0:	3601      	adds	r6, #1
 8006fd2:	e7f2      	b.n	8006fba <__libc_init_array+0x1e>
 8006fd4:	08008ac4 	.word	0x08008ac4
 8006fd8:	08008ac4 	.word	0x08008ac4
 8006fdc:	08008ac4 	.word	0x08008ac4
 8006fe0:	08008ac8 	.word	0x08008ac8

08006fe4 <__retarget_lock_acquire_recursive>:
 8006fe4:	4770      	bx	lr

08006fe6 <__retarget_lock_release_recursive>:
 8006fe6:	4770      	bx	lr

08006fe8 <_free_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	4605      	mov	r5, r0
 8006fec:	2900      	cmp	r1, #0
 8006fee:	d041      	beq.n	8007074 <_free_r+0x8c>
 8006ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ff4:	1f0c      	subs	r4, r1, #4
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	bfb8      	it	lt
 8006ffa:	18e4      	addlt	r4, r4, r3
 8006ffc:	f000 f8e0 	bl	80071c0 <__malloc_lock>
 8007000:	4a1d      	ldr	r2, [pc, #116]	@ (8007078 <_free_r+0x90>)
 8007002:	6813      	ldr	r3, [r2, #0]
 8007004:	b933      	cbnz	r3, 8007014 <_free_r+0x2c>
 8007006:	6063      	str	r3, [r4, #4]
 8007008:	6014      	str	r4, [r2, #0]
 800700a:	4628      	mov	r0, r5
 800700c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007010:	f000 b8dc 	b.w	80071cc <__malloc_unlock>
 8007014:	42a3      	cmp	r3, r4
 8007016:	d908      	bls.n	800702a <_free_r+0x42>
 8007018:	6820      	ldr	r0, [r4, #0]
 800701a:	1821      	adds	r1, r4, r0
 800701c:	428b      	cmp	r3, r1
 800701e:	bf01      	itttt	eq
 8007020:	6819      	ldreq	r1, [r3, #0]
 8007022:	685b      	ldreq	r3, [r3, #4]
 8007024:	1809      	addeq	r1, r1, r0
 8007026:	6021      	streq	r1, [r4, #0]
 8007028:	e7ed      	b.n	8007006 <_free_r+0x1e>
 800702a:	461a      	mov	r2, r3
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	b10b      	cbz	r3, 8007034 <_free_r+0x4c>
 8007030:	42a3      	cmp	r3, r4
 8007032:	d9fa      	bls.n	800702a <_free_r+0x42>
 8007034:	6811      	ldr	r1, [r2, #0]
 8007036:	1850      	adds	r0, r2, r1
 8007038:	42a0      	cmp	r0, r4
 800703a:	d10b      	bne.n	8007054 <_free_r+0x6c>
 800703c:	6820      	ldr	r0, [r4, #0]
 800703e:	4401      	add	r1, r0
 8007040:	1850      	adds	r0, r2, r1
 8007042:	4283      	cmp	r3, r0
 8007044:	6011      	str	r1, [r2, #0]
 8007046:	d1e0      	bne.n	800700a <_free_r+0x22>
 8007048:	6818      	ldr	r0, [r3, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	6053      	str	r3, [r2, #4]
 800704e:	4408      	add	r0, r1
 8007050:	6010      	str	r0, [r2, #0]
 8007052:	e7da      	b.n	800700a <_free_r+0x22>
 8007054:	d902      	bls.n	800705c <_free_r+0x74>
 8007056:	230c      	movs	r3, #12
 8007058:	602b      	str	r3, [r5, #0]
 800705a:	e7d6      	b.n	800700a <_free_r+0x22>
 800705c:	6820      	ldr	r0, [r4, #0]
 800705e:	1821      	adds	r1, r4, r0
 8007060:	428b      	cmp	r3, r1
 8007062:	bf04      	itt	eq
 8007064:	6819      	ldreq	r1, [r3, #0]
 8007066:	685b      	ldreq	r3, [r3, #4]
 8007068:	6063      	str	r3, [r4, #4]
 800706a:	bf04      	itt	eq
 800706c:	1809      	addeq	r1, r1, r0
 800706e:	6021      	streq	r1, [r4, #0]
 8007070:	6054      	str	r4, [r2, #4]
 8007072:	e7ca      	b.n	800700a <_free_r+0x22>
 8007074:	bd38      	pop	{r3, r4, r5, pc}
 8007076:	bf00      	nop
 8007078:	20025db4 	.word	0x20025db4

0800707c <sbrk_aligned>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	4e0f      	ldr	r6, [pc, #60]	@ (80070bc <sbrk_aligned+0x40>)
 8007080:	460c      	mov	r4, r1
 8007082:	6831      	ldr	r1, [r6, #0]
 8007084:	4605      	mov	r5, r0
 8007086:	b911      	cbnz	r1, 800708e <sbrk_aligned+0x12>
 8007088:	f000 fba6 	bl	80077d8 <_sbrk_r>
 800708c:	6030      	str	r0, [r6, #0]
 800708e:	4621      	mov	r1, r4
 8007090:	4628      	mov	r0, r5
 8007092:	f000 fba1 	bl	80077d8 <_sbrk_r>
 8007096:	1c43      	adds	r3, r0, #1
 8007098:	d103      	bne.n	80070a2 <sbrk_aligned+0x26>
 800709a:	f04f 34ff 	mov.w	r4, #4294967295
 800709e:	4620      	mov	r0, r4
 80070a0:	bd70      	pop	{r4, r5, r6, pc}
 80070a2:	1cc4      	adds	r4, r0, #3
 80070a4:	f024 0403 	bic.w	r4, r4, #3
 80070a8:	42a0      	cmp	r0, r4
 80070aa:	d0f8      	beq.n	800709e <sbrk_aligned+0x22>
 80070ac:	1a21      	subs	r1, r4, r0
 80070ae:	4628      	mov	r0, r5
 80070b0:	f000 fb92 	bl	80077d8 <_sbrk_r>
 80070b4:	3001      	adds	r0, #1
 80070b6:	d1f2      	bne.n	800709e <sbrk_aligned+0x22>
 80070b8:	e7ef      	b.n	800709a <sbrk_aligned+0x1e>
 80070ba:	bf00      	nop
 80070bc:	20025db0 	.word	0x20025db0

080070c0 <_malloc_r>:
 80070c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070c4:	1ccd      	adds	r5, r1, #3
 80070c6:	f025 0503 	bic.w	r5, r5, #3
 80070ca:	3508      	adds	r5, #8
 80070cc:	2d0c      	cmp	r5, #12
 80070ce:	bf38      	it	cc
 80070d0:	250c      	movcc	r5, #12
 80070d2:	2d00      	cmp	r5, #0
 80070d4:	4606      	mov	r6, r0
 80070d6:	db01      	blt.n	80070dc <_malloc_r+0x1c>
 80070d8:	42a9      	cmp	r1, r5
 80070da:	d904      	bls.n	80070e6 <_malloc_r+0x26>
 80070dc:	230c      	movs	r3, #12
 80070de:	6033      	str	r3, [r6, #0]
 80070e0:	2000      	movs	r0, #0
 80070e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071bc <_malloc_r+0xfc>
 80070ea:	f000 f869 	bl	80071c0 <__malloc_lock>
 80070ee:	f8d8 3000 	ldr.w	r3, [r8]
 80070f2:	461c      	mov	r4, r3
 80070f4:	bb44      	cbnz	r4, 8007148 <_malloc_r+0x88>
 80070f6:	4629      	mov	r1, r5
 80070f8:	4630      	mov	r0, r6
 80070fa:	f7ff ffbf 	bl	800707c <sbrk_aligned>
 80070fe:	1c43      	adds	r3, r0, #1
 8007100:	4604      	mov	r4, r0
 8007102:	d158      	bne.n	80071b6 <_malloc_r+0xf6>
 8007104:	f8d8 4000 	ldr.w	r4, [r8]
 8007108:	4627      	mov	r7, r4
 800710a:	2f00      	cmp	r7, #0
 800710c:	d143      	bne.n	8007196 <_malloc_r+0xd6>
 800710e:	2c00      	cmp	r4, #0
 8007110:	d04b      	beq.n	80071aa <_malloc_r+0xea>
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	4639      	mov	r1, r7
 8007116:	4630      	mov	r0, r6
 8007118:	eb04 0903 	add.w	r9, r4, r3
 800711c:	f000 fb5c 	bl	80077d8 <_sbrk_r>
 8007120:	4581      	cmp	r9, r0
 8007122:	d142      	bne.n	80071aa <_malloc_r+0xea>
 8007124:	6821      	ldr	r1, [r4, #0]
 8007126:	1a6d      	subs	r5, r5, r1
 8007128:	4629      	mov	r1, r5
 800712a:	4630      	mov	r0, r6
 800712c:	f7ff ffa6 	bl	800707c <sbrk_aligned>
 8007130:	3001      	adds	r0, #1
 8007132:	d03a      	beq.n	80071aa <_malloc_r+0xea>
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	442b      	add	r3, r5
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	f8d8 3000 	ldr.w	r3, [r8]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	bb62      	cbnz	r2, 800719c <_malloc_r+0xdc>
 8007142:	f8c8 7000 	str.w	r7, [r8]
 8007146:	e00f      	b.n	8007168 <_malloc_r+0xa8>
 8007148:	6822      	ldr	r2, [r4, #0]
 800714a:	1b52      	subs	r2, r2, r5
 800714c:	d420      	bmi.n	8007190 <_malloc_r+0xd0>
 800714e:	2a0b      	cmp	r2, #11
 8007150:	d917      	bls.n	8007182 <_malloc_r+0xc2>
 8007152:	1961      	adds	r1, r4, r5
 8007154:	42a3      	cmp	r3, r4
 8007156:	6025      	str	r5, [r4, #0]
 8007158:	bf18      	it	ne
 800715a:	6059      	strne	r1, [r3, #4]
 800715c:	6863      	ldr	r3, [r4, #4]
 800715e:	bf08      	it	eq
 8007160:	f8c8 1000 	streq.w	r1, [r8]
 8007164:	5162      	str	r2, [r4, r5]
 8007166:	604b      	str	r3, [r1, #4]
 8007168:	4630      	mov	r0, r6
 800716a:	f000 f82f 	bl	80071cc <__malloc_unlock>
 800716e:	f104 000b 	add.w	r0, r4, #11
 8007172:	1d23      	adds	r3, r4, #4
 8007174:	f020 0007 	bic.w	r0, r0, #7
 8007178:	1ac2      	subs	r2, r0, r3
 800717a:	bf1c      	itt	ne
 800717c:	1a1b      	subne	r3, r3, r0
 800717e:	50a3      	strne	r3, [r4, r2]
 8007180:	e7af      	b.n	80070e2 <_malloc_r+0x22>
 8007182:	6862      	ldr	r2, [r4, #4]
 8007184:	42a3      	cmp	r3, r4
 8007186:	bf0c      	ite	eq
 8007188:	f8c8 2000 	streq.w	r2, [r8]
 800718c:	605a      	strne	r2, [r3, #4]
 800718e:	e7eb      	b.n	8007168 <_malloc_r+0xa8>
 8007190:	4623      	mov	r3, r4
 8007192:	6864      	ldr	r4, [r4, #4]
 8007194:	e7ae      	b.n	80070f4 <_malloc_r+0x34>
 8007196:	463c      	mov	r4, r7
 8007198:	687f      	ldr	r7, [r7, #4]
 800719a:	e7b6      	b.n	800710a <_malloc_r+0x4a>
 800719c:	461a      	mov	r2, r3
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	42a3      	cmp	r3, r4
 80071a2:	d1fb      	bne.n	800719c <_malloc_r+0xdc>
 80071a4:	2300      	movs	r3, #0
 80071a6:	6053      	str	r3, [r2, #4]
 80071a8:	e7de      	b.n	8007168 <_malloc_r+0xa8>
 80071aa:	230c      	movs	r3, #12
 80071ac:	6033      	str	r3, [r6, #0]
 80071ae:	4630      	mov	r0, r6
 80071b0:	f000 f80c 	bl	80071cc <__malloc_unlock>
 80071b4:	e794      	b.n	80070e0 <_malloc_r+0x20>
 80071b6:	6005      	str	r5, [r0, #0]
 80071b8:	e7d6      	b.n	8007168 <_malloc_r+0xa8>
 80071ba:	bf00      	nop
 80071bc:	20025db4 	.word	0x20025db4

080071c0 <__malloc_lock>:
 80071c0:	4801      	ldr	r0, [pc, #4]	@ (80071c8 <__malloc_lock+0x8>)
 80071c2:	f7ff bf0f 	b.w	8006fe4 <__retarget_lock_acquire_recursive>
 80071c6:	bf00      	nop
 80071c8:	20025dac 	.word	0x20025dac

080071cc <__malloc_unlock>:
 80071cc:	4801      	ldr	r0, [pc, #4]	@ (80071d4 <__malloc_unlock+0x8>)
 80071ce:	f7ff bf0a 	b.w	8006fe6 <__retarget_lock_release_recursive>
 80071d2:	bf00      	nop
 80071d4:	20025dac 	.word	0x20025dac

080071d8 <__ssputs_r>:
 80071d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071dc:	688e      	ldr	r6, [r1, #8]
 80071de:	461f      	mov	r7, r3
 80071e0:	42be      	cmp	r6, r7
 80071e2:	680b      	ldr	r3, [r1, #0]
 80071e4:	4682      	mov	sl, r0
 80071e6:	460c      	mov	r4, r1
 80071e8:	4690      	mov	r8, r2
 80071ea:	d82d      	bhi.n	8007248 <__ssputs_r+0x70>
 80071ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80071f4:	d026      	beq.n	8007244 <__ssputs_r+0x6c>
 80071f6:	6965      	ldr	r5, [r4, #20]
 80071f8:	6909      	ldr	r1, [r1, #16]
 80071fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071fe:	eba3 0901 	sub.w	r9, r3, r1
 8007202:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007206:	1c7b      	adds	r3, r7, #1
 8007208:	444b      	add	r3, r9
 800720a:	106d      	asrs	r5, r5, #1
 800720c:	429d      	cmp	r5, r3
 800720e:	bf38      	it	cc
 8007210:	461d      	movcc	r5, r3
 8007212:	0553      	lsls	r3, r2, #21
 8007214:	d527      	bpl.n	8007266 <__ssputs_r+0x8e>
 8007216:	4629      	mov	r1, r5
 8007218:	f7ff ff52 	bl	80070c0 <_malloc_r>
 800721c:	4606      	mov	r6, r0
 800721e:	b360      	cbz	r0, 800727a <__ssputs_r+0xa2>
 8007220:	6921      	ldr	r1, [r4, #16]
 8007222:	464a      	mov	r2, r9
 8007224:	f000 fae8 	bl	80077f8 <memcpy>
 8007228:	89a3      	ldrh	r3, [r4, #12]
 800722a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800722e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007232:	81a3      	strh	r3, [r4, #12]
 8007234:	6126      	str	r6, [r4, #16]
 8007236:	6165      	str	r5, [r4, #20]
 8007238:	444e      	add	r6, r9
 800723a:	eba5 0509 	sub.w	r5, r5, r9
 800723e:	6026      	str	r6, [r4, #0]
 8007240:	60a5      	str	r5, [r4, #8]
 8007242:	463e      	mov	r6, r7
 8007244:	42be      	cmp	r6, r7
 8007246:	d900      	bls.n	800724a <__ssputs_r+0x72>
 8007248:	463e      	mov	r6, r7
 800724a:	6820      	ldr	r0, [r4, #0]
 800724c:	4632      	mov	r2, r6
 800724e:	4641      	mov	r1, r8
 8007250:	f000 faa8 	bl	80077a4 <memmove>
 8007254:	68a3      	ldr	r3, [r4, #8]
 8007256:	1b9b      	subs	r3, r3, r6
 8007258:	60a3      	str	r3, [r4, #8]
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	4433      	add	r3, r6
 800725e:	6023      	str	r3, [r4, #0]
 8007260:	2000      	movs	r0, #0
 8007262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007266:	462a      	mov	r2, r5
 8007268:	f000 fad4 	bl	8007814 <_realloc_r>
 800726c:	4606      	mov	r6, r0
 800726e:	2800      	cmp	r0, #0
 8007270:	d1e0      	bne.n	8007234 <__ssputs_r+0x5c>
 8007272:	6921      	ldr	r1, [r4, #16]
 8007274:	4650      	mov	r0, sl
 8007276:	f7ff feb7 	bl	8006fe8 <_free_r>
 800727a:	230c      	movs	r3, #12
 800727c:	f8ca 3000 	str.w	r3, [sl]
 8007280:	89a3      	ldrh	r3, [r4, #12]
 8007282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007286:	81a3      	strh	r3, [r4, #12]
 8007288:	f04f 30ff 	mov.w	r0, #4294967295
 800728c:	e7e9      	b.n	8007262 <__ssputs_r+0x8a>
	...

08007290 <_svfiprintf_r>:
 8007290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007294:	4698      	mov	r8, r3
 8007296:	898b      	ldrh	r3, [r1, #12]
 8007298:	061b      	lsls	r3, r3, #24
 800729a:	b09d      	sub	sp, #116	@ 0x74
 800729c:	4607      	mov	r7, r0
 800729e:	460d      	mov	r5, r1
 80072a0:	4614      	mov	r4, r2
 80072a2:	d510      	bpl.n	80072c6 <_svfiprintf_r+0x36>
 80072a4:	690b      	ldr	r3, [r1, #16]
 80072a6:	b973      	cbnz	r3, 80072c6 <_svfiprintf_r+0x36>
 80072a8:	2140      	movs	r1, #64	@ 0x40
 80072aa:	f7ff ff09 	bl	80070c0 <_malloc_r>
 80072ae:	6028      	str	r0, [r5, #0]
 80072b0:	6128      	str	r0, [r5, #16]
 80072b2:	b930      	cbnz	r0, 80072c2 <_svfiprintf_r+0x32>
 80072b4:	230c      	movs	r3, #12
 80072b6:	603b      	str	r3, [r7, #0]
 80072b8:	f04f 30ff 	mov.w	r0, #4294967295
 80072bc:	b01d      	add	sp, #116	@ 0x74
 80072be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c2:	2340      	movs	r3, #64	@ 0x40
 80072c4:	616b      	str	r3, [r5, #20]
 80072c6:	2300      	movs	r3, #0
 80072c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80072ca:	2320      	movs	r3, #32
 80072cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80072d4:	2330      	movs	r3, #48	@ 0x30
 80072d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007474 <_svfiprintf_r+0x1e4>
 80072da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072de:	f04f 0901 	mov.w	r9, #1
 80072e2:	4623      	mov	r3, r4
 80072e4:	469a      	mov	sl, r3
 80072e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072ea:	b10a      	cbz	r2, 80072f0 <_svfiprintf_r+0x60>
 80072ec:	2a25      	cmp	r2, #37	@ 0x25
 80072ee:	d1f9      	bne.n	80072e4 <_svfiprintf_r+0x54>
 80072f0:	ebba 0b04 	subs.w	fp, sl, r4
 80072f4:	d00b      	beq.n	800730e <_svfiprintf_r+0x7e>
 80072f6:	465b      	mov	r3, fp
 80072f8:	4622      	mov	r2, r4
 80072fa:	4629      	mov	r1, r5
 80072fc:	4638      	mov	r0, r7
 80072fe:	f7ff ff6b 	bl	80071d8 <__ssputs_r>
 8007302:	3001      	adds	r0, #1
 8007304:	f000 80a7 	beq.w	8007456 <_svfiprintf_r+0x1c6>
 8007308:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800730a:	445a      	add	r2, fp
 800730c:	9209      	str	r2, [sp, #36]	@ 0x24
 800730e:	f89a 3000 	ldrb.w	r3, [sl]
 8007312:	2b00      	cmp	r3, #0
 8007314:	f000 809f 	beq.w	8007456 <_svfiprintf_r+0x1c6>
 8007318:	2300      	movs	r3, #0
 800731a:	f04f 32ff 	mov.w	r2, #4294967295
 800731e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007322:	f10a 0a01 	add.w	sl, sl, #1
 8007326:	9304      	str	r3, [sp, #16]
 8007328:	9307      	str	r3, [sp, #28]
 800732a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800732e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007330:	4654      	mov	r4, sl
 8007332:	2205      	movs	r2, #5
 8007334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007338:	484e      	ldr	r0, [pc, #312]	@ (8007474 <_svfiprintf_r+0x1e4>)
 800733a:	f7f8 ff59 	bl	80001f0 <memchr>
 800733e:	9a04      	ldr	r2, [sp, #16]
 8007340:	b9d8      	cbnz	r0, 800737a <_svfiprintf_r+0xea>
 8007342:	06d0      	lsls	r0, r2, #27
 8007344:	bf44      	itt	mi
 8007346:	2320      	movmi	r3, #32
 8007348:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800734c:	0711      	lsls	r1, r2, #28
 800734e:	bf44      	itt	mi
 8007350:	232b      	movmi	r3, #43	@ 0x2b
 8007352:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007356:	f89a 3000 	ldrb.w	r3, [sl]
 800735a:	2b2a      	cmp	r3, #42	@ 0x2a
 800735c:	d015      	beq.n	800738a <_svfiprintf_r+0xfa>
 800735e:	9a07      	ldr	r2, [sp, #28]
 8007360:	4654      	mov	r4, sl
 8007362:	2000      	movs	r0, #0
 8007364:	f04f 0c0a 	mov.w	ip, #10
 8007368:	4621      	mov	r1, r4
 800736a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800736e:	3b30      	subs	r3, #48	@ 0x30
 8007370:	2b09      	cmp	r3, #9
 8007372:	d94b      	bls.n	800740c <_svfiprintf_r+0x17c>
 8007374:	b1b0      	cbz	r0, 80073a4 <_svfiprintf_r+0x114>
 8007376:	9207      	str	r2, [sp, #28]
 8007378:	e014      	b.n	80073a4 <_svfiprintf_r+0x114>
 800737a:	eba0 0308 	sub.w	r3, r0, r8
 800737e:	fa09 f303 	lsl.w	r3, r9, r3
 8007382:	4313      	orrs	r3, r2
 8007384:	9304      	str	r3, [sp, #16]
 8007386:	46a2      	mov	sl, r4
 8007388:	e7d2      	b.n	8007330 <_svfiprintf_r+0xa0>
 800738a:	9b03      	ldr	r3, [sp, #12]
 800738c:	1d19      	adds	r1, r3, #4
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	9103      	str	r1, [sp, #12]
 8007392:	2b00      	cmp	r3, #0
 8007394:	bfbb      	ittet	lt
 8007396:	425b      	neglt	r3, r3
 8007398:	f042 0202 	orrlt.w	r2, r2, #2
 800739c:	9307      	strge	r3, [sp, #28]
 800739e:	9307      	strlt	r3, [sp, #28]
 80073a0:	bfb8      	it	lt
 80073a2:	9204      	strlt	r2, [sp, #16]
 80073a4:	7823      	ldrb	r3, [r4, #0]
 80073a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80073a8:	d10a      	bne.n	80073c0 <_svfiprintf_r+0x130>
 80073aa:	7863      	ldrb	r3, [r4, #1]
 80073ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80073ae:	d132      	bne.n	8007416 <_svfiprintf_r+0x186>
 80073b0:	9b03      	ldr	r3, [sp, #12]
 80073b2:	1d1a      	adds	r2, r3, #4
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	9203      	str	r2, [sp, #12]
 80073b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073bc:	3402      	adds	r4, #2
 80073be:	9305      	str	r3, [sp, #20]
 80073c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007484 <_svfiprintf_r+0x1f4>
 80073c4:	7821      	ldrb	r1, [r4, #0]
 80073c6:	2203      	movs	r2, #3
 80073c8:	4650      	mov	r0, sl
 80073ca:	f7f8 ff11 	bl	80001f0 <memchr>
 80073ce:	b138      	cbz	r0, 80073e0 <_svfiprintf_r+0x150>
 80073d0:	9b04      	ldr	r3, [sp, #16]
 80073d2:	eba0 000a 	sub.w	r0, r0, sl
 80073d6:	2240      	movs	r2, #64	@ 0x40
 80073d8:	4082      	lsls	r2, r0
 80073da:	4313      	orrs	r3, r2
 80073dc:	3401      	adds	r4, #1
 80073de:	9304      	str	r3, [sp, #16]
 80073e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073e4:	4824      	ldr	r0, [pc, #144]	@ (8007478 <_svfiprintf_r+0x1e8>)
 80073e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073ea:	2206      	movs	r2, #6
 80073ec:	f7f8 ff00 	bl	80001f0 <memchr>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	d036      	beq.n	8007462 <_svfiprintf_r+0x1d2>
 80073f4:	4b21      	ldr	r3, [pc, #132]	@ (800747c <_svfiprintf_r+0x1ec>)
 80073f6:	bb1b      	cbnz	r3, 8007440 <_svfiprintf_r+0x1b0>
 80073f8:	9b03      	ldr	r3, [sp, #12]
 80073fa:	3307      	adds	r3, #7
 80073fc:	f023 0307 	bic.w	r3, r3, #7
 8007400:	3308      	adds	r3, #8
 8007402:	9303      	str	r3, [sp, #12]
 8007404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007406:	4433      	add	r3, r6
 8007408:	9309      	str	r3, [sp, #36]	@ 0x24
 800740a:	e76a      	b.n	80072e2 <_svfiprintf_r+0x52>
 800740c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007410:	460c      	mov	r4, r1
 8007412:	2001      	movs	r0, #1
 8007414:	e7a8      	b.n	8007368 <_svfiprintf_r+0xd8>
 8007416:	2300      	movs	r3, #0
 8007418:	3401      	adds	r4, #1
 800741a:	9305      	str	r3, [sp, #20]
 800741c:	4619      	mov	r1, r3
 800741e:	f04f 0c0a 	mov.w	ip, #10
 8007422:	4620      	mov	r0, r4
 8007424:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007428:	3a30      	subs	r2, #48	@ 0x30
 800742a:	2a09      	cmp	r2, #9
 800742c:	d903      	bls.n	8007436 <_svfiprintf_r+0x1a6>
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0c6      	beq.n	80073c0 <_svfiprintf_r+0x130>
 8007432:	9105      	str	r1, [sp, #20]
 8007434:	e7c4      	b.n	80073c0 <_svfiprintf_r+0x130>
 8007436:	fb0c 2101 	mla	r1, ip, r1, r2
 800743a:	4604      	mov	r4, r0
 800743c:	2301      	movs	r3, #1
 800743e:	e7f0      	b.n	8007422 <_svfiprintf_r+0x192>
 8007440:	ab03      	add	r3, sp, #12
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	462a      	mov	r2, r5
 8007446:	4b0e      	ldr	r3, [pc, #56]	@ (8007480 <_svfiprintf_r+0x1f0>)
 8007448:	a904      	add	r1, sp, #16
 800744a:	4638      	mov	r0, r7
 800744c:	f3af 8000 	nop.w
 8007450:	1c42      	adds	r2, r0, #1
 8007452:	4606      	mov	r6, r0
 8007454:	d1d6      	bne.n	8007404 <_svfiprintf_r+0x174>
 8007456:	89ab      	ldrh	r3, [r5, #12]
 8007458:	065b      	lsls	r3, r3, #25
 800745a:	f53f af2d 	bmi.w	80072b8 <_svfiprintf_r+0x28>
 800745e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007460:	e72c      	b.n	80072bc <_svfiprintf_r+0x2c>
 8007462:	ab03      	add	r3, sp, #12
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	462a      	mov	r2, r5
 8007468:	4b05      	ldr	r3, [pc, #20]	@ (8007480 <_svfiprintf_r+0x1f0>)
 800746a:	a904      	add	r1, sp, #16
 800746c:	4638      	mov	r0, r7
 800746e:	f000 f879 	bl	8007564 <_printf_i>
 8007472:	e7ed      	b.n	8007450 <_svfiprintf_r+0x1c0>
 8007474:	08008a88 	.word	0x08008a88
 8007478:	08008a92 	.word	0x08008a92
 800747c:	00000000 	.word	0x00000000
 8007480:	080071d9 	.word	0x080071d9
 8007484:	08008a8e 	.word	0x08008a8e

08007488 <_printf_common>:
 8007488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800748c:	4616      	mov	r6, r2
 800748e:	4698      	mov	r8, r3
 8007490:	688a      	ldr	r2, [r1, #8]
 8007492:	690b      	ldr	r3, [r1, #16]
 8007494:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007498:	4293      	cmp	r3, r2
 800749a:	bfb8      	it	lt
 800749c:	4613      	movlt	r3, r2
 800749e:	6033      	str	r3, [r6, #0]
 80074a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074a4:	4607      	mov	r7, r0
 80074a6:	460c      	mov	r4, r1
 80074a8:	b10a      	cbz	r2, 80074ae <_printf_common+0x26>
 80074aa:	3301      	adds	r3, #1
 80074ac:	6033      	str	r3, [r6, #0]
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	0699      	lsls	r1, r3, #26
 80074b2:	bf42      	ittt	mi
 80074b4:	6833      	ldrmi	r3, [r6, #0]
 80074b6:	3302      	addmi	r3, #2
 80074b8:	6033      	strmi	r3, [r6, #0]
 80074ba:	6825      	ldr	r5, [r4, #0]
 80074bc:	f015 0506 	ands.w	r5, r5, #6
 80074c0:	d106      	bne.n	80074d0 <_printf_common+0x48>
 80074c2:	f104 0a19 	add.w	sl, r4, #25
 80074c6:	68e3      	ldr	r3, [r4, #12]
 80074c8:	6832      	ldr	r2, [r6, #0]
 80074ca:	1a9b      	subs	r3, r3, r2
 80074cc:	42ab      	cmp	r3, r5
 80074ce:	dc26      	bgt.n	800751e <_printf_common+0x96>
 80074d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074d4:	6822      	ldr	r2, [r4, #0]
 80074d6:	3b00      	subs	r3, #0
 80074d8:	bf18      	it	ne
 80074da:	2301      	movne	r3, #1
 80074dc:	0692      	lsls	r2, r2, #26
 80074de:	d42b      	bmi.n	8007538 <_printf_common+0xb0>
 80074e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074e4:	4641      	mov	r1, r8
 80074e6:	4638      	mov	r0, r7
 80074e8:	47c8      	blx	r9
 80074ea:	3001      	adds	r0, #1
 80074ec:	d01e      	beq.n	800752c <_printf_common+0xa4>
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	6922      	ldr	r2, [r4, #16]
 80074f2:	f003 0306 	and.w	r3, r3, #6
 80074f6:	2b04      	cmp	r3, #4
 80074f8:	bf02      	ittt	eq
 80074fa:	68e5      	ldreq	r5, [r4, #12]
 80074fc:	6833      	ldreq	r3, [r6, #0]
 80074fe:	1aed      	subeq	r5, r5, r3
 8007500:	68a3      	ldr	r3, [r4, #8]
 8007502:	bf0c      	ite	eq
 8007504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007508:	2500      	movne	r5, #0
 800750a:	4293      	cmp	r3, r2
 800750c:	bfc4      	itt	gt
 800750e:	1a9b      	subgt	r3, r3, r2
 8007510:	18ed      	addgt	r5, r5, r3
 8007512:	2600      	movs	r6, #0
 8007514:	341a      	adds	r4, #26
 8007516:	42b5      	cmp	r5, r6
 8007518:	d11a      	bne.n	8007550 <_printf_common+0xc8>
 800751a:	2000      	movs	r0, #0
 800751c:	e008      	b.n	8007530 <_printf_common+0xa8>
 800751e:	2301      	movs	r3, #1
 8007520:	4652      	mov	r2, sl
 8007522:	4641      	mov	r1, r8
 8007524:	4638      	mov	r0, r7
 8007526:	47c8      	blx	r9
 8007528:	3001      	adds	r0, #1
 800752a:	d103      	bne.n	8007534 <_printf_common+0xac>
 800752c:	f04f 30ff 	mov.w	r0, #4294967295
 8007530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007534:	3501      	adds	r5, #1
 8007536:	e7c6      	b.n	80074c6 <_printf_common+0x3e>
 8007538:	18e1      	adds	r1, r4, r3
 800753a:	1c5a      	adds	r2, r3, #1
 800753c:	2030      	movs	r0, #48	@ 0x30
 800753e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007542:	4422      	add	r2, r4
 8007544:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007548:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800754c:	3302      	adds	r3, #2
 800754e:	e7c7      	b.n	80074e0 <_printf_common+0x58>
 8007550:	2301      	movs	r3, #1
 8007552:	4622      	mov	r2, r4
 8007554:	4641      	mov	r1, r8
 8007556:	4638      	mov	r0, r7
 8007558:	47c8      	blx	r9
 800755a:	3001      	adds	r0, #1
 800755c:	d0e6      	beq.n	800752c <_printf_common+0xa4>
 800755e:	3601      	adds	r6, #1
 8007560:	e7d9      	b.n	8007516 <_printf_common+0x8e>
	...

08007564 <_printf_i>:
 8007564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007568:	7e0f      	ldrb	r7, [r1, #24]
 800756a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800756c:	2f78      	cmp	r7, #120	@ 0x78
 800756e:	4691      	mov	r9, r2
 8007570:	4680      	mov	r8, r0
 8007572:	460c      	mov	r4, r1
 8007574:	469a      	mov	sl, r3
 8007576:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800757a:	d807      	bhi.n	800758c <_printf_i+0x28>
 800757c:	2f62      	cmp	r7, #98	@ 0x62
 800757e:	d80a      	bhi.n	8007596 <_printf_i+0x32>
 8007580:	2f00      	cmp	r7, #0
 8007582:	f000 80d2 	beq.w	800772a <_printf_i+0x1c6>
 8007586:	2f58      	cmp	r7, #88	@ 0x58
 8007588:	f000 80b9 	beq.w	80076fe <_printf_i+0x19a>
 800758c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007590:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007594:	e03a      	b.n	800760c <_printf_i+0xa8>
 8007596:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800759a:	2b15      	cmp	r3, #21
 800759c:	d8f6      	bhi.n	800758c <_printf_i+0x28>
 800759e:	a101      	add	r1, pc, #4	@ (adr r1, 80075a4 <_printf_i+0x40>)
 80075a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075a4:	080075fd 	.word	0x080075fd
 80075a8:	08007611 	.word	0x08007611
 80075ac:	0800758d 	.word	0x0800758d
 80075b0:	0800758d 	.word	0x0800758d
 80075b4:	0800758d 	.word	0x0800758d
 80075b8:	0800758d 	.word	0x0800758d
 80075bc:	08007611 	.word	0x08007611
 80075c0:	0800758d 	.word	0x0800758d
 80075c4:	0800758d 	.word	0x0800758d
 80075c8:	0800758d 	.word	0x0800758d
 80075cc:	0800758d 	.word	0x0800758d
 80075d0:	08007711 	.word	0x08007711
 80075d4:	0800763b 	.word	0x0800763b
 80075d8:	080076cb 	.word	0x080076cb
 80075dc:	0800758d 	.word	0x0800758d
 80075e0:	0800758d 	.word	0x0800758d
 80075e4:	08007733 	.word	0x08007733
 80075e8:	0800758d 	.word	0x0800758d
 80075ec:	0800763b 	.word	0x0800763b
 80075f0:	0800758d 	.word	0x0800758d
 80075f4:	0800758d 	.word	0x0800758d
 80075f8:	080076d3 	.word	0x080076d3
 80075fc:	6833      	ldr	r3, [r6, #0]
 80075fe:	1d1a      	adds	r2, r3, #4
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6032      	str	r2, [r6, #0]
 8007604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007608:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800760c:	2301      	movs	r3, #1
 800760e:	e09d      	b.n	800774c <_printf_i+0x1e8>
 8007610:	6833      	ldr	r3, [r6, #0]
 8007612:	6820      	ldr	r0, [r4, #0]
 8007614:	1d19      	adds	r1, r3, #4
 8007616:	6031      	str	r1, [r6, #0]
 8007618:	0606      	lsls	r6, r0, #24
 800761a:	d501      	bpl.n	8007620 <_printf_i+0xbc>
 800761c:	681d      	ldr	r5, [r3, #0]
 800761e:	e003      	b.n	8007628 <_printf_i+0xc4>
 8007620:	0645      	lsls	r5, r0, #25
 8007622:	d5fb      	bpl.n	800761c <_printf_i+0xb8>
 8007624:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007628:	2d00      	cmp	r5, #0
 800762a:	da03      	bge.n	8007634 <_printf_i+0xd0>
 800762c:	232d      	movs	r3, #45	@ 0x2d
 800762e:	426d      	negs	r5, r5
 8007630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007634:	4859      	ldr	r0, [pc, #356]	@ (800779c <_printf_i+0x238>)
 8007636:	230a      	movs	r3, #10
 8007638:	e011      	b.n	800765e <_printf_i+0xfa>
 800763a:	6821      	ldr	r1, [r4, #0]
 800763c:	6833      	ldr	r3, [r6, #0]
 800763e:	0608      	lsls	r0, r1, #24
 8007640:	f853 5b04 	ldr.w	r5, [r3], #4
 8007644:	d402      	bmi.n	800764c <_printf_i+0xe8>
 8007646:	0649      	lsls	r1, r1, #25
 8007648:	bf48      	it	mi
 800764a:	b2ad      	uxthmi	r5, r5
 800764c:	2f6f      	cmp	r7, #111	@ 0x6f
 800764e:	4853      	ldr	r0, [pc, #332]	@ (800779c <_printf_i+0x238>)
 8007650:	6033      	str	r3, [r6, #0]
 8007652:	bf14      	ite	ne
 8007654:	230a      	movne	r3, #10
 8007656:	2308      	moveq	r3, #8
 8007658:	2100      	movs	r1, #0
 800765a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800765e:	6866      	ldr	r6, [r4, #4]
 8007660:	60a6      	str	r6, [r4, #8]
 8007662:	2e00      	cmp	r6, #0
 8007664:	bfa2      	ittt	ge
 8007666:	6821      	ldrge	r1, [r4, #0]
 8007668:	f021 0104 	bicge.w	r1, r1, #4
 800766c:	6021      	strge	r1, [r4, #0]
 800766e:	b90d      	cbnz	r5, 8007674 <_printf_i+0x110>
 8007670:	2e00      	cmp	r6, #0
 8007672:	d04b      	beq.n	800770c <_printf_i+0x1a8>
 8007674:	4616      	mov	r6, r2
 8007676:	fbb5 f1f3 	udiv	r1, r5, r3
 800767a:	fb03 5711 	mls	r7, r3, r1, r5
 800767e:	5dc7      	ldrb	r7, [r0, r7]
 8007680:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007684:	462f      	mov	r7, r5
 8007686:	42bb      	cmp	r3, r7
 8007688:	460d      	mov	r5, r1
 800768a:	d9f4      	bls.n	8007676 <_printf_i+0x112>
 800768c:	2b08      	cmp	r3, #8
 800768e:	d10b      	bne.n	80076a8 <_printf_i+0x144>
 8007690:	6823      	ldr	r3, [r4, #0]
 8007692:	07df      	lsls	r7, r3, #31
 8007694:	d508      	bpl.n	80076a8 <_printf_i+0x144>
 8007696:	6923      	ldr	r3, [r4, #16]
 8007698:	6861      	ldr	r1, [r4, #4]
 800769a:	4299      	cmp	r1, r3
 800769c:	bfde      	ittt	le
 800769e:	2330      	movle	r3, #48	@ 0x30
 80076a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076a8:	1b92      	subs	r2, r2, r6
 80076aa:	6122      	str	r2, [r4, #16]
 80076ac:	f8cd a000 	str.w	sl, [sp]
 80076b0:	464b      	mov	r3, r9
 80076b2:	aa03      	add	r2, sp, #12
 80076b4:	4621      	mov	r1, r4
 80076b6:	4640      	mov	r0, r8
 80076b8:	f7ff fee6 	bl	8007488 <_printf_common>
 80076bc:	3001      	adds	r0, #1
 80076be:	d14a      	bne.n	8007756 <_printf_i+0x1f2>
 80076c0:	f04f 30ff 	mov.w	r0, #4294967295
 80076c4:	b004      	add	sp, #16
 80076c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	f043 0320 	orr.w	r3, r3, #32
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	4833      	ldr	r0, [pc, #204]	@ (80077a0 <_printf_i+0x23c>)
 80076d4:	2778      	movs	r7, #120	@ 0x78
 80076d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	6831      	ldr	r1, [r6, #0]
 80076de:	061f      	lsls	r7, r3, #24
 80076e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80076e4:	d402      	bmi.n	80076ec <_printf_i+0x188>
 80076e6:	065f      	lsls	r7, r3, #25
 80076e8:	bf48      	it	mi
 80076ea:	b2ad      	uxthmi	r5, r5
 80076ec:	6031      	str	r1, [r6, #0]
 80076ee:	07d9      	lsls	r1, r3, #31
 80076f0:	bf44      	itt	mi
 80076f2:	f043 0320 	orrmi.w	r3, r3, #32
 80076f6:	6023      	strmi	r3, [r4, #0]
 80076f8:	b11d      	cbz	r5, 8007702 <_printf_i+0x19e>
 80076fa:	2310      	movs	r3, #16
 80076fc:	e7ac      	b.n	8007658 <_printf_i+0xf4>
 80076fe:	4827      	ldr	r0, [pc, #156]	@ (800779c <_printf_i+0x238>)
 8007700:	e7e9      	b.n	80076d6 <_printf_i+0x172>
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	f023 0320 	bic.w	r3, r3, #32
 8007708:	6023      	str	r3, [r4, #0]
 800770a:	e7f6      	b.n	80076fa <_printf_i+0x196>
 800770c:	4616      	mov	r6, r2
 800770e:	e7bd      	b.n	800768c <_printf_i+0x128>
 8007710:	6833      	ldr	r3, [r6, #0]
 8007712:	6825      	ldr	r5, [r4, #0]
 8007714:	6961      	ldr	r1, [r4, #20]
 8007716:	1d18      	adds	r0, r3, #4
 8007718:	6030      	str	r0, [r6, #0]
 800771a:	062e      	lsls	r6, r5, #24
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	d501      	bpl.n	8007724 <_printf_i+0x1c0>
 8007720:	6019      	str	r1, [r3, #0]
 8007722:	e002      	b.n	800772a <_printf_i+0x1c6>
 8007724:	0668      	lsls	r0, r5, #25
 8007726:	d5fb      	bpl.n	8007720 <_printf_i+0x1bc>
 8007728:	8019      	strh	r1, [r3, #0]
 800772a:	2300      	movs	r3, #0
 800772c:	6123      	str	r3, [r4, #16]
 800772e:	4616      	mov	r6, r2
 8007730:	e7bc      	b.n	80076ac <_printf_i+0x148>
 8007732:	6833      	ldr	r3, [r6, #0]
 8007734:	1d1a      	adds	r2, r3, #4
 8007736:	6032      	str	r2, [r6, #0]
 8007738:	681e      	ldr	r6, [r3, #0]
 800773a:	6862      	ldr	r2, [r4, #4]
 800773c:	2100      	movs	r1, #0
 800773e:	4630      	mov	r0, r6
 8007740:	f7f8 fd56 	bl	80001f0 <memchr>
 8007744:	b108      	cbz	r0, 800774a <_printf_i+0x1e6>
 8007746:	1b80      	subs	r0, r0, r6
 8007748:	6060      	str	r0, [r4, #4]
 800774a:	6863      	ldr	r3, [r4, #4]
 800774c:	6123      	str	r3, [r4, #16]
 800774e:	2300      	movs	r3, #0
 8007750:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007754:	e7aa      	b.n	80076ac <_printf_i+0x148>
 8007756:	6923      	ldr	r3, [r4, #16]
 8007758:	4632      	mov	r2, r6
 800775a:	4649      	mov	r1, r9
 800775c:	4640      	mov	r0, r8
 800775e:	47d0      	blx	sl
 8007760:	3001      	adds	r0, #1
 8007762:	d0ad      	beq.n	80076c0 <_printf_i+0x15c>
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	079b      	lsls	r3, r3, #30
 8007768:	d413      	bmi.n	8007792 <_printf_i+0x22e>
 800776a:	68e0      	ldr	r0, [r4, #12]
 800776c:	9b03      	ldr	r3, [sp, #12]
 800776e:	4298      	cmp	r0, r3
 8007770:	bfb8      	it	lt
 8007772:	4618      	movlt	r0, r3
 8007774:	e7a6      	b.n	80076c4 <_printf_i+0x160>
 8007776:	2301      	movs	r3, #1
 8007778:	4632      	mov	r2, r6
 800777a:	4649      	mov	r1, r9
 800777c:	4640      	mov	r0, r8
 800777e:	47d0      	blx	sl
 8007780:	3001      	adds	r0, #1
 8007782:	d09d      	beq.n	80076c0 <_printf_i+0x15c>
 8007784:	3501      	adds	r5, #1
 8007786:	68e3      	ldr	r3, [r4, #12]
 8007788:	9903      	ldr	r1, [sp, #12]
 800778a:	1a5b      	subs	r3, r3, r1
 800778c:	42ab      	cmp	r3, r5
 800778e:	dcf2      	bgt.n	8007776 <_printf_i+0x212>
 8007790:	e7eb      	b.n	800776a <_printf_i+0x206>
 8007792:	2500      	movs	r5, #0
 8007794:	f104 0619 	add.w	r6, r4, #25
 8007798:	e7f5      	b.n	8007786 <_printf_i+0x222>
 800779a:	bf00      	nop
 800779c:	08008a99 	.word	0x08008a99
 80077a0:	08008aaa 	.word	0x08008aaa

080077a4 <memmove>:
 80077a4:	4288      	cmp	r0, r1
 80077a6:	b510      	push	{r4, lr}
 80077a8:	eb01 0402 	add.w	r4, r1, r2
 80077ac:	d902      	bls.n	80077b4 <memmove+0x10>
 80077ae:	4284      	cmp	r4, r0
 80077b0:	4623      	mov	r3, r4
 80077b2:	d807      	bhi.n	80077c4 <memmove+0x20>
 80077b4:	1e43      	subs	r3, r0, #1
 80077b6:	42a1      	cmp	r1, r4
 80077b8:	d008      	beq.n	80077cc <memmove+0x28>
 80077ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077c2:	e7f8      	b.n	80077b6 <memmove+0x12>
 80077c4:	4402      	add	r2, r0
 80077c6:	4601      	mov	r1, r0
 80077c8:	428a      	cmp	r2, r1
 80077ca:	d100      	bne.n	80077ce <memmove+0x2a>
 80077cc:	bd10      	pop	{r4, pc}
 80077ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077d6:	e7f7      	b.n	80077c8 <memmove+0x24>

080077d8 <_sbrk_r>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	4d06      	ldr	r5, [pc, #24]	@ (80077f4 <_sbrk_r+0x1c>)
 80077dc:	2300      	movs	r3, #0
 80077de:	4604      	mov	r4, r0
 80077e0:	4608      	mov	r0, r1
 80077e2:	602b      	str	r3, [r5, #0]
 80077e4:	f7fb ff22 	bl	800362c <_sbrk>
 80077e8:	1c43      	adds	r3, r0, #1
 80077ea:	d102      	bne.n	80077f2 <_sbrk_r+0x1a>
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	b103      	cbz	r3, 80077f2 <_sbrk_r+0x1a>
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	bd38      	pop	{r3, r4, r5, pc}
 80077f4:	20025da8 	.word	0x20025da8

080077f8 <memcpy>:
 80077f8:	440a      	add	r2, r1
 80077fa:	4291      	cmp	r1, r2
 80077fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007800:	d100      	bne.n	8007804 <memcpy+0xc>
 8007802:	4770      	bx	lr
 8007804:	b510      	push	{r4, lr}
 8007806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800780a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800780e:	4291      	cmp	r1, r2
 8007810:	d1f9      	bne.n	8007806 <memcpy+0xe>
 8007812:	bd10      	pop	{r4, pc}

08007814 <_realloc_r>:
 8007814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007818:	4680      	mov	r8, r0
 800781a:	4615      	mov	r5, r2
 800781c:	460c      	mov	r4, r1
 800781e:	b921      	cbnz	r1, 800782a <_realloc_r+0x16>
 8007820:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007824:	4611      	mov	r1, r2
 8007826:	f7ff bc4b 	b.w	80070c0 <_malloc_r>
 800782a:	b92a      	cbnz	r2, 8007838 <_realloc_r+0x24>
 800782c:	f7ff fbdc 	bl	8006fe8 <_free_r>
 8007830:	2400      	movs	r4, #0
 8007832:	4620      	mov	r0, r4
 8007834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007838:	f000 f81a 	bl	8007870 <_malloc_usable_size_r>
 800783c:	4285      	cmp	r5, r0
 800783e:	4606      	mov	r6, r0
 8007840:	d802      	bhi.n	8007848 <_realloc_r+0x34>
 8007842:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007846:	d8f4      	bhi.n	8007832 <_realloc_r+0x1e>
 8007848:	4629      	mov	r1, r5
 800784a:	4640      	mov	r0, r8
 800784c:	f7ff fc38 	bl	80070c0 <_malloc_r>
 8007850:	4607      	mov	r7, r0
 8007852:	2800      	cmp	r0, #0
 8007854:	d0ec      	beq.n	8007830 <_realloc_r+0x1c>
 8007856:	42b5      	cmp	r5, r6
 8007858:	462a      	mov	r2, r5
 800785a:	4621      	mov	r1, r4
 800785c:	bf28      	it	cs
 800785e:	4632      	movcs	r2, r6
 8007860:	f7ff ffca 	bl	80077f8 <memcpy>
 8007864:	4621      	mov	r1, r4
 8007866:	4640      	mov	r0, r8
 8007868:	f7ff fbbe 	bl	8006fe8 <_free_r>
 800786c:	463c      	mov	r4, r7
 800786e:	e7e0      	b.n	8007832 <_realloc_r+0x1e>

08007870 <_malloc_usable_size_r>:
 8007870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007874:	1f18      	subs	r0, r3, #4
 8007876:	2b00      	cmp	r3, #0
 8007878:	bfbc      	itt	lt
 800787a:	580b      	ldrlt	r3, [r1, r0]
 800787c:	18c0      	addlt	r0, r0, r3
 800787e:	4770      	bx	lr

08007880 <_init>:
 8007880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007882:	bf00      	nop
 8007884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007886:	bc08      	pop	{r3}
 8007888:	469e      	mov	lr, r3
 800788a:	4770      	bx	lr

0800788c <_fini>:
 800788c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788e:	bf00      	nop
 8007890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007892:	bc08      	pop	{r3}
 8007894:	469e      	mov	lr, r3
 8007896:	4770      	bx	lr
