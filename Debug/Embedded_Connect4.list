
Embedded_Connect4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d98  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005f44  08005f44  00006f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f5c  08005f5c  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005f5c  08005f5c  00006f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f64  08005f64  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f64  08005f64  00006f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f68  08005f68  00006f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005f6c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007014  2**0
                  CONTENTS
 10 .bss          00025bbc  20000014  20000014  00007014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025bd0  20025bd0  00007014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013854  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003064  00000000  00000000  0001a898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  0001d900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f78  00000000  00000000  0001ed00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026bd8  00000000  00000000  0001fc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018200  00000000  00000000  00046850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2cab  00000000  00000000  0005ea50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001416fb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053b0  00000000  00000000  00141740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  00146af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005f2c 	.word	0x08005f2c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	08005f2c 	.word	0x08005f2c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f002 f89c 	bl	800261c <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 f9ee 	bl	80008c4 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 f9ab 	bl	8000844 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80004ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 fb8c 	bl	8000c10 <LCD_Clear>

    buttonInit();
 80004f8:	f000 f812 	bl	8000520 <buttonInit>
    //DONT FORGOT TO REMOVE THIS LATER
    addSchedulerEvent(POLLING_GAME_EVENT);
 80004fc:	2002      	movs	r0, #2
 80004fe:	f000 fc0d 	bl	8000d1c <addSchedulerEvent>



    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 8000502:	f000 fbe7 	bl	8000cd4 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 8000506:	4b02      	ldr	r3, [pc, #8]	@ (8000510 <ApplicationInit+0x34>)
 8000508:	2201      	movs	r2, #1
 800050a:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000030 	.word	0x20000030

08000514 <LCD_Visual_Demo>:

void LCD_Visual_Demo(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	LCD_Draw_Game_Grid();
 8000518:	f000 fb9c 	bl	8000c54 <LCD_Draw_Game_Grid>
	//visualDemo();
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}

08000520 <buttonInit>:

void buttonInit(){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	Button_Init();
 8000524:	f000 f82e 	bl	8000584 <Button_Init>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}

0800052c <LCD_Touch_Polling_Game>:
				LCD_Clear(0, LCD_COLOR_GREEN);
			}
		}
}

void LCD_Touch_Polling_Game(){
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	/* If touch pressed */
	if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000530:	4809      	ldr	r0, [pc, #36]	@ (8000558 <LCD_Touch_Polling_Game+0x2c>)
 8000532:	f000 fbda 	bl	8000cea <returnTouchStateAndLocation>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d10a      	bne.n	8000552 <LCD_Touch_Polling_Game+0x26>
		/* Touch valid */
		if(StaticTouchData.x < LCD_PIXEL_WIDTH/2){
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <LCD_Touch_Polling_Game+0x2c>)
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	2b77      	cmp	r3, #119	@ 0x77
 8000542:	d803      	bhi.n	800054c <LCD_Touch_Polling_Game+0x20>
			//left side
			LCD_Update_Chip_To_Drop(LEFT);
 8000544:	2001      	movs	r0, #1
 8000546:	f000 fa93 	bl	8000a70 <LCD_Update_Chip_To_Drop>
		}
	} else {
		/* Touch not pressed */
		//do nothing
	}
}
 800054a:	e002      	b.n	8000552 <LCD_Touch_Polling_Game+0x26>
			LCD_Update_Chip_To_Drop(RIGHT);
 800054c:	2000      	movs	r0, #0
 800054e:	f000 fa8f 	bl	8000a70 <LCD_Update_Chip_To_Drop>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000030 	.word	0x20000030

0800055c <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(){
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000560:	2006      	movs	r0, #6
 8000562:	f002 fa5e 	bl	8002a22 <HAL_NVIC_DisableIRQ>
	LCD_Clear(0, LCD_COLOR_RED);
 8000566:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800056a:	2000      	movs	r0, #0
 800056c:	f000 fb50 	bl	8000c10 <LCD_Clear>
	__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_0);
 8000570:	4b03      	ldr	r3, [pc, #12]	@ (8000580 <EXTI0_IRQHandler+0x24>)
 8000572:	2201      	movs	r2, #1
 8000574:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000576:	2006      	movs	r0, #6
 8000578:	f002 fa45 	bl	8002a06 <HAL_NVIC_EnableIRQ>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40013c00 	.word	0x40013c00

08000584 <Button_Init>:
#include "Button_Driver.h"

void Button_Init(){
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	603b      	str	r3, [r7, #0]
 800058e:	4b12      	ldr	r3, [pc, #72]	@ (80005d8 <Button_Init+0x54>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	4a11      	ldr	r2, [pc, #68]	@ (80005d8 <Button_Init+0x54>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6313      	str	r3, [r2, #48]	@ 0x30
 800059a:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <Button_Init+0x54>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	683b      	ldr	r3, [r7, #0]
		GPIO_InitTypeDef buttonPin;
		buttonPin.Pin         = BUTTON_PIN;
 80005a6:	2301      	movs	r3, #1
 80005a8:	607b      	str	r3, [r7, #4]
		buttonPin.Mode        = GPIO_MODE_IT_RISING;
 80005aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005ae:	60bb      	str	r3, [r7, #8]
		buttonPin.Pull        = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
		buttonPin.Speed       = GPIO_SPEED_FREQ_HIGH;
 80005b4:	2302      	movs	r3, #2
 80005b6:	613b      	str	r3, [r7, #16]
		//buttonPin.Alternate   = GPIO_AF1_TIM2;
		HAL_GPIO_Init(BUTTON_PORT, &buttonPin);
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	4619      	mov	r1, r3
 80005bc:	4807      	ldr	r0, [pc, #28]	@ (80005dc <Button_Init+0x58>)
 80005be:	f002 fa4b 	bl	8002a58 <HAL_GPIO_Init>
		__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_0);
 80005c2:	4b07      	ldr	r3, [pc, #28]	@ (80005e0 <Button_Init+0x5c>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	615a      	str	r2, [r3, #20]

		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005c8:	2006      	movs	r0, #6
 80005ca:	f002 fa1c 	bl	8002a06 <HAL_NVIC_EnableIRQ>
}
 80005ce:	bf00      	nop
 80005d0:	3718      	adds	r7, #24
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40020000 	.word	0x40020000
 80005e0:	40013c00 	.word	0x40013c00

080005e4 <Init_Chip_To_Drop>:

static grid_t grid[7][6];
static chip_to_drop_t chip;
uint8_t playerTurn = PLAYER_RED;

void Init_Chip_To_Drop(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	chip.yPos        = CHIP_Y_POS;
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <Init_Chip_To_Drop+0x20>)
 80005ea:	223a      	movs	r2, #58	@ 0x3a
 80005ec:	709a      	strb	r2, [r3, #2]
	chip.xPos        = CHIP_X_POS(CHIP_X_START_COLUMN);
 80005ee:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <Init_Chip_To_Drop+0x20>)
 80005f0:	2277      	movs	r2, #119	@ 0x77
 80005f2:	705a      	strb	r2, [r3, #1]
	chip.column      = CHIP_X_START_COLUMN;
 80005f4:	4b03      	ldr	r3, [pc, #12]	@ (8000604 <Init_Chip_To_Drop+0x20>)
 80005f6:	2203      	movs	r2, #3
 80005f8:	701a      	strb	r2, [r3, #0]
	LCD_Draw_Chip_To_Drop();
 80005fa:	f000 f9c1 	bl	8000980 <LCD_Draw_Chip_To_Drop>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20025964 	.word	0x20025964

08000608 <Init_Grid_Pos>:

void Init_Grid_Pos(){
 8000608:	b490      	push	{r4, r7}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<7; i++){
 800060e:	2300      	movs	r3, #0
 8000610:	71fb      	strb	r3, [r7, #7]
 8000612:	e032      	b.n	800067a <Init_Grid_Pos+0x72>
		for(uint8_t j =0; j<6; j++){
 8000614:	2300      	movs	r3, #0
 8000616:	71bb      	strb	r3, [r7, #6]
 8000618:	e029      	b.n	800066e <Init_Grid_Pos+0x66>
			grid[i][j].xPos = SQUARE_SIZE/2+SQUARE_SIZE*i;
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	461a      	mov	r2, r3
 800061e:	0112      	lsls	r2, r2, #4
 8000620:	4413      	add	r3, r2
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	79fa      	ldrb	r2, [r7, #7]
 8000628:	79b9      	ldrb	r1, [r7, #6]
 800062a:	3311      	adds	r3, #17
 800062c:	b2dc      	uxtb	r4, r3
 800062e:	4820      	ldr	r0, [pc, #128]	@ (80006b0 <Init_Grid_Pos+0xa8>)
 8000630:	4613      	mov	r3, r2
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	4413      	add	r3, r2
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	440b      	add	r3, r1
 800063a:	4622      	mov	r2, r4
 800063c:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
			grid[i][j].yPos = SQUARE_SIZE/2 + SQUARE_SIZE*j;
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	461a      	mov	r2, r3
 8000644:	0112      	lsls	r2, r2, #4
 8000646:	4413      	add	r3, r2
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	79fa      	ldrb	r2, [r7, #7]
 800064e:	79b9      	ldrb	r1, [r7, #6]
 8000650:	3311      	adds	r3, #17
 8000652:	b2dc      	uxtb	r4, r3
 8000654:	4816      	ldr	r0, [pc, #88]	@ (80006b0 <Init_Grid_Pos+0xa8>)
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	440b      	add	r3, r1
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	4403      	add	r3, r0
 8000664:	4622      	mov	r2, r4
 8000666:	705a      	strb	r2, [r3, #1]
		for(uint8_t j =0; j<6; j++){
 8000668:	79bb      	ldrb	r3, [r7, #6]
 800066a:	3301      	adds	r3, #1
 800066c:	71bb      	strb	r3, [r7, #6]
 800066e:	79bb      	ldrb	r3, [r7, #6]
 8000670:	2b05      	cmp	r3, #5
 8000672:	d9d2      	bls.n	800061a <Init_Grid_Pos+0x12>
	for(uint8_t i = 0; i<7; i++){
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	3301      	adds	r3, #1
 8000678:	71fb      	strb	r3, [r7, #7]
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	2b06      	cmp	r3, #6
 800067e:	d9c9      	bls.n	8000614 <Init_Grid_Pos+0xc>
		}
	}
	for(uint8_t i = 0; i<7; i++){
 8000680:	2300      	movs	r3, #0
 8000682:	717b      	strb	r3, [r7, #5]
 8000684:	e00b      	b.n	800069e <Init_Grid_Pos+0x96>
		for(uint8_t j =0; j<6; j++){
 8000686:	2300      	movs	r3, #0
 8000688:	713b      	strb	r3, [r7, #4]
 800068a:	e002      	b.n	8000692 <Init_Grid_Pos+0x8a>
 800068c:	793b      	ldrb	r3, [r7, #4]
 800068e:	3301      	adds	r3, #1
 8000690:	713b      	strb	r3, [r7, #4]
 8000692:	793b      	ldrb	r3, [r7, #4]
 8000694:	2b05      	cmp	r3, #5
 8000696:	d9f9      	bls.n	800068c <Init_Grid_Pos+0x84>
	for(uint8_t i = 0; i<7; i++){
 8000698:	797b      	ldrb	r3, [r7, #5]
 800069a:	3301      	adds	r3, #1
 800069c:	717b      	strb	r3, [r7, #5]
 800069e:	797b      	ldrb	r3, [r7, #5]
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d9f0      	bls.n	8000686 <Init_Grid_Pos+0x7e>
			//LCD_Draw_Circle_Fill(grid[i][j].xPos, LCD_PIXEL_HEIGHT-grid[i][j].yPos, CIRCLE_RADIUS, LCD_COLOR_RED);
		}
	}
}
 80006a4:	bf00      	nop
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc90      	pop	{r4, r7}
 80006ae:	4770      	bx	lr
 80006b0:	20025910 	.word	0x20025910

080006b4 <LCD_GPIO_Init>:

void LCD_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08c      	sub	sp, #48	@ 0x30
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
 80006be:	4b5a      	ldr	r3, [pc, #360]	@ (8000828 <LCD_GPIO_Init+0x174>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006c2:	4a59      	ldr	r2, [pc, #356]	@ (8000828 <LCD_GPIO_Init+0x174>)
 80006c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ca:	4b57      	ldr	r3, [pc, #348]	@ (8000828 <LCD_GPIO_Init+0x174>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80006d2:	61bb      	str	r3, [r7, #24]
 80006d4:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	4b53      	ldr	r3, [pc, #332]	@ (8000828 <LCD_GPIO_Init+0x174>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a52      	ldr	r2, [pc, #328]	@ (8000828 <LCD_GPIO_Init+0x174>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b50      	ldr	r3, [pc, #320]	@ (8000828 <LCD_GPIO_Init+0x174>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	4b4c      	ldr	r3, [pc, #304]	@ (8000828 <LCD_GPIO_Init+0x174>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a4b      	ldr	r2, [pc, #300]	@ (8000828 <LCD_GPIO_Init+0x174>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b49      	ldr	r3, [pc, #292]	@ (8000828 <LCD_GPIO_Init+0x174>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	4b45      	ldr	r3, [pc, #276]	@ (8000828 <LCD_GPIO_Init+0x174>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a44      	ldr	r2, [pc, #272]	@ (8000828 <LCD_GPIO_Init+0x174>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b42      	ldr	r3, [pc, #264]	@ (8000828 <LCD_GPIO_Init+0x174>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b3e      	ldr	r3, [pc, #248]	@ (8000828 <LCD_GPIO_Init+0x174>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a3d      	ldr	r2, [pc, #244]	@ (8000828 <LCD_GPIO_Init+0x174>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b3b      	ldr	r3, [pc, #236]	@ (8000828 <LCD_GPIO_Init+0x174>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0308 	and.w	r3, r3, #8
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b37      	ldr	r3, [pc, #220]	@ (8000828 <LCD_GPIO_Init+0x174>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a36      	ldr	r2, [pc, #216]	@ (8000828 <LCD_GPIO_Init+0x174>)
 8000750:	f043 0320 	orr.w	r3, r3, #32
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b34      	ldr	r3, [pc, #208]	@ (8000828 <LCD_GPIO_Init+0x174>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0320 	and.w	r3, r3, #32
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b30      	ldr	r3, [pc, #192]	@ (8000828 <LCD_GPIO_Init+0x174>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a2f      	ldr	r2, [pc, #188]	@ (8000828 <LCD_GPIO_Init+0x174>)
 800076c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b2d      	ldr	r3, [pc, #180]	@ (8000828 <LCD_GPIO_Init+0x174>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800077e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000782:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000784:	2302      	movs	r3, #2
 8000786:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800078c:	2302      	movs	r3, #2
 800078e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000790:	230e      	movs	r3, #14
 8000792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4619      	mov	r1, r3
 800079a:	4824      	ldr	r0, [pc, #144]	@ (800082c <LCD_GPIO_Init+0x178>)
 800079c:	f002 f95c 	bl	8002a58 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80007a0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80007a4:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	4619      	mov	r1, r3
 80007ac:	4820      	ldr	r0, [pc, #128]	@ (8000830 <LCD_GPIO_Init+0x17c>)
 80007ae:	f002 f953 	bl	8002a58 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80007b2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80007b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	481d      	ldr	r0, [pc, #116]	@ (8000834 <LCD_GPIO_Init+0x180>)
 80007c0:	f002 f94a 	bl	8002a58 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80007c4:	2348      	movs	r3, #72	@ 0x48
 80007c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	481a      	ldr	r0, [pc, #104]	@ (8000838 <LCD_GPIO_Init+0x184>)
 80007d0:	f002 f942 	bl	8002a58 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80007d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4816      	ldr	r0, [pc, #88]	@ (800083c <LCD_GPIO_Init+0x188>)
 80007e2:	f002 f939 	bl	8002a58 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80007e6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80007ea:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	4619      	mov	r1, r3
 80007f2:	4813      	ldr	r0, [pc, #76]	@ (8000840 <LCD_GPIO_Init+0x18c>)
 80007f4:	f002 f930 	bl	8002a58 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80007f8:	2303      	movs	r3, #3
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80007fc:	2309      	movs	r3, #9
 80007fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	480a      	ldr	r0, [pc, #40]	@ (8000830 <LCD_GPIO_Init+0x17c>)
 8000808:	f002 f926 	bl	8002a58 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800080c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	4809      	ldr	r0, [pc, #36]	@ (8000840 <LCD_GPIO_Init+0x18c>)
 800081a:	f002 f91d 	bl	8002a58 <HAL_GPIO_Init>
}
 800081e:	bf00      	nop
 8000820:	3730      	adds	r7, #48	@ 0x30
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	40020000 	.word	0x40020000
 8000830:	40020400 	.word	0x40020400
 8000834:	40020800 	.word	0x40020800
 8000838:	40020c00 	.word	0x40020c00
 800083c:	40021400 	.word	0x40021400
 8000840:	40021800 	.word	0x40021800

08000844 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b090      	sub	sp, #64	@ 0x40
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000852:	23f0      	movs	r3, #240	@ 0xf0
 8000854:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800085a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800085e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000860:	2302      	movs	r3, #2
 8000862:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000864:	23ff      	movs	r3, #255	@ 0xff
 8000866:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800086c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000870:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000872:	2305      	movs	r3, #5
 8000874:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d101      	bne.n	8000880 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <LTCD_Layer_Init+0x78>)
 800087e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000880:	23f0      	movs	r3, #240	@ 0xf0
 8000882:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000884:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000888:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 800089c:	79fa      	ldrb	r2, [r7, #7]
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	4619      	mov	r1, r3
 80008a4:	4806      	ldr	r0, [pc, #24]	@ (80008c0 <LTCD_Layer_Init+0x7c>)
 80008a6:	f003 fd19 	bl	80042dc <HAL_LTDC_ConfigLayer>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80008b0:	f000 fa0a 	bl	8000cc8 <LCD_Error_Handler>
	}
}
 80008b4:	bf00      	nop
 80008b6:	3740      	adds	r7, #64	@ 0x40
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000110 	.word	0x20000110
 80008c0:	20000038 	.word	0x20000038

080008c4 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80008c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000974 <LTCD__Init+0xb0>)
 80008ca:	4a2b      	ldr	r2, [pc, #172]	@ (8000978 <LTCD__Init+0xb4>)
 80008cc:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80008ce:	4b29      	ldr	r3, [pc, #164]	@ (8000974 <LTCD__Init+0xb0>)
 80008d0:	2209      	movs	r2, #9
 80008d2:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80008d4:	4b27      	ldr	r3, [pc, #156]	@ (8000974 <LTCD__Init+0xb0>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80008da:	4b26      	ldr	r3, [pc, #152]	@ (8000974 <LTCD__Init+0xb0>)
 80008dc:	221d      	movs	r2, #29
 80008de:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80008e0:	4b24      	ldr	r3, [pc, #144]	@ (8000974 <LTCD__Init+0xb0>)
 80008e2:	2203      	movs	r2, #3
 80008e4:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80008e6:	4b23      	ldr	r3, [pc, #140]	@ (8000974 <LTCD__Init+0xb0>)
 80008e8:	f240 120d 	movw	r2, #269	@ 0x10d
 80008ec:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80008ee:	4b21      	ldr	r3, [pc, #132]	@ (8000974 <LTCD__Init+0xb0>)
 80008f0:	f240 1243 	movw	r2, #323	@ 0x143
 80008f4:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <LTCD__Init+0xb0>)
 80008f8:	f240 1217 	movw	r2, #279	@ 0x117
 80008fc:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80008fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <LTCD__Init+0xb0>)
 8000900:	f240 1247 	movw	r2, #327	@ 0x147
 8000904:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000906:	4b1b      	ldr	r3, [pc, #108]	@ (8000974 <LTCD__Init+0xb0>)
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800090e:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <LTCD__Init+0xb0>)
 8000910:	2200      	movs	r2, #0
 8000912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000916:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <LTCD__Init+0xb0>)
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800091e:	4b17      	ldr	r3, [pc, #92]	@ (800097c <LTCD__Init+0xb8>)
 8000920:	2208      	movs	r2, #8
 8000922:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000924:	4b15      	ldr	r3, [pc, #84]	@ (800097c <LTCD__Init+0xb8>)
 8000926:	22c0      	movs	r2, #192	@ 0xc0
 8000928:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800092a:	4b14      	ldr	r3, [pc, #80]	@ (800097c <LTCD__Init+0xb8>)
 800092c:	2204      	movs	r2, #4
 800092e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000930:	4b12      	ldr	r3, [pc, #72]	@ (800097c <LTCD__Init+0xb8>)
 8000932:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000936:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000938:	4810      	ldr	r0, [pc, #64]	@ (800097c <LTCD__Init+0xb8>)
 800093a:	f004 fb29 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800093e:	4b0d      	ldr	r3, [pc, #52]	@ (8000974 <LTCD__Init+0xb0>)
 8000940:	2200      	movs	r2, #0
 8000942:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000944:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <LTCD__Init+0xb0>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800094a:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <LTCD__Init+0xb0>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000950:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <LTCD__Init+0xb0>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000956:	f7ff fead 	bl	80006b4 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800095a:	4806      	ldr	r0, [pc, #24]	@ (8000974 <LTCD__Init+0xb0>)
 800095c:	f003 fbee 	bl	800413c <HAL_LTDC_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000966:	f000 f9af 	bl	8000cc8 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800096a:	f000 f9e9 	bl	8000d40 <ili9341_Init>
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000038 	.word	0x20000038
 8000978:	40016800 	.word	0x40016800
 800097c:	200000e0 	.word	0x200000e0

08000980 <LCD_Draw_Chip_To_Drop>:
/*
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Chip_To_Drop(){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	if(playerTurn == PLAYER_RED){
 8000984:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <LCD_Draw_Chip_To_Drop+0x48>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b02      	cmp	r3, #2
 800098a:	d10b      	bne.n	80009a4 <LCD_Draw_Chip_To_Drop+0x24>
		LCD_Draw_Circle_Fill(chip.xPos, chip.yPos, CIRCLE_RADIUS, LCD_COLOR_RED);
 800098c:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <LCD_Draw_Chip_To_Drop+0x4c>)
 800098e:	785b      	ldrb	r3, [r3, #1]
 8000990:	4618      	mov	r0, r3
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <LCD_Draw_Chip_To_Drop+0x4c>)
 8000994:	789b      	ldrb	r3, [r3, #2]
 8000996:	4619      	mov	r1, r3
 8000998:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800099c:	220c      	movs	r2, #12
 800099e:	f000 f895 	bl	8000acc <LCD_Draw_Circle_Fill>
	}
	else if(playerTurn == PLAYER_YELLOW){
		LCD_Draw_Circle_Fill(chip.xPos, chip.yPos, CIRCLE_RADIUS, LCD_COLOR_YELLOW);
	}
	//if nothing is updating then there is an error with playerTurn
}
 80009a2:	e00e      	b.n	80009c2 <LCD_Draw_Chip_To_Drop+0x42>
	else if(playerTurn == PLAYER_YELLOW){
 80009a4:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <LCD_Draw_Chip_To_Drop+0x48>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d10a      	bne.n	80009c2 <LCD_Draw_Chip_To_Drop+0x42>
		LCD_Draw_Circle_Fill(chip.xPos, chip.yPos, CIRCLE_RADIUS, LCD_COLOR_YELLOW);
 80009ac:	4b07      	ldr	r3, [pc, #28]	@ (80009cc <LCD_Draw_Chip_To_Drop+0x4c>)
 80009ae:	785b      	ldrb	r3, [r3, #1]
 80009b0:	4618      	mov	r0, r3
 80009b2:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <LCD_Draw_Chip_To_Drop+0x4c>)
 80009b4:	789b      	ldrb	r3, [r3, #2]
 80009b6:	4619      	mov	r1, r3
 80009b8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80009bc:	220c      	movs	r2, #12
 80009be:	f000 f885 	bl	8000acc <LCD_Draw_Circle_Fill>
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20025964 	.word	0x20025964

080009d0 <LCD_Clear_Chip_To_Drop>:

void LCD_Clear_Chip_To_Drop(){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	LCD_Draw_Circle_Fill(chip.xPos, chip.yPos, CIRCLE_RADIUS, LCD_COLOR_WHITE);
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <LCD_Clear_Chip_To_Drop+0x20>)
 80009d6:	785b      	ldrb	r3, [r3, #1]
 80009d8:	4618      	mov	r0, r3
 80009da:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <LCD_Clear_Chip_To_Drop+0x20>)
 80009dc:	789b      	ldrb	r3, [r3, #2]
 80009de:	4619      	mov	r1, r3
 80009e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009e4:	220c      	movs	r2, #12
 80009e6:	f000 f871 	bl	8000acc <LCD_Draw_Circle_Fill>
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20025964 	.word	0x20025964

080009f4 <LCD_Update_Chip_To_Drop_Column>:

void LCD_Update_Chip_To_Drop_Column(int direction){
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	if(direction == RIGHT && chip.column != RIGHT_MOST_COLUMN){
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d115      	bne.n	8000a2e <LCD_Update_Chip_To_Drop_Column+0x3a>
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b06      	cmp	r3, #6
 8000a08:	d011      	beq.n	8000a2e <LCD_Update_Chip_To_Drop_Column+0x3a>
		//if its the 7th most do nothing
		chip.column = chip.column + 1;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000a14:	701a      	strb	r2, [r3, #0]
		chip.xPos   = CHIP_X_POS(chip.column);
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	0112      	lsls	r2, r2, #4
 8000a1e:	4413      	add	r3, r2
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	3311      	adds	r3, #17
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	4b10      	ldr	r3, [pc, #64]	@ (8000a6c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000a2a:	705a      	strb	r2, [r3, #1]
	else if(direction == LEFT && chip.column != LEFT_MOST_COLUMN){
		//if its the 1st column do nothing
		chip.column = chip.column - 1;
		chip.xPos   = CHIP_X_POS(chip.column);
	}
}
 8000a2c:	e017      	b.n	8000a5e <LCD_Update_Chip_To_Drop_Column+0x6a>
	else if(direction == LEFT && chip.column != LEFT_MOST_COLUMN){
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d114      	bne.n	8000a5e <LCD_Update_Chip_To_Drop_Column+0x6a>
 8000a34:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d010      	beq.n	8000a5e <LCD_Update_Chip_To_Drop_Column+0x6a>
		chip.column = chip.column - 1;
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	3b01      	subs	r3, #1
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000a46:	701a      	strb	r2, [r3, #0]
		chip.xPos   = CHIP_X_POS(chip.column);
 8000a48:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	0112      	lsls	r2, r2, #4
 8000a50:	4413      	add	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	3311      	adds	r3, #17
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4b04      	ldr	r3, [pc, #16]	@ (8000a6c <LCD_Update_Chip_To_Drop_Column+0x78>)
 8000a5c:	705a      	strb	r2, [r3, #1]
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	20025964 	.word	0x20025964

08000a70 <LCD_Update_Chip_To_Drop>:

void LCD_Update_Chip_To_Drop(int dir){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	LCD_Clear_Chip_To_Drop();
 8000a78:	f7ff ffaa 	bl	80009d0 <LCD_Clear_Chip_To_Drop>
	//HAL_Delay(10);
	LCD_Update_Chip_To_Drop_Column(dir);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ffb9 	bl	80009f4 <LCD_Update_Chip_To_Drop_Column>
	LCD_Draw_Chip_To_Drop();
 8000a82:	f7ff ff7d 	bl	8000980 <LCD_Draw_Chip_To_Drop>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <LCD_Draw_Pixel>:

void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	80bb      	strh	r3, [r7, #4]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000aa2:	88ba      	ldrh	r2, [r7, #4]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	011b      	lsls	r3, r3, #4
 8000aa8:	1a9b      	subs	r3, r3, r2
 8000aaa:	011b      	lsls	r3, r3, #4
 8000aac:	461a      	mov	r2, r3
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4905      	ldr	r1, [pc, #20]	@ (8000ac8 <LCD_Draw_Pixel+0x38>)
 8000ab4:	887a      	ldrh	r2, [r7, #2]
 8000ab6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000110 	.word	0x20000110

08000acc <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4623      	mov	r3, r4
 8000adc:	80fb      	strh	r3, [r7, #6]
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80bb      	strh	r3, [r7, #4]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	807b      	strh	r3, [r7, #2]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000aea:	887b      	ldrh	r3, [r7, #2]
 8000aec:	425b      	negs	r3, r3
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	81fb      	strh	r3, [r7, #14]
 8000af2:	e034      	b.n	8000b5e <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000af4:	887b      	ldrh	r3, [r7, #2]
 8000af6:	425b      	negs	r3, r3
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	81bb      	strh	r3, [r7, #12]
 8000afc:	e024      	b.n	8000b48 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000afe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b02:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000b06:	fb03 f202 	mul.w	r2, r3, r2
 8000b0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b0e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000b12:	fb01 f303 	mul.w	r3, r1, r3
 8000b16:	441a      	add	r2, r3
 8000b18:	887b      	ldrh	r3, [r7, #2]
 8000b1a:	8879      	ldrh	r1, [r7, #2]
 8000b1c:	fb01 f303 	mul.w	r3, r1, r3
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dc0b      	bgt.n	8000b3c <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000b24:	89ba      	ldrh	r2, [r7, #12]
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	4413      	add	r3, r2
 8000b2a:	b298      	uxth	r0, r3
 8000b2c:	89fa      	ldrh	r2, [r7, #14]
 8000b2e:	88bb      	ldrh	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	883a      	ldrh	r2, [r7, #0]
 8000b36:	4619      	mov	r1, r3
 8000b38:	f7ff ffaa 	bl	8000a90 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000b3c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	3301      	adds	r3, #1
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	81bb      	strh	r3, [r7, #12]
 8000b48:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000b4c:	887b      	ldrh	r3, [r7, #2]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	ddd5      	ble.n	8000afe <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000b52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	3301      	adds	r3, #1
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	81fb      	strh	r3, [r7, #14]
 8000b5e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000b62:	887b      	ldrh	r3, [r7, #2]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	ddc5      	ble.n	8000af4 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000b68:	bf00      	nop
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd90      	pop	{r4, r7, pc}

08000b72 <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000b72:	b590      	push	{r4, r7, lr}
 8000b74:	b085      	sub	sp, #20
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4604      	mov	r4, r0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4623      	mov	r3, r4
 8000b82:	80fb      	strh	r3, [r7, #6]
 8000b84:	4603      	mov	r3, r0
 8000b86:	80bb      	strh	r3, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	807b      	strh	r3, [r7, #2]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000b90:	2300      	movs	r3, #0
 8000b92:	81fb      	strh	r3, [r7, #14]
 8000b94:	e00b      	b.n	8000bae <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000b96:	89fa      	ldrh	r2, [r7, #14]
 8000b98:	88bb      	ldrh	r3, [r7, #4]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	b299      	uxth	r1, r3
 8000b9e:	883a      	ldrh	r2, [r7, #0]
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff74 	bl	8000a90 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000ba8:	89fb      	ldrh	r3, [r7, #14]
 8000baa:	3301      	adds	r3, #1
 8000bac:	81fb      	strh	r3, [r7, #14]
 8000bae:	89fa      	ldrh	r2, [r7, #14]
 8000bb0:	887b      	ldrh	r3, [r7, #2]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d3ef      	bcc.n	8000b96 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd90      	pop	{r4, r7, pc}

08000bc0 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	4608      	mov	r0, r1
 8000bca:	4611      	mov	r1, r2
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4623      	mov	r3, r4
 8000bd0:	80fb      	strh	r3, [r7, #6]
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	80bb      	strh	r3, [r7, #4]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	807b      	strh	r3, [r7, #2]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	81fb      	strh	r3, [r7, #14]
 8000be2:	e00b      	b.n	8000bfc <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8000be4:	89fa      	ldrh	r2, [r7, #14]
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	4413      	add	r3, r2
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	883a      	ldrh	r2, [r7, #0]
 8000bee:	88b9      	ldrh	r1, [r7, #4]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff4d 	bl	8000a90 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000bf6:	89fb      	ldrh	r3, [r7, #14]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	81fb      	strh	r3, [r7, #14]
 8000bfc:	89fa      	ldrh	r2, [r7, #14]
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d3ef      	bcc.n	8000be4 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd90      	pop	{r4, r7, pc}
	...

08000c10 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	460a      	mov	r2, r1
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d10e      	bne.n	8000c44 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	e007      	b.n	8000c3c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000c2c:	4908      	ldr	r1, [pc, #32]	@ (8000c50 <LCD_Clear+0x40>)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	88ba      	ldrh	r2, [r7, #4]
 8000c32:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000c42:	d3f3      	bcc.n	8000c2c <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	20000110 	.word	0x20000110

08000c54 <LCD_Draw_Game_Grid>:
{
  Ascii -= 32;
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
}

void LCD_Draw_Game_Grid(){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
//	uint16_t x;
//	uint16_t y;

	for(uint8_t i=1; i<7; i++){
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	71fb      	strb	r3, [r7, #7]
 8000c5e:	e00e      	b.n	8000c7e <LCD_Draw_Game_Grid+0x2a>
		LCD_Draw_Vertical_Line(SQUARE_SIZE*i,GRID_OFFSET_HORIZONTAL,SQUARE_SIZE*ROWS,LCD_COLOR_BLACK);
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	461a      	mov	r2, r3
 8000c66:	0112      	lsls	r2, r2, #4
 8000c68:	4413      	add	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	b298      	uxth	r0, r3
 8000c6e:	2300      	movs	r3, #0
 8000c70:	22cc      	movs	r2, #204	@ 0xcc
 8000c72:	2174      	movs	r1, #116	@ 0x74
 8000c74:	f7ff ff7d 	bl	8000b72 <LCD_Draw_Vertical_Line>
	for(uint8_t i=1; i<7; i++){
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	71fb      	strb	r3, [r7, #7]
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b06      	cmp	r3, #6
 8000c82:	d9ed      	bls.n	8000c60 <LCD_Draw_Game_Grid+0xc>
		//each tile is 34x34 so 180 is 6 height
		//15 is the offset from the edge, 34 is the size
	}
	for(uint8_t i =1; i<7; i++){
 8000c84:	2301      	movs	r3, #1
 8000c86:	71bb      	strb	r3, [r7, #6]
 8000c88:	e013      	b.n	8000cb2 <LCD_Draw_Game_Grid+0x5e>
		LCD_Draw_Horizontal_Line(0,LCD_PIXEL_HEIGHT-(SQUARE_SIZE*i),LCD_PIXEL_WIDTH,LCD_COLOR_BLACK);
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	461a      	mov	r2, r3
 8000c90:	02d2      	lsls	r2, r2, #11
 8000c92:	1ad2      	subs	r2, r2, r3
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8000ca0:	b299      	uxth	r1, r3
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	22f0      	movs	r2, #240	@ 0xf0
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff ff8a 	bl	8000bc0 <LCD_Draw_Horizontal_Line>
	for(uint8_t i =1; i<7; i++){
 8000cac:	79bb      	ldrb	r3, [r7, #6]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	71bb      	strb	r3, [r7, #6]
 8000cb2:	79bb      	ldrb	r3, [r7, #6]
 8000cb4:	2b06      	cmp	r3, #6
 8000cb6:	d9e8      	bls.n	8000c8a <LCD_Draw_Game_Grid+0x36>
		//want each horizontal line to go across the screen
	}

	Init_Grid_Pos();
 8000cb8:	f7ff fca6 	bl	8000608 <Init_Grid_Pos>
	Init_Chip_To_Drop();
 8000cbc:	f7ff fc92 	bl	80005e4 <Init_Chip_To_Drop>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <LCD_Error_Handler+0x8>

08000cd4 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000cd8:	f001 f957 	bl	8001f8a <STMPE811_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d001      	beq.n	8000ce6 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000ce2:	bf00      	nop
 8000ce4:	e7fd      	b.n	8000ce2 <InitializeLCDTouch+0xe>
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f001 fa01 	bl	80020fa <STMPE811_ReadTouch>
 8000cf8:	4603      	mov	r3, r0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <getScheduledEvents>:
#include "Scheduler.h"

static uint32_t scheduledEvents;

uint32_t getScheduledEvents(){
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8000d08:	4b03      	ldr	r3, [pc, #12]	@ (8000d18 <getScheduledEvents+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20025968 	.word	0x20025968

08000d1c <addSchedulerEvent>:

void addSchedulerEvent(uint32_t event_to_schedule){
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event_to_schedule;
 8000d24:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <addSchedulerEvent+0x20>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	4a03      	ldr	r2, [pc, #12]	@ (8000d3c <addSchedulerEvent+0x20>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	20025968 	.word	0x20025968

08000d40 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000d44:	f000 f9fe 	bl	8001144 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000d48:	20ca      	movs	r0, #202	@ 0xca
 8000d4a:	f000 f943 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000d4e:	20c3      	movs	r0, #195	@ 0xc3
 8000d50:	f000 f94d 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000d54:	2008      	movs	r0, #8
 8000d56:	f000 f94a 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000d5a:	2050      	movs	r0, #80	@ 0x50
 8000d5c:	f000 f947 	bl	8000fee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000d60:	20cf      	movs	r0, #207	@ 0xcf
 8000d62:	f000 f937 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000d66:	2000      	movs	r0, #0
 8000d68:	f000 f941 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000d6c:	20c1      	movs	r0, #193	@ 0xc1
 8000d6e:	f000 f93e 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000d72:	2030      	movs	r0, #48	@ 0x30
 8000d74:	f000 f93b 	bl	8000fee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000d78:	20ed      	movs	r0, #237	@ 0xed
 8000d7a:	f000 f92b 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000d7e:	2064      	movs	r0, #100	@ 0x64
 8000d80:	f000 f935 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 f932 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000d8a:	2012      	movs	r0, #18
 8000d8c:	f000 f92f 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000d90:	2081      	movs	r0, #129	@ 0x81
 8000d92:	f000 f92c 	bl	8000fee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000d96:	20e8      	movs	r0, #232	@ 0xe8
 8000d98:	f000 f91c 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000d9c:	2085      	movs	r0, #133	@ 0x85
 8000d9e:	f000 f926 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f000 f923 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000da8:	2078      	movs	r0, #120	@ 0x78
 8000daa:	f000 f920 	bl	8000fee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000dae:	20cb      	movs	r0, #203	@ 0xcb
 8000db0:	f000 f910 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000db4:	2039      	movs	r0, #57	@ 0x39
 8000db6:	f000 f91a 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000dba:	202c      	movs	r0, #44	@ 0x2c
 8000dbc:	f000 f917 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f000 f914 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000dc6:	2034      	movs	r0, #52	@ 0x34
 8000dc8:	f000 f911 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000dcc:	2002      	movs	r0, #2
 8000dce:	f000 f90e 	bl	8000fee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000dd2:	20f7      	movs	r0, #247	@ 0xf7
 8000dd4:	f000 f8fe 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000dd8:	2020      	movs	r0, #32
 8000dda:	f000 f908 	bl	8000fee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000dde:	20ea      	movs	r0, #234	@ 0xea
 8000de0:	f000 f8f8 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f000 f902 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f000 f8ff 	bl	8000fee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000df0:	20b1      	movs	r0, #177	@ 0xb1
 8000df2:	f000 f8ef 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f000 f8f9 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000dfc:	201b      	movs	r0, #27
 8000dfe:	f000 f8f6 	bl	8000fee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000e02:	20b6      	movs	r0, #182	@ 0xb6
 8000e04:	f000 f8e6 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000e08:	200a      	movs	r0, #10
 8000e0a:	f000 f8f0 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000e0e:	20a2      	movs	r0, #162	@ 0xa2
 8000e10:	f000 f8ed 	bl	8000fee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000e14:	20c0      	movs	r0, #192	@ 0xc0
 8000e16:	f000 f8dd 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000e1a:	2010      	movs	r0, #16
 8000e1c:	f000 f8e7 	bl	8000fee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000e20:	20c1      	movs	r0, #193	@ 0xc1
 8000e22:	f000 f8d7 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000e26:	2010      	movs	r0, #16
 8000e28:	f000 f8e1 	bl	8000fee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8000e2c:	20c5      	movs	r0, #197	@ 0xc5
 8000e2e:	f000 f8d1 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8000e32:	2045      	movs	r0, #69	@ 0x45
 8000e34:	f000 f8db 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8000e38:	2015      	movs	r0, #21
 8000e3a:	f000 f8d8 	bl	8000fee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8000e3e:	20c7      	movs	r0, #199	@ 0xc7
 8000e40:	f000 f8c8 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8000e44:	2090      	movs	r0, #144	@ 0x90
 8000e46:	f000 f8d2 	bl	8000fee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8000e4a:	2036      	movs	r0, #54	@ 0x36
 8000e4c:	f000 f8c2 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8000e50:	20c8      	movs	r0, #200	@ 0xc8
 8000e52:	f000 f8cc 	bl	8000fee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8000e56:	20f2      	movs	r0, #242	@ 0xf2
 8000e58:	f000 f8bc 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f000 f8c6 	bl	8000fee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8000e62:	20b0      	movs	r0, #176	@ 0xb0
 8000e64:	f000 f8b6 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8000e68:	20c2      	movs	r0, #194	@ 0xc2
 8000e6a:	f000 f8c0 	bl	8000fee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000e6e:	20b6      	movs	r0, #182	@ 0xb6
 8000e70:	f000 f8b0 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000e74:	200a      	movs	r0, #10
 8000e76:	f000 f8ba 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8000e7a:	20a7      	movs	r0, #167	@ 0xa7
 8000e7c:	f000 f8b7 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8000e80:	2027      	movs	r0, #39	@ 0x27
 8000e82:	f000 f8b4 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000e86:	2004      	movs	r0, #4
 8000e88:	f000 f8b1 	bl	8000fee <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8000e8c:	202a      	movs	r0, #42	@ 0x2a
 8000e8e:	f000 f8a1 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f000 f8ab 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f000 f8a8 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 f8a5 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8000ea4:	20ef      	movs	r0, #239	@ 0xef
 8000ea6:	f000 f8a2 	bl	8000fee <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8000eaa:	202b      	movs	r0, #43	@ 0x2b
 8000eac:	f000 f892 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f000 f89c 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 f899 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f000 f896 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8000ec2:	203f      	movs	r0, #63	@ 0x3f
 8000ec4:	f000 f893 	bl	8000fee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8000ec8:	20f6      	movs	r0, #246	@ 0xf6
 8000eca:	f000 f883 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f000 f88d 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f000 f88a 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8000eda:	2006      	movs	r0, #6
 8000edc:	f000 f887 	bl	8000fee <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8000ee0:	202c      	movs	r0, #44	@ 0x2c
 8000ee2:	f000 f877 	bl	8000fd4 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000ee6:	20c8      	movs	r0, #200	@ 0xc8
 8000ee8:	f000 f9e8 	bl	80012bc <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8000eec:	2026      	movs	r0, #38	@ 0x26
 8000eee:	f000 f871 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f000 f87b 	bl	8000fee <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8000ef8:	20e0      	movs	r0, #224	@ 0xe0
 8000efa:	f000 f86b 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8000efe:	200f      	movs	r0, #15
 8000f00:	f000 f875 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8000f04:	2029      	movs	r0, #41	@ 0x29
 8000f06:	f000 f872 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8000f0a:	2024      	movs	r0, #36	@ 0x24
 8000f0c:	f000 f86f 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000f10:	200c      	movs	r0, #12
 8000f12:	f000 f86c 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8000f16:	200e      	movs	r0, #14
 8000f18:	f000 f869 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000f1c:	2009      	movs	r0, #9
 8000f1e:	f000 f866 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8000f22:	204e      	movs	r0, #78	@ 0x4e
 8000f24:	f000 f863 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000f28:	2078      	movs	r0, #120	@ 0x78
 8000f2a:	f000 f860 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8000f2e:	203c      	movs	r0, #60	@ 0x3c
 8000f30:	f000 f85d 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000f34:	2009      	movs	r0, #9
 8000f36:	f000 f85a 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8000f3a:	2013      	movs	r0, #19
 8000f3c:	f000 f857 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000f40:	2005      	movs	r0, #5
 8000f42:	f000 f854 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8000f46:	2017      	movs	r0, #23
 8000f48:	f000 f851 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000f4c:	2011      	movs	r0, #17
 8000f4e:	f000 f84e 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f000 f84b 	bl	8000fee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8000f58:	20e1      	movs	r0, #225	@ 0xe1
 8000f5a:	f000 f83b 	bl	8000fd4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f000 f845 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8000f64:	2016      	movs	r0, #22
 8000f66:	f000 f842 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000f6a:	201b      	movs	r0, #27
 8000f6c:	f000 f83f 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000f70:	2004      	movs	r0, #4
 8000f72:	f000 f83c 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000f76:	2011      	movs	r0, #17
 8000f78:	f000 f839 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8000f7c:	2007      	movs	r0, #7
 8000f7e:	f000 f836 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8000f82:	2031      	movs	r0, #49	@ 0x31
 8000f84:	f000 f833 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8000f88:	2033      	movs	r0, #51	@ 0x33
 8000f8a:	f000 f830 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8000f8e:	2042      	movs	r0, #66	@ 0x42
 8000f90:	f000 f82d 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000f94:	2005      	movs	r0, #5
 8000f96:	f000 f82a 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000f9a:	200c      	movs	r0, #12
 8000f9c:	f000 f827 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8000fa0:	200a      	movs	r0, #10
 8000fa2:	f000 f824 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8000fa6:	2028      	movs	r0, #40	@ 0x28
 8000fa8:	f000 f821 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8000fac:	202f      	movs	r0, #47	@ 0x2f
 8000fae:	f000 f81e 	bl	8000fee <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8000fb2:	200f      	movs	r0, #15
 8000fb4:	f000 f81b 	bl	8000fee <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8000fb8:	2011      	movs	r0, #17
 8000fba:	f000 f80b 	bl	8000fd4 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000fbe:	20c8      	movs	r0, #200	@ 0xc8
 8000fc0:	f000 f97c 	bl	80012bc <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8000fc4:	2029      	movs	r0, #41	@ 0x29
 8000fc6:	f000 f805 	bl	8000fd4 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8000fca:	202c      	movs	r0, #44	@ 0x2c
 8000fcc:	f000 f802 	bl	8000fd4 <ili9341_Write_Reg>
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 f949 	bl	8001278 <LCD_IO_WriteReg>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f91a 	bl	8001234 <LCD_IO_WriteData>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800100c:	4819      	ldr	r0, [pc, #100]	@ (8001074 <SPI_Init+0x6c>)
 800100e:	f004 fb9e 	bl	800574e <HAL_SPI_GetState>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d12b      	bne.n	8001070 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001018:	4b16      	ldr	r3, [pc, #88]	@ (8001074 <SPI_Init+0x6c>)
 800101a:	4a17      	ldr	r2, [pc, #92]	@ (8001078 <SPI_Init+0x70>)
 800101c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <SPI_Init+0x6c>)
 8001020:	2218      	movs	r2, #24
 8001022:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <SPI_Init+0x6c>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800102a:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <SPI_Init+0x6c>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001030:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <SPI_Init+0x6c>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <SPI_Init+0x6c>)
 8001038:	2200      	movs	r2, #0
 800103a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800103c:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <SPI_Init+0x6c>)
 800103e:	2207      	movs	r2, #7
 8001040:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001042:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <SPI_Init+0x6c>)
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001048:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <SPI_Init+0x6c>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <SPI_Init+0x6c>)
 8001050:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001054:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001056:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <SPI_Init+0x6c>)
 8001058:	2200      	movs	r2, #0
 800105a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800105c:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <SPI_Init+0x6c>)
 800105e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001062:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001064:	4803      	ldr	r0, [pc, #12]	@ (8001074 <SPI_Init+0x6c>)
 8001066:	f000 f833 	bl	80010d0 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800106a:	4802      	ldr	r0, [pc, #8]	@ (8001074 <SPI_Init+0x6c>)
 800106c:	f004 f97a 	bl	8005364 <HAL_SPI_Init>
  }
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	2002596c 	.word	0x2002596c
 8001078:	40015000 	.word	0x40015000

0800107c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <SPI_Write+0x34>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	1db9      	adds	r1, r7, #6
 8001090:	2201      	movs	r2, #1
 8001092:	4808      	ldr	r0, [pc, #32]	@ (80010b4 <SPI_Write+0x38>)
 8001094:	f004 fa17 	bl	80054c6 <HAL_SPI_Transmit>
 8001098:	4603      	mov	r3, r0
 800109a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80010a2:	f000 f809 	bl	80010b8 <SPI_Error>
  }
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000004 	.word	0x20000004
 80010b4:	2002596c 	.word	0x2002596c

080010b8 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80010bc:	4803      	ldr	r0, [pc, #12]	@ (80010cc <SPI_Error+0x14>)
 80010be:	f004 f9da 	bl	8005476 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80010c2:	f7ff ffa1 	bl	8001008 <SPI_Init>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2002596c 	.word	0x2002596c

080010d0 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	@ 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	4b17      	ldr	r3, [pc, #92]	@ (800113c <SPI_MspInit+0x6c>)
 80010de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e0:	4a16      	ldr	r2, [pc, #88]	@ (800113c <SPI_MspInit+0x6c>)
 80010e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80010e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <SPI_MspInit+0x6c>)
 80010ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	4b10      	ldr	r3, [pc, #64]	@ (800113c <SPI_MspInit+0x6c>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fc:	4a0f      	ldr	r2, [pc, #60]	@ (800113c <SPI_MspInit+0x6c>)
 80010fe:	f043 0320 	orr.w	r3, r3, #32
 8001102:	6313      	str	r3, [r2, #48]	@ 0x30
 8001104:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <SPI_MspInit+0x6c>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001108:	f003 0320 	and.w	r3, r3, #32
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001110:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001114:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800111a:	2302      	movs	r3, #2
 800111c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800111e:	2301      	movs	r3, #1
 8001120:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001122:	2305      	movs	r3, #5
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4804      	ldr	r0, [pc, #16]	@ (8001140 <SPI_MspInit+0x70>)
 800112e:	f001 fc93 	bl	8002a58 <HAL_GPIO_Init>
}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	@ 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40021400 	.word	0x40021400

08001144 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800114a:	4b36      	ldr	r3, [pc, #216]	@ (8001224 <LCD_IO_Init+0xe0>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d164      	bne.n	800121c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001152:	4b34      	ldr	r3, [pc, #208]	@ (8001224 <LCD_IO_Init+0xe0>)
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	4b32      	ldr	r3, [pc, #200]	@ (8001228 <LCD_IO_Init+0xe4>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001160:	4a31      	ldr	r2, [pc, #196]	@ (8001228 <LCD_IO_Init+0xe4>)
 8001162:	f043 0308 	orr.w	r3, r3, #8
 8001166:	6313      	str	r3, [r2, #48]	@ 0x30
 8001168:	4b2f      	ldr	r3, [pc, #188]	@ (8001228 <LCD_IO_Init+0xe4>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116c:	f003 0308 	and.w	r3, r3, #8
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001174:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001178:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001182:	2302      	movs	r3, #2
 8001184:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	4619      	mov	r1, r3
 800118c:	4827      	ldr	r0, [pc, #156]	@ (800122c <LCD_IO_Init+0xe8>)
 800118e:	f001 fc63 	bl	8002a58 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b24      	ldr	r3, [pc, #144]	@ (8001228 <LCD_IO_Init+0xe4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4a23      	ldr	r2, [pc, #140]	@ (8001228 <LCD_IO_Init+0xe4>)
 800119c:	f043 0308 	orr.w	r3, r3, #8
 80011a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a2:	4b21      	ldr	r3, [pc, #132]	@ (8001228 <LCD_IO_Init+0xe4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80011ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80011bc:	2302      	movs	r3, #2
 80011be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	4619      	mov	r1, r3
 80011c6:	4819      	ldr	r0, [pc, #100]	@ (800122c <LCD_IO_Init+0xe8>)
 80011c8:	f001 fc46 	bl	8002a58 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <LCD_IO_Init+0xe4>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d4:	4a14      	ldr	r2, [pc, #80]	@ (8001228 <LCD_IO_Init+0xe4>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6313      	str	r3, [r2, #48]	@ 0x30
 80011dc:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <LCD_IO_Init+0xe4>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80011e8:	2304      	movs	r3, #4
 80011ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80011f4:	2302      	movs	r3, #2
 80011f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	4619      	mov	r1, r3
 80011fe:	480c      	ldr	r0, [pc, #48]	@ (8001230 <LCD_IO_Init+0xec>)
 8001200:	f001 fc2a 	bl	8002a58 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001204:	2200      	movs	r2, #0
 8001206:	2104      	movs	r1, #4
 8001208:	4809      	ldr	r0, [pc, #36]	@ (8001230 <LCD_IO_Init+0xec>)
 800120a:	f001 fedd 	bl	8002fc8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800120e:	2201      	movs	r2, #1
 8001210:	2104      	movs	r1, #4
 8001212:	4807      	ldr	r0, [pc, #28]	@ (8001230 <LCD_IO_Init+0xec>)
 8001214:	f001 fed8 	bl	8002fc8 <HAL_GPIO_WritePin>

    SPI_Init();
 8001218:	f7ff fef6 	bl	8001008 <SPI_Init>
  }
}
 800121c:	bf00      	nop
 800121e:	3720      	adds	r7, #32
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200259c4 	.word	0x200259c4
 8001228:	40023800 	.word	0x40023800
 800122c:	40020c00 	.word	0x40020c00
 8001230:	40020800 	.word	0x40020800

08001234 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800123e:	2201      	movs	r2, #1
 8001240:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001244:	480a      	ldr	r0, [pc, #40]	@ (8001270 <LCD_IO_WriteData+0x3c>)
 8001246:	f001 febf 	bl	8002fc8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800124a:	2200      	movs	r2, #0
 800124c:	2104      	movs	r1, #4
 800124e:	4809      	ldr	r0, [pc, #36]	@ (8001274 <LCD_IO_WriteData+0x40>)
 8001250:	f001 feba 	bl	8002fc8 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff10 	bl	800107c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800125c:	2201      	movs	r2, #1
 800125e:	2104      	movs	r1, #4
 8001260:	4804      	ldr	r0, [pc, #16]	@ (8001274 <LCD_IO_WriteData+0x40>)
 8001262:	f001 feb1 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40020c00 	.word	0x40020c00
 8001274:	40020800 	.word	0x40020800

08001278 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001288:	480a      	ldr	r0, [pc, #40]	@ (80012b4 <LCD_IO_WriteReg+0x3c>)
 800128a:	f001 fe9d 	bl	8002fc8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800128e:	2200      	movs	r2, #0
 8001290:	2104      	movs	r1, #4
 8001292:	4809      	ldr	r0, [pc, #36]	@ (80012b8 <LCD_IO_WriteReg+0x40>)
 8001294:	f001 fe98 	bl	8002fc8 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	b29b      	uxth	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff feed 	bl	800107c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80012a2:	2201      	movs	r2, #1
 80012a4:	2104      	movs	r1, #4
 80012a6:	4804      	ldr	r0, [pc, #16]	@ (80012b8 <LCD_IO_WriteReg+0x40>)
 80012a8:	f001 fe8e 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40020c00 	.word	0x40020c00
 80012b8:	40020800 	.word	0x40020800

080012bc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f001 fa5f 	bl	8002788 <HAL_Delay>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d8:	f001 f9e4 	bl	80026a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012dc:	f000 f81e 	bl	800131c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e0:	f000 fa0e 	bl	8001700 <MX_GPIO_Init>
  MX_LTDC_Init();
 80012e4:	f000 f8c4 	bl	8001470 <MX_LTDC_Init>
  MX_RNG_Init();
 80012e8:	f000 f974 	bl	80015d4 <MX_RNG_Init>
  MX_TIM2_Init();
 80012ec:	f000 f9bc 	bl	8001668 <MX_TIM2_Init>
  MX_SPI5_Init();
 80012f0:	f000 f984 	bl	80015fc <MX_SPI5_Init>
  MX_I2C3_Init();
 80012f4:	f000 f87c 	bl	80013f0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 80012f8:	f7ff f8f0 	bl	80004dc <ApplicationInit>
  LCD_Visual_Demo();
 80012fc:	f7ff f90a 	bl	8000514 <LCD_Visual_Demo>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  eventsToRun = getScheduledEvents();
 8001300:	f7ff fd00 	bl	8000d04 <getScheduledEvents>
 8001304:	6078      	str	r0, [r7, #4]

	  if(eventsToRun & START_MENU_EVENT){

	  }
	  if(eventsToRun & POLLING_GAME_EVENT){
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f7      	beq.n	8001300 <main+0x2e>
		  LCD_Touch_Polling_Game();
 8001310:	f7ff f90c 	bl	800052c <LCD_Touch_Polling_Game>
		  HAL_Delay(100);
 8001314:	2064      	movs	r0, #100	@ 0x64
 8001316:	f001 fa37 	bl	8002788 <HAL_Delay>
	  eventsToRun = getScheduledEvents();
 800131a:	e7f1      	b.n	8001300 <main+0x2e>

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b094      	sub	sp, #80	@ 0x50
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	f107 0320 	add.w	r3, r7, #32
 8001326:	2230      	movs	r2, #48	@ 0x30
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f004 fdd2 	bl	8005ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	4b28      	ldr	r3, [pc, #160]	@ (80013e8 <SystemClock_Config+0xcc>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001348:	4a27      	ldr	r2, [pc, #156]	@ (80013e8 <SystemClock_Config+0xcc>)
 800134a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001350:	4b25      	ldr	r3, [pc, #148]	@ (80013e8 <SystemClock_Config+0xcc>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	4b22      	ldr	r3, [pc, #136]	@ (80013ec <SystemClock_Config+0xd0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a21      	ldr	r2, [pc, #132]	@ (80013ec <SystemClock_Config+0xd0>)
 8001366:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <SystemClock_Config+0xd0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001378:	2301      	movs	r3, #1
 800137a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800137c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001382:	2302      	movs	r3, #2
 8001384:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001386:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800138a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800138c:	2308      	movs	r3, #8
 800138e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001390:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001394:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001396:	2302      	movs	r3, #2
 8001398:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800139a:	2307      	movs	r3, #7
 800139c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139e:	f107 0320 	add.w	r3, r7, #32
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 f970 	bl	8004688 <HAL_RCC_OscConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013ae:	f000 fb55 	bl	8001a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b2:	230f      	movs	r3, #15
 80013b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b6:	2302      	movs	r3, #2
 80013b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	2105      	movs	r1, #5
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 fbd1 	bl	8004b78 <HAL_RCC_ClockConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013dc:	f000 fb3e 	bl	8001a5c <Error_Handler>
  }
}
 80013e0:	bf00      	nop
 80013e2:	3750      	adds	r7, #80	@ 0x50
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40007000 	.word	0x40007000

080013f0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <MX_I2C3_Init+0x74>)
 80013f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001468 <MX_I2C3_Init+0x78>)
 80013f8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <MX_I2C3_Init+0x74>)
 80013fc:	4a1b      	ldr	r2, [pc, #108]	@ (800146c <MX_I2C3_Init+0x7c>)
 80013fe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001400:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <MX_I2C3_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001406:	4b17      	ldr	r3, [pc, #92]	@ (8001464 <MX_I2C3_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800140c:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <MX_I2C3_Init+0x74>)
 800140e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001412:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001414:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <MX_I2C3_Init+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800141a:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <MX_I2C3_Init+0x74>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001420:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <MX_I2C3_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001426:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <MX_I2C3_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800142c:	480d      	ldr	r0, [pc, #52]	@ (8001464 <MX_I2C3_Init+0x74>)
 800142e:	f001 fde5 	bl	8002ffc <HAL_I2C_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001438:	f000 fb10 	bl	8001a5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800143c:	2100      	movs	r1, #0
 800143e:	4809      	ldr	r0, [pc, #36]	@ (8001464 <MX_I2C3_Init+0x74>)
 8001440:	f002 fe00 	bl	8004044 <HAL_I2CEx_ConfigAnalogFilter>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800144a:	f000 fb07 	bl	8001a5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800144e:	2100      	movs	r1, #0
 8001450:	4804      	ldr	r0, [pc, #16]	@ (8001464 <MX_I2C3_Init+0x74>)
 8001452:	f002 fe33 	bl	80040bc <HAL_I2CEx_ConfigDigitalFilter>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800145c:	f000 fafe 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200259c8 	.word	0x200259c8
 8001468:	40005c00 	.word	0x40005c00
 800146c:	000186a0 	.word	0x000186a0

08001470 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b09a      	sub	sp, #104	@ 0x68
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001476:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800147a:	2234      	movs	r2, #52	@ 0x34
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f004 fd28 	bl	8005ed4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001484:	463b      	mov	r3, r7
 8001486:	2234      	movs	r2, #52	@ 0x34
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f004 fd22 	bl	8005ed4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001490:	4b4e      	ldr	r3, [pc, #312]	@ (80015cc <MX_LTDC_Init+0x15c>)
 8001492:	4a4f      	ldr	r2, [pc, #316]	@ (80015d0 <MX_LTDC_Init+0x160>)
 8001494:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001496:	4b4d      	ldr	r3, [pc, #308]	@ (80015cc <MX_LTDC_Init+0x15c>)
 8001498:	2200      	movs	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800149c:	4b4b      	ldr	r3, [pc, #300]	@ (80015cc <MX_LTDC_Init+0x15c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80014a2:	4b4a      	ldr	r3, [pc, #296]	@ (80015cc <MX_LTDC_Init+0x15c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80014a8:	4b48      	ldr	r3, [pc, #288]	@ (80015cc <MX_LTDC_Init+0x15c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80014ae:	4b47      	ldr	r3, [pc, #284]	@ (80015cc <MX_LTDC_Init+0x15c>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80014b4:	4b45      	ldr	r3, [pc, #276]	@ (80015cc <MX_LTDC_Init+0x15c>)
 80014b6:	2203      	movs	r2, #3
 80014b8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80014ba:	4b44      	ldr	r3, [pc, #272]	@ (80015cc <MX_LTDC_Init+0x15c>)
 80014bc:	220e      	movs	r2, #14
 80014be:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80014c0:	4b42      	ldr	r3, [pc, #264]	@ (80015cc <MX_LTDC_Init+0x15c>)
 80014c2:	2205      	movs	r2, #5
 80014c4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80014c6:	4b41      	ldr	r3, [pc, #260]	@ (80015cc <MX_LTDC_Init+0x15c>)
 80014c8:	f240 228e 	movw	r2, #654	@ 0x28e
 80014cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80014ce:	4b3f      	ldr	r3, [pc, #252]	@ (80015cc <MX_LTDC_Init+0x15c>)
 80014d0:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80014d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80014d6:	4b3d      	ldr	r3, [pc, #244]	@ (80015cc <MX_LTDC_Init+0x15c>)
 80014d8:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80014dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80014de:	4b3b      	ldr	r3, [pc, #236]	@ (80015cc <MX_LTDC_Init+0x15c>)
 80014e0:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80014e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80014e6:	4b39      	ldr	r3, [pc, #228]	@ (80015cc <MX_LTDC_Init+0x15c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80014ee:	4b37      	ldr	r3, [pc, #220]	@ (80015cc <MX_LTDC_Init+0x15c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80014f6:	4b35      	ldr	r3, [pc, #212]	@ (80015cc <MX_LTDC_Init+0x15c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80014fe:	4833      	ldr	r0, [pc, #204]	@ (80015cc <MX_LTDC_Init+0x15c>)
 8001500:	f002 fe1c 	bl	800413c <HAL_LTDC_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800150a:	f000 faa7 	bl	8001a5c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800151e:	2300      	movs	r3, #0
 8001520:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800152a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800152e:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001530:	2305      	movs	r3, #5
 8001532:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001552:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001556:	2200      	movs	r2, #0
 8001558:	4619      	mov	r1, r3
 800155a:	481c      	ldr	r0, [pc, #112]	@ (80015cc <MX_LTDC_Init+0x15c>)
 800155c:	f002 febe 	bl	80042dc <HAL_LTDC_ConfigLayer>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001566:	f000 fa79 	bl	8001a5c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001586:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800158a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800158c:	2305      	movs	r3, #5
 800158e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80015ae:	463b      	mov	r3, r7
 80015b0:	2201      	movs	r2, #1
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	@ (80015cc <MX_LTDC_Init+0x15c>)
 80015b6:	f002 fe91 	bl	80042dc <HAL_LTDC_ConfigLayer>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80015c0:	f000 fa4c 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	3768      	adds	r7, #104	@ 0x68
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20025a1c 	.word	0x20025a1c
 80015d0:	40016800 	.word	0x40016800

080015d4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <MX_RNG_Init+0x20>)
 80015da:	4a07      	ldr	r2, [pc, #28]	@ (80015f8 <MX_RNG_Init+0x24>)
 80015dc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80015de:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <MX_RNG_Init+0x20>)
 80015e0:	f003 fe96 	bl	8005310 <HAL_RNG_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80015ea:	f000 fa37 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20025ac4 	.word	0x20025ac4
 80015f8:	50060800 	.word	0x50060800

080015fc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001600:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <MX_SPI5_Init+0x64>)
 8001602:	4a18      	ldr	r2, [pc, #96]	@ (8001664 <MX_SPI5_Init+0x68>)
 8001604:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001606:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <MX_SPI5_Init+0x64>)
 8001608:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800160c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800160e:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <MX_SPI5_Init+0x64>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <MX_SPI5_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <MX_SPI5_Init+0x64>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001620:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <MX_SPI5_Init+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <MX_SPI5_Init+0x64>)
 8001628:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800162c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800162e:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <MX_SPI5_Init+0x64>)
 8001630:	2200      	movs	r2, #0
 8001632:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001634:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <MX_SPI5_Init+0x64>)
 8001636:	2200      	movs	r2, #0
 8001638:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <MX_SPI5_Init+0x64>)
 800163c:	2200      	movs	r2, #0
 800163e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001640:	4b07      	ldr	r3, [pc, #28]	@ (8001660 <MX_SPI5_Init+0x64>)
 8001642:	2200      	movs	r2, #0
 8001644:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <MX_SPI5_Init+0x64>)
 8001648:	220a      	movs	r2, #10
 800164a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800164c:	4804      	ldr	r0, [pc, #16]	@ (8001660 <MX_SPI5_Init+0x64>)
 800164e:	f003 fe89 	bl	8005364 <HAL_SPI_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001658:	f000 fa00 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20025ad4 	.word	0x20025ad4
 8001664:	40015000 	.word	0x40015000

08001668 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166e:	f107 0308 	add.w	r3, r7, #8
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167c:	463b      	mov	r3, r7
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001684:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <MX_TIM2_Init+0x94>)
 8001686:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800168a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800168c:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <MX_TIM2_Init+0x94>)
 800168e:	2200      	movs	r2, #0
 8001690:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001692:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <MX_TIM2_Init+0x94>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001698:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <MX_TIM2_Init+0x94>)
 800169a:	f04f 32ff 	mov.w	r2, #4294967295
 800169e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a0:	4b16      	ldr	r3, [pc, #88]	@ (80016fc <MX_TIM2_Init+0x94>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <MX_TIM2_Init+0x94>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ac:	4813      	ldr	r0, [pc, #76]	@ (80016fc <MX_TIM2_Init+0x94>)
 80016ae:	f004 f939 	bl	8005924 <HAL_TIM_Base_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016b8:	f000 f9d0 	bl	8001a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	4619      	mov	r1, r3
 80016c8:	480c      	ldr	r0, [pc, #48]	@ (80016fc <MX_TIM2_Init+0x94>)
 80016ca:	f004 f97a 	bl	80059c2 <HAL_TIM_ConfigClockSource>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016d4:	f000 f9c2 	bl	8001a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d8:	2300      	movs	r3, #0
 80016da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e0:	463b      	mov	r3, r7
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	@ (80016fc <MX_TIM2_Init+0x94>)
 80016e6:	f004 fb79 	bl	8005ddc <HAL_TIMEx_MasterConfigSynchronization>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016f0:	f000 f9b4 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20025b2c 	.word	0x20025b2c

08001700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08e      	sub	sp, #56	@ 0x38
 8001704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
 8001714:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
 800171a:	4bb2      	ldr	r3, [pc, #712]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	4ab1      	ldr	r2, [pc, #708]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	6313      	str	r3, [r2, #48]	@ 0x30
 8001726:	4baf      	ldr	r3, [pc, #700]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	623b      	str	r3, [r7, #32]
 8001730:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	4bab      	ldr	r3, [pc, #684]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	4aaa      	ldr	r2, [pc, #680]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 800173c:	f043 0320 	orr.w	r3, r3, #32
 8001740:	6313      	str	r3, [r2, #48]	@ 0x30
 8001742:	4ba8      	ldr	r3, [pc, #672]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	f003 0320 	and.w	r3, r3, #32
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
 8001752:	4ba4      	ldr	r3, [pc, #656]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	4aa3      	ldr	r2, [pc, #652]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 8001758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800175c:	6313      	str	r3, [r2, #48]	@ 0x30
 800175e:	4ba1      	ldr	r3, [pc, #644]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001766:	61bb      	str	r3, [r7, #24]
 8001768:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	4b9d      	ldr	r3, [pc, #628]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	4a9c      	ldr	r2, [pc, #624]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6313      	str	r3, [r2, #48]	@ 0x30
 800177a:	4b9a      	ldr	r3, [pc, #616]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	4b96      	ldr	r3, [pc, #600]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	4a95      	ldr	r2, [pc, #596]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	6313      	str	r3, [r2, #48]	@ 0x30
 8001796:	4b93      	ldr	r3, [pc, #588]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b8f      	ldr	r3, [pc, #572]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	4a8e      	ldr	r2, [pc, #568]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 80017ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b2:	4b8c      	ldr	r3, [pc, #560]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	4b88      	ldr	r3, [pc, #544]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4a87      	ldr	r2, [pc, #540]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 80017c8:	f043 0310 	orr.w	r3, r3, #16
 80017cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ce:	4b85      	ldr	r3, [pc, #532]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f003 0310 	and.w	r3, r3, #16
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	4b81      	ldr	r3, [pc, #516]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a80      	ldr	r2, [pc, #512]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 80017e4:	f043 0308 	orr.w	r3, r3, #8
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b7e      	ldr	r3, [pc, #504]	@ (80019e4 <MX_GPIO_Init+0x2e4>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2116      	movs	r1, #22
 80017fa:	487b      	ldr	r0, [pc, #492]	@ (80019e8 <MX_GPIO_Init+0x2e8>)
 80017fc:	f001 fbe4 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	2180      	movs	r1, #128	@ 0x80
 8001804:	4879      	ldr	r0, [pc, #484]	@ (80019ec <MX_GPIO_Init+0x2ec>)
 8001806:	f001 fbdf 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001810:	4877      	ldr	r0, [pc, #476]	@ (80019f0 <MX_GPIO_Init+0x2f0>)
 8001812:	f001 fbd9 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800181c:	4875      	ldr	r0, [pc, #468]	@ (80019f4 <MX_GPIO_Init+0x2f4>)
 800181e:	f001 fbd3 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001822:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001830:	2303      	movs	r3, #3
 8001832:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001834:	230c      	movs	r3, #12
 8001836:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001838:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800183c:	4619      	mov	r1, r3
 800183e:	486e      	ldr	r0, [pc, #440]	@ (80019f8 <MX_GPIO_Init+0x2f8>)
 8001840:	f001 f90a 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001844:	2301      	movs	r3, #1
 8001846:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001854:	230c      	movs	r3, #12
 8001856:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800185c:	4619      	mov	r1, r3
 800185e:	4862      	ldr	r0, [pc, #392]	@ (80019e8 <MX_GPIO_Init+0x2e8>)
 8001860:	f001 f8fa 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001864:	2316      	movs	r3, #22
 8001866:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001868:	2301      	movs	r3, #1
 800186a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001878:	4619      	mov	r1, r3
 800187a:	485b      	ldr	r0, [pc, #364]	@ (80019e8 <MX_GPIO_Init+0x2e8>)
 800187c:	f001 f8ec 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001880:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001884:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001886:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800188a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001890:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001894:	4619      	mov	r1, r3
 8001896:	4855      	ldr	r0, [pc, #340]	@ (80019ec <MX_GPIO_Init+0x2ec>)
 8001898:	f001 f8de 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800189c:	2380      	movs	r3, #128	@ 0x80
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b0:	4619      	mov	r1, r3
 80018b2:	484e      	ldr	r0, [pc, #312]	@ (80019ec <MX_GPIO_Init+0x2ec>)
 80018b4:	f001 f8d0 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80018b8:	2320      	movs	r3, #32
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018bc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80018c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80018c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ca:	4619      	mov	r1, r3
 80018cc:	4846      	ldr	r0, [pc, #280]	@ (80019e8 <MX_GPIO_Init+0x2e8>)
 80018ce:	f001 f8c3 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80018d2:	2304      	movs	r3, #4
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80018de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e2:	4619      	mov	r1, r3
 80018e4:	4845      	ldr	r0, [pc, #276]	@ (80019fc <MX_GPIO_Init+0x2fc>)
 80018e6:	f001 f8b7 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80018ea:	f248 1333 	movw	r3, #33075	@ 0x8133
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018fc:	230c      	movs	r3, #12
 80018fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001904:	4619      	mov	r1, r3
 8001906:	483b      	ldr	r0, [pc, #236]	@ (80019f4 <MX_GPIO_Init+0x2f4>)
 8001908:	f001 f8a6 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800190c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191a:	2303      	movs	r3, #3
 800191c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800191e:	230c      	movs	r3, #12
 8001920:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001926:	4619      	mov	r1, r3
 8001928:	4835      	ldr	r0, [pc, #212]	@ (8001a00 <MX_GPIO_Init+0x300>)
 800192a:	f001 f895 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800192e:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001940:	230c      	movs	r3, #12
 8001942:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001944:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001948:	4619      	mov	r1, r3
 800194a:	482c      	ldr	r0, [pc, #176]	@ (80019fc <MX_GPIO_Init+0x2fc>)
 800194c:	f001 f884 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001950:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001956:	2300      	movs	r3, #0
 8001958:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800195e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001962:	4619      	mov	r1, r3
 8001964:	4825      	ldr	r0, [pc, #148]	@ (80019fc <MX_GPIO_Init+0x2fc>)
 8001966:	f001 f877 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800196a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800197c:	230c      	movs	r3, #12
 800197e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001980:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001984:	4619      	mov	r1, r3
 8001986:	481a      	ldr	r0, [pc, #104]	@ (80019f0 <MX_GPIO_Init+0x2f0>)
 8001988:	f001 f866 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800198c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001992:	2300      	movs	r3, #0
 8001994:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800199a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800199e:	4619      	mov	r1, r3
 80019a0:	4813      	ldr	r0, [pc, #76]	@ (80019f0 <MX_GPIO_Init+0x2f0>)
 80019a2:	f001 f859 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80019a6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ac:	2301      	movs	r3, #1
 80019ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019bc:	4619      	mov	r1, r3
 80019be:	480c      	ldr	r0, [pc, #48]	@ (80019f0 <MX_GPIO_Init+0x2f0>)
 80019c0:	f001 f84a 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80019c4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d2:	2303      	movs	r3, #3
 80019d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019d6:	2307      	movs	r3, #7
 80019d8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019de:	4619      	mov	r1, r3
 80019e0:	e010      	b.n	8001a04 <MX_GPIO_Init+0x304>
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40020800 	.word	0x40020800
 80019ec:	40020000 	.word	0x40020000
 80019f0:	40020c00 	.word	0x40020c00
 80019f4:	40021800 	.word	0x40021800
 80019f8:	40021400 	.word	0x40021400
 80019fc:	40020400 	.word	0x40020400
 8001a00:	40021000 	.word	0x40021000
 8001a04:	4812      	ldr	r0, [pc, #72]	@ (8001a50 <MX_GPIO_Init+0x350>)
 8001a06:	f001 f827 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001a0a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a20:	4619      	mov	r1, r3
 8001a22:	480c      	ldr	r0, [pc, #48]	@ (8001a54 <MX_GPIO_Init+0x354>)
 8001a24:	f001 f818 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001a28:	2360      	movs	r3, #96	@ 0x60
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a38:	230c      	movs	r3, #12
 8001a3a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a40:	4619      	mov	r1, r3
 8001a42:	4805      	ldr	r0, [pc, #20]	@ (8001a58 <MX_GPIO_Init+0x358>)
 8001a44:	f001 f808 	bl	8002a58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a48:	bf00      	nop
 8001a4a:	3738      	adds	r7, #56	@ 0x38
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40020000 	.word	0x40020000
 8001a54:	40021800 	.word	0x40021800
 8001a58:	40020400 	.word	0x40020400

08001a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a60:	b672      	cpsid	i
}
 8001a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <Error_Handler+0x8>

08001a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <HAL_MspInit+0x4c>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab4 <HAL_MspInit+0x4c>)
 8001a78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab4 <HAL_MspInit+0x4c>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	603b      	str	r3, [r7, #0]
 8001a8e:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <HAL_MspInit+0x4c>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	4a08      	ldr	r2, [pc, #32]	@ (8001ab4 <HAL_MspInit+0x4c>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a9a:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <HAL_MspInit+0x4c>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001aa6:	2007      	movs	r0, #7
 8001aa8:	f000 ff86 	bl	80029b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800

08001ab8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	@ 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a29      	ldr	r2, [pc, #164]	@ (8001b7c <HAL_I2C_MspInit+0xc4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d14b      	bne.n	8001b72 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	4b28      	ldr	r3, [pc, #160]	@ (8001b80 <HAL_I2C_MspInit+0xc8>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	4a27      	ldr	r2, [pc, #156]	@ (8001b80 <HAL_I2C_MspInit+0xc8>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aea:	4b25      	ldr	r3, [pc, #148]	@ (8001b80 <HAL_I2C_MspInit+0xc8>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b21      	ldr	r3, [pc, #132]	@ (8001b80 <HAL_I2C_MspInit+0xc8>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	4a20      	ldr	r2, [pc, #128]	@ (8001b80 <HAL_I2C_MspInit+0xc8>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b06:	4b1e      	ldr	r3, [pc, #120]	@ (8001b80 <HAL_I2C_MspInit+0xc8>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001b12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b18:	2312      	movs	r3, #18
 8001b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b24:	2304      	movs	r3, #4
 8001b26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4815      	ldr	r0, [pc, #84]	@ (8001b84 <HAL_I2C_MspInit+0xcc>)
 8001b30:	f000 ff92 	bl	8002a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001b34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b3a:	2312      	movs	r3, #18
 8001b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b46:	2304      	movs	r3, #4
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4619      	mov	r1, r3
 8001b50:	480d      	ldr	r0, [pc, #52]	@ (8001b88 <HAL_I2C_MspInit+0xd0>)
 8001b52:	f000 ff81 	bl	8002a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <HAL_I2C_MspInit+0xc8>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	4a08      	ldr	r2, [pc, #32]	@ (8001b80 <HAL_I2C_MspInit+0xc8>)
 8001b60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b66:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_I2C_MspInit+0xc8>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001b72:	bf00      	nop
 8001b74:	3728      	adds	r7, #40	@ 0x28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40005c00 	.word	0x40005c00
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020000 	.word	0x40020000

08001b8c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b09a      	sub	sp, #104	@ 0x68
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ba8:	2230      	movs	r2, #48	@ 0x30
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f004 f991 	bl	8005ed4 <memset>
  if(hltdc->Instance==LTDC)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a81      	ldr	r2, [pc, #516]	@ (8001dbc <HAL_LTDC_MspInit+0x230>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	f040 80fb 	bne.w	8001db4 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8001bc2:	23c8      	movs	r3, #200	@ 0xc8
 8001bc4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8001bca:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001bce:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f003 f9db 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001be0:	f7ff ff3c 	bl	8001a5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
 8001be8:	4b75      	ldr	r3, [pc, #468]	@ (8001dc0 <HAL_LTDC_MspInit+0x234>)
 8001bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bec:	4a74      	ldr	r2, [pc, #464]	@ (8001dc0 <HAL_LTDC_MspInit+0x234>)
 8001bee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001bf2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bf4:	4b72      	ldr	r3, [pc, #456]	@ (8001dc0 <HAL_LTDC_MspInit+0x234>)
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bfc:	623b      	str	r3, [r7, #32]
 8001bfe:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c00:	2300      	movs	r3, #0
 8001c02:	61fb      	str	r3, [r7, #28]
 8001c04:	4b6e      	ldr	r3, [pc, #440]	@ (8001dc0 <HAL_LTDC_MspInit+0x234>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c08:	4a6d      	ldr	r2, [pc, #436]	@ (8001dc0 <HAL_LTDC_MspInit+0x234>)
 8001c0a:	f043 0320 	orr.w	r3, r3, #32
 8001c0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c10:	4b6b      	ldr	r3, [pc, #428]	@ (8001dc0 <HAL_LTDC_MspInit+0x234>)
 8001c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	4b67      	ldr	r3, [pc, #412]	@ (8001dc0 <HAL_LTDC_MspInit+0x234>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c24:	4a66      	ldr	r2, [pc, #408]	@ (8001dc0 <HAL_LTDC_MspInit+0x234>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2c:	4b64      	ldr	r3, [pc, #400]	@ (8001dc0 <HAL_LTDC_MspInit+0x234>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	4b60      	ldr	r3, [pc, #384]	@ (8001dc0 <HAL_LTDC_MspInit+0x234>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c40:	4a5f      	ldr	r2, [pc, #380]	@ (8001dc0 <HAL_LTDC_MspInit+0x234>)
 8001c42:	f043 0302 	orr.w	r3, r3, #2
 8001c46:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c48:	4b5d      	ldr	r3, [pc, #372]	@ (8001dc0 <HAL_LTDC_MspInit+0x234>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	4b59      	ldr	r3, [pc, #356]	@ (8001dc0 <HAL_LTDC_MspInit+0x234>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5c:	4a58      	ldr	r2, [pc, #352]	@ (8001dc0 <HAL_LTDC_MspInit+0x234>)
 8001c5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c62:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c64:	4b56      	ldr	r3, [pc, #344]	@ (8001dc0 <HAL_LTDC_MspInit+0x234>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	4b52      	ldr	r3, [pc, #328]	@ (8001dc0 <HAL_LTDC_MspInit+0x234>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c78:	4a51      	ldr	r2, [pc, #324]	@ (8001dc0 <HAL_LTDC_MspInit+0x234>)
 8001c7a:	f043 0304 	orr.w	r3, r3, #4
 8001c7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c80:	4b4f      	ldr	r3, [pc, #316]	@ (8001dc0 <HAL_LTDC_MspInit+0x234>)
 8001c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	4b4b      	ldr	r3, [pc, #300]	@ (8001dc0 <HAL_LTDC_MspInit+0x234>)
 8001c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c94:	4a4a      	ldr	r2, [pc, #296]	@ (8001dc0 <HAL_LTDC_MspInit+0x234>)
 8001c96:	f043 0308 	orr.w	r3, r3, #8
 8001c9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9c:	4b48      	ldr	r3, [pc, #288]	@ (8001dc0 <HAL_LTDC_MspInit+0x234>)
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001ca8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cac:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cba:	230e      	movs	r3, #14
 8001cbc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	483f      	ldr	r0, [pc, #252]	@ (8001dc4 <HAL_LTDC_MspInit+0x238>)
 8001cc6:	f000 fec7 	bl	8002a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001cca:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001cce:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cdc:	230e      	movs	r3, #14
 8001cde:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4838      	ldr	r0, [pc, #224]	@ (8001dc8 <HAL_LTDC_MspInit+0x23c>)
 8001ce8:	f000 feb6 	bl	8002a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001cec:	2303      	movs	r3, #3
 8001cee:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001cfc:	2309      	movs	r3, #9
 8001cfe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d04:	4619      	mov	r1, r3
 8001d06:	4831      	ldr	r0, [pc, #196]	@ (8001dcc <HAL_LTDC_MspInit+0x240>)
 8001d08:	f000 fea6 	bl	8002a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001d0c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001d10:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d1e:	230e      	movs	r3, #14
 8001d20:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d22:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d26:	4619      	mov	r1, r3
 8001d28:	4828      	ldr	r0, [pc, #160]	@ (8001dcc <HAL_LTDC_MspInit+0x240>)
 8001d2a:	f000 fe95 	bl	8002a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001d2e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001d32:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d40:	230e      	movs	r3, #14
 8001d42:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4821      	ldr	r0, [pc, #132]	@ (8001dd0 <HAL_LTDC_MspInit+0x244>)
 8001d4c:	f000 fe84 	bl	8002a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001d50:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001d54:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d62:	230e      	movs	r3, #14
 8001d64:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d66:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4819      	ldr	r0, [pc, #100]	@ (8001dd4 <HAL_LTDC_MspInit+0x248>)
 8001d6e:	f000 fe73 	bl	8002a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001d72:	2348      	movs	r3, #72	@ 0x48
 8001d74:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d82:	230e      	movs	r3, #14
 8001d84:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d86:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4812      	ldr	r0, [pc, #72]	@ (8001dd8 <HAL_LTDC_MspInit+0x24c>)
 8001d8e:	f000 fe63 	bl	8002a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001d92:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d96:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001da4:	2309      	movs	r3, #9
 8001da6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001da8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dac:	4619      	mov	r1, r3
 8001dae:	4808      	ldr	r0, [pc, #32]	@ (8001dd0 <HAL_LTDC_MspInit+0x244>)
 8001db0:	f000 fe52 	bl	8002a58 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001db4:	bf00      	nop
 8001db6:	3768      	adds	r7, #104	@ 0x68
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40016800 	.word	0x40016800
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40021400 	.word	0x40021400
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	40020400 	.word	0x40020400
 8001dd0:	40021800 	.word	0x40021800
 8001dd4:	40020800 	.word	0x40020800
 8001dd8:	40020c00 	.word	0x40020c00

08001ddc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0b      	ldr	r2, [pc, #44]	@ (8001e18 <HAL_RNG_MspInit+0x3c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d10d      	bne.n	8001e0a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e1c <HAL_RNG_MspInit+0x40>)
 8001df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001df6:	4a09      	ldr	r2, [pc, #36]	@ (8001e1c <HAL_RNG_MspInit+0x40>)
 8001df8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dfc:	6353      	str	r3, [r2, #52]	@ 0x34
 8001dfe:	4b07      	ldr	r3, [pc, #28]	@ (8001e1c <HAL_RNG_MspInit+0x40>)
 8001e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	50060800 	.word	0x50060800
 8001e1c:	40023800 	.word	0x40023800

08001e20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	@ 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a19      	ldr	r2, [pc, #100]	@ (8001ea4 <HAL_SPI_MspInit+0x84>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d12c      	bne.n	8001e9c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <HAL_SPI_MspInit+0x88>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4a:	4a17      	ldr	r2, [pc, #92]	@ (8001ea8 <HAL_SPI_MspInit+0x88>)
 8001e4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e52:	4b15      	ldr	r3, [pc, #84]	@ (8001ea8 <HAL_SPI_MspInit+0x88>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <HAL_SPI_MspInit+0x88>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	4a10      	ldr	r2, [pc, #64]	@ (8001ea8 <HAL_SPI_MspInit+0x88>)
 8001e68:	f043 0320 	orr.w	r3, r3, #32
 8001e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <HAL_SPI_MspInit+0x88>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001e7a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001e8c:	2305      	movs	r3, #5
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	4805      	ldr	r0, [pc, #20]	@ (8001eac <HAL_SPI_MspInit+0x8c>)
 8001e98:	f000 fdde 	bl	8002a58 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001e9c:	bf00      	nop
 8001e9e:	3728      	adds	r7, #40	@ 0x28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40015000 	.word	0x40015000
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40021400 	.word	0x40021400

08001eb0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a08      	ldr	r2, [pc, #32]	@ (8001ee0 <HAL_SPI_MspDeInit+0x30>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d10a      	bne.n	8001ed8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001ec2:	4b08      	ldr	r3, [pc, #32]	@ (8001ee4 <HAL_SPI_MspDeInit+0x34>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec6:	4a07      	ldr	r2, [pc, #28]	@ (8001ee4 <HAL_SPI_MspDeInit+0x34>)
 8001ec8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001ecc:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001ece:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001ed2:	4805      	ldr	r0, [pc, #20]	@ (8001ee8 <HAL_SPI_MspDeInit+0x38>)
 8001ed4:	f000 ff6c 	bl	8002db0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40015000 	.word	0x40015000
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40021400 	.word	0x40021400

08001eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001efc:	d10d      	bne.n	8001f1a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <HAL_TIM_Base_MspInit+0x3c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	4a08      	ldr	r2, [pc, #32]	@ (8001f28 <HAL_TIM_Base_MspInit+0x3c>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0e:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <HAL_TIM_Base_MspInit+0x3c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001f1a:	bf00      	nop
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800

08001f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <NMI_Handler+0x4>

08001f34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <HardFault_Handler+0x4>

08001f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <MemManage_Handler+0x4>

08001f44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <BusFault_Handler+0x4>

08001f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <UsageFault_Handler+0x4>

08001f54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f82:	f000 fbe1 	bl	8002748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8001f90:	f000 f9ce 	bl	8002330 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8001f94:	f000 f98e 	bl	80022b4 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001f98:	2202      	movs	r2, #2
 8001f9a:	2103      	movs	r1, #3
 8001f9c:	2082      	movs	r0, #130	@ 0x82
 8001f9e:	f000 fa1b 	bl	80023d8 <I2C3_Write>
    HAL_Delay(5);
 8001fa2:	2005      	movs	r0, #5
 8001fa4:	f000 fbf0 	bl	8002788 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2103      	movs	r1, #3
 8001fac:	2082      	movs	r0, #130	@ 0x82
 8001fae:	f000 fa13 	bl	80023d8 <I2C3_Write>
    HAL_Delay(2);
 8001fb2:	2002      	movs	r0, #2
 8001fb4:	f000 fbe8 	bl	8002788 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8001fb8:	1cba      	adds	r2, r7, #2
 8001fba:	2302      	movs	r3, #2
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	2082      	movs	r0, #130	@ 0x82
 8001fc0:	f000 fa5a 	bl	8002478 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8001fc4:	887b      	ldrh	r3, [r7, #2]
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8001fca:	887b      	ldrh	r3, [r7, #2]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	f640 0211 	movw	r2, #2065	@ 0x811
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d001      	beq.n	8001fe4 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e075      	b.n	80020d0 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	2103      	movs	r1, #3
 8001fe8:	2082      	movs	r0, #130	@ 0x82
 8001fea:	f000 f9f5 	bl	80023d8 <I2C3_Write>
    HAL_Delay(5);
 8001fee:	2005      	movs	r0, #5
 8001ff0:	f000 fbca 	bl	8002788 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2103      	movs	r1, #3
 8001ff8:	2082      	movs	r0, #130	@ 0x82
 8001ffa:	f000 f9ed 	bl	80023d8 <I2C3_Write>
    HAL_Delay(2);
 8001ffe:	2002      	movs	r0, #2
 8002000:	f000 fbc2 	bl	8002788 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002004:	2004      	movs	r0, #4
 8002006:	f000 f867 	bl	80020d8 <STMPE811_Read>
 800200a:	4603      	mov	r3, r0
 800200c:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 800200e:	797b      	ldrb	r3, [r7, #5]
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002016:	797b      	ldrb	r3, [r7, #5]
 8002018:	461a      	mov	r2, r3
 800201a:	2104      	movs	r1, #4
 800201c:	2082      	movs	r0, #130	@ 0x82
 800201e:	f000 f9db 	bl	80023d8 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002022:	2004      	movs	r0, #4
 8002024:	f000 f858 	bl	80020d8 <STMPE811_Read>
 8002028:	4603      	mov	r3, r0
 800202a:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 800202c:	797b      	ldrb	r3, [r7, #5]
 800202e:	f023 0302 	bic.w	r3, r3, #2
 8002032:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002034:	797b      	ldrb	r3, [r7, #5]
 8002036:	461a      	mov	r2, r3
 8002038:	2104      	movs	r1, #4
 800203a:	2082      	movs	r0, #130	@ 0x82
 800203c:	f000 f9cc 	bl	80023d8 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002040:	2249      	movs	r2, #73	@ 0x49
 8002042:	2120      	movs	r1, #32
 8002044:	2082      	movs	r0, #130	@ 0x82
 8002046:	f000 f9c7 	bl	80023d8 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 800204a:	2002      	movs	r0, #2
 800204c:	f000 fb9c 	bl	8002788 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002050:	2201      	movs	r2, #1
 8002052:	2121      	movs	r1, #33	@ 0x21
 8002054:	2082      	movs	r0, #130	@ 0x82
 8002056:	f000 f9bf 	bl	80023d8 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 800205a:	2017      	movs	r0, #23
 800205c:	f000 f83c 	bl	80020d8 <STMPE811_Read>
 8002060:	4603      	mov	r3, r0
 8002062:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002064:	797b      	ldrb	r3, [r7, #5]
 8002066:	f043 031e 	orr.w	r3, r3, #30
 800206a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 800206c:	797b      	ldrb	r3, [r7, #5]
 800206e:	461a      	mov	r2, r3
 8002070:	2117      	movs	r1, #23
 8002072:	2082      	movs	r0, #130	@ 0x82
 8002074:	f000 f9b0 	bl	80023d8 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002078:	229a      	movs	r2, #154	@ 0x9a
 800207a:	2141      	movs	r1, #65	@ 0x41
 800207c:	2082      	movs	r0, #130	@ 0x82
 800207e:	f000 f9ab 	bl	80023d8 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002082:	2201      	movs	r2, #1
 8002084:	214a      	movs	r1, #74	@ 0x4a
 8002086:	2082      	movs	r0, #130	@ 0x82
 8002088:	f000 f9a6 	bl	80023d8 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800208c:	2201      	movs	r2, #1
 800208e:	214b      	movs	r1, #75	@ 0x4b
 8002090:	2082      	movs	r0, #130	@ 0x82
 8002092:	f000 f9a1 	bl	80023d8 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002096:	2200      	movs	r2, #0
 8002098:	214b      	movs	r1, #75	@ 0x4b
 800209a:	2082      	movs	r0, #130	@ 0x82
 800209c:	f000 f99c 	bl	80023d8 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80020a0:	2201      	movs	r2, #1
 80020a2:	2156      	movs	r1, #86	@ 0x56
 80020a4:	2082      	movs	r0, #130	@ 0x82
 80020a6:	f000 f997 	bl	80023d8 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80020aa:	2201      	movs	r2, #1
 80020ac:	2158      	movs	r1, #88	@ 0x58
 80020ae:	2082      	movs	r0, #130	@ 0x82
 80020b0:	f000 f992 	bl	80023d8 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80020b4:	2203      	movs	r2, #3
 80020b6:	2140      	movs	r1, #64	@ 0x40
 80020b8:	2082      	movs	r0, #130	@ 0x82
 80020ba:	f000 f98d 	bl	80023d8 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80020be:	22ff      	movs	r2, #255	@ 0xff
 80020c0:	210b      	movs	r1, #11
 80020c2:	2082      	movs	r0, #130	@ 0x82
 80020c4:	f000 f988 	bl	80023d8 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 80020c8:	20c8      	movs	r0, #200	@ 0xc8
 80020ca:	f000 fb5d 	bl	8002788 <HAL_Delay>

    return STMPE811_State_Ok;
 80020ce:	2302      	movs	r3, #2

}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 80020e2:	f107 020f 	add.w	r2, r7, #15
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	4619      	mov	r1, r3
 80020ea:	2082      	movs	r0, #130	@ 0x82
 80020ec:	f000 f99e 	bl	800242c <I2C3_Read>

    return readData;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	791a      	ldrb	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 800210a:	2040      	movs	r0, #64	@ 0x40
 800210c:	f7ff ffe4 	bl	80020d8 <STMPE811_Read>
 8002110:	4603      	mov	r3, r0
 8002112:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002118:	2b00      	cmp	r3, #0
 800211a:	db0e      	blt.n	800213a <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002122:	2201      	movs	r2, #1
 8002124:	214b      	movs	r1, #75	@ 0x4b
 8002126:	2082      	movs	r0, #130	@ 0x82
 8002128:	f000 f956 	bl	80023d8 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800212c:	2200      	movs	r2, #0
 800212e:	214b      	movs	r1, #75	@ 0x4b
 8002130:	2082      	movs	r0, #130	@ 0x82
 8002132:	f000 f951 	bl	80023d8 <I2C3_Write>

        return STMPE811_State_Released;
 8002136:	2301      	movs	r3, #1
 8002138:	e0a7      	b.n	800228a <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	799b      	ldrb	r3, [r3, #6]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d117      	bne.n	8002172 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f9b8 	bl	80024bc <TM_STMPE811_ReadX>
 800214c:	4603      	mov	r3, r0
 800214e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002152:	b29a      	uxth	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	885b      	ldrh	r3, [r3, #2]
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fa0b 	bl	8002578 <TM_STMPE811_ReadY>
 8002162:	4603      	mov	r3, r0
 8002164:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002168:	3301      	adds	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	805a      	strh	r2, [r3, #2]
 8002170:	e048      	b.n	8002204 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	799b      	ldrb	r3, [r3, #6]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d112      	bne.n	80021a0 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f000 f99c 	bl	80024bc <TM_STMPE811_ReadX>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	885b      	ldrh	r3, [r3, #2]
 8002190:	4618      	mov	r0, r3
 8002192:	f000 f9f1 	bl	8002578 <TM_STMPE811_ReadY>
 8002196:	4603      	mov	r3, r0
 8002198:	461a      	mov	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	805a      	strh	r2, [r3, #2]
 800219e:	e031      	b.n	8002204 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	799b      	ldrb	r3, [r3, #6]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d115      	bne.n	80021d4 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	885b      	ldrh	r3, [r3, #2]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 f985 	bl	80024bc <TM_STMPE811_ReadX>
 80021b2:	4603      	mov	r3, r0
 80021b4:	461a      	mov	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f9da 	bl	8002578 <TM_STMPE811_ReadY>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80021ca:	3301      	adds	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	801a      	strh	r2, [r3, #0]
 80021d2:	e017      	b.n	8002204 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	799b      	ldrb	r3, [r3, #6]
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d113      	bne.n	8002204 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 f96b 	bl	80024bc <TM_STMPE811_ReadX>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f9be 	bl	8002578 <TM_STMPE811_ReadY>
 80021fc:	4603      	mov	r3, r0
 80021fe:	461a      	mov	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002204:	2201      	movs	r2, #1
 8002206:	214b      	movs	r1, #75	@ 0x4b
 8002208:	2082      	movs	r0, #130	@ 0x82
 800220a:	f000 f8e5 	bl	80023d8 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800220e:	2200      	movs	r2, #0
 8002210:	214b      	movs	r1, #75	@ 0x4b
 8002212:	2082      	movs	r0, #130	@ 0x82
 8002214:	f000 f8e0 	bl	80023d8 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	799b      	ldrb	r3, [r3, #6]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <STMPE811_ReadTouch+0x12e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	799b      	ldrb	r3, [r3, #6]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d115      	bne.n	8002254 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d027      	beq.n	8002280 <STMPE811_ReadTouch+0x186>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	2bee      	cmp	r3, #238	@ 0xee
 8002236:	d823      	bhi.n	8002280 <STMPE811_ReadTouch+0x186>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	885b      	ldrh	r3, [r3, #2]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01f      	beq.n	8002280 <STMPE811_ReadTouch+0x186>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	885b      	ldrh	r3, [r3, #2]
 8002244:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002248:	d81a      	bhi.n	8002280 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002250:	2300      	movs	r3, #0
 8002252:	e01a      	b.n	800228a <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d012      	beq.n	8002282 <STMPE811_ReadTouch+0x188>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002264:	d80d      	bhi.n	8002282 <STMPE811_ReadTouch+0x188>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	885b      	ldrh	r3, [r3, #2]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d009      	beq.n	8002282 <STMPE811_ReadTouch+0x188>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	885b      	ldrh	r3, [r3, #2]
 8002272:	2bee      	cmp	r3, #238	@ 0xee
 8002274:	d805      	bhi.n	8002282 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 800227c:	2300      	movs	r3, #0
 800227e:	e004      	b.n	800228a <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002280:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002288:	2301      	movs	r3, #1
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002298:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <verifyHAL_I2C_IS_OKAY+0x1c>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80022a0:	bf00      	nop
 80022a2:	e7fd      	b.n	80022a0 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20025bc8 	.word	0x20025bc8

080022b4 <I2C3_Init>:

static void I2C3_Init()
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	603b      	str	r3, [r7, #0]
 80022be:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <I2C3_Init+0x6c>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	4a17      	ldr	r2, [pc, #92]	@ (8002320 <I2C3_Init+0x6c>)
 80022c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ca:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <I2C3_Init+0x6c>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80022d6:	4b13      	ldr	r3, [pc, #76]	@ (8002324 <I2C3_Init+0x70>)
 80022d8:	4a13      	ldr	r2, [pc, #76]	@ (8002328 <I2C3_Init+0x74>)
 80022da:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80022dc:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <I2C3_Init+0x70>)
 80022de:	4a13      	ldr	r2, [pc, #76]	@ (800232c <I2C3_Init+0x78>)
 80022e0:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022e2:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <I2C3_Init+0x70>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80022e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002324 <I2C3_Init+0x70>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002324 <I2C3_Init+0x70>)
 80022f0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022f4:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002324 <I2C3_Init+0x70>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022fc:	4b09      	ldr	r3, [pc, #36]	@ (8002324 <I2C3_Init+0x70>)
 80022fe:	2200      	movs	r2, #0
 8002300:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002302:	4808      	ldr	r0, [pc, #32]	@ (8002324 <I2C3_Init+0x70>)
 8002304:	f000 fe7a 	bl	8002ffc <HAL_I2C_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002312:	bf00      	nop
 8002314:	e7fd      	b.n	8002312 <I2C3_Init+0x5e>
    }
    return;
 8002316:	bf00      	nop
}
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800
 8002324:	20025b74 	.word	0x20025b74
 8002328:	40005c00 	.word	0x40005c00
 800232c:	000186a0 	.word	0x000186a0

08002330 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002336:	f107 030c 	add.w	r3, r7, #12
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <I2C3_MspInit+0x9c>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	4a1f      	ldr	r2, [pc, #124]	@ (80023cc <I2C3_MspInit+0x9c>)
 8002350:	f043 0304 	orr.w	r3, r3, #4
 8002354:	6313      	str	r3, [r2, #48]	@ 0x30
 8002356:	4b1d      	ldr	r3, [pc, #116]	@ (80023cc <I2C3_MspInit+0x9c>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	4b19      	ldr	r3, [pc, #100]	@ (80023cc <I2C3_MspInit+0x9c>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	4a18      	ldr	r2, [pc, #96]	@ (80023cc <I2C3_MspInit+0x9c>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6313      	str	r3, [r2, #48]	@ 0x30
 8002372:	4b16      	ldr	r3, [pc, #88]	@ (80023cc <I2C3_MspInit+0x9c>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800237e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002382:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002384:	2312      	movs	r3, #18
 8002386:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002390:	2304      	movs	r3, #4
 8002392:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002394:	f107 030c 	add.w	r3, r7, #12
 8002398:	4619      	mov	r1, r3
 800239a:	480d      	ldr	r0, [pc, #52]	@ (80023d0 <I2C3_MspInit+0xa0>)
 800239c:	f000 fb5c 	bl	8002a58 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80023a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023a6:	2312      	movs	r3, #18
 80023a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023b2:	2304      	movs	r3, #4
 80023b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80023b6:	f107 030c 	add.w	r3, r7, #12
 80023ba:	4619      	mov	r1, r3
 80023bc:	4805      	ldr	r0, [pc, #20]	@ (80023d4 <I2C3_MspInit+0xa4>)
 80023be:	f000 fb4b 	bl	8002a58 <HAL_GPIO_Init>
    
}
 80023c2:	bf00      	nop
 80023c4:	3720      	adds	r7, #32
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40020800 	.word	0x40020800
 80023d4:	40020000 	.word	0x40020000

080023d8 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af04      	add	r7, sp, #16
 80023de:	4603      	mov	r3, r0
 80023e0:	80fb      	strh	r3, [r7, #6]
 80023e2:	460b      	mov	r3, r1
 80023e4:	717b      	strb	r3, [r7, #5]
 80023e6:	4613      	mov	r3, r2
 80023e8:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80023ea:	793b      	ldrb	r3, [r7, #4]
 80023ec:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80023ee:	797b      	ldrb	r3, [r7, #5]
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	88f9      	ldrh	r1, [r7, #6]
 80023f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <I2C3_Write+0x48>)
 80023f6:	9302      	str	r3, [sp, #8]
 80023f8:	2301      	movs	r3, #1
 80023fa:	9301      	str	r3, [sp, #4]
 80023fc:	f107 030f 	add.w	r3, r7, #15
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	2301      	movs	r3, #1
 8002404:	4807      	ldr	r0, [pc, #28]	@ (8002424 <I2C3_Write+0x4c>)
 8002406:	f000 ff3d 	bl	8003284 <HAL_I2C_Mem_Write>
 800240a:	4603      	mov	r3, r0
 800240c:	461a      	mov	r2, r3
 800240e:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <I2C3_Write+0x50>)
 8002410:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002412:	f7ff ff3f 	bl	8002294 <verifyHAL_I2C_IS_OKAY>
}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	0003d090 	.word	0x0003d090
 8002424:	20025b74 	.word	0x20025b74
 8002428:	20025bc8 	.word	0x20025bc8

0800242c <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af04      	add	r7, sp, #16
 8002432:	4603      	mov	r3, r0
 8002434:	603a      	str	r2, [r7, #0]
 8002436:	71fb      	strb	r3, [r7, #7]
 8002438:	460b      	mov	r3, r1
 800243a:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	b299      	uxth	r1, r3
 8002440:	79bb      	ldrb	r3, [r7, #6]
 8002442:	b29a      	uxth	r2, r3
 8002444:	4b09      	ldr	r3, [pc, #36]	@ (800246c <I2C3_Read+0x40>)
 8002446:	9302      	str	r3, [sp, #8]
 8002448:	2301      	movs	r3, #1
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2301      	movs	r3, #1
 8002452:	4807      	ldr	r0, [pc, #28]	@ (8002470 <I2C3_Read+0x44>)
 8002454:	f001 f810 	bl	8003478 <HAL_I2C_Mem_Read>
 8002458:	4603      	mov	r3, r0
 800245a:	461a      	mov	r2, r3
 800245c:	4b05      	ldr	r3, [pc, #20]	@ (8002474 <I2C3_Read+0x48>)
 800245e:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002460:	f7ff ff18 	bl	8002294 <verifyHAL_I2C_IS_OKAY>
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	0003d090 	.word	0x0003d090
 8002470:	20025b74 	.word	0x20025b74
 8002474:	20025bc8 	.word	0x20025bc8

08002478 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af04      	add	r7, sp, #16
 800247e:	603a      	str	r2, [r7, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
 8002486:	460b      	mov	r3, r1
 8002488:	71bb      	strb	r3, [r7, #6]
 800248a:	4613      	mov	r3, r2
 800248c:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	b299      	uxth	r1, r3
 8002492:	79bb      	ldrb	r3, [r7, #6]
 8002494:	b29a      	uxth	r2, r3
 8002496:	4b07      	ldr	r3, [pc, #28]	@ (80024b4 <I2C3_MulitByteRead+0x3c>)
 8002498:	9302      	str	r3, [sp, #8]
 800249a:	88bb      	ldrh	r3, [r7, #4]
 800249c:	9301      	str	r3, [sp, #4]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	2301      	movs	r3, #1
 80024a4:	4804      	ldr	r0, [pc, #16]	@ (80024b8 <I2C3_MulitByteRead+0x40>)
 80024a6:	f000 ffe7 	bl	8003478 <HAL_I2C_Mem_Read>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	0003d090 	.word	0x0003d090
 80024b8:	20025b74 	.word	0x20025b74

080024bc <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80024c6:	204d      	movs	r0, #77	@ 0x4d
 80024c8:	f7ff fe06 	bl	80020d8 <STMPE811_Read>
 80024cc:	4603      	mov	r3, r0
 80024ce:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80024d0:	204e      	movs	r0, #78	@ 0x4e
 80024d2:	f7ff fe01 	bl	80020d8 <STMPE811_Read>
 80024d6:	4603      	mov	r3, r0
 80024d8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80024da:	7a7b      	ldrb	r3, [r7, #9]
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	b21a      	sxth	r2, r3
 80024e0:	7a3b      	ldrb	r3, [r7, #8]
 80024e2:	b21b      	sxth	r3, r3
 80024e4:	4313      	orrs	r3, r2
 80024e6:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80024e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024ec:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80024f0:	4293      	cmp	r3, r2
 80024f2:	dc06      	bgt.n	8002502 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 80024f4:	89fb      	ldrh	r3, [r7, #14]
 80024f6:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80024fa:	330c      	adds	r3, #12
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	81fb      	strh	r3, [r7, #14]
 8002500:	e005      	b.n	800250e <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002502:	89fb      	ldrh	r3, [r7, #14]
 8002504:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002508:	3308      	adds	r3, #8
 800250a:	b29b      	uxth	r3, r3
 800250c:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 800250e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002512:	4a18      	ldr	r2, [pc, #96]	@ (8002574 <TM_STMPE811_ReadX+0xb8>)
 8002514:	fb82 1203 	smull	r1, r2, r2, r3
 8002518:	441a      	add	r2, r3
 800251a:	10d2      	asrs	r2, r2, #3
 800251c:	17db      	asrs	r3, r3, #31
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002522:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002526:	2bef      	cmp	r3, #239	@ 0xef
 8002528:	dd02      	ble.n	8002530 <TM_STMPE811_ReadX+0x74>
        val = 239;
 800252a:	23ef      	movs	r3, #239	@ 0xef
 800252c:	81fb      	strh	r3, [r7, #14]
 800252e:	e005      	b.n	800253c <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002530:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002534:	2b00      	cmp	r3, #0
 8002536:	da01      	bge.n	800253c <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 800253c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	429a      	cmp	r2, r3
 8002544:	dd05      	ble.n	8002552 <TM_STMPE811_ReadX+0x96>
 8002546:	89fa      	ldrh	r2, [r7, #14]
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	b29b      	uxth	r3, r3
 800254e:	b21b      	sxth	r3, r3
 8002550:	e004      	b.n	800255c <TM_STMPE811_ReadX+0xa0>
 8002552:	89fb      	ldrh	r3, [r7, #14]
 8002554:	88fa      	ldrh	r2, [r7, #6]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	b29b      	uxth	r3, r3
 800255a:	b21b      	sxth	r3, r3
 800255c:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 800255e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002562:	2b04      	cmp	r3, #4
 8002564:	dd01      	ble.n	800256a <TM_STMPE811_ReadX+0xae>
        return val;
 8002566:	89fb      	ldrh	r3, [r7, #14]
 8002568:	e000      	b.n	800256c <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 800256a:	88fb      	ldrh	r3, [r7, #6]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	88888889 	.word	0x88888889

08002578 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002582:	204f      	movs	r0, #79	@ 0x4f
 8002584:	f7ff fda8 	bl	80020d8 <STMPE811_Read>
 8002588:	4603      	mov	r3, r0
 800258a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 800258c:	2050      	movs	r0, #80	@ 0x50
 800258e:	f7ff fda3 	bl	80020d8 <STMPE811_Read>
 8002592:	4603      	mov	r3, r0
 8002594:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002596:	7a7b      	ldrb	r3, [r7, #9]
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	b21a      	sxth	r2, r3
 800259c:	7a3b      	ldrb	r3, [r7, #8]
 800259e:	b21b      	sxth	r3, r3
 80025a0:	4313      	orrs	r3, r2
 80025a2:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80025a4:	89fb      	ldrh	r3, [r7, #14]
 80025a6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80025ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025b2:	4a19      	ldr	r2, [pc, #100]	@ (8002618 <TM_STMPE811_ReadY+0xa0>)
 80025b4:	fb82 1203 	smull	r1, r2, r2, r3
 80025b8:	1052      	asrs	r2, r2, #1
 80025ba:	17db      	asrs	r3, r3, #31
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80025c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	dc02      	bgt.n	80025ce <TM_STMPE811_ReadY+0x56>
        val = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	81fb      	strh	r3, [r7, #14]
 80025cc:	e007      	b.n	80025de <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 80025ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025d2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80025d6:	db02      	blt.n	80025de <TM_STMPE811_ReadY+0x66>
        val = 319;
 80025d8:	f240 133f 	movw	r3, #319	@ 0x13f
 80025dc:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80025de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	dd05      	ble.n	80025f4 <TM_STMPE811_ReadY+0x7c>
 80025e8:	89fa      	ldrh	r2, [r7, #14]
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	b21b      	sxth	r3, r3
 80025f2:	e004      	b.n	80025fe <TM_STMPE811_ReadY+0x86>
 80025f4:	89fb      	ldrh	r3, [r7, #14]
 80025f6:	88fa      	ldrh	r2, [r7, #6]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	b21b      	sxth	r3, r3
 80025fe:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002600:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002604:	2b04      	cmp	r3, #4
 8002606:	dd01      	ble.n	800260c <TM_STMPE811_ReadY+0x94>
        return val;
 8002608:	89fb      	ldrh	r3, [r7, #14]
 800260a:	e000      	b.n	800260e <TM_STMPE811_ReadY+0x96>
    }
    return y;
 800260c:	88fb      	ldrh	r3, [r7, #6]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	2e8ba2e9 	.word	0x2e8ba2e9

0800261c <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002630:	4b06      	ldr	r3, [pc, #24]	@ (800264c <SystemInit+0x20>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002636:	4a05      	ldr	r2, [pc, #20]	@ (800264c <SystemInit+0x20>)
 8002638:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800263c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002650:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002688 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002654:	f7ff ffea 	bl	800262c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002658:	480c      	ldr	r0, [pc, #48]	@ (800268c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800265a:	490d      	ldr	r1, [pc, #52]	@ (8002690 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800265c:	4a0d      	ldr	r2, [pc, #52]	@ (8002694 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800265e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002660:	e002      	b.n	8002668 <LoopCopyDataInit>

08002662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002666:	3304      	adds	r3, #4

08002668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800266a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800266c:	d3f9      	bcc.n	8002662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800266e:	4a0a      	ldr	r2, [pc, #40]	@ (8002698 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002670:	4c0a      	ldr	r4, [pc, #40]	@ (800269c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002674:	e001      	b.n	800267a <LoopFillZerobss>

08002676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002678:	3204      	adds	r2, #4

0800267a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800267a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800267c:	d3fb      	bcc.n	8002676 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800267e:	f003 fc31 	bl	8005ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002682:	f7fe fe26 	bl	80012d2 <main>
  bx  lr    
 8002686:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002688:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800268c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002690:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002694:	08005f6c 	.word	0x08005f6c
  ldr r2, =_sbss
 8002698:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800269c:	20025bd0 	.word	0x20025bd0

080026a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026a0:	e7fe      	b.n	80026a0 <ADC_IRQHandler>
	...

080026a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026a8:	4b0e      	ldr	r3, [pc, #56]	@ (80026e4 <HAL_Init+0x40>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a0d      	ldr	r2, [pc, #52]	@ (80026e4 <HAL_Init+0x40>)
 80026ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026b4:	4b0b      	ldr	r3, [pc, #44]	@ (80026e4 <HAL_Init+0x40>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0a      	ldr	r2, [pc, #40]	@ (80026e4 <HAL_Init+0x40>)
 80026ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026c0:	4b08      	ldr	r3, [pc, #32]	@ (80026e4 <HAL_Init+0x40>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a07      	ldr	r2, [pc, #28]	@ (80026e4 <HAL_Init+0x40>)
 80026c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026cc:	2003      	movs	r0, #3
 80026ce:	f000 f973 	bl	80029b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026d2:	2000      	movs	r0, #0
 80026d4:	f000 f808 	bl	80026e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026d8:	f7ff f9c6 	bl	8001a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40023c00 	.word	0x40023c00

080026e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026f0:	4b12      	ldr	r3, [pc, #72]	@ (800273c <HAL_InitTick+0x54>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b12      	ldr	r3, [pc, #72]	@ (8002740 <HAL_InitTick+0x58>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	4619      	mov	r1, r3
 80026fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002702:	fbb2 f3f3 	udiv	r3, r2, r3
 8002706:	4618      	mov	r0, r3
 8002708:	f000 f999 	bl	8002a3e <HAL_SYSTICK_Config>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e00e      	b.n	8002734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b0f      	cmp	r3, #15
 800271a:	d80a      	bhi.n	8002732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800271c:	2200      	movs	r2, #0
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	f04f 30ff 	mov.w	r0, #4294967295
 8002724:	f000 f953 	bl	80029ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002728:	4a06      	ldr	r2, [pc, #24]	@ (8002744 <HAL_InitTick+0x5c>)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	e000      	b.n	8002734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000008 	.word	0x20000008
 8002740:	20000010 	.word	0x20000010
 8002744:	2000000c 	.word	0x2000000c

08002748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800274c:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <HAL_IncTick+0x20>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	4b06      	ldr	r3, [pc, #24]	@ (800276c <HAL_IncTick+0x24>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4413      	add	r3, r2
 8002758:	4a04      	ldr	r2, [pc, #16]	@ (800276c <HAL_IncTick+0x24>)
 800275a:	6013      	str	r3, [r2, #0]
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	20000010 	.word	0x20000010
 800276c:	20025bcc 	.word	0x20025bcc

08002770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return uwTick;
 8002774:	4b03      	ldr	r3, [pc, #12]	@ (8002784 <HAL_GetTick+0x14>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20025bcc 	.word	0x20025bcc

08002788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002790:	f7ff ffee 	bl	8002770 <HAL_GetTick>
 8002794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d005      	beq.n	80027ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027a2:	4b0a      	ldr	r3, [pc, #40]	@ (80027cc <HAL_Delay+0x44>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4413      	add	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027ae:	bf00      	nop
 80027b0:	f7ff ffde 	bl	8002770 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d8f7      	bhi.n	80027b0 <HAL_Delay+0x28>
  {
  }
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000010 	.word	0x20000010

080027d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <__NVIC_SetPriorityGrouping+0x44>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027ec:	4013      	ands	r3, r2
 80027ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002802:	4a04      	ldr	r2, [pc, #16]	@ (8002814 <__NVIC_SetPriorityGrouping+0x44>)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	60d3      	str	r3, [r2, #12]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800281c:	4b04      	ldr	r3, [pc, #16]	@ (8002830 <__NVIC_GetPriorityGrouping+0x18>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	0a1b      	lsrs	r3, r3, #8
 8002822:	f003 0307 	and.w	r3, r3, #7
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	2b00      	cmp	r3, #0
 8002844:	db0b      	blt.n	800285e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	f003 021f 	and.w	r2, r3, #31
 800284c:	4907      	ldr	r1, [pc, #28]	@ (800286c <__NVIC_EnableIRQ+0x38>)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	2001      	movs	r0, #1
 8002856:	fa00 f202 	lsl.w	r2, r0, r2
 800285a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000e100 	.word	0xe000e100

08002870 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	db12      	blt.n	80028a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	490a      	ldr	r1, [pc, #40]	@ (80028b4 <__NVIC_DisableIRQ+0x44>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	2001      	movs	r0, #1
 8002892:	fa00 f202 	lsl.w	r2, r0, r2
 8002896:	3320      	adds	r3, #32
 8002898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800289c:	f3bf 8f4f 	dsb	sy
}
 80028a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80028a2:	f3bf 8f6f 	isb	sy
}
 80028a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000e100 	.word	0xe000e100

080028b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	db0a      	blt.n	80028e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	490c      	ldr	r1, [pc, #48]	@ (8002904 <__NVIC_SetPriority+0x4c>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	0112      	lsls	r2, r2, #4
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	440b      	add	r3, r1
 80028dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e0:	e00a      	b.n	80028f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4908      	ldr	r1, [pc, #32]	@ (8002908 <__NVIC_SetPriority+0x50>)
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	3b04      	subs	r3, #4
 80028f0:	0112      	lsls	r2, r2, #4
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	440b      	add	r3, r1
 80028f6:	761a      	strb	r2, [r3, #24]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000e100 	.word	0xe000e100
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	@ 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f1c3 0307 	rsb	r3, r3, #7
 8002926:	2b04      	cmp	r3, #4
 8002928:	bf28      	it	cs
 800292a:	2304      	movcs	r3, #4
 800292c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3304      	adds	r3, #4
 8002932:	2b06      	cmp	r3, #6
 8002934:	d902      	bls.n	800293c <NVIC_EncodePriority+0x30>
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3b03      	subs	r3, #3
 800293a:	e000      	b.n	800293e <NVIC_EncodePriority+0x32>
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	f04f 32ff 	mov.w	r2, #4294967295
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	401a      	ands	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	43d9      	mvns	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	4313      	orrs	r3, r2
         );
}
 8002966:	4618      	mov	r0, r3
 8002968:	3724      	adds	r7, #36	@ 0x24
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002984:	d301      	bcc.n	800298a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002986:	2301      	movs	r3, #1
 8002988:	e00f      	b.n	80029aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298a:	4a0a      	ldr	r2, [pc, #40]	@ (80029b4 <SysTick_Config+0x40>)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002992:	210f      	movs	r1, #15
 8002994:	f04f 30ff 	mov.w	r0, #4294967295
 8002998:	f7ff ff8e 	bl	80028b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800299c:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <SysTick_Config+0x40>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a2:	4b04      	ldr	r3, [pc, #16]	@ (80029b4 <SysTick_Config+0x40>)
 80029a4:	2207      	movs	r2, #7
 80029a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	e000e010 	.word	0xe000e010

080029b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ff05 	bl	80027d0 <__NVIC_SetPriorityGrouping>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e0:	f7ff ff1a 	bl	8002818 <__NVIC_GetPriorityGrouping>
 80029e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	6978      	ldr	r0, [r7, #20]
 80029ec:	f7ff ff8e 	bl	800290c <NVIC_EncodePriority>
 80029f0:	4602      	mov	r2, r0
 80029f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff5d 	bl	80028b8 <__NVIC_SetPriority>
}
 80029fe:	bf00      	nop
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff0d 	bl	8002834 <__NVIC_EnableIRQ>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	4603      	mov	r3, r0
 8002a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff1d 	bl	8002870 <__NVIC_DisableIRQ>
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ff94 	bl	8002974 <SysTick_Config>
 8002a4c:	4603      	mov	r3, r0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b089      	sub	sp, #36	@ 0x24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	e177      	b.n	8002d64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a74:	2201      	movs	r2, #1
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	f040 8166 	bne.w	8002d5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d005      	beq.n	8002aaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d130      	bne.n	8002b0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f003 0201 	and.w	r2, r3, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d017      	beq.n	8002b48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	2203      	movs	r2, #3
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d123      	bne.n	8002b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	08da      	lsrs	r2, r3, #3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3208      	adds	r2, #8
 8002b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	220f      	movs	r2, #15
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	08da      	lsrs	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3208      	adds	r2, #8
 8002b96:	69b9      	ldr	r1, [r7, #24]
 8002b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0203 	and.w	r2, r3, #3
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80c0 	beq.w	8002d5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	4b66      	ldr	r3, [pc, #408]	@ (8002d7c <HAL_GPIO_Init+0x324>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be6:	4a65      	ldr	r2, [pc, #404]	@ (8002d7c <HAL_GPIO_Init+0x324>)
 8002be8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bee:	4b63      	ldr	r3, [pc, #396]	@ (8002d7c <HAL_GPIO_Init+0x324>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bfa:	4a61      	ldr	r2, [pc, #388]	@ (8002d80 <HAL_GPIO_Init+0x328>)
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	089b      	lsrs	r3, r3, #2
 8002c00:	3302      	adds	r3, #2
 8002c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	220f      	movs	r2, #15
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a58      	ldr	r2, [pc, #352]	@ (8002d84 <HAL_GPIO_Init+0x32c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d037      	beq.n	8002c96 <HAL_GPIO_Init+0x23e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a57      	ldr	r2, [pc, #348]	@ (8002d88 <HAL_GPIO_Init+0x330>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d031      	beq.n	8002c92 <HAL_GPIO_Init+0x23a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a56      	ldr	r2, [pc, #344]	@ (8002d8c <HAL_GPIO_Init+0x334>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d02b      	beq.n	8002c8e <HAL_GPIO_Init+0x236>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a55      	ldr	r2, [pc, #340]	@ (8002d90 <HAL_GPIO_Init+0x338>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d025      	beq.n	8002c8a <HAL_GPIO_Init+0x232>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a54      	ldr	r2, [pc, #336]	@ (8002d94 <HAL_GPIO_Init+0x33c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d01f      	beq.n	8002c86 <HAL_GPIO_Init+0x22e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a53      	ldr	r2, [pc, #332]	@ (8002d98 <HAL_GPIO_Init+0x340>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d019      	beq.n	8002c82 <HAL_GPIO_Init+0x22a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a52      	ldr	r2, [pc, #328]	@ (8002d9c <HAL_GPIO_Init+0x344>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d013      	beq.n	8002c7e <HAL_GPIO_Init+0x226>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a51      	ldr	r2, [pc, #324]	@ (8002da0 <HAL_GPIO_Init+0x348>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00d      	beq.n	8002c7a <HAL_GPIO_Init+0x222>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a50      	ldr	r2, [pc, #320]	@ (8002da4 <HAL_GPIO_Init+0x34c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d007      	beq.n	8002c76 <HAL_GPIO_Init+0x21e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a4f      	ldr	r2, [pc, #316]	@ (8002da8 <HAL_GPIO_Init+0x350>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d101      	bne.n	8002c72 <HAL_GPIO_Init+0x21a>
 8002c6e:	2309      	movs	r3, #9
 8002c70:	e012      	b.n	8002c98 <HAL_GPIO_Init+0x240>
 8002c72:	230a      	movs	r3, #10
 8002c74:	e010      	b.n	8002c98 <HAL_GPIO_Init+0x240>
 8002c76:	2308      	movs	r3, #8
 8002c78:	e00e      	b.n	8002c98 <HAL_GPIO_Init+0x240>
 8002c7a:	2307      	movs	r3, #7
 8002c7c:	e00c      	b.n	8002c98 <HAL_GPIO_Init+0x240>
 8002c7e:	2306      	movs	r3, #6
 8002c80:	e00a      	b.n	8002c98 <HAL_GPIO_Init+0x240>
 8002c82:	2305      	movs	r3, #5
 8002c84:	e008      	b.n	8002c98 <HAL_GPIO_Init+0x240>
 8002c86:	2304      	movs	r3, #4
 8002c88:	e006      	b.n	8002c98 <HAL_GPIO_Init+0x240>
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e004      	b.n	8002c98 <HAL_GPIO_Init+0x240>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e002      	b.n	8002c98 <HAL_GPIO_Init+0x240>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <HAL_GPIO_Init+0x240>
 8002c96:	2300      	movs	r3, #0
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	f002 0203 	and.w	r2, r2, #3
 8002c9e:	0092      	lsls	r2, r2, #2
 8002ca0:	4093      	lsls	r3, r2
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ca8:	4935      	ldr	r1, [pc, #212]	@ (8002d80 <HAL_GPIO_Init+0x328>)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	089b      	lsrs	r3, r3, #2
 8002cae:	3302      	adds	r3, #2
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cb6:	4b3d      	ldr	r3, [pc, #244]	@ (8002dac <HAL_GPIO_Init+0x354>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cda:	4a34      	ldr	r2, [pc, #208]	@ (8002dac <HAL_GPIO_Init+0x354>)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ce0:	4b32      	ldr	r3, [pc, #200]	@ (8002dac <HAL_GPIO_Init+0x354>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d04:	4a29      	ldr	r2, [pc, #164]	@ (8002dac <HAL_GPIO_Init+0x354>)
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d0a:	4b28      	ldr	r3, [pc, #160]	@ (8002dac <HAL_GPIO_Init+0x354>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d2e:	4a1f      	ldr	r2, [pc, #124]	@ (8002dac <HAL_GPIO_Init+0x354>)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d34:	4b1d      	ldr	r3, [pc, #116]	@ (8002dac <HAL_GPIO_Init+0x354>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d58:	4a14      	ldr	r2, [pc, #80]	@ (8002dac <HAL_GPIO_Init+0x354>)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	3301      	adds	r3, #1
 8002d62:	61fb      	str	r3, [r7, #28]
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2b0f      	cmp	r3, #15
 8002d68:	f67f ae84 	bls.w	8002a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d6c:	bf00      	nop
 8002d6e:	bf00      	nop
 8002d70:	3724      	adds	r7, #36	@ 0x24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40013800 	.word	0x40013800
 8002d84:	40020000 	.word	0x40020000
 8002d88:	40020400 	.word	0x40020400
 8002d8c:	40020800 	.word	0x40020800
 8002d90:	40020c00 	.word	0x40020c00
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40021400 	.word	0x40021400
 8002d9c:	40021800 	.word	0x40021800
 8002da0:	40021c00 	.word	0x40021c00
 8002da4:	40022000 	.word	0x40022000
 8002da8:	40022400 	.word	0x40022400
 8002dac:	40013c00 	.word	0x40013c00

08002db0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	e0d9      	b.n	8002f80 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dcc:	2201      	movs	r2, #1
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	f040 80c9 	bne.w	8002f7a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002de8:	4a6b      	ldr	r2, [pc, #428]	@ (8002f98 <HAL_GPIO_DeInit+0x1e8>)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	089b      	lsrs	r3, r3, #2
 8002dee:	3302      	adds	r3, #2
 8002df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	220f      	movs	r2, #15
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	4013      	ands	r3, r2
 8002e08:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a63      	ldr	r2, [pc, #396]	@ (8002f9c <HAL_GPIO_DeInit+0x1ec>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d037      	beq.n	8002e82 <HAL_GPIO_DeInit+0xd2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a62      	ldr	r2, [pc, #392]	@ (8002fa0 <HAL_GPIO_DeInit+0x1f0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d031      	beq.n	8002e7e <HAL_GPIO_DeInit+0xce>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a61      	ldr	r2, [pc, #388]	@ (8002fa4 <HAL_GPIO_DeInit+0x1f4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d02b      	beq.n	8002e7a <HAL_GPIO_DeInit+0xca>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a60      	ldr	r2, [pc, #384]	@ (8002fa8 <HAL_GPIO_DeInit+0x1f8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d025      	beq.n	8002e76 <HAL_GPIO_DeInit+0xc6>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a5f      	ldr	r2, [pc, #380]	@ (8002fac <HAL_GPIO_DeInit+0x1fc>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01f      	beq.n	8002e72 <HAL_GPIO_DeInit+0xc2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a5e      	ldr	r2, [pc, #376]	@ (8002fb0 <HAL_GPIO_DeInit+0x200>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d019      	beq.n	8002e6e <HAL_GPIO_DeInit+0xbe>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a5d      	ldr	r2, [pc, #372]	@ (8002fb4 <HAL_GPIO_DeInit+0x204>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d013      	beq.n	8002e6a <HAL_GPIO_DeInit+0xba>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a5c      	ldr	r2, [pc, #368]	@ (8002fb8 <HAL_GPIO_DeInit+0x208>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00d      	beq.n	8002e66 <HAL_GPIO_DeInit+0xb6>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a5b      	ldr	r2, [pc, #364]	@ (8002fbc <HAL_GPIO_DeInit+0x20c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d007      	beq.n	8002e62 <HAL_GPIO_DeInit+0xb2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a5a      	ldr	r2, [pc, #360]	@ (8002fc0 <HAL_GPIO_DeInit+0x210>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d101      	bne.n	8002e5e <HAL_GPIO_DeInit+0xae>
 8002e5a:	2309      	movs	r3, #9
 8002e5c:	e012      	b.n	8002e84 <HAL_GPIO_DeInit+0xd4>
 8002e5e:	230a      	movs	r3, #10
 8002e60:	e010      	b.n	8002e84 <HAL_GPIO_DeInit+0xd4>
 8002e62:	2308      	movs	r3, #8
 8002e64:	e00e      	b.n	8002e84 <HAL_GPIO_DeInit+0xd4>
 8002e66:	2307      	movs	r3, #7
 8002e68:	e00c      	b.n	8002e84 <HAL_GPIO_DeInit+0xd4>
 8002e6a:	2306      	movs	r3, #6
 8002e6c:	e00a      	b.n	8002e84 <HAL_GPIO_DeInit+0xd4>
 8002e6e:	2305      	movs	r3, #5
 8002e70:	e008      	b.n	8002e84 <HAL_GPIO_DeInit+0xd4>
 8002e72:	2304      	movs	r3, #4
 8002e74:	e006      	b.n	8002e84 <HAL_GPIO_DeInit+0xd4>
 8002e76:	2303      	movs	r3, #3
 8002e78:	e004      	b.n	8002e84 <HAL_GPIO_DeInit+0xd4>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e002      	b.n	8002e84 <HAL_GPIO_DeInit+0xd4>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <HAL_GPIO_DeInit+0xd4>
 8002e82:	2300      	movs	r3, #0
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	f002 0203 	and.w	r2, r2, #3
 8002e8a:	0092      	lsls	r2, r2, #2
 8002e8c:	4093      	lsls	r3, r2
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d132      	bne.n	8002efa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002e94:	4b4b      	ldr	r3, [pc, #300]	@ (8002fc4 <HAL_GPIO_DeInit+0x214>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	4949      	ldr	r1, [pc, #292]	@ (8002fc4 <HAL_GPIO_DeInit+0x214>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002ea2:	4b48      	ldr	r3, [pc, #288]	@ (8002fc4 <HAL_GPIO_DeInit+0x214>)
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	4946      	ldr	r1, [pc, #280]	@ (8002fc4 <HAL_GPIO_DeInit+0x214>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002eb0:	4b44      	ldr	r3, [pc, #272]	@ (8002fc4 <HAL_GPIO_DeInit+0x214>)
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	4942      	ldr	r1, [pc, #264]	@ (8002fc4 <HAL_GPIO_DeInit+0x214>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002ebe:	4b41      	ldr	r3, [pc, #260]	@ (8002fc4 <HAL_GPIO_DeInit+0x214>)
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	493f      	ldr	r1, [pc, #252]	@ (8002fc4 <HAL_GPIO_DeInit+0x214>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	220f      	movs	r2, #15
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002edc:	4a2e      	ldr	r2, [pc, #184]	@ (8002f98 <HAL_GPIO_DeInit+0x1e8>)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	089b      	lsrs	r3, r3, #2
 8002ee2:	3302      	adds	r3, #2
 8002ee4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	43da      	mvns	r2, r3
 8002eec:	482a      	ldr	r0, [pc, #168]	@ (8002f98 <HAL_GPIO_DeInit+0x1e8>)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	089b      	lsrs	r3, r3, #2
 8002ef2:	400a      	ands	r2, r1
 8002ef4:	3302      	adds	r3, #2
 8002ef6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	2103      	movs	r1, #3
 8002f04:	fa01 f303 	lsl.w	r3, r1, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	401a      	ands	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	08da      	lsrs	r2, r3, #3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3208      	adds	r2, #8
 8002f18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	220f      	movs	r2, #15
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	08d2      	lsrs	r2, r2, #3
 8002f30:	4019      	ands	r1, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3208      	adds	r2, #8
 8002f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	2103      	movs	r1, #3
 8002f44:	fa01 f303 	lsl.w	r3, r1, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	2101      	movs	r1, #1
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	401a      	ands	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	2103      	movs	r1, #3
 8002f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	401a      	ands	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2b0f      	cmp	r3, #15
 8002f84:	f67f af22 	bls.w	8002dcc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40013800 	.word	0x40013800
 8002f9c:	40020000 	.word	0x40020000
 8002fa0:	40020400 	.word	0x40020400
 8002fa4:	40020800 	.word	0x40020800
 8002fa8:	40020c00 	.word	0x40020c00
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40021400 	.word	0x40021400
 8002fb4:	40021800 	.word	0x40021800
 8002fb8:	40021c00 	.word	0x40021c00
 8002fbc:	40022000 	.word	0x40022000
 8002fc0:	40022400 	.word	0x40022400
 8002fc4:	40013c00 	.word	0x40013c00

08002fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	807b      	strh	r3, [r7, #2]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fd8:	787b      	ldrb	r3, [r7, #1]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fde:	887a      	ldrh	r2, [r7, #2]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fe4:	e003      	b.n	8002fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fe6:	887b      	ldrh	r3, [r7, #2]
 8002fe8:	041a      	lsls	r2, r3, #16
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	619a      	str	r2, [r3, #24]
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e12b      	b.n	8003266 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fe fd48 	bl	8001ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2224      	movs	r2, #36	@ 0x24
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800304e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800305e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003060:	f001 ff82 	bl	8004f68 <HAL_RCC_GetPCLK1Freq>
 8003064:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4a81      	ldr	r2, [pc, #516]	@ (8003270 <HAL_I2C_Init+0x274>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d807      	bhi.n	8003080 <HAL_I2C_Init+0x84>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4a80      	ldr	r2, [pc, #512]	@ (8003274 <HAL_I2C_Init+0x278>)
 8003074:	4293      	cmp	r3, r2
 8003076:	bf94      	ite	ls
 8003078:	2301      	movls	r3, #1
 800307a:	2300      	movhi	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	e006      	b.n	800308e <HAL_I2C_Init+0x92>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4a7d      	ldr	r2, [pc, #500]	@ (8003278 <HAL_I2C_Init+0x27c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	bf94      	ite	ls
 8003088:	2301      	movls	r3, #1
 800308a:	2300      	movhi	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e0e7      	b.n	8003266 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4a78      	ldr	r2, [pc, #480]	@ (800327c <HAL_I2C_Init+0x280>)
 800309a:	fba2 2303 	umull	r2, r3, r2, r3
 800309e:	0c9b      	lsrs	r3, r3, #18
 80030a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a6a      	ldr	r2, [pc, #424]	@ (8003270 <HAL_I2C_Init+0x274>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d802      	bhi.n	80030d0 <HAL_I2C_Init+0xd4>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	3301      	adds	r3, #1
 80030ce:	e009      	b.n	80030e4 <HAL_I2C_Init+0xe8>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	4a69      	ldr	r2, [pc, #420]	@ (8003280 <HAL_I2C_Init+0x284>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	3301      	adds	r3, #1
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	430b      	orrs	r3, r1
 80030ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	495c      	ldr	r1, [pc, #368]	@ (8003270 <HAL_I2C_Init+0x274>)
 8003100:	428b      	cmp	r3, r1
 8003102:	d819      	bhi.n	8003138 <HAL_I2C_Init+0x13c>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1e59      	subs	r1, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003112:	1c59      	adds	r1, r3, #1
 8003114:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003118:	400b      	ands	r3, r1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_I2C_Init+0x138>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1e59      	subs	r1, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	fbb1 f3f3 	udiv	r3, r1, r3
 800312c:	3301      	adds	r3, #1
 800312e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003132:	e051      	b.n	80031d8 <HAL_I2C_Init+0x1dc>
 8003134:	2304      	movs	r3, #4
 8003136:	e04f      	b.n	80031d8 <HAL_I2C_Init+0x1dc>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d111      	bne.n	8003164 <HAL_I2C_Init+0x168>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	1e58      	subs	r0, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	440b      	add	r3, r1
 800314e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003152:	3301      	adds	r3, #1
 8003154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	e012      	b.n	800318a <HAL_I2C_Init+0x18e>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1e58      	subs	r0, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	0099      	lsls	r1, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	fbb0 f3f3 	udiv	r3, r0, r3
 800317a:	3301      	adds	r3, #1
 800317c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003180:	2b00      	cmp	r3, #0
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_Init+0x196>
 800318e:	2301      	movs	r3, #1
 8003190:	e022      	b.n	80031d8 <HAL_I2C_Init+0x1dc>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10e      	bne.n	80031b8 <HAL_I2C_Init+0x1bc>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1e58      	subs	r0, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6859      	ldr	r1, [r3, #4]
 80031a2:	460b      	mov	r3, r1
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	440b      	add	r3, r1
 80031a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ac:	3301      	adds	r3, #1
 80031ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031b6:	e00f      	b.n	80031d8 <HAL_I2C_Init+0x1dc>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1e58      	subs	r0, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6859      	ldr	r1, [r3, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	0099      	lsls	r1, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ce:	3301      	adds	r3, #1
 80031d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	6809      	ldr	r1, [r1, #0]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69da      	ldr	r2, [r3, #28]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003206:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6911      	ldr	r1, [r2, #16]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	68d2      	ldr	r2, [r2, #12]
 8003212:	4311      	orrs	r1, r2
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	430b      	orrs	r3, r1
 800321a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	000186a0 	.word	0x000186a0
 8003274:	001e847f 	.word	0x001e847f
 8003278:	003d08ff 	.word	0x003d08ff
 800327c:	431bde83 	.word	0x431bde83
 8003280:	10624dd3 	.word	0x10624dd3

08003284 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af02      	add	r7, sp, #8
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	4608      	mov	r0, r1
 800328e:	4611      	mov	r1, r2
 8003290:	461a      	mov	r2, r3
 8003292:	4603      	mov	r3, r0
 8003294:	817b      	strh	r3, [r7, #10]
 8003296:	460b      	mov	r3, r1
 8003298:	813b      	strh	r3, [r7, #8]
 800329a:	4613      	mov	r3, r2
 800329c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800329e:	f7ff fa67 	bl	8002770 <HAL_GetTick>
 80032a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	f040 80d9 	bne.w	8003464 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	2319      	movs	r3, #25
 80032b8:	2201      	movs	r2, #1
 80032ba:	496d      	ldr	r1, [pc, #436]	@ (8003470 <HAL_I2C_Mem_Write+0x1ec>)
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 fc8b 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80032c8:	2302      	movs	r3, #2
 80032ca:	e0cc      	b.n	8003466 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_I2C_Mem_Write+0x56>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e0c5      	b.n	8003466 <HAL_I2C_Mem_Write+0x1e2>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d007      	beq.n	8003300 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800330e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2221      	movs	r2, #33	@ 0x21
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2240      	movs	r2, #64	@ 0x40
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a3a      	ldr	r2, [r7, #32]
 800332a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003330:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4a4d      	ldr	r2, [pc, #308]	@ (8003474 <HAL_I2C_Mem_Write+0x1f0>)
 8003340:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003342:	88f8      	ldrh	r0, [r7, #6]
 8003344:	893a      	ldrh	r2, [r7, #8]
 8003346:	8979      	ldrh	r1, [r7, #10]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	9301      	str	r3, [sp, #4]
 800334c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	4603      	mov	r3, r0
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 fac2 	bl	80038dc <I2C_RequestMemoryWrite>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d052      	beq.n	8003404 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e081      	b.n	8003466 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 fd50 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00d      	beq.n	800338e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003376:	2b04      	cmp	r3, #4
 8003378:	d107      	bne.n	800338a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003388:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e06b      	b.n	8003466 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003392:	781a      	ldrb	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d11b      	bne.n	8003404 <HAL_I2C_Mem_Write+0x180>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d017      	beq.n	8003404 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	781a      	ldrb	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1aa      	bne.n	8003362 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 fd43 	bl	8003e9c <I2C_WaitOnBTFFlagUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00d      	beq.n	8003438 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	2b04      	cmp	r3, #4
 8003422:	d107      	bne.n	8003434 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003432:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e016      	b.n	8003466 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	e000      	b.n	8003466 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003464:	2302      	movs	r3, #2
  }
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	00100002 	.word	0x00100002
 8003474:	ffff0000 	.word	0xffff0000

08003478 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08c      	sub	sp, #48	@ 0x30
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	4608      	mov	r0, r1
 8003482:	4611      	mov	r1, r2
 8003484:	461a      	mov	r2, r3
 8003486:	4603      	mov	r3, r0
 8003488:	817b      	strh	r3, [r7, #10]
 800348a:	460b      	mov	r3, r1
 800348c:	813b      	strh	r3, [r7, #8]
 800348e:	4613      	mov	r3, r2
 8003490:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003492:	f7ff f96d 	bl	8002770 <HAL_GetTick>
 8003496:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	f040 8214 	bne.w	80038ce <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	2319      	movs	r3, #25
 80034ac:	2201      	movs	r2, #1
 80034ae:	497b      	ldr	r1, [pc, #492]	@ (800369c <HAL_I2C_Mem_Read+0x224>)
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fb91 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80034bc:	2302      	movs	r3, #2
 80034be:	e207      	b.n	80038d0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_I2C_Mem_Read+0x56>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e200      	b.n	80038d0 <HAL_I2C_Mem_Read+0x458>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d007      	beq.n	80034f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003502:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2222      	movs	r2, #34	@ 0x22
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2240      	movs	r2, #64	@ 0x40
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800351e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003524:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4a5b      	ldr	r2, [pc, #364]	@ (80036a0 <HAL_I2C_Mem_Read+0x228>)
 8003534:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003536:	88f8      	ldrh	r0, [r7, #6]
 8003538:	893a      	ldrh	r2, [r7, #8]
 800353a:	8979      	ldrh	r1, [r7, #10]
 800353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353e:	9301      	str	r3, [sp, #4]
 8003540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	4603      	mov	r3, r0
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fa5e 	bl	8003a08 <I2C_RequestMemoryRead>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e1bc      	b.n	80038d0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355a:	2b00      	cmp	r3, #0
 800355c:	d113      	bne.n	8003586 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800355e:	2300      	movs	r3, #0
 8003560:	623b      	str	r3, [r7, #32]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	623b      	str	r3, [r7, #32]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	623b      	str	r3, [r7, #32]
 8003572:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e190      	b.n	80038a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358a:	2b01      	cmp	r3, #1
 800358c:	d11b      	bne.n	80035c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800359c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	61fb      	str	r3, [r7, #28]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	e170      	b.n	80038a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d11b      	bne.n	8003606 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ee:	2300      	movs	r3, #0
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	e150      	b.n	80038a8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800361c:	e144      	b.n	80038a8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003622:	2b03      	cmp	r3, #3
 8003624:	f200 80f1 	bhi.w	800380a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362c:	2b01      	cmp	r3, #1
 800362e:	d123      	bne.n	8003678 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003630:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003632:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fc79 	bl	8003f2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e145      	b.n	80038d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691a      	ldr	r2, [r3, #16]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003676:	e117      	b.n	80038a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800367c:	2b02      	cmp	r3, #2
 800367e:	d14e      	bne.n	800371e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003686:	2200      	movs	r2, #0
 8003688:	4906      	ldr	r1, [pc, #24]	@ (80036a4 <HAL_I2C_Mem_Read+0x22c>)
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 faa4 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e11a      	b.n	80038d0 <HAL_I2C_Mem_Read+0x458>
 800369a:	bf00      	nop
 800369c:	00100002 	.word	0x00100002
 80036a0:	ffff0000 	.word	0xffff0000
 80036a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691a      	ldr	r2, [r3, #16]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800371c:	e0c4      	b.n	80038a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003724:	2200      	movs	r2, #0
 8003726:	496c      	ldr	r1, [pc, #432]	@ (80038d8 <HAL_I2C_Mem_Read+0x460>)
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fa55 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0cb      	b.n	80038d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003746:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003780:	2200      	movs	r2, #0
 8003782:	4955      	ldr	r1, [pc, #340]	@ (80038d8 <HAL_I2C_Mem_Read+0x460>)
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fa27 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e09d      	b.n	80038d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003808:	e04e      	b.n	80038a8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800380a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800380c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 fb8c 	bl	8003f2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e058      	b.n	80038d0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b04      	cmp	r3, #4
 800385c:	d124      	bne.n	80038a8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003862:	2b03      	cmp	r3, #3
 8003864:	d107      	bne.n	8003876 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003874:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f47f aeb6 	bne.w	800361e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	e000      	b.n	80038d0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80038ce:	2302      	movs	r3, #2
  }
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3728      	adds	r7, #40	@ 0x28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	00010004 	.word	0x00010004

080038dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	4608      	mov	r0, r1
 80038e6:	4611      	mov	r1, r2
 80038e8:	461a      	mov	r2, r3
 80038ea:	4603      	mov	r3, r0
 80038ec:	817b      	strh	r3, [r7, #10]
 80038ee:	460b      	mov	r3, r1
 80038f0:	813b      	strh	r3, [r7, #8]
 80038f2:	4613      	mov	r3, r2
 80038f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003904:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	2200      	movs	r2, #0
 800390e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f960 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00d      	beq.n	800393a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800392c:	d103      	bne.n	8003936 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003934:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e05f      	b.n	80039fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800393a:	897b      	ldrh	r3, [r7, #10]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	461a      	mov	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003948:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	6a3a      	ldr	r2, [r7, #32]
 800394e:	492d      	ldr	r1, [pc, #180]	@ (8003a04 <I2C_RequestMemoryWrite+0x128>)
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f9bb 	bl	8003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e04c      	b.n	80039fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003978:	6a39      	ldr	r1, [r7, #32]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 fa46 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00d      	beq.n	80039a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	2b04      	cmp	r3, #4
 800398c:	d107      	bne.n	800399e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800399c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e02b      	b.n	80039fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d105      	bne.n	80039b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039a8:	893b      	ldrh	r3, [r7, #8]
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	611a      	str	r2, [r3, #16]
 80039b2:	e021      	b.n	80039f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039b4:	893b      	ldrh	r3, [r7, #8]
 80039b6:	0a1b      	lsrs	r3, r3, #8
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c4:	6a39      	ldr	r1, [r7, #32]
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 fa20 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d107      	bne.n	80039ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e005      	b.n	80039fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039ee:	893b      	ldrh	r3, [r7, #8]
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	00010002 	.word	0x00010002

08003a08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	4608      	mov	r0, r1
 8003a12:	4611      	mov	r1, r2
 8003a14:	461a      	mov	r2, r3
 8003a16:	4603      	mov	r3, r0
 8003a18:	817b      	strh	r3, [r7, #10]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	813b      	strh	r3, [r7, #8]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a30:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f8c2 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00d      	beq.n	8003a76 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a68:	d103      	bne.n	8003a72 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e0aa      	b.n	8003bcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a76:	897b      	ldrh	r3, [r7, #10]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	6a3a      	ldr	r2, [r7, #32]
 8003a8a:	4952      	ldr	r1, [pc, #328]	@ (8003bd4 <I2C_RequestMemoryRead+0x1cc>)
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f91d 	bl	8003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e097      	b.n	8003bcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab4:	6a39      	ldr	r1, [r7, #32]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f9a8 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00d      	beq.n	8003ade <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d107      	bne.n	8003ada <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ad8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e076      	b.n	8003bcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d105      	bne.n	8003af0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ae4:	893b      	ldrh	r3, [r7, #8]
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	611a      	str	r2, [r3, #16]
 8003aee:	e021      	b.n	8003b34 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003af0:	893b      	ldrh	r3, [r7, #8]
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b00:	6a39      	ldr	r1, [r7, #32]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f982 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d107      	bne.n	8003b26 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e050      	b.n	8003bcc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b2a:	893b      	ldrh	r3, [r7, #8]
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b36:	6a39      	ldr	r1, [r7, #32]
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f967 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00d      	beq.n	8003b60 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d107      	bne.n	8003b5c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e035      	b.n	8003bcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b6e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f82b 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00d      	beq.n	8003ba4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b96:	d103      	bne.n	8003ba0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e013      	b.n	8003bcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ba4:	897b      	ldrh	r3, [r7, #10]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb6:	6a3a      	ldr	r2, [r7, #32]
 8003bb8:	4906      	ldr	r1, [pc, #24]	@ (8003bd4 <I2C_RequestMemoryRead+0x1cc>)
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f886 	bl	8003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	00010002 	.word	0x00010002

08003bd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003be8:	e048      	b.n	8003c7c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf0:	d044      	beq.n	8003c7c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf2:	f7fe fdbd 	bl	8002770 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d302      	bcc.n	8003c08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d139      	bne.n	8003c7c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	0c1b      	lsrs	r3, r3, #16
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d10d      	bne.n	8003c2e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	43da      	mvns	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	e00c      	b.n	8003c48 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	43da      	mvns	r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	bf0c      	ite	eq
 8003c40:	2301      	moveq	r3, #1
 8003c42:	2300      	movne	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	461a      	mov	r2, r3
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d116      	bne.n	8003c7c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c68:	f043 0220 	orr.w	r2, r3, #32
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e023      	b.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	0c1b      	lsrs	r3, r3, #16
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d10d      	bne.n	8003ca2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	43da      	mvns	r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	4013      	ands	r3, r2
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	e00c      	b.n	8003cbc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	43da      	mvns	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	4013      	ands	r3, r2
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2301      	moveq	r3, #1
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d093      	beq.n	8003bea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cda:	e071      	b.n	8003dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cea:	d123      	bne.n	8003d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cfa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d20:	f043 0204 	orr.w	r2, r3, #4
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e067      	b.n	8003e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3a:	d041      	beq.n	8003dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3c:	f7fe fd18 	bl	8002770 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d302      	bcc.n	8003d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d136      	bne.n	8003dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	0c1b      	lsrs	r3, r3, #16
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d10c      	bne.n	8003d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	43da      	mvns	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4013      	ands	r3, r2
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	bf14      	ite	ne
 8003d6e:	2301      	movne	r3, #1
 8003d70:	2300      	moveq	r3, #0
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	e00b      	b.n	8003d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	43da      	mvns	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	4013      	ands	r3, r2
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	bf14      	ite	ne
 8003d88:	2301      	movne	r3, #1
 8003d8a:	2300      	moveq	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d016      	beq.n	8003dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dac:	f043 0220 	orr.w	r2, r3, #32
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e021      	b.n	8003e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	0c1b      	lsrs	r3, r3, #16
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d10c      	bne.n	8003de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	43da      	mvns	r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bf14      	ite	ne
 8003ddc:	2301      	movne	r3, #1
 8003dde:	2300      	moveq	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	e00b      	b.n	8003dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	43da      	mvns	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4013      	ands	r3, r2
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	bf14      	ite	ne
 8003df6:	2301      	movne	r3, #1
 8003df8:	2300      	moveq	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f47f af6d 	bne.w	8003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e18:	e034      	b.n	8003e84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f8e3 	bl	8003fe6 <I2C_IsAcknowledgeFailed>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e034      	b.n	8003e94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d028      	beq.n	8003e84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e32:	f7fe fc9d 	bl	8002770 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d302      	bcc.n	8003e48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d11d      	bne.n	8003e84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e52:	2b80      	cmp	r3, #128	@ 0x80
 8003e54:	d016      	beq.n	8003e84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e007      	b.n	8003e94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e8e:	2b80      	cmp	r3, #128	@ 0x80
 8003e90:	d1c3      	bne.n	8003e1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ea8:	e034      	b.n	8003f14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f89b 	bl	8003fe6 <I2C_IsAcknowledgeFailed>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e034      	b.n	8003f24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec0:	d028      	beq.n	8003f14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec2:	f7fe fc55 	bl	8002770 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d302      	bcc.n	8003ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d11d      	bne.n	8003f14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d016      	beq.n	8003f14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	f043 0220 	orr.w	r2, r3, #32
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e007      	b.n	8003f24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d1c3      	bne.n	8003eaa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f38:	e049      	b.n	8003fce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d119      	bne.n	8003f7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0210 	mvn.w	r2, #16
 8003f50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e030      	b.n	8003fde <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7c:	f7fe fbf8 	bl	8002770 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d302      	bcc.n	8003f92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d11d      	bne.n	8003fce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f9c:	2b40      	cmp	r3, #64	@ 0x40
 8003f9e:	d016      	beq.n	8003fce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	f043 0220 	orr.w	r2, r3, #32
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e007      	b.n	8003fde <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd8:	2b40      	cmp	r3, #64	@ 0x40
 8003fda:	d1ae      	bne.n	8003f3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ffc:	d11b      	bne.n	8004036 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004006:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	f043 0204 	orr.w	r2, r3, #4
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b20      	cmp	r3, #32
 8004058:	d129      	bne.n	80040ae <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2224      	movs	r2, #36	@ 0x24
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0201 	bic.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0210 	bic.w	r2, r2, #16
 8004080:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0201 	orr.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e000      	b.n	80040b0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80040ae:	2302      	movs	r3, #2
  }
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	d12a      	bne.n	800412c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2224      	movs	r2, #36	@ 0x24
 80040da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0201 	bic.w	r2, r2, #1
 80040ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80040f6:	89fb      	ldrh	r3, [r7, #14]
 80040f8:	f023 030f 	bic.w	r3, r3, #15
 80040fc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	b29a      	uxth	r2, r3
 8004102:	89fb      	ldrh	r3, [r7, #14]
 8004104:	4313      	orrs	r3, r2
 8004106:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	89fa      	ldrh	r2, [r7, #14]
 800410e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0201 	orr.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	e000      	b.n	800412e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800412c:	2302      	movs	r3, #2
  }
}
 800412e:	4618      	mov	r0, r3
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e0bf      	b.n	80042ce <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fd fd12 	bl	8001b8c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800417e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6999      	ldr	r1, [r3, #24]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004194:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6899      	ldr	r1, [r3, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4b4a      	ldr	r3, [pc, #296]	@ (80042d8 <HAL_LTDC_Init+0x19c>)
 80041b0:	400b      	ands	r3, r1
 80041b2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	041b      	lsls	r3, r3, #16
 80041ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6899      	ldr	r1, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68d9      	ldr	r1, [r3, #12]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	4b3e      	ldr	r3, [pc, #248]	@ (80042d8 <HAL_LTDC_Init+0x19c>)
 80041de:	400b      	ands	r3, r1
 80041e0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	041b      	lsls	r3, r3, #16
 80041e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68d9      	ldr	r1, [r3, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a1a      	ldr	r2, [r3, #32]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6919      	ldr	r1, [r3, #16]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	4b33      	ldr	r3, [pc, #204]	@ (80042d8 <HAL_LTDC_Init+0x19c>)
 800420c:	400b      	ands	r3, r1
 800420e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004214:	041b      	lsls	r3, r3, #16
 8004216:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6919      	ldr	r1, [r3, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6959      	ldr	r1, [r3, #20]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4b27      	ldr	r3, [pc, #156]	@ (80042d8 <HAL_LTDC_Init+0x19c>)
 800423a:	400b      	ands	r3, r1
 800423c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004242:	041b      	lsls	r3, r3, #16
 8004244:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6959      	ldr	r1, [r3, #20]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800426c:	041b      	lsls	r3, r3, #16
 800426e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800427e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0206 	orr.w	r2, r2, #6
 80042aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699a      	ldr	r2, [r3, #24]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	f000f800 	.word	0xf000f800

080042dc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80042dc:	b5b0      	push	{r4, r5, r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_LTDC_ConfigLayer+0x1a>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e02c      	b.n	8004350 <HAL_LTDC_ConfigLayer+0x74>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2202      	movs	r2, #2
 8004302:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2134      	movs	r1, #52	@ 0x34
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	4413      	add	r3, r2
 8004312:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	4614      	mov	r4, r2
 800431a:	461d      	mov	r5, r3
 800431c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800431e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004328:	682b      	ldr	r3, [r5, #0]
 800432a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f811 	bl	8004358 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2201      	movs	r2, #1
 800433c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bdb0      	pop	{r4, r5, r7, pc}

08004358 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004358:	b480      	push	{r7}
 800435a:	b089      	sub	sp, #36	@ 0x24
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	0c1b      	lsrs	r3, r3, #16
 8004370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004374:	4413      	add	r3, r2
 8004376:	041b      	lsls	r3, r3, #16
 8004378:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	01db      	lsls	r3, r3, #7
 8004384:	4413      	add	r3, r2
 8004386:	3384      	adds	r3, #132	@ 0x84
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	4611      	mov	r1, r2
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	01d2      	lsls	r2, r2, #7
 8004394:	440a      	add	r2, r1
 8004396:	3284      	adds	r2, #132	@ 0x84
 8004398:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800439c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	0c1b      	lsrs	r3, r3, #16
 80043aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80043ae:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80043b0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4619      	mov	r1, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	01db      	lsls	r3, r3, #7
 80043bc:	440b      	add	r3, r1
 80043be:	3384      	adds	r3, #132	@ 0x84
 80043c0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80043c6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043d6:	4413      	add	r3, r2
 80043d8:	041b      	lsls	r3, r3, #16
 80043da:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	01db      	lsls	r3, r3, #7
 80043e6:	4413      	add	r3, r2
 80043e8:	3384      	adds	r3, #132	@ 0x84
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	4611      	mov	r1, r2
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	01d2      	lsls	r2, r2, #7
 80043f6:	440a      	add	r2, r1
 80043f8:	3284      	adds	r2, #132	@ 0x84
 80043fa:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80043fe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800440e:	4413      	add	r3, r2
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4619      	mov	r1, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	01db      	lsls	r3, r3, #7
 800441c:	440b      	add	r3, r1
 800441e:	3384      	adds	r3, #132	@ 0x84
 8004420:	4619      	mov	r1, r3
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	4313      	orrs	r3, r2
 8004426:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	461a      	mov	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	01db      	lsls	r3, r3, #7
 8004432:	4413      	add	r3, r2
 8004434:	3384      	adds	r3, #132	@ 0x84
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	6812      	ldr	r2, [r2, #0]
 800443c:	4611      	mov	r1, r2
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	01d2      	lsls	r2, r2, #7
 8004442:	440a      	add	r2, r1
 8004444:	3284      	adds	r2, #132	@ 0x84
 8004446:	f023 0307 	bic.w	r3, r3, #7
 800444a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	461a      	mov	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	01db      	lsls	r3, r3, #7
 8004456:	4413      	add	r3, r2
 8004458:	3384      	adds	r3, #132	@ 0x84
 800445a:	461a      	mov	r2, r3
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004468:	021b      	lsls	r3, r3, #8
 800446a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004472:	041b      	lsls	r3, r3, #16
 8004474:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	061b      	lsls	r3, r3, #24
 800447c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	01db      	lsls	r3, r3, #7
 8004488:	4413      	add	r3, r2
 800448a:	3384      	adds	r3, #132	@ 0x84
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	01db      	lsls	r3, r3, #7
 8004498:	4413      	add	r3, r2
 800449a:	3384      	adds	r3, #132	@ 0x84
 800449c:	461a      	mov	r2, r3
 800449e:	2300      	movs	r3, #0
 80044a0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80044a8:	461a      	mov	r2, r3
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	431a      	orrs	r2, r3
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	431a      	orrs	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4619      	mov	r1, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	01db      	lsls	r3, r3, #7
 80044bc:	440b      	add	r3, r1
 80044be:	3384      	adds	r3, #132	@ 0x84
 80044c0:	4619      	mov	r1, r3
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	01db      	lsls	r3, r3, #7
 80044d2:	4413      	add	r3, r2
 80044d4:	3384      	adds	r3, #132	@ 0x84
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	4611      	mov	r1, r2
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	01d2      	lsls	r2, r2, #7
 80044e2:	440a      	add	r2, r1
 80044e4:	3284      	adds	r2, #132	@ 0x84
 80044e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80044ea:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	01db      	lsls	r3, r3, #7
 80044f6:	4413      	add	r3, r2
 80044f8:	3384      	adds	r3, #132	@ 0x84
 80044fa:	461a      	mov	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	461a      	mov	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	01db      	lsls	r3, r3, #7
 800450c:	4413      	add	r3, r2
 800450e:	3384      	adds	r3, #132	@ 0x84
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	6812      	ldr	r2, [r2, #0]
 8004516:	4611      	mov	r1, r2
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	01d2      	lsls	r2, r2, #7
 800451c:	440a      	add	r2, r1
 800451e:	3284      	adds	r2, #132	@ 0x84
 8004520:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004524:	f023 0307 	bic.w	r3, r3, #7
 8004528:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	69da      	ldr	r2, [r3, #28]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	68f9      	ldr	r1, [r7, #12]
 8004534:	6809      	ldr	r1, [r1, #0]
 8004536:	4608      	mov	r0, r1
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	01c9      	lsls	r1, r1, #7
 800453c:	4401      	add	r1, r0
 800453e:	3184      	adds	r1, #132	@ 0x84
 8004540:	4313      	orrs	r3, r2
 8004542:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	461a      	mov	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	01db      	lsls	r3, r3, #7
 800454e:	4413      	add	r3, r2
 8004550:	3384      	adds	r3, #132	@ 0x84
 8004552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	01db      	lsls	r3, r3, #7
 800455e:	4413      	add	r3, r2
 8004560:	3384      	adds	r3, #132	@ 0x84
 8004562:	461a      	mov	r2, r3
 8004564:	2300      	movs	r3, #0
 8004566:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	461a      	mov	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	01db      	lsls	r3, r3, #7
 8004572:	4413      	add	r3, r2
 8004574:	3384      	adds	r3, #132	@ 0x84
 8004576:	461a      	mov	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d102      	bne.n	800458c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004586:	2304      	movs	r3, #4
 8004588:	61fb      	str	r3, [r7, #28]
 800458a:	e01b      	b.n	80045c4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d102      	bne.n	800459a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004594:	2303      	movs	r3, #3
 8004596:	61fb      	str	r3, [r7, #28]
 8004598:	e014      	b.n	80045c4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d00b      	beq.n	80045ba <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d007      	beq.n	80045ba <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d003      	beq.n	80045ba <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80045b6:	2b07      	cmp	r3, #7
 80045b8:	d102      	bne.n	80045c0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80045ba:	2302      	movs	r3, #2
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	e001      	b.n	80045c4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80045c0:	2301      	movs	r3, #1
 80045c2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	01db      	lsls	r3, r3, #7
 80045ce:	4413      	add	r3, r2
 80045d0:	3384      	adds	r3, #132	@ 0x84
 80045d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	6812      	ldr	r2, [r2, #0]
 80045d8:	4611      	mov	r1, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	01d2      	lsls	r2, r2, #7
 80045de:	440a      	add	r2, r1
 80045e0:	3284      	adds	r2, #132	@ 0x84
 80045e2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80045e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ec:	69fa      	ldr	r2, [r7, #28]
 80045ee:	fb02 f303 	mul.w	r3, r2, r3
 80045f2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	6859      	ldr	r1, [r3, #4]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	1acb      	subs	r3, r1, r3
 80045fe:	69f9      	ldr	r1, [r7, #28]
 8004600:	fb01 f303 	mul.w	r3, r1, r3
 8004604:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004606:	68f9      	ldr	r1, [r7, #12]
 8004608:	6809      	ldr	r1, [r1, #0]
 800460a:	4608      	mov	r0, r1
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	01c9      	lsls	r1, r1, #7
 8004610:	4401      	add	r1, r0
 8004612:	3184      	adds	r1, #132	@ 0x84
 8004614:	4313      	orrs	r3, r2
 8004616:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	461a      	mov	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	01db      	lsls	r3, r3, #7
 8004622:	4413      	add	r3, r2
 8004624:	3384      	adds	r3, #132	@ 0x84
 8004626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	4611      	mov	r1, r2
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	01d2      	lsls	r2, r2, #7
 8004632:	440a      	add	r2, r1
 8004634:	3284      	adds	r2, #132	@ 0x84
 8004636:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800463a:	f023 0307 	bic.w	r3, r3, #7
 800463e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	01db      	lsls	r3, r3, #7
 800464a:	4413      	add	r3, r2
 800464c:	3384      	adds	r3, #132	@ 0x84
 800464e:	461a      	mov	r2, r3
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004654:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	461a      	mov	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	01db      	lsls	r3, r3, #7
 8004660:	4413      	add	r3, r2
 8004662:	3384      	adds	r3, #132	@ 0x84
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	6812      	ldr	r2, [r2, #0]
 800466a:	4611      	mov	r1, r2
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	01d2      	lsls	r2, r2, #7
 8004670:	440a      	add	r2, r1
 8004672:	3284      	adds	r2, #132	@ 0x84
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	6013      	str	r3, [r2, #0]
}
 800467a:	bf00      	nop
 800467c:	3724      	adds	r7, #36	@ 0x24
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
	...

08004688 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e267      	b.n	8004b6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d075      	beq.n	8004792 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046a6:	4b88      	ldr	r3, [pc, #544]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 030c 	and.w	r3, r3, #12
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d00c      	beq.n	80046cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046b2:	4b85      	ldr	r3, [pc, #532]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d112      	bne.n	80046e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046be:	4b82      	ldr	r3, [pc, #520]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046ca:	d10b      	bne.n	80046e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046cc:	4b7e      	ldr	r3, [pc, #504]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d05b      	beq.n	8004790 <HAL_RCC_OscConfig+0x108>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d157      	bne.n	8004790 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e242      	b.n	8004b6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ec:	d106      	bne.n	80046fc <HAL_RCC_OscConfig+0x74>
 80046ee:	4b76      	ldr	r3, [pc, #472]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a75      	ldr	r2, [pc, #468]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 80046f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	e01d      	b.n	8004738 <HAL_RCC_OscConfig+0xb0>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004704:	d10c      	bne.n	8004720 <HAL_RCC_OscConfig+0x98>
 8004706:	4b70      	ldr	r3, [pc, #448]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a6f      	ldr	r2, [pc, #444]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 800470c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	4b6d      	ldr	r3, [pc, #436]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a6c      	ldr	r2, [pc, #432]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 8004718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	e00b      	b.n	8004738 <HAL_RCC_OscConfig+0xb0>
 8004720:	4b69      	ldr	r3, [pc, #420]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a68      	ldr	r2, [pc, #416]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 8004726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	4b66      	ldr	r3, [pc, #408]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a65      	ldr	r2, [pc, #404]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 8004732:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d013      	beq.n	8004768 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004740:	f7fe f816 	bl	8002770 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004748:	f7fe f812 	bl	8002770 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b64      	cmp	r3, #100	@ 0x64
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e207      	b.n	8004b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475a:	4b5b      	ldr	r3, [pc, #364]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0f0      	beq.n	8004748 <HAL_RCC_OscConfig+0xc0>
 8004766:	e014      	b.n	8004792 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004768:	f7fe f802 	bl	8002770 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004770:	f7fd fffe 	bl	8002770 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b64      	cmp	r3, #100	@ 0x64
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e1f3      	b.n	8004b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004782:	4b51      	ldr	r3, [pc, #324]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0xe8>
 800478e:	e000      	b.n	8004792 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d063      	beq.n	8004866 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800479e:	4b4a      	ldr	r3, [pc, #296]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 030c 	and.w	r3, r3, #12
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00b      	beq.n	80047c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047aa:	4b47      	ldr	r3, [pc, #284]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d11c      	bne.n	80047f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047b6:	4b44      	ldr	r3, [pc, #272]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d116      	bne.n	80047f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047c2:	4b41      	ldr	r3, [pc, #260]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d005      	beq.n	80047da <HAL_RCC_OscConfig+0x152>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d001      	beq.n	80047da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e1c7      	b.n	8004b6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047da:	4b3b      	ldr	r3, [pc, #236]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	4937      	ldr	r1, [pc, #220]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ee:	e03a      	b.n	8004866 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d020      	beq.n	800483a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047f8:	4b34      	ldr	r3, [pc, #208]	@ (80048cc <HAL_RCC_OscConfig+0x244>)
 80047fa:	2201      	movs	r2, #1
 80047fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fe:	f7fd ffb7 	bl	8002770 <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004806:	f7fd ffb3 	bl	8002770 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e1a8      	b.n	8004b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004818:	4b2b      	ldr	r3, [pc, #172]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0f0      	beq.n	8004806 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004824:	4b28      	ldr	r3, [pc, #160]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	4925      	ldr	r1, [pc, #148]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 8004834:	4313      	orrs	r3, r2
 8004836:	600b      	str	r3, [r1, #0]
 8004838:	e015      	b.n	8004866 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800483a:	4b24      	ldr	r3, [pc, #144]	@ (80048cc <HAL_RCC_OscConfig+0x244>)
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004840:	f7fd ff96 	bl	8002770 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004848:	f7fd ff92 	bl	8002770 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e187      	b.n	8004b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800485a:	4b1b      	ldr	r3, [pc, #108]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1f0      	bne.n	8004848 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d036      	beq.n	80048e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d016      	beq.n	80048a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800487a:	4b15      	ldr	r3, [pc, #84]	@ (80048d0 <HAL_RCC_OscConfig+0x248>)
 800487c:	2201      	movs	r2, #1
 800487e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004880:	f7fd ff76 	bl	8002770 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004888:	f7fd ff72 	bl	8002770 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e167      	b.n	8004b6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800489a:	4b0b      	ldr	r3, [pc, #44]	@ (80048c8 <HAL_RCC_OscConfig+0x240>)
 800489c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f0      	beq.n	8004888 <HAL_RCC_OscConfig+0x200>
 80048a6:	e01b      	b.n	80048e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048a8:	4b09      	ldr	r3, [pc, #36]	@ (80048d0 <HAL_RCC_OscConfig+0x248>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ae:	f7fd ff5f 	bl	8002770 <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048b4:	e00e      	b.n	80048d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048b6:	f7fd ff5b 	bl	8002770 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d907      	bls.n	80048d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e150      	b.n	8004b6a <HAL_RCC_OscConfig+0x4e2>
 80048c8:	40023800 	.word	0x40023800
 80048cc:	42470000 	.word	0x42470000
 80048d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d4:	4b88      	ldr	r3, [pc, #544]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 80048d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1ea      	bne.n	80048b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8097 	beq.w	8004a1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ee:	2300      	movs	r3, #0
 80048f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048f2:	4b81      	ldr	r3, [pc, #516]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10f      	bne.n	800491e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048fe:	2300      	movs	r3, #0
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	4b7d      	ldr	r3, [pc, #500]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 8004904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004906:	4a7c      	ldr	r2, [pc, #496]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 8004908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800490c:	6413      	str	r3, [r2, #64]	@ 0x40
 800490e:	4b7a      	ldr	r3, [pc, #488]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004916:	60bb      	str	r3, [r7, #8]
 8004918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800491a:	2301      	movs	r3, #1
 800491c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491e:	4b77      	ldr	r3, [pc, #476]	@ (8004afc <HAL_RCC_OscConfig+0x474>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004926:	2b00      	cmp	r3, #0
 8004928:	d118      	bne.n	800495c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800492a:	4b74      	ldr	r3, [pc, #464]	@ (8004afc <HAL_RCC_OscConfig+0x474>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a73      	ldr	r2, [pc, #460]	@ (8004afc <HAL_RCC_OscConfig+0x474>)
 8004930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004936:	f7fd ff1b 	bl	8002770 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800493e:	f7fd ff17 	bl	8002770 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e10c      	b.n	8004b6a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004950:	4b6a      	ldr	r3, [pc, #424]	@ (8004afc <HAL_RCC_OscConfig+0x474>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0f0      	beq.n	800493e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d106      	bne.n	8004972 <HAL_RCC_OscConfig+0x2ea>
 8004964:	4b64      	ldr	r3, [pc, #400]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 8004966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004968:	4a63      	ldr	r2, [pc, #396]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 800496a:	f043 0301 	orr.w	r3, r3, #1
 800496e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004970:	e01c      	b.n	80049ac <HAL_RCC_OscConfig+0x324>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	2b05      	cmp	r3, #5
 8004978:	d10c      	bne.n	8004994 <HAL_RCC_OscConfig+0x30c>
 800497a:	4b5f      	ldr	r3, [pc, #380]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 800497c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800497e:	4a5e      	ldr	r2, [pc, #376]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 8004980:	f043 0304 	orr.w	r3, r3, #4
 8004984:	6713      	str	r3, [r2, #112]	@ 0x70
 8004986:	4b5c      	ldr	r3, [pc, #368]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 8004988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498a:	4a5b      	ldr	r2, [pc, #364]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 800498c:	f043 0301 	orr.w	r3, r3, #1
 8004990:	6713      	str	r3, [r2, #112]	@ 0x70
 8004992:	e00b      	b.n	80049ac <HAL_RCC_OscConfig+0x324>
 8004994:	4b58      	ldr	r3, [pc, #352]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 8004996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004998:	4a57      	ldr	r2, [pc, #348]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 800499a:	f023 0301 	bic.w	r3, r3, #1
 800499e:	6713      	str	r3, [r2, #112]	@ 0x70
 80049a0:	4b55      	ldr	r3, [pc, #340]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 80049a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a4:	4a54      	ldr	r2, [pc, #336]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 80049a6:	f023 0304 	bic.w	r3, r3, #4
 80049aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d015      	beq.n	80049e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b4:	f7fd fedc 	bl	8002770 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ba:	e00a      	b.n	80049d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049bc:	f7fd fed8 	bl	8002770 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e0cb      	b.n	8004b6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d2:	4b49      	ldr	r3, [pc, #292]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 80049d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0ee      	beq.n	80049bc <HAL_RCC_OscConfig+0x334>
 80049de:	e014      	b.n	8004a0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049e0:	f7fd fec6 	bl	8002770 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e6:	e00a      	b.n	80049fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e8:	f7fd fec2 	bl	8002770 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e0b5      	b.n	8004b6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fe:	4b3e      	ldr	r3, [pc, #248]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 8004a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1ee      	bne.n	80049e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a0a:	7dfb      	ldrb	r3, [r7, #23]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d105      	bne.n	8004a1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a10:	4b39      	ldr	r3, [pc, #228]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 8004a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a14:	4a38      	ldr	r2, [pc, #224]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 8004a16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 80a1 	beq.w	8004b68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a26:	4b34      	ldr	r3, [pc, #208]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
 8004a2e:	2b08      	cmp	r3, #8
 8004a30:	d05c      	beq.n	8004aec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d141      	bne.n	8004abe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a3a:	4b31      	ldr	r3, [pc, #196]	@ (8004b00 <HAL_RCC_OscConfig+0x478>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a40:	f7fd fe96 	bl	8002770 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a48:	f7fd fe92 	bl	8002770 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e087      	b.n	8004b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5a:	4b27      	ldr	r3, [pc, #156]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1f0      	bne.n	8004a48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69da      	ldr	r2, [r3, #28]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a74:	019b      	lsls	r3, r3, #6
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7c:	085b      	lsrs	r3, r3, #1
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	041b      	lsls	r3, r3, #16
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a88:	061b      	lsls	r3, r3, #24
 8004a8a:	491b      	ldr	r1, [pc, #108]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a90:	4b1b      	ldr	r3, [pc, #108]	@ (8004b00 <HAL_RCC_OscConfig+0x478>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a96:	f7fd fe6b 	bl	8002770 <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a9e:	f7fd fe67 	bl	8002770 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e05c      	b.n	8004b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab0:	4b11      	ldr	r3, [pc, #68]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCC_OscConfig+0x416>
 8004abc:	e054      	b.n	8004b68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004abe:	4b10      	ldr	r3, [pc, #64]	@ (8004b00 <HAL_RCC_OscConfig+0x478>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac4:	f7fd fe54 	bl	8002770 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004acc:	f7fd fe50 	bl	8002770 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e045      	b.n	8004b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ade:	4b06      	ldr	r3, [pc, #24]	@ (8004af8 <HAL_RCC_OscConfig+0x470>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0x444>
 8004aea:	e03d      	b.n	8004b68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d107      	bne.n	8004b04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e038      	b.n	8004b6a <HAL_RCC_OscConfig+0x4e2>
 8004af8:	40023800 	.word	0x40023800
 8004afc:	40007000 	.word	0x40007000
 8004b00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b04:	4b1b      	ldr	r3, [pc, #108]	@ (8004b74 <HAL_RCC_OscConfig+0x4ec>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d028      	beq.n	8004b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d121      	bne.n	8004b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d11a      	bne.n	8004b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b34:	4013      	ands	r3, r2
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d111      	bne.n	8004b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4a:	085b      	lsrs	r3, r3, #1
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d107      	bne.n	8004b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d001      	beq.n	8004b68 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e000      	b.n	8004b6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40023800 	.word	0x40023800

08004b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e0cc      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b8c:	4b68      	ldr	r3, [pc, #416]	@ (8004d30 <HAL_RCC_ClockConfig+0x1b8>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 030f 	and.w	r3, r3, #15
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d90c      	bls.n	8004bb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9a:	4b65      	ldr	r3, [pc, #404]	@ (8004d30 <HAL_RCC_ClockConfig+0x1b8>)
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba2:	4b63      	ldr	r3, [pc, #396]	@ (8004d30 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d001      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0b8      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d020      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bcc:	4b59      	ldr	r3, [pc, #356]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	4a58      	ldr	r2, [pc, #352]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004bd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0308 	and.w	r3, r3, #8
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004be4:	4b53      	ldr	r3, [pc, #332]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	4a52      	ldr	r2, [pc, #328]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004bee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf0:	4b50      	ldr	r3, [pc, #320]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	494d      	ldr	r1, [pc, #308]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d044      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d107      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c16:	4b47      	ldr	r3, [pc, #284]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d119      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e07f      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d003      	beq.n	8004c36 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d107      	bne.n	8004c46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c36:	4b3f      	ldr	r3, [pc, #252]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d109      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e06f      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c46:	4b3b      	ldr	r3, [pc, #236]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e067      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c56:	4b37      	ldr	r3, [pc, #220]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f023 0203 	bic.w	r2, r3, #3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	4934      	ldr	r1, [pc, #208]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c68:	f7fd fd82 	bl	8002770 <HAL_GetTick>
 8004c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6e:	e00a      	b.n	8004c86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c70:	f7fd fd7e 	bl	8002770 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e04f      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c86:	4b2b      	ldr	r3, [pc, #172]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 020c 	and.w	r2, r3, #12
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d1eb      	bne.n	8004c70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c98:	4b25      	ldr	r3, [pc, #148]	@ (8004d30 <HAL_RCC_ClockConfig+0x1b8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 030f 	and.w	r3, r3, #15
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d20c      	bcs.n	8004cc0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca6:	4b22      	ldr	r3, [pc, #136]	@ (8004d30 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cae:	4b20      	ldr	r3, [pc, #128]	@ (8004d30 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d001      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e032      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d008      	beq.n	8004cde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ccc:	4b19      	ldr	r3, [pc, #100]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	4916      	ldr	r1, [pc, #88]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cea:	4b12      	ldr	r3, [pc, #72]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	490e      	ldr	r1, [pc, #56]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cfe:	f000 f821 	bl	8004d44 <HAL_RCC_GetSysClockFreq>
 8004d02:	4602      	mov	r2, r0
 8004d04:	4b0b      	ldr	r3, [pc, #44]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	091b      	lsrs	r3, r3, #4
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	490a      	ldr	r1, [pc, #40]	@ (8004d38 <HAL_RCC_ClockConfig+0x1c0>)
 8004d10:	5ccb      	ldrb	r3, [r1, r3]
 8004d12:	fa22 f303 	lsr.w	r3, r2, r3
 8004d16:	4a09      	ldr	r2, [pc, #36]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d1a:	4b09      	ldr	r3, [pc, #36]	@ (8004d40 <HAL_RCC_ClockConfig+0x1c8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fd fce2 	bl	80026e8 <HAL_InitTick>

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	40023c00 	.word	0x40023c00
 8004d34:	40023800 	.word	0x40023800
 8004d38:	08005f44 	.word	0x08005f44
 8004d3c:	20000008 	.word	0x20000008
 8004d40:	2000000c 	.word	0x2000000c

08004d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d48:	b094      	sub	sp, #80	@ 0x50
 8004d4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d5c:	4b79      	ldr	r3, [pc, #484]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f003 030c 	and.w	r3, r3, #12
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d00d      	beq.n	8004d84 <HAL_RCC_GetSysClockFreq+0x40>
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	f200 80e1 	bhi.w	8004f30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <HAL_RCC_GetSysClockFreq+0x34>
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d003      	beq.n	8004d7e <HAL_RCC_GetSysClockFreq+0x3a>
 8004d76:	e0db      	b.n	8004f30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d78:	4b73      	ldr	r3, [pc, #460]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d7c:	e0db      	b.n	8004f36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d7e:	4b73      	ldr	r3, [pc, #460]	@ (8004f4c <HAL_RCC_GetSysClockFreq+0x208>)
 8004d80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d82:	e0d8      	b.n	8004f36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d84:	4b6f      	ldr	r3, [pc, #444]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d8c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d8e:	4b6d      	ldr	r3, [pc, #436]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d063      	beq.n	8004e62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	099b      	lsrs	r3, r3, #6
 8004da0:	2200      	movs	r2, #0
 8004da2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004da4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dac:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dae:	2300      	movs	r3, #0
 8004db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004db6:	4622      	mov	r2, r4
 8004db8:	462b      	mov	r3, r5
 8004dba:	f04f 0000 	mov.w	r0, #0
 8004dbe:	f04f 0100 	mov.w	r1, #0
 8004dc2:	0159      	lsls	r1, r3, #5
 8004dc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dc8:	0150      	lsls	r0, r2, #5
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4621      	mov	r1, r4
 8004dd0:	1a51      	subs	r1, r2, r1
 8004dd2:	6139      	str	r1, [r7, #16]
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004de8:	4659      	mov	r1, fp
 8004dea:	018b      	lsls	r3, r1, #6
 8004dec:	4651      	mov	r1, sl
 8004dee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004df2:	4651      	mov	r1, sl
 8004df4:	018a      	lsls	r2, r1, #6
 8004df6:	4651      	mov	r1, sl
 8004df8:	ebb2 0801 	subs.w	r8, r2, r1
 8004dfc:	4659      	mov	r1, fp
 8004dfe:	eb63 0901 	sbc.w	r9, r3, r1
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e16:	4690      	mov	r8, r2
 8004e18:	4699      	mov	r9, r3
 8004e1a:	4623      	mov	r3, r4
 8004e1c:	eb18 0303 	adds.w	r3, r8, r3
 8004e20:	60bb      	str	r3, [r7, #8]
 8004e22:	462b      	mov	r3, r5
 8004e24:	eb49 0303 	adc.w	r3, r9, r3
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e36:	4629      	mov	r1, r5
 8004e38:	024b      	lsls	r3, r1, #9
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e40:	4621      	mov	r1, r4
 8004e42:	024a      	lsls	r2, r1, #9
 8004e44:	4610      	mov	r0, r2
 8004e46:	4619      	mov	r1, r3
 8004e48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e54:	f7fb f9ca 	bl	80001ec <__aeabi_uldivmod>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e60:	e058      	b.n	8004f14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e62:	4b38      	ldr	r3, [pc, #224]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	099b      	lsrs	r3, r3, #6
 8004e68:	2200      	movs	r2, #0
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	4611      	mov	r1, r2
 8004e6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e72:	623b      	str	r3, [r7, #32]
 8004e74:	2300      	movs	r3, #0
 8004e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e7c:	4642      	mov	r2, r8
 8004e7e:	464b      	mov	r3, r9
 8004e80:	f04f 0000 	mov.w	r0, #0
 8004e84:	f04f 0100 	mov.w	r1, #0
 8004e88:	0159      	lsls	r1, r3, #5
 8004e8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e8e:	0150      	lsls	r0, r2, #5
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4641      	mov	r1, r8
 8004e96:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004eac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004eb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004eb4:	ebb2 040a 	subs.w	r4, r2, sl
 8004eb8:	eb63 050b 	sbc.w	r5, r3, fp
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	00eb      	lsls	r3, r5, #3
 8004ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eca:	00e2      	lsls	r2, r4, #3
 8004ecc:	4614      	mov	r4, r2
 8004ece:	461d      	mov	r5, r3
 8004ed0:	4643      	mov	r3, r8
 8004ed2:	18e3      	adds	r3, r4, r3
 8004ed4:	603b      	str	r3, [r7, #0]
 8004ed6:	464b      	mov	r3, r9
 8004ed8:	eb45 0303 	adc.w	r3, r5, r3
 8004edc:	607b      	str	r3, [r7, #4]
 8004ede:	f04f 0200 	mov.w	r2, #0
 8004ee2:	f04f 0300 	mov.w	r3, #0
 8004ee6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004eea:	4629      	mov	r1, r5
 8004eec:	028b      	lsls	r3, r1, #10
 8004eee:	4621      	mov	r1, r4
 8004ef0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	028a      	lsls	r2, r1, #10
 8004ef8:	4610      	mov	r0, r2
 8004efa:	4619      	mov	r1, r3
 8004efc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004efe:	2200      	movs	r2, #0
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	61fa      	str	r2, [r7, #28]
 8004f04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f08:	f7fb f970 	bl	80001ec <__aeabi_uldivmod>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4613      	mov	r3, r2
 8004f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f14:	4b0b      	ldr	r3, [pc, #44]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	0c1b      	lsrs	r3, r3, #16
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	3301      	adds	r3, #1
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004f24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f2e:	e002      	b.n	8004f36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f30:	4b05      	ldr	r3, [pc, #20]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3750      	adds	r7, #80	@ 0x50
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f42:	bf00      	nop
 8004f44:	40023800 	.word	0x40023800
 8004f48:	00f42400 	.word	0x00f42400
 8004f4c:	007a1200 	.word	0x007a1200

08004f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f54:	4b03      	ldr	r3, [pc, #12]	@ (8004f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f56:	681b      	ldr	r3, [r3, #0]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20000008 	.word	0x20000008

08004f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f6c:	f7ff fff0 	bl	8004f50 <HAL_RCC_GetHCLKFreq>
 8004f70:	4602      	mov	r2, r0
 8004f72:	4b05      	ldr	r3, [pc, #20]	@ (8004f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	0a9b      	lsrs	r3, r3, #10
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	4903      	ldr	r1, [pc, #12]	@ (8004f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f7e:	5ccb      	ldrb	r3, [r1, r3]
 8004f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	08005f54 	.word	0x08005f54

08004f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10b      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d105      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d075      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fc4:	4b91      	ldr	r3, [pc, #580]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fca:	f7fd fbd1 	bl	8002770 <HAL_GetTick>
 8004fce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fd2:	f7fd fbcd 	bl	8002770 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e189      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fe4:	4b8a      	ldr	r3, [pc, #552]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1f0      	bne.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d009      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	019a      	lsls	r2, r3, #6
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	071b      	lsls	r3, r3, #28
 8005008:	4981      	ldr	r1, [pc, #516]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01f      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800501c:	4b7c      	ldr	r3, [pc, #496]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800501e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005022:	0f1b      	lsrs	r3, r3, #28
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	019a      	lsls	r2, r3, #6
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	061b      	lsls	r3, r3, #24
 8005036:	431a      	orrs	r2, r3
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	071b      	lsls	r3, r3, #28
 800503c:	4974      	ldr	r1, [pc, #464]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005044:	4b72      	ldr	r3, [pc, #456]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005046:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800504a:	f023 021f 	bic.w	r2, r3, #31
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	3b01      	subs	r3, #1
 8005054:	496e      	ldr	r1, [pc, #440]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00d      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	019a      	lsls	r2, r3, #6
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	061b      	lsls	r3, r3, #24
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	071b      	lsls	r3, r3, #28
 800507c:	4964      	ldr	r1, [pc, #400]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005084:	4b61      	ldr	r3, [pc, #388]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005086:	2201      	movs	r2, #1
 8005088:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800508a:	f7fd fb71 	bl	8002770 <HAL_GetTick>
 800508e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005090:	e008      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005092:	f7fd fb6d 	bl	8002770 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e129      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050a4:	4b5a      	ldr	r3, [pc, #360]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f0      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d105      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d079      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80050c8:	4b52      	ldr	r3, [pc, #328]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050ce:	f7fd fb4f 	bl	8002770 <HAL_GetTick>
 80050d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050d4:	e008      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050d6:	f7fd fb4b 	bl	8002770 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e107      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050e8:	4b49      	ldr	r3, [pc, #292]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050f4:	d0ef      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d020      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005102:	4b43      	ldr	r3, [pc, #268]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005108:	0f1b      	lsrs	r3, r3, #28
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	019a      	lsls	r2, r3, #6
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	061b      	lsls	r3, r3, #24
 800511c:	431a      	orrs	r2, r3
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	071b      	lsls	r3, r3, #28
 8005122:	493b      	ldr	r1, [pc, #236]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800512a:	4b39      	ldr	r3, [pc, #228]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800512c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005130:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	3b01      	subs	r3, #1
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	4934      	ldr	r1, [pc, #208]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800513e:	4313      	orrs	r3, r2
 8005140:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01e      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005150:	4b2f      	ldr	r3, [pc, #188]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005156:	0e1b      	lsrs	r3, r3, #24
 8005158:	f003 030f 	and.w	r3, r3, #15
 800515c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	019a      	lsls	r2, r3, #6
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	061b      	lsls	r3, r3, #24
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	071b      	lsls	r3, r3, #28
 8005170:	4927      	ldr	r1, [pc, #156]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005178:	4b25      	ldr	r3, [pc, #148]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800517a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800517e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005186:	4922      	ldr	r1, [pc, #136]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800518e:	4b21      	ldr	r3, [pc, #132]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005190:	2201      	movs	r2, #1
 8005192:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005194:	f7fd faec 	bl	8002770 <HAL_GetTick>
 8005198:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800519a:	e008      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800519c:	f7fd fae8 	bl	8002770 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d901      	bls.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e0a4      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051ae:	4b18      	ldr	r3, [pc, #96]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051ba:	d1ef      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 808b 	beq.w	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	4b10      	ldr	r3, [pc, #64]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d2:	4a0f      	ldr	r2, [pc, #60]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80051da:	4b0d      	ldr	r3, [pc, #52]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80051e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a0b      	ldr	r2, [pc, #44]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80051ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051f2:	f7fd fabd 	bl	8002770 <HAL_GetTick>
 80051f6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80051f8:	e010      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051fa:	f7fd fab9 	bl	8002770 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d909      	bls.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e075      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800520c:	42470068 	.word	0x42470068
 8005210:	40023800 	.word	0x40023800
 8005214:	42470070 	.word	0x42470070
 8005218:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800521c:	4b38      	ldr	r3, [pc, #224]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0e8      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005228:	4b36      	ldr	r3, [pc, #216]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800522a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005230:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d02f      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	429a      	cmp	r2, r3
 8005244:	d028      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005246:	4b2f      	ldr	r3, [pc, #188]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800524a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800524e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005250:	4b2d      	ldr	r3, [pc, #180]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005252:	2201      	movs	r2, #1
 8005254:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005256:	4b2c      	ldr	r3, [pc, #176]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800525c:	4a29      	ldr	r2, [pc, #164]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005262:	4b28      	ldr	r3, [pc, #160]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b01      	cmp	r3, #1
 800526c:	d114      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800526e:	f7fd fa7f 	bl	8002770 <HAL_GetTick>
 8005272:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005274:	e00a      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005276:	f7fd fa7b 	bl	8002770 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005284:	4293      	cmp	r3, r2
 8005286:	d901      	bls.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e035      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800528c:	4b1d      	ldr	r3, [pc, #116]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800528e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0ee      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052a4:	d10d      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80052a6:	4b17      	ldr	r3, [pc, #92]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80052b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ba:	4912      	ldr	r1, [pc, #72]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	608b      	str	r3, [r1, #8]
 80052c0:	e005      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80052c2:	4b10      	ldr	r3, [pc, #64]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	4a0f      	ldr	r2, [pc, #60]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052c8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80052cc:	6093      	str	r3, [r2, #8]
 80052ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052d0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052da:	490a      	ldr	r1, [pc, #40]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d004      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80052f2:	4b06      	ldr	r3, [pc, #24]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80052f4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40007000 	.word	0x40007000
 8005304:	40023800 	.word	0x40023800
 8005308:	42470e40 	.word	0x42470e40
 800530c:	424711e0 	.word	0x424711e0

08005310 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e01c      	b.n	800535c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	795b      	ldrb	r3, [r3, #5]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d105      	bne.n	8005338 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7fc fd52 	bl	8001ddc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f042 0204 	orr.w	r2, r2, #4
 800534c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e07b      	b.n	800546e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537a:	2b00      	cmp	r3, #0
 800537c:	d108      	bne.n	8005390 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005386:	d009      	beq.n	800539c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	61da      	str	r2, [r3, #28]
 800538e:	e005      	b.n	800539c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7fc fd32 	bl	8001e20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	431a      	orrs	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800540c:	431a      	orrs	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005420:	ea42 0103 	orr.w	r1, r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005428:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	0c1b      	lsrs	r3, r3, #16
 800543a:	f003 0104 	and.w	r1, r3, #4
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005442:	f003 0210 	and.w	r2, r3, #16
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800545c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b082      	sub	sp, #8
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e01a      	b.n	80054be <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800549e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7fc fd05 	bl	8001eb0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b088      	sub	sp, #32
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	603b      	str	r3, [r7, #0]
 80054d2:	4613      	mov	r3, r2
 80054d4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054d6:	f7fd f94b 	bl	8002770 <HAL_GetTick>
 80054da:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80054dc:	88fb      	ldrh	r3, [r7, #6]
 80054de:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d001      	beq.n	80054f0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80054ec:	2302      	movs	r3, #2
 80054ee:	e12a      	b.n	8005746 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <HAL_SPI_Transmit+0x36>
 80054f6:	88fb      	ldrh	r3, [r7, #6]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e122      	b.n	8005746 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <HAL_SPI_Transmit+0x48>
 800550a:	2302      	movs	r3, #2
 800550c:	e11b      	b.n	8005746 <HAL_SPI_Transmit+0x280>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2203      	movs	r2, #3
 800551a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	88fa      	ldrh	r2, [r7, #6]
 800552e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	88fa      	ldrh	r2, [r7, #6]
 8005534:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800555c:	d10f      	bne.n	800557e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800556c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800557c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005588:	2b40      	cmp	r3, #64	@ 0x40
 800558a:	d007      	beq.n	800559c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800559a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055a4:	d152      	bne.n	800564c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <HAL_SPI_Transmit+0xee>
 80055ae:	8b7b      	ldrh	r3, [r7, #26]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d145      	bne.n	8005640 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b8:	881a      	ldrh	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c4:	1c9a      	adds	r2, r3, #2
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055d8:	e032      	b.n	8005640 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d112      	bne.n	800560e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ec:	881a      	ldrh	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f8:	1c9a      	adds	r2, r3, #2
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005602:	b29b      	uxth	r3, r3
 8005604:	3b01      	subs	r3, #1
 8005606:	b29a      	uxth	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800560c:	e018      	b.n	8005640 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800560e:	f7fd f8af 	bl	8002770 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d803      	bhi.n	8005626 <HAL_SPI_Transmit+0x160>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005624:	d102      	bne.n	800562c <HAL_SPI_Transmit+0x166>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d109      	bne.n	8005640 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e082      	b.n	8005746 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1c7      	bne.n	80055da <HAL_SPI_Transmit+0x114>
 800564a:	e053      	b.n	80056f4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <HAL_SPI_Transmit+0x194>
 8005654:	8b7b      	ldrh	r3, [r7, #26]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d147      	bne.n	80056ea <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	330c      	adds	r3, #12
 8005664:	7812      	ldrb	r2, [r2, #0]
 8005666:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005676:	b29b      	uxth	r3, r3
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005680:	e033      	b.n	80056ea <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b02      	cmp	r3, #2
 800568e:	d113      	bne.n	80056b8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	330c      	adds	r3, #12
 800569a:	7812      	ldrb	r2, [r2, #0]
 800569c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80056b6:	e018      	b.n	80056ea <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056b8:	f7fd f85a 	bl	8002770 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d803      	bhi.n	80056d0 <HAL_SPI_Transmit+0x20a>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ce:	d102      	bne.n	80056d6 <HAL_SPI_Transmit+0x210>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d109      	bne.n	80056ea <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e02d      	b.n	8005746 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1c6      	bne.n	8005682 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056f4:	69fa      	ldr	r2, [r7, #28]
 80056f6:	6839      	ldr	r1, [r7, #0]
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f8bf 	bl	800587c <SPI_EndRxTxTransaction>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10a      	bne.n	8005728 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	617b      	str	r3, [r7, #20]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	617b      	str	r3, [r7, #20]
 8005726:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e000      	b.n	8005746 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005744:	2300      	movs	r3, #0
  }
}
 8005746:	4618      	mov	r0, r3
 8005748:	3720      	adds	r7, #32
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800574e:	b480      	push	{r7}
 8005750:	b083      	sub	sp, #12
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800575c:	b2db      	uxtb	r3, r3
}
 800575e:	4618      	mov	r0, r3
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
	...

0800576c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	4613      	mov	r3, r2
 800577a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800577c:	f7fc fff8 	bl	8002770 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005784:	1a9b      	subs	r3, r3, r2
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	4413      	add	r3, r2
 800578a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800578c:	f7fc fff0 	bl	8002770 <HAL_GetTick>
 8005790:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005792:	4b39      	ldr	r3, [pc, #228]	@ (8005878 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	015b      	lsls	r3, r3, #5
 8005798:	0d1b      	lsrs	r3, r3, #20
 800579a:	69fa      	ldr	r2, [r7, #28]
 800579c:	fb02 f303 	mul.w	r3, r2, r3
 80057a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057a2:	e054      	b.n	800584e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057aa:	d050      	beq.n	800584e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057ac:	f7fc ffe0 	bl	8002770 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d902      	bls.n	80057c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d13d      	bne.n	800583e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80057d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057da:	d111      	bne.n	8005800 <SPI_WaitFlagStateUntilTimeout+0x94>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057e4:	d004      	beq.n	80057f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057ee:	d107      	bne.n	8005800 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005804:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005808:	d10f      	bne.n	800582a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005828:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e017      	b.n	800586e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	3b01      	subs	r3, #1
 800584c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4013      	ands	r3, r2
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	429a      	cmp	r2, r3
 800585c:	bf0c      	ite	eq
 800585e:	2301      	moveq	r3, #1
 8005860:	2300      	movne	r3, #0
 8005862:	b2db      	uxtb	r3, r3
 8005864:	461a      	mov	r2, r3
 8005866:	79fb      	ldrb	r3, [r7, #7]
 8005868:	429a      	cmp	r2, r3
 800586a:	d19b      	bne.n	80057a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3720      	adds	r7, #32
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000008 	.word	0x20000008

0800587c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af02      	add	r7, sp, #8
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2201      	movs	r2, #1
 8005890:	2102      	movs	r1, #2
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f7ff ff6a 	bl	800576c <SPI_WaitFlagStateUntilTimeout>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d007      	beq.n	80058ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a2:	f043 0220 	orr.w	r2, r3, #32
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e032      	b.n	8005914 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058ae:	4b1b      	ldr	r3, [pc, #108]	@ (800591c <SPI_EndRxTxTransaction+0xa0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a1b      	ldr	r2, [pc, #108]	@ (8005920 <SPI_EndRxTxTransaction+0xa4>)
 80058b4:	fba2 2303 	umull	r2, r3, r2, r3
 80058b8:	0d5b      	lsrs	r3, r3, #21
 80058ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80058be:	fb02 f303 	mul.w	r3, r2, r3
 80058c2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058cc:	d112      	bne.n	80058f4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2200      	movs	r2, #0
 80058d6:	2180      	movs	r1, #128	@ 0x80
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f7ff ff47 	bl	800576c <SPI_WaitFlagStateUntilTimeout>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d016      	beq.n	8005912 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e8:	f043 0220 	orr.w	r2, r3, #32
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e00f      	b.n	8005914 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	3b01      	subs	r3, #1
 80058fe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800590a:	2b80      	cmp	r3, #128	@ 0x80
 800590c:	d0f2      	beq.n	80058f4 <SPI_EndRxTxTransaction+0x78>
 800590e:	e000      	b.n	8005912 <SPI_EndRxTxTransaction+0x96>
        break;
 8005910:	bf00      	nop
  }

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20000008 	.word	0x20000008
 8005920:	165e9f81 	.word	0x165e9f81

08005924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e041      	b.n	80059ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d106      	bne.n	8005950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7fc face 	bl	8001eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3304      	adds	r3, #4
 8005960:	4619      	mov	r1, r3
 8005962:	4610      	mov	r0, r2
 8005964:	f000 f8f4 	bl	8005b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b084      	sub	sp, #16
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
 80059ca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <HAL_TIM_ConfigClockSource+0x1c>
 80059da:	2302      	movs	r3, #2
 80059dc:	e0b4      	b.n	8005b48 <HAL_TIM_ConfigClockSource+0x186>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2202      	movs	r2, #2
 80059ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80059fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a04:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a16:	d03e      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0xd4>
 8005a18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a1c:	f200 8087 	bhi.w	8005b2e <HAL_TIM_ConfigClockSource+0x16c>
 8005a20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a24:	f000 8086 	beq.w	8005b34 <HAL_TIM_ConfigClockSource+0x172>
 8005a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a2c:	d87f      	bhi.n	8005b2e <HAL_TIM_ConfigClockSource+0x16c>
 8005a2e:	2b70      	cmp	r3, #112	@ 0x70
 8005a30:	d01a      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0xa6>
 8005a32:	2b70      	cmp	r3, #112	@ 0x70
 8005a34:	d87b      	bhi.n	8005b2e <HAL_TIM_ConfigClockSource+0x16c>
 8005a36:	2b60      	cmp	r3, #96	@ 0x60
 8005a38:	d050      	beq.n	8005adc <HAL_TIM_ConfigClockSource+0x11a>
 8005a3a:	2b60      	cmp	r3, #96	@ 0x60
 8005a3c:	d877      	bhi.n	8005b2e <HAL_TIM_ConfigClockSource+0x16c>
 8005a3e:	2b50      	cmp	r3, #80	@ 0x50
 8005a40:	d03c      	beq.n	8005abc <HAL_TIM_ConfigClockSource+0xfa>
 8005a42:	2b50      	cmp	r3, #80	@ 0x50
 8005a44:	d873      	bhi.n	8005b2e <HAL_TIM_ConfigClockSource+0x16c>
 8005a46:	2b40      	cmp	r3, #64	@ 0x40
 8005a48:	d058      	beq.n	8005afc <HAL_TIM_ConfigClockSource+0x13a>
 8005a4a:	2b40      	cmp	r3, #64	@ 0x40
 8005a4c:	d86f      	bhi.n	8005b2e <HAL_TIM_ConfigClockSource+0x16c>
 8005a4e:	2b30      	cmp	r3, #48	@ 0x30
 8005a50:	d064      	beq.n	8005b1c <HAL_TIM_ConfigClockSource+0x15a>
 8005a52:	2b30      	cmp	r3, #48	@ 0x30
 8005a54:	d86b      	bhi.n	8005b2e <HAL_TIM_ConfigClockSource+0x16c>
 8005a56:	2b20      	cmp	r3, #32
 8005a58:	d060      	beq.n	8005b1c <HAL_TIM_ConfigClockSource+0x15a>
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	d867      	bhi.n	8005b2e <HAL_TIM_ConfigClockSource+0x16c>
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d05c      	beq.n	8005b1c <HAL_TIM_ConfigClockSource+0x15a>
 8005a62:	2b10      	cmp	r3, #16
 8005a64:	d05a      	beq.n	8005b1c <HAL_TIM_ConfigClockSource+0x15a>
 8005a66:	e062      	b.n	8005b2e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a78:	f000 f990 	bl	8005d9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a8a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	609a      	str	r2, [r3, #8]
      break;
 8005a94:	e04f      	b.n	8005b36 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005aa6:	f000 f979 	bl	8005d9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ab8:	609a      	str	r2, [r3, #8]
      break;
 8005aba:	e03c      	b.n	8005b36 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f000 f8ed 	bl	8005ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2150      	movs	r1, #80	@ 0x50
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 f946 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 8005ada:	e02c      	b.n	8005b36 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ae8:	461a      	mov	r2, r3
 8005aea:	f000 f90c 	bl	8005d06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2160      	movs	r1, #96	@ 0x60
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 f936 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 8005afa:	e01c      	b.n	8005b36 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b08:	461a      	mov	r2, r3
 8005b0a:	f000 f8cd 	bl	8005ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2140      	movs	r1, #64	@ 0x40
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 f926 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 8005b1a:	e00c      	b.n	8005b36 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4619      	mov	r1, r3
 8005b26:	4610      	mov	r0, r2
 8005b28:	f000 f91d 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 8005b2c:	e003      	b.n	8005b36 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	73fb      	strb	r3, [r7, #15]
      break;
 8005b32:	e000      	b.n	8005b36 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a46      	ldr	r2, [pc, #280]	@ (8005c7c <TIM_Base_SetConfig+0x12c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d013      	beq.n	8005b90 <TIM_Base_SetConfig+0x40>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b6e:	d00f      	beq.n	8005b90 <TIM_Base_SetConfig+0x40>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a43      	ldr	r2, [pc, #268]	@ (8005c80 <TIM_Base_SetConfig+0x130>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00b      	beq.n	8005b90 <TIM_Base_SetConfig+0x40>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a42      	ldr	r2, [pc, #264]	@ (8005c84 <TIM_Base_SetConfig+0x134>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d007      	beq.n	8005b90 <TIM_Base_SetConfig+0x40>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a41      	ldr	r2, [pc, #260]	@ (8005c88 <TIM_Base_SetConfig+0x138>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d003      	beq.n	8005b90 <TIM_Base_SetConfig+0x40>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a40      	ldr	r2, [pc, #256]	@ (8005c8c <TIM_Base_SetConfig+0x13c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d108      	bne.n	8005ba2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a35      	ldr	r2, [pc, #212]	@ (8005c7c <TIM_Base_SetConfig+0x12c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d02b      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bb0:	d027      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a32      	ldr	r2, [pc, #200]	@ (8005c80 <TIM_Base_SetConfig+0x130>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d023      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a31      	ldr	r2, [pc, #196]	@ (8005c84 <TIM_Base_SetConfig+0x134>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d01f      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a30      	ldr	r2, [pc, #192]	@ (8005c88 <TIM_Base_SetConfig+0x138>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d01b      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a2f      	ldr	r2, [pc, #188]	@ (8005c8c <TIM_Base_SetConfig+0x13c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d017      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a2e      	ldr	r2, [pc, #184]	@ (8005c90 <TIM_Base_SetConfig+0x140>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d013      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a2d      	ldr	r2, [pc, #180]	@ (8005c94 <TIM_Base_SetConfig+0x144>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d00f      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a2c      	ldr	r2, [pc, #176]	@ (8005c98 <TIM_Base_SetConfig+0x148>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00b      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a2b      	ldr	r2, [pc, #172]	@ (8005c9c <TIM_Base_SetConfig+0x14c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d007      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a2a      	ldr	r2, [pc, #168]	@ (8005ca0 <TIM_Base_SetConfig+0x150>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d003      	beq.n	8005c02 <TIM_Base_SetConfig+0xb2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a29      	ldr	r2, [pc, #164]	@ (8005ca4 <TIM_Base_SetConfig+0x154>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d108      	bne.n	8005c14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a10      	ldr	r2, [pc, #64]	@ (8005c7c <TIM_Base_SetConfig+0x12c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d003      	beq.n	8005c48 <TIM_Base_SetConfig+0xf8>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a12      	ldr	r2, [pc, #72]	@ (8005c8c <TIM_Base_SetConfig+0x13c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d103      	bne.n	8005c50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	691a      	ldr	r2, [r3, #16]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d105      	bne.n	8005c6e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f023 0201 	bic.w	r2, r3, #1
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	611a      	str	r2, [r3, #16]
  }
}
 8005c6e:	bf00      	nop
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	40010000 	.word	0x40010000
 8005c80:	40000400 	.word	0x40000400
 8005c84:	40000800 	.word	0x40000800
 8005c88:	40000c00 	.word	0x40000c00
 8005c8c:	40010400 	.word	0x40010400
 8005c90:	40014000 	.word	0x40014000
 8005c94:	40014400 	.word	0x40014400
 8005c98:	40014800 	.word	0x40014800
 8005c9c:	40001800 	.word	0x40001800
 8005ca0:	40001c00 	.word	0x40001c00
 8005ca4:	40002000 	.word	0x40002000

08005ca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f023 0201 	bic.w	r2, r3, #1
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f023 030a 	bic.w	r3, r3, #10
 8005ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	621a      	str	r2, [r3, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b087      	sub	sp, #28
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	f023 0210 	bic.w	r2, r3, #16
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	031b      	lsls	r3, r3, #12
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	621a      	str	r2, [r3, #32]
}
 8005d5a:	bf00      	nop
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f043 0307 	orr.w	r3, r3, #7
 8005d88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	609a      	str	r2, [r3, #8]
}
 8005d90:	bf00      	nop
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005db6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	021a      	lsls	r2, r3, #8
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	609a      	str	r2, [r3, #8]
}
 8005dd0:	bf00      	nop
 8005dd2:	371c      	adds	r7, #28
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d101      	bne.n	8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005df0:	2302      	movs	r3, #2
 8005df2:	e05a      	b.n	8005eaa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a21      	ldr	r2, [pc, #132]	@ (8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d022      	beq.n	8005e7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e40:	d01d      	beq.n	8005e7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a1d      	ldr	r2, [pc, #116]	@ (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d018      	beq.n	8005e7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a1b      	ldr	r2, [pc, #108]	@ (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d013      	beq.n	8005e7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00e      	beq.n	8005e7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a18      	ldr	r2, [pc, #96]	@ (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d009      	beq.n	8005e7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a17      	ldr	r2, [pc, #92]	@ (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d004      	beq.n	8005e7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a15      	ldr	r2, [pc, #84]	@ (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d10c      	bne.n	8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40010000 	.word	0x40010000
 8005ebc:	40000400 	.word	0x40000400
 8005ec0:	40000800 	.word	0x40000800
 8005ec4:	40000c00 	.word	0x40000c00
 8005ec8:	40010400 	.word	0x40010400
 8005ecc:	40014000 	.word	0x40014000
 8005ed0:	40001800 	.word	0x40001800

08005ed4 <memset>:
 8005ed4:	4402      	add	r2, r0
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d100      	bne.n	8005ede <memset+0xa>
 8005edc:	4770      	bx	lr
 8005ede:	f803 1b01 	strb.w	r1, [r3], #1
 8005ee2:	e7f9      	b.n	8005ed8 <memset+0x4>

08005ee4 <__libc_init_array>:
 8005ee4:	b570      	push	{r4, r5, r6, lr}
 8005ee6:	4d0d      	ldr	r5, [pc, #52]	@ (8005f1c <__libc_init_array+0x38>)
 8005ee8:	4c0d      	ldr	r4, [pc, #52]	@ (8005f20 <__libc_init_array+0x3c>)
 8005eea:	1b64      	subs	r4, r4, r5
 8005eec:	10a4      	asrs	r4, r4, #2
 8005eee:	2600      	movs	r6, #0
 8005ef0:	42a6      	cmp	r6, r4
 8005ef2:	d109      	bne.n	8005f08 <__libc_init_array+0x24>
 8005ef4:	4d0b      	ldr	r5, [pc, #44]	@ (8005f24 <__libc_init_array+0x40>)
 8005ef6:	4c0c      	ldr	r4, [pc, #48]	@ (8005f28 <__libc_init_array+0x44>)
 8005ef8:	f000 f818 	bl	8005f2c <_init>
 8005efc:	1b64      	subs	r4, r4, r5
 8005efe:	10a4      	asrs	r4, r4, #2
 8005f00:	2600      	movs	r6, #0
 8005f02:	42a6      	cmp	r6, r4
 8005f04:	d105      	bne.n	8005f12 <__libc_init_array+0x2e>
 8005f06:	bd70      	pop	{r4, r5, r6, pc}
 8005f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f0c:	4798      	blx	r3
 8005f0e:	3601      	adds	r6, #1
 8005f10:	e7ee      	b.n	8005ef0 <__libc_init_array+0xc>
 8005f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f16:	4798      	blx	r3
 8005f18:	3601      	adds	r6, #1
 8005f1a:	e7f2      	b.n	8005f02 <__libc_init_array+0x1e>
 8005f1c:	08005f64 	.word	0x08005f64
 8005f20:	08005f64 	.word	0x08005f64
 8005f24:	08005f64 	.word	0x08005f64
 8005f28:	08005f68 	.word	0x08005f68

08005f2c <_init>:
 8005f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2e:	bf00      	nop
 8005f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f32:	bc08      	pop	{r3}
 8005f34:	469e      	mov	lr, r3
 8005f36:	4770      	bx	lr

08005f38 <_fini>:
 8005f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3a:	bf00      	nop
 8005f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f3e:	bc08      	pop	{r3}
 8005f40:	469e      	mov	lr, r3
 8005f42:	4770      	bx	lr
