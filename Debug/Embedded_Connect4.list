
Embedded_Connect4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006da4  08006da4  00007da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e14  08006e14  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006e14  08006e14  00007e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e1c  08006e1c  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e1c  08006e1c  00007e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e20  08006e20  00007e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006e24  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000806c  2**0
                  CONTENTS
 10 .bss          00025d08  2000006c  2000006c  0000806c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025d74  20025d74  0000806c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e64  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e8d  00000000  00000000  0001af00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  0001dd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f41  00000000  00000000  0001f140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026bde  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017a90  00000000  00000000  00046c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2b1f  00000000  00000000  0005e6ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014120e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a78  00000000  00000000  00141254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  00146ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006d8c 	.word	0x08006d8c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08006d8c 	.word	0x08006d8c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f001 ffd4 	bl	8002530 <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 f9d2 	bl	8000930 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f98f 	bl	80008b0 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fae8 	bl	8000b6c <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 800059c:	f000 fb48 	bl	8000c30 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a0:	4b02      	ldr	r3, [pc, #8]	@ (80005ac <ApplicationInit+0x2c>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000088 	.word	0x20000088

080005b0 <LCD_Visual_Demo>:

void LCD_Visual_Demo(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	LCD_Draw_Game_Grid();
 80005b4:	f000 fafc 	bl	8000bb0 <LCD_Draw_Game_Grid>
	//visualDemo();
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <LCD_Touch_Polling_Demo>:

#if COMPILE_TOUCH_FUNCTIONS == 1
void LCD_Touch_Polling_Demo(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_GREEN);
 80005c0:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80005c4:	2000      	movs	r0, #0
 80005c6:	f000 fad1 	bl	8000b6c <LCD_Clear>
	while (1) {
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80005ca:	480f      	ldr	r0, [pc, #60]	@ (8000608 <LCD_Touch_Polling_Demo+0x4c>)
 80005cc:	f000 fb3b 	bl	8000c46 <returnTouchStateAndLocation>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d10e      	bne.n	80005f4 <LCD_Touch_Polling_Demo+0x38>
			/* Touch valid */
			printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 80005d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <LCD_Touch_Polling_Demo+0x4c>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	4619      	mov	r1, r3
 80005dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000608 <LCD_Touch_Polling_Demo+0x4c>)
 80005de:	885b      	ldrh	r3, [r3, #2]
 80005e0:	461a      	mov	r2, r3
 80005e2:	480a      	ldr	r0, [pc, #40]	@ (800060c <LCD_Touch_Polling_Demo+0x50>)
 80005e4:	f005 fd06 	bl	8005ff4 <iprintf>
			LCD_Clear(0, LCD_COLOR_RED);
 80005e8:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 fabd 	bl	8000b6c <LCD_Clear>
 80005f2:	e7ea      	b.n	80005ca <LCD_Touch_Polling_Demo+0xe>
		} else {
			/* Touch not pressed */
			printf("Not Pressed\n\n");
 80005f4:	4806      	ldr	r0, [pc, #24]	@ (8000610 <LCD_Touch_Polling_Demo+0x54>)
 80005f6:	f005 fd65 	bl	80060c4 <puts>
			LCD_Clear(0, LCD_COLOR_GREEN);
 80005fa:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 fab4 	bl	8000b6c <LCD_Clear>
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000604:	e7e1      	b.n	80005ca <LCD_Touch_Polling_Demo+0xe>
 8000606:	bf00      	nop
 8000608:	20000088 	.word	0x20000088
 800060c:	08006da4 	.word	0x08006da4
 8000610:	08006db8 	.word	0x08006db8

08000614 <Init_Chip_To_Drop>:

static grid_t grid[7][6];
static chip_to_drop_t chip;
uint8_t playerTurn;

void Init_Chip_To_Drop(){
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
	chip.yPos        = CHIP_Y_POS;
 8000618:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <Init_Chip_To_Drop+0x20>)
 800061a:	223a      	movs	r2, #58	@ 0x3a
 800061c:	709a      	strb	r2, [r3, #2]
	chip.xPos        = CHIP_X_POS(CHIP_X_START_COLUMN);
 800061e:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <Init_Chip_To_Drop+0x20>)
 8000620:	2288      	movs	r2, #136	@ 0x88
 8000622:	705a      	strb	r2, [r3, #1]
	chip.column      = CHIP_X_START_COLUMN;
 8000624:	4b03      	ldr	r3, [pc, #12]	@ (8000634 <Init_Chip_To_Drop+0x20>)
 8000626:	2204      	movs	r2, #4
 8000628:	701a      	strb	r2, [r3, #0]
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	200259bc 	.word	0x200259bc

08000638 <Init_Grid_Pos>:

void Init_Grid_Pos(){
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<7; i++){
 800063e:	2300      	movs	r3, #0
 8000640:	71fb      	strb	r3, [r7, #7]
 8000642:	e032      	b.n	80006aa <Init_Grid_Pos+0x72>
		for(uint8_t j =0; j<6; j++){
 8000644:	2300      	movs	r3, #0
 8000646:	71bb      	strb	r3, [r7, #6]
 8000648:	e029      	b.n	800069e <Init_Grid_Pos+0x66>
			grid[i][j].xPos = SQUARE_SIZE/2+SQUARE_SIZE*i;
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	461a      	mov	r2, r3
 800064e:	0112      	lsls	r2, r2, #4
 8000650:	4413      	add	r3, r2
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	b2db      	uxtb	r3, r3
 8000656:	79fa      	ldrb	r2, [r7, #7]
 8000658:	79b9      	ldrb	r1, [r7, #6]
 800065a:	3311      	adds	r3, #17
 800065c:	b2dc      	uxtb	r4, r3
 800065e:	482f      	ldr	r0, [pc, #188]	@ (800071c <Init_Grid_Pos+0xe4>)
 8000660:	4613      	mov	r3, r2
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4413      	add	r3, r2
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	440b      	add	r3, r1
 800066a:	4622      	mov	r2, r4
 800066c:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
			grid[i][j].yPos = SQUARE_SIZE/2 + SQUARE_SIZE*j;
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	461a      	mov	r2, r3
 8000674:	0112      	lsls	r2, r2, #4
 8000676:	4413      	add	r3, r2
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	b2db      	uxtb	r3, r3
 800067c:	79fa      	ldrb	r2, [r7, #7]
 800067e:	79b9      	ldrb	r1, [r7, #6]
 8000680:	3311      	adds	r3, #17
 8000682:	b2dc      	uxtb	r4, r3
 8000684:	4825      	ldr	r0, [pc, #148]	@ (800071c <Init_Grid_Pos+0xe4>)
 8000686:	4613      	mov	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	440b      	add	r3, r1
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	4403      	add	r3, r0
 8000694:	4622      	mov	r2, r4
 8000696:	705a      	strb	r2, [r3, #1]
		for(uint8_t j =0; j<6; j++){
 8000698:	79bb      	ldrb	r3, [r7, #6]
 800069a:	3301      	adds	r3, #1
 800069c:	71bb      	strb	r3, [r7, #6]
 800069e:	79bb      	ldrb	r3, [r7, #6]
 80006a0:	2b05      	cmp	r3, #5
 80006a2:	d9d2      	bls.n	800064a <Init_Grid_Pos+0x12>
	for(uint8_t i = 0; i<7; i++){
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	3301      	adds	r3, #1
 80006a8:	71fb      	strb	r3, [r7, #7]
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d9c9      	bls.n	8000644 <Init_Grid_Pos+0xc>
		}
	}
	for(uint8_t i = 0; i<7; i++){
 80006b0:	2300      	movs	r3, #0
 80006b2:	717b      	strb	r3, [r7, #5]
 80006b4:	e02a      	b.n	800070c <Init_Grid_Pos+0xd4>
		for(uint8_t j =0; j<6; j++){
 80006b6:	2300      	movs	r3, #0
 80006b8:	713b      	strb	r3, [r7, #4]
 80006ba:	e021      	b.n	8000700 <Init_Grid_Pos+0xc8>
			LCD_Draw_Circle_Fill(grid[i][j].xPos, LCD_PIXEL_HEIGHT-grid[i][j].yPos, CIRCLE_RADIUS, LCD_COLOR_RED);
 80006bc:	797a      	ldrb	r2, [r7, #5]
 80006be:	7939      	ldrb	r1, [r7, #4]
 80006c0:	4816      	ldr	r0, [pc, #88]	@ (800071c <Init_Grid_Pos+0xe4>)
 80006c2:	4613      	mov	r3, r2
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	4413      	add	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	440b      	add	r3, r1
 80006cc:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 80006d0:	461c      	mov	r4, r3
 80006d2:	797a      	ldrb	r2, [r7, #5]
 80006d4:	7939      	ldrb	r1, [r7, #4]
 80006d6:	4811      	ldr	r0, [pc, #68]	@ (800071c <Init_Grid_Pos+0xe4>)
 80006d8:	4613      	mov	r3, r2
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	4413      	add	r3, r2
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	440b      	add	r3, r1
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4403      	add	r3, r0
 80006e6:	785b      	ldrb	r3, [r3, #1]
 80006e8:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80006ec:	b299      	uxth	r1, r3
 80006ee:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80006f2:	220c      	movs	r2, #12
 80006f4:	4620      	mov	r0, r4
 80006f6:	f000 f997 	bl	8000a28 <LCD_Draw_Circle_Fill>
		for(uint8_t j =0; j<6; j++){
 80006fa:	793b      	ldrb	r3, [r7, #4]
 80006fc:	3301      	adds	r3, #1
 80006fe:	713b      	strb	r3, [r7, #4]
 8000700:	793b      	ldrb	r3, [r7, #4]
 8000702:	2b05      	cmp	r3, #5
 8000704:	d9da      	bls.n	80006bc <Init_Grid_Pos+0x84>
	for(uint8_t i = 0; i<7; i++){
 8000706:	797b      	ldrb	r3, [r7, #5]
 8000708:	3301      	adds	r3, #1
 800070a:	717b      	strb	r3, [r7, #5]
 800070c:	797b      	ldrb	r3, [r7, #5]
 800070e:	2b06      	cmp	r3, #6
 8000710:	d9d1      	bls.n	80006b6 <Init_Grid_Pos+0x7e>
		}
	}
}
 8000712:	bf00      	nop
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bd90      	pop	{r4, r7, pc}
 800071c:	20025968 	.word	0x20025968

08000720 <LCD_GPIO_Init>:

void LCD_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08c      	sub	sp, #48	@ 0x30
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
 800072a:	4b5a      	ldr	r3, [pc, #360]	@ (8000894 <LCD_GPIO_Init+0x174>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800072e:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <LCD_GPIO_Init+0x174>)
 8000730:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000734:	6453      	str	r3, [r2, #68]	@ 0x44
 8000736:	4b57      	ldr	r3, [pc, #348]	@ (8000894 <LCD_GPIO_Init+0x174>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800073a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800073e:	61bb      	str	r3, [r7, #24]
 8000740:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	4b53      	ldr	r3, [pc, #332]	@ (8000894 <LCD_GPIO_Init+0x174>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a52      	ldr	r2, [pc, #328]	@ (8000894 <LCD_GPIO_Init+0x174>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b50      	ldr	r3, [pc, #320]	@ (8000894 <LCD_GPIO_Init+0x174>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	4b4c      	ldr	r3, [pc, #304]	@ (8000894 <LCD_GPIO_Init+0x174>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a4b      	ldr	r2, [pc, #300]	@ (8000894 <LCD_GPIO_Init+0x174>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b49      	ldr	r3, [pc, #292]	@ (8000894 <LCD_GPIO_Init+0x174>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4b45      	ldr	r3, [pc, #276]	@ (8000894 <LCD_GPIO_Init+0x174>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a44      	ldr	r2, [pc, #272]	@ (8000894 <LCD_GPIO_Init+0x174>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b42      	ldr	r3, [pc, #264]	@ (8000894 <LCD_GPIO_Init+0x174>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b3e      	ldr	r3, [pc, #248]	@ (8000894 <LCD_GPIO_Init+0x174>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a3d      	ldr	r2, [pc, #244]	@ (8000894 <LCD_GPIO_Init+0x174>)
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b3b      	ldr	r3, [pc, #236]	@ (8000894 <LCD_GPIO_Init+0x174>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b37      	ldr	r3, [pc, #220]	@ (8000894 <LCD_GPIO_Init+0x174>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a36      	ldr	r2, [pc, #216]	@ (8000894 <LCD_GPIO_Init+0x174>)
 80007bc:	f043 0320 	orr.w	r3, r3, #32
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b34      	ldr	r3, [pc, #208]	@ (8000894 <LCD_GPIO_Init+0x174>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0320 	and.w	r3, r3, #32
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b30      	ldr	r3, [pc, #192]	@ (8000894 <LCD_GPIO_Init+0x174>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a2f      	ldr	r2, [pc, #188]	@ (8000894 <LCD_GPIO_Init+0x174>)
 80007d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b2d      	ldr	r3, [pc, #180]	@ (8000894 <LCD_GPIO_Init+0x174>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80007ea:	f641 0358 	movw	r3, #6232	@ 0x1858
 80007ee:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80007f8:	2302      	movs	r3, #2
 80007fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80007fc:	230e      	movs	r3, #14
 80007fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	4824      	ldr	r0, [pc, #144]	@ (8000898 <LCD_GPIO_Init+0x178>)
 8000808:	f002 f8f4 	bl	80029f4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800080c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000810:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	4820      	ldr	r0, [pc, #128]	@ (800089c <LCD_GPIO_Init+0x17c>)
 800081a:	f002 f8eb 	bl	80029f4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800081e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	481d      	ldr	r0, [pc, #116]	@ (80008a0 <LCD_GPIO_Init+0x180>)
 800082c:	f002 f8e2 	bl	80029f4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000830:	2348      	movs	r3, #72	@ 0x48
 8000832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	481a      	ldr	r0, [pc, #104]	@ (80008a4 <LCD_GPIO_Init+0x184>)
 800083c:	f002 f8da 	bl	80029f4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000840:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000844:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4816      	ldr	r0, [pc, #88]	@ (80008a8 <LCD_GPIO_Init+0x188>)
 800084e:	f002 f8d1 	bl	80029f4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000852:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000856:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	4813      	ldr	r0, [pc, #76]	@ (80008ac <LCD_GPIO_Init+0x18c>)
 8000860:	f002 f8c8 	bl	80029f4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000864:	2303      	movs	r3, #3
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000868:	2309      	movs	r3, #9
 800086a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	480a      	ldr	r0, [pc, #40]	@ (800089c <LCD_GPIO_Init+0x17c>)
 8000874:	f002 f8be 	bl	80029f4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000878:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800087c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4809      	ldr	r0, [pc, #36]	@ (80008ac <LCD_GPIO_Init+0x18c>)
 8000886:	f002 f8b5 	bl	80029f4 <HAL_GPIO_Init>
}
 800088a:	bf00      	nop
 800088c:	3730      	adds	r7, #48	@ 0x30
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40020000 	.word	0x40020000
 800089c:	40020400 	.word	0x40020400
 80008a0:	40020800 	.word	0x40020800
 80008a4:	40020c00 	.word	0x40020c00
 80008a8:	40021400 	.word	0x40021400
 80008ac:	40021800 	.word	0x40021800

080008b0 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b090      	sub	sp, #64	@ 0x40
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80008be:	23f0      	movs	r3, #240	@ 0xf0
 80008c0:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80008c6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80008ca:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80008cc:	2302      	movs	r3, #2
 80008ce:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80008d0:	23ff      	movs	r3, #255	@ 0xff
 80008d2:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80008d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80008de:	2305      	movs	r3, #5
 80008e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d101      	bne.n	80008ec <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <LTCD_Layer_Init+0x78>)
 80008ea:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80008ec:	23f0      	movs	r3, #240	@ 0xf0
 80008ee:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80008f0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80008f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000908:	79fa      	ldrb	r2, [r7, #7]
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	4619      	mov	r1, r3
 8000910:	4806      	ldr	r0, [pc, #24]	@ (800092c <LTCD_Layer_Init+0x7c>)
 8000912:	f003 fcb1 	bl	8004278 <HAL_LTDC_ConfigLayer>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 800091c:	f000 f982 	bl	8000c24 <LCD_Error_Handler>
	}
}
 8000920:	bf00      	nop
 8000922:	3740      	adds	r7, #64	@ 0x40
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000168 	.word	0x20000168
 800092c:	20000090 	.word	0x20000090

08000930 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000934:	4b2a      	ldr	r3, [pc, #168]	@ (80009e0 <LTCD__Init+0xb0>)
 8000936:	4a2b      	ldr	r2, [pc, #172]	@ (80009e4 <LTCD__Init+0xb4>)
 8000938:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800093a:	4b29      	ldr	r3, [pc, #164]	@ (80009e0 <LTCD__Init+0xb0>)
 800093c:	2209      	movs	r2, #9
 800093e:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000940:	4b27      	ldr	r3, [pc, #156]	@ (80009e0 <LTCD__Init+0xb0>)
 8000942:	2201      	movs	r2, #1
 8000944:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000946:	4b26      	ldr	r3, [pc, #152]	@ (80009e0 <LTCD__Init+0xb0>)
 8000948:	221d      	movs	r2, #29
 800094a:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 800094c:	4b24      	ldr	r3, [pc, #144]	@ (80009e0 <LTCD__Init+0xb0>)
 800094e:	2203      	movs	r2, #3
 8000950:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000952:	4b23      	ldr	r3, [pc, #140]	@ (80009e0 <LTCD__Init+0xb0>)
 8000954:	f240 120d 	movw	r2, #269	@ 0x10d
 8000958:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800095a:	4b21      	ldr	r3, [pc, #132]	@ (80009e0 <LTCD__Init+0xb0>)
 800095c:	f240 1243 	movw	r2, #323	@ 0x143
 8000960:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000962:	4b1f      	ldr	r3, [pc, #124]	@ (80009e0 <LTCD__Init+0xb0>)
 8000964:	f240 1217 	movw	r2, #279	@ 0x117
 8000968:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800096a:	4b1d      	ldr	r3, [pc, #116]	@ (80009e0 <LTCD__Init+0xb0>)
 800096c:	f240 1247 	movw	r2, #327	@ 0x147
 8000970:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000972:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <LTCD__Init+0xb0>)
 8000974:	2200      	movs	r2, #0
 8000976:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800097a:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <LTCD__Init+0xb0>)
 800097c:	2200      	movs	r2, #0
 800097e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000982:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <LTCD__Init+0xb0>)
 8000984:	2200      	movs	r2, #0
 8000986:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800098a:	4b17      	ldr	r3, [pc, #92]	@ (80009e8 <LTCD__Init+0xb8>)
 800098c:	2208      	movs	r2, #8
 800098e:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000990:	4b15      	ldr	r3, [pc, #84]	@ (80009e8 <LTCD__Init+0xb8>)
 8000992:	22c0      	movs	r2, #192	@ 0xc0
 8000994:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000996:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <LTCD__Init+0xb8>)
 8000998:	2204      	movs	r2, #4
 800099a:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800099c:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <LTCD__Init+0xb8>)
 800099e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80009a2:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80009a4:	4810      	ldr	r0, [pc, #64]	@ (80009e8 <LTCD__Init+0xb8>)
 80009a6:	f004 fac1 	bl	8004f2c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009aa:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <LTCD__Init+0xb0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009b0:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <LTCD__Init+0xb0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80009b6:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <LTCD__Init+0xb0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <LTCD__Init+0xb0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80009c2:	f7ff fead 	bl	8000720 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80009c6:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <LTCD__Init+0xb0>)
 80009c8:	f003 fb86 	bl	80040d8 <HAL_LTDC_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80009d2:	f000 f927 	bl	8000c24 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80009d6:	f000 f942 	bl	8000c5e <ili9341_Init>
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000090 	.word	0x20000090
 80009e4:	40016800 	.word	0x40016800
 80009e8:	20000138 	.word	0x20000138

080009ec <LCD_Draw_Pixel>:
	LCD_Clear_Chip_To_Drop();

}

void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	80fb      	strh	r3, [r7, #6]
 80009f6:	460b      	mov	r3, r1
 80009f8:	80bb      	strh	r3, [r7, #4]
 80009fa:	4613      	mov	r3, r2
 80009fc:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80009fe:	88ba      	ldrh	r2, [r7, #4]
 8000a00:	4613      	mov	r3, r2
 8000a02:	011b      	lsls	r3, r3, #4
 8000a04:	1a9b      	subs	r3, r3, r2
 8000a06:	011b      	lsls	r3, r3, #4
 8000a08:	461a      	mov	r2, r3
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4905      	ldr	r1, [pc, #20]	@ (8000a24 <LCD_Draw_Pixel+0x38>)
 8000a10:	887a      	ldrh	r2, [r7, #2]
 8000a12:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000168 	.word	0x20000168

08000a28 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4604      	mov	r4, r0
 8000a30:	4608      	mov	r0, r1
 8000a32:	4611      	mov	r1, r2
 8000a34:	461a      	mov	r2, r3
 8000a36:	4623      	mov	r3, r4
 8000a38:	80fb      	strh	r3, [r7, #6]
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	80bb      	strh	r3, [r7, #4]
 8000a3e:	460b      	mov	r3, r1
 8000a40:	807b      	strh	r3, [r7, #2]
 8000a42:	4613      	mov	r3, r2
 8000a44:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000a46:	887b      	ldrh	r3, [r7, #2]
 8000a48:	425b      	negs	r3, r3
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	81fb      	strh	r3, [r7, #14]
 8000a4e:	e034      	b.n	8000aba <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000a50:	887b      	ldrh	r3, [r7, #2]
 8000a52:	425b      	negs	r3, r3
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	81bb      	strh	r3, [r7, #12]
 8000a58:	e024      	b.n	8000aa4 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000a5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a5e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a62:	fb03 f202 	mul.w	r2, r3, r2
 8000a66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a6a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000a6e:	fb01 f303 	mul.w	r3, r1, r3
 8000a72:	441a      	add	r2, r3
 8000a74:	887b      	ldrh	r3, [r7, #2]
 8000a76:	8879      	ldrh	r1, [r7, #2]
 8000a78:	fb01 f303 	mul.w	r3, r1, r3
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	dc0b      	bgt.n	8000a98 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000a80:	89ba      	ldrh	r2, [r7, #12]
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	4413      	add	r3, r2
 8000a86:	b298      	uxth	r0, r3
 8000a88:	89fa      	ldrh	r2, [r7, #14]
 8000a8a:	88bb      	ldrh	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	883a      	ldrh	r2, [r7, #0]
 8000a92:	4619      	mov	r1, r3
 8000a94:	f7ff ffaa 	bl	80009ec <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000a98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	81bb      	strh	r3, [r7, #12]
 8000aa4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000aa8:	887b      	ldrh	r3, [r7, #2]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	ddd5      	ble.n	8000a5a <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000aae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	81fb      	strh	r3, [r7, #14]
 8000aba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000abe:	887b      	ldrh	r3, [r7, #2]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	ddc5      	ble.n	8000a50 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd90      	pop	{r4, r7, pc}

08000ace <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000ace:	b590      	push	{r4, r7, lr}
 8000ad0:	b085      	sub	sp, #20
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	4611      	mov	r1, r2
 8000ada:	461a      	mov	r2, r3
 8000adc:	4623      	mov	r3, r4
 8000ade:	80fb      	strh	r3, [r7, #6]
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	80bb      	strh	r3, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	807b      	strh	r3, [r7, #2]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	81fb      	strh	r3, [r7, #14]
 8000af0:	e00b      	b.n	8000b0a <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000af2:	89fa      	ldrh	r2, [r7, #14]
 8000af4:	88bb      	ldrh	r3, [r7, #4]
 8000af6:	4413      	add	r3, r2
 8000af8:	b299      	uxth	r1, r3
 8000afa:	883a      	ldrh	r2, [r7, #0]
 8000afc:	88fb      	ldrh	r3, [r7, #6]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ff74 	bl	80009ec <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000b04:	89fb      	ldrh	r3, [r7, #14]
 8000b06:	3301      	adds	r3, #1
 8000b08:	81fb      	strh	r3, [r7, #14]
 8000b0a:	89fa      	ldrh	r2, [r7, #14]
 8000b0c:	887b      	ldrh	r3, [r7, #2]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d3ef      	bcc.n	8000af2 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd90      	pop	{r4, r7, pc}

08000b1c <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4604      	mov	r4, r0
 8000b24:	4608      	mov	r0, r1
 8000b26:	4611      	mov	r1, r2
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4623      	mov	r3, r4
 8000b2c:	80fb      	strh	r3, [r7, #6]
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80bb      	strh	r3, [r7, #4]
 8000b32:	460b      	mov	r3, r1
 8000b34:	807b      	strh	r3, [r7, #2]
 8000b36:	4613      	mov	r3, r2
 8000b38:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	81fb      	strh	r3, [r7, #14]
 8000b3e:	e00b      	b.n	8000b58 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8000b40:	89fa      	ldrh	r2, [r7, #14]
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	4413      	add	r3, r2
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	883a      	ldrh	r2, [r7, #0]
 8000b4a:	88b9      	ldrh	r1, [r7, #4]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff4d 	bl	80009ec <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000b52:	89fb      	ldrh	r3, [r7, #14]
 8000b54:	3301      	adds	r3, #1
 8000b56:	81fb      	strh	r3, [r7, #14]
 8000b58:	89fa      	ldrh	r2, [r7, #14]
 8000b5a:	887b      	ldrh	r3, [r7, #2]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d3ef      	bcc.n	8000b40 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000b60:	bf00      	nop
 8000b62:	bf00      	nop
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd90      	pop	{r4, r7, pc}
	...

08000b6c <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	460a      	mov	r2, r1
 8000b76:	71fb      	strb	r3, [r7, #7]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d10e      	bne.n	8000ba0 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	e007      	b.n	8000b98 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000b88:	4908      	ldr	r1, [pc, #32]	@ (8000bac <LCD_Clear+0x40>)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	88ba      	ldrh	r2, [r7, #4]
 8000b8e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	3301      	adds	r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000b9e:	d3f3      	bcc.n	8000b88 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	20000168 	.word	0x20000168

08000bb0 <LCD_Draw_Game_Grid>:
{
  Ascii -= 32;
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
}

void LCD_Draw_Game_Grid(){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
//	uint16_t x;
//	uint16_t y;

	for(uint8_t i=1; i<7; i++){
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	71fb      	strb	r3, [r7, #7]
 8000bba:	e00e      	b.n	8000bda <LCD_Draw_Game_Grid+0x2a>
		LCD_Draw_Vertical_Line(SQUARE_SIZE*i,GRID_OFFSET_HORIZONTAL,SQUARE_SIZE*ROWS,LCD_COLOR_BLACK);
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	4413      	add	r3, r2
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	b298      	uxth	r0, r3
 8000bca:	2300      	movs	r3, #0
 8000bcc:	22cc      	movs	r2, #204	@ 0xcc
 8000bce:	2174      	movs	r1, #116	@ 0x74
 8000bd0:	f7ff ff7d 	bl	8000ace <LCD_Draw_Vertical_Line>
	for(uint8_t i=1; i<7; i++){
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	71fb      	strb	r3, [r7, #7]
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b06      	cmp	r3, #6
 8000bde:	d9ed      	bls.n	8000bbc <LCD_Draw_Game_Grid+0xc>
		//each tile is 34x34 so 180 is 6 height
		//15 is the offset from the edge, 34 is the size
	}
	for(uint8_t i =1; i<7; i++){
 8000be0:	2301      	movs	r3, #1
 8000be2:	71bb      	strb	r3, [r7, #6]
 8000be4:	e013      	b.n	8000c0e <LCD_Draw_Game_Grid+0x5e>
		LCD_Draw_Horizontal_Line(0,LCD_PIXEL_HEIGHT-(SQUARE_SIZE*i),LCD_PIXEL_WIDTH,LCD_COLOR_BLACK);
 8000be6:	79bb      	ldrb	r3, [r7, #6]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	461a      	mov	r2, r3
 8000bec:	02d2      	lsls	r2, r2, #11
 8000bee:	1ad2      	subs	r2, r2, r3
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8000bfc:	b299      	uxth	r1, r3
 8000bfe:	2300      	movs	r3, #0
 8000c00:	22f0      	movs	r2, #240	@ 0xf0
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff ff8a 	bl	8000b1c <LCD_Draw_Horizontal_Line>
	for(uint8_t i =1; i<7; i++){
 8000c08:	79bb      	ldrb	r3, [r7, #6]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	71bb      	strb	r3, [r7, #6]
 8000c0e:	79bb      	ldrb	r3, [r7, #6]
 8000c10:	2b06      	cmp	r3, #6
 8000c12:	d9e8      	bls.n	8000be6 <LCD_Draw_Game_Grid+0x36>
		//want each horizontal line to go across the screen
	}

	Init_Grid_Pos();
 8000c14:	f7ff fd10 	bl	8000638 <Init_Grid_Pos>
	Init_Chip_To_Drop();
 8000c18:	f7ff fcfc 	bl	8000614 <Init_Chip_To_Drop>
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
}
 8000c2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <LCD_Error_Handler+0x8>

08000c30 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000c34:	f001 f933 	bl	8001e9e <STMPE811_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d001      	beq.n	8000c42 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000c3e:	bf00      	nop
 8000c40:	e7fd      	b.n	8000c3e <InitializeLCDTouch+0xe>
  }
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f001 f9dd 	bl	800200e <STMPE811_ReadTouch>
 8000c54:	4603      	mov	r3, r0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000c62:	f000 f9ff 	bl	8001064 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000c66:	20ca      	movs	r0, #202	@ 0xca
 8000c68:	f000 f943 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000c6c:	20c3      	movs	r0, #195	@ 0xc3
 8000c6e:	f000 f94d 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000c72:	2008      	movs	r0, #8
 8000c74:	f000 f94a 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000c78:	2050      	movs	r0, #80	@ 0x50
 8000c7a:	f000 f947 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000c7e:	20cf      	movs	r0, #207	@ 0xcf
 8000c80:	f000 f937 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000c84:	2000      	movs	r0, #0
 8000c86:	f000 f941 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000c8a:	20c1      	movs	r0, #193	@ 0xc1
 8000c8c:	f000 f93e 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000c90:	2030      	movs	r0, #48	@ 0x30
 8000c92:	f000 f93b 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000c96:	20ed      	movs	r0, #237	@ 0xed
 8000c98:	f000 f92b 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000c9c:	2064      	movs	r0, #100	@ 0x64
 8000c9e:	f000 f935 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000ca2:	2003      	movs	r0, #3
 8000ca4:	f000 f932 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000ca8:	2012      	movs	r0, #18
 8000caa:	f000 f92f 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000cae:	2081      	movs	r0, #129	@ 0x81
 8000cb0:	f000 f92c 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000cb4:	20e8      	movs	r0, #232	@ 0xe8
 8000cb6:	f000 f91c 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000cba:	2085      	movs	r0, #133	@ 0x85
 8000cbc:	f000 f926 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f000 f923 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000cc6:	2078      	movs	r0, #120	@ 0x78
 8000cc8:	f000 f920 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000ccc:	20cb      	movs	r0, #203	@ 0xcb
 8000cce:	f000 f910 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000cd2:	2039      	movs	r0, #57	@ 0x39
 8000cd4:	f000 f91a 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000cd8:	202c      	movs	r0, #44	@ 0x2c
 8000cda:	f000 f917 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 f914 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000ce4:	2034      	movs	r0, #52	@ 0x34
 8000ce6:	f000 f911 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000cea:	2002      	movs	r0, #2
 8000cec:	f000 f90e 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000cf0:	20f7      	movs	r0, #247	@ 0xf7
 8000cf2:	f000 f8fe 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000cf6:	2020      	movs	r0, #32
 8000cf8:	f000 f908 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000cfc:	20ea      	movs	r0, #234	@ 0xea
 8000cfe:	f000 f8f8 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f902 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f000 f8ff 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000d0e:	20b1      	movs	r0, #177	@ 0xb1
 8000d10:	f000 f8ef 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d14:	2000      	movs	r0, #0
 8000d16:	f000 f8f9 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000d1a:	201b      	movs	r0, #27
 8000d1c:	f000 f8f6 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000d20:	20b6      	movs	r0, #182	@ 0xb6
 8000d22:	f000 f8e6 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000d26:	200a      	movs	r0, #10
 8000d28:	f000 f8f0 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000d2c:	20a2      	movs	r0, #162	@ 0xa2
 8000d2e:	f000 f8ed 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000d32:	20c0      	movs	r0, #192	@ 0xc0
 8000d34:	f000 f8dd 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000d38:	2010      	movs	r0, #16
 8000d3a:	f000 f8e7 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000d3e:	20c1      	movs	r0, #193	@ 0xc1
 8000d40:	f000 f8d7 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000d44:	2010      	movs	r0, #16
 8000d46:	f000 f8e1 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8000d4a:	20c5      	movs	r0, #197	@ 0xc5
 8000d4c:	f000 f8d1 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8000d50:	2045      	movs	r0, #69	@ 0x45
 8000d52:	f000 f8db 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8000d56:	2015      	movs	r0, #21
 8000d58:	f000 f8d8 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8000d5c:	20c7      	movs	r0, #199	@ 0xc7
 8000d5e:	f000 f8c8 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8000d62:	2090      	movs	r0, #144	@ 0x90
 8000d64:	f000 f8d2 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8000d68:	2036      	movs	r0, #54	@ 0x36
 8000d6a:	f000 f8c2 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8000d6e:	20c8      	movs	r0, #200	@ 0xc8
 8000d70:	f000 f8cc 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8000d74:	20f2      	movs	r0, #242	@ 0xf2
 8000d76:	f000 f8bc 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f000 f8c6 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8000d80:	20b0      	movs	r0, #176	@ 0xb0
 8000d82:	f000 f8b6 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8000d86:	20c2      	movs	r0, #194	@ 0xc2
 8000d88:	f000 f8c0 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000d8c:	20b6      	movs	r0, #182	@ 0xb6
 8000d8e:	f000 f8b0 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000d92:	200a      	movs	r0, #10
 8000d94:	f000 f8ba 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8000d98:	20a7      	movs	r0, #167	@ 0xa7
 8000d9a:	f000 f8b7 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8000d9e:	2027      	movs	r0, #39	@ 0x27
 8000da0:	f000 f8b4 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000da4:	2004      	movs	r0, #4
 8000da6:	f000 f8b1 	bl	8000f0c <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8000daa:	202a      	movs	r0, #42	@ 0x2a
 8000dac:	f000 f8a1 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000db0:	2000      	movs	r0, #0
 8000db2:	f000 f8ab 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f000 f8a8 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f000 f8a5 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8000dc2:	20ef      	movs	r0, #239	@ 0xef
 8000dc4:	f000 f8a2 	bl	8000f0c <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8000dc8:	202b      	movs	r0, #43	@ 0x2b
 8000dca:	f000 f892 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f000 f89c 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f000 f899 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f000 f896 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8000de0:	203f      	movs	r0, #63	@ 0x3f
 8000de2:	f000 f893 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8000de6:	20f6      	movs	r0, #246	@ 0xf6
 8000de8:	f000 f883 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000dec:	2001      	movs	r0, #1
 8000dee:	f000 f88d 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000df2:	2000      	movs	r0, #0
 8000df4:	f000 f88a 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8000df8:	2006      	movs	r0, #6
 8000dfa:	f000 f887 	bl	8000f0c <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8000dfe:	202c      	movs	r0, #44	@ 0x2c
 8000e00:	f000 f877 	bl	8000ef2 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000e04:	20c8      	movs	r0, #200	@ 0xc8
 8000e06:	f000 f9e9 	bl	80011dc <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8000e0a:	2026      	movs	r0, #38	@ 0x26
 8000e0c:	f000 f871 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f000 f87b 	bl	8000f0c <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8000e16:	20e0      	movs	r0, #224	@ 0xe0
 8000e18:	f000 f86b 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8000e1c:	200f      	movs	r0, #15
 8000e1e:	f000 f875 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8000e22:	2029      	movs	r0, #41	@ 0x29
 8000e24:	f000 f872 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8000e28:	2024      	movs	r0, #36	@ 0x24
 8000e2a:	f000 f86f 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000e2e:	200c      	movs	r0, #12
 8000e30:	f000 f86c 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8000e34:	200e      	movs	r0, #14
 8000e36:	f000 f869 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000e3a:	2009      	movs	r0, #9
 8000e3c:	f000 f866 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8000e40:	204e      	movs	r0, #78	@ 0x4e
 8000e42:	f000 f863 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000e46:	2078      	movs	r0, #120	@ 0x78
 8000e48:	f000 f860 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8000e4c:	203c      	movs	r0, #60	@ 0x3c
 8000e4e:	f000 f85d 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000e52:	2009      	movs	r0, #9
 8000e54:	f000 f85a 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8000e58:	2013      	movs	r0, #19
 8000e5a:	f000 f857 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000e5e:	2005      	movs	r0, #5
 8000e60:	f000 f854 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8000e64:	2017      	movs	r0, #23
 8000e66:	f000 f851 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000e6a:	2011      	movs	r0, #17
 8000e6c:	f000 f84e 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e70:	2000      	movs	r0, #0
 8000e72:	f000 f84b 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8000e76:	20e1      	movs	r0, #225	@ 0xe1
 8000e78:	f000 f83b 	bl	8000ef2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f000 f845 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8000e82:	2016      	movs	r0, #22
 8000e84:	f000 f842 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000e88:	201b      	movs	r0, #27
 8000e8a:	f000 f83f 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000e8e:	2004      	movs	r0, #4
 8000e90:	f000 f83c 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000e94:	2011      	movs	r0, #17
 8000e96:	f000 f839 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8000e9a:	2007      	movs	r0, #7
 8000e9c:	f000 f836 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8000ea0:	2031      	movs	r0, #49	@ 0x31
 8000ea2:	f000 f833 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8000ea6:	2033      	movs	r0, #51	@ 0x33
 8000ea8:	f000 f830 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8000eac:	2042      	movs	r0, #66	@ 0x42
 8000eae:	f000 f82d 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000eb2:	2005      	movs	r0, #5
 8000eb4:	f000 f82a 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000eb8:	200c      	movs	r0, #12
 8000eba:	f000 f827 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8000ebe:	200a      	movs	r0, #10
 8000ec0:	f000 f824 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8000ec4:	2028      	movs	r0, #40	@ 0x28
 8000ec6:	f000 f821 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8000eca:	202f      	movs	r0, #47	@ 0x2f
 8000ecc:	f000 f81e 	bl	8000f0c <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8000ed0:	200f      	movs	r0, #15
 8000ed2:	f000 f81b 	bl	8000f0c <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8000ed6:	2011      	movs	r0, #17
 8000ed8:	f000 f80b 	bl	8000ef2 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000edc:	20c8      	movs	r0, #200	@ 0xc8
 8000ede:	f000 f97d 	bl	80011dc <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8000ee2:	2029      	movs	r0, #41	@ 0x29
 8000ee4:	f000 f805 	bl	8000ef2 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8000ee8:	202c      	movs	r0, #44	@ 0x2c
 8000eea:	f000 f802 	bl	8000ef2 <ili9341_Write_Reg>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f94a 	bl	8001198 <LCD_IO_WriteReg>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 f91b 	bl	8001154 <LCD_IO_WriteData>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000f2c:	4819      	ldr	r0, [pc, #100]	@ (8000f94 <SPI_Init+0x6c>)
 8000f2e:	f004 fbdc 	bl	80056ea <HAL_SPI_GetState>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d12b      	bne.n	8000f90 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8000f38:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <SPI_Init+0x6c>)
 8000f3a:	4a17      	ldr	r2, [pc, #92]	@ (8000f98 <SPI_Init+0x70>)
 8000f3c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f3e:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <SPI_Init+0x6c>)
 8000f40:	2218      	movs	r2, #24
 8000f42:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000f44:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <SPI_Init+0x6c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000f4a:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <SPI_Init+0x6c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000f50:	4b10      	ldr	r3, [pc, #64]	@ (8000f94 <SPI_Init+0x6c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000f56:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <SPI_Init+0x6c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <SPI_Init+0x6c>)
 8000f5e:	2207      	movs	r2, #7
 8000f60:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000f62:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <SPI_Init+0x6c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <SPI_Init+0x6c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <SPI_Init+0x6c>)
 8000f70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f74:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000f76:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <SPI_Init+0x6c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000f7c:	4b05      	ldr	r3, [pc, #20]	@ (8000f94 <SPI_Init+0x6c>)
 8000f7e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f82:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8000f84:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <SPI_Init+0x6c>)
 8000f86:	f000 f833 	bl	8000ff0 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000f8a:	4802      	ldr	r0, [pc, #8]	@ (8000f94 <SPI_Init+0x6c>)
 8000f8c:	f004 f9b8 	bl	8005300 <HAL_SPI_Init>
  }
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200259c0 	.word	0x200259c0
 8000f98:	40015000 	.word	0x40015000

08000f9c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8000faa:	4b09      	ldr	r3, [pc, #36]	@ (8000fd0 <SPI_Write+0x34>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	1db9      	adds	r1, r7, #6
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4808      	ldr	r0, [pc, #32]	@ (8000fd4 <SPI_Write+0x38>)
 8000fb4:	f004 fa55 	bl	8005462 <HAL_SPI_Transmit>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8000fc2:	f000 f809 	bl	8000fd8 <SPI_Error>
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	200259c0 	.word	0x200259c0

08000fd8 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000fdc:	4803      	ldr	r0, [pc, #12]	@ (8000fec <SPI_Error+0x14>)
 8000fde:	f004 fa18 	bl	8005412 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8000fe2:	f7ff ffa1 	bl	8000f28 <SPI_Init>
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200259c0 	.word	0x200259c0

08000ff0 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	@ 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	4b17      	ldr	r3, [pc, #92]	@ (800105c <SPI_MspInit+0x6c>)
 8000ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001000:	4a16      	ldr	r2, [pc, #88]	@ (800105c <SPI_MspInit+0x6c>)
 8001002:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001006:	6453      	str	r3, [r2, #68]	@ 0x44
 8001008:	4b14      	ldr	r3, [pc, #80]	@ (800105c <SPI_MspInit+0x6c>)
 800100a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	4b10      	ldr	r3, [pc, #64]	@ (800105c <SPI_MspInit+0x6c>)
 800101a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101c:	4a0f      	ldr	r2, [pc, #60]	@ (800105c <SPI_MspInit+0x6c>)
 800101e:	f043 0320 	orr.w	r3, r3, #32
 8001022:	6313      	str	r3, [r2, #48]	@ 0x30
 8001024:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <SPI_MspInit+0x6c>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001028:	f003 0320 	and.w	r3, r3, #32
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001030:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001034:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800103a:	2302      	movs	r3, #2
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800103e:	2301      	movs	r3, #1
 8001040:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001042:	2305      	movs	r3, #5
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4619      	mov	r1, r3
 800104c:	4804      	ldr	r0, [pc, #16]	@ (8001060 <SPI_MspInit+0x70>)
 800104e:	f001 fcd1 	bl	80029f4 <HAL_GPIO_Init>
}
 8001052:	bf00      	nop
 8001054:	3728      	adds	r7, #40	@ 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800
 8001060:	40021400 	.word	0x40021400

08001064 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800106a:	4b36      	ldr	r3, [pc, #216]	@ (8001144 <LCD_IO_Init+0xe0>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d164      	bne.n	800113c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001072:	4b34      	ldr	r3, [pc, #208]	@ (8001144 <LCD_IO_Init+0xe0>)
 8001074:	2201      	movs	r2, #1
 8001076:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	4b32      	ldr	r3, [pc, #200]	@ (8001148 <LCD_IO_Init+0xe4>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001080:	4a31      	ldr	r2, [pc, #196]	@ (8001148 <LCD_IO_Init+0xe4>)
 8001082:	f043 0308 	orr.w	r3, r3, #8
 8001086:	6313      	str	r3, [r2, #48]	@ 0x30
 8001088:	4b2f      	ldr	r3, [pc, #188]	@ (8001148 <LCD_IO_Init+0xe4>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001094:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001098:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	4619      	mov	r1, r3
 80010ac:	4827      	ldr	r0, [pc, #156]	@ (800114c <LCD_IO_Init+0xe8>)
 80010ae:	f001 fca1 	bl	80029f4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b24      	ldr	r3, [pc, #144]	@ (8001148 <LCD_IO_Init+0xe4>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a23      	ldr	r2, [pc, #140]	@ (8001148 <LCD_IO_Init+0xe4>)
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b21      	ldr	r3, [pc, #132]	@ (8001148 <LCD_IO_Init+0xe4>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80010ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80010dc:	2302      	movs	r3, #2
 80010de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	4619      	mov	r1, r3
 80010e6:	4819      	ldr	r0, [pc, #100]	@ (800114c <LCD_IO_Init+0xe8>)
 80010e8:	f001 fc84 	bl	80029f4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <LCD_IO_Init+0xe4>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f4:	4a14      	ldr	r2, [pc, #80]	@ (8001148 <LCD_IO_Init+0xe4>)
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fc:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <LCD_IO_Init+0xe4>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001108:	2304      	movs	r3, #4
 800110a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001114:	2302      	movs	r3, #2
 8001116:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	4619      	mov	r1, r3
 800111e:	480c      	ldr	r0, [pc, #48]	@ (8001150 <LCD_IO_Init+0xec>)
 8001120:	f001 fc68 	bl	80029f4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001124:	2200      	movs	r2, #0
 8001126:	2104      	movs	r1, #4
 8001128:	4809      	ldr	r0, [pc, #36]	@ (8001150 <LCD_IO_Init+0xec>)
 800112a:	f001 ff1b 	bl	8002f64 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800112e:	2201      	movs	r2, #1
 8001130:	2104      	movs	r1, #4
 8001132:	4807      	ldr	r0, [pc, #28]	@ (8001150 <LCD_IO_Init+0xec>)
 8001134:	f001 ff16 	bl	8002f64 <HAL_GPIO_WritePin>

    SPI_Init();
 8001138:	f7ff fef6 	bl	8000f28 <SPI_Init>
  }
}
 800113c:	bf00      	nop
 800113e:	3720      	adds	r7, #32
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20025a18 	.word	0x20025a18
 8001148:	40023800 	.word	0x40023800
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40020800 	.word	0x40020800

08001154 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001164:	480a      	ldr	r0, [pc, #40]	@ (8001190 <LCD_IO_WriteData+0x3c>)
 8001166:	f001 fefd 	bl	8002f64 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800116a:	2200      	movs	r2, #0
 800116c:	2104      	movs	r1, #4
 800116e:	4809      	ldr	r0, [pc, #36]	@ (8001194 <LCD_IO_WriteData+0x40>)
 8001170:	f001 fef8 	bl	8002f64 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff10 	bl	8000f9c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800117c:	2201      	movs	r2, #1
 800117e:	2104      	movs	r1, #4
 8001180:	4804      	ldr	r0, [pc, #16]	@ (8001194 <LCD_IO_WriteData+0x40>)
 8001182:	f001 feef 	bl	8002f64 <HAL_GPIO_WritePin>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40020c00 	.word	0x40020c00
 8001194:	40020800 	.word	0x40020800

08001198 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011a8:	480a      	ldr	r0, [pc, #40]	@ (80011d4 <LCD_IO_WriteReg+0x3c>)
 80011aa:	f001 fedb 	bl	8002f64 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80011ae:	2200      	movs	r2, #0
 80011b0:	2104      	movs	r1, #4
 80011b2:	4809      	ldr	r0, [pc, #36]	@ (80011d8 <LCD_IO_WriteReg+0x40>)
 80011b4:	f001 fed6 	bl	8002f64 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff feed 	bl	8000f9c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80011c2:	2201      	movs	r2, #1
 80011c4:	2104      	movs	r1, #4
 80011c6:	4804      	ldr	r0, [pc, #16]	@ (80011d8 <LCD_IO_WriteReg+0x40>)
 80011c8:	f001 fecc 	bl	8002f64 <HAL_GPIO_WritePin>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40020c00 	.word	0x40020c00
 80011d8:	40020800 	.word	0x40020800

080011dc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f001 fafb 	bl	80027e0 <HAL_Delay>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f6:	f001 fa81 	bl	80026fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011fa:	f000 f819 	bl	8001230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011fe:	f000 fa09 	bl	8001614 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001202:	f000 f8bf 	bl	8001384 <MX_LTDC_Init>
  MX_RNG_Init();
 8001206:	f000 f96f 	bl	80014e8 <MX_RNG_Init>
  MX_TIM2_Init();
 800120a:	f000 f9b7 	bl	800157c <MX_TIM2_Init>
  MX_SPI5_Init();
 800120e:	f000 f97f 	bl	8001510 <MX_SPI5_Init>
  MX_I2C3_Init();
 8001212:	f000 f877 	bl	8001304 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8001216:	f7ff f9b3 	bl	8000580 <ApplicationInit>
  LCD_Visual_Demo();
 800121a:	f7ff f9c9 	bl	80005b0 <LCD_Visual_Demo>
  HAL_Delay(5000);
 800121e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001222:	f001 fadd 	bl	80027e0 <HAL_Delay>
  /* USER CODE END 2 */
#if COMPILE_TOUCH_FUNCTIONS == 1 // This block will need to be deleted
  LCD_Touch_Polling_Demo(); // This function Will not return
 8001226:	f7ff f9c9 	bl	80005bc <LCD_Touch_Polling_Demo>
  //240x320
#endif
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800122a:	bf00      	nop
 800122c:	e7fd      	b.n	800122a <main+0x38>
	...

08001230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b094      	sub	sp, #80	@ 0x50
 8001234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	2230      	movs	r2, #48	@ 0x30
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f005 f820 	bl	8006284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	4b28      	ldr	r3, [pc, #160]	@ (80012fc <SystemClock_Config+0xcc>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	4a27      	ldr	r2, [pc, #156]	@ (80012fc <SystemClock_Config+0xcc>)
 800125e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001262:	6413      	str	r3, [r2, #64]	@ 0x40
 8001264:	4b25      	ldr	r3, [pc, #148]	@ (80012fc <SystemClock_Config+0xcc>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	4b22      	ldr	r3, [pc, #136]	@ (8001300 <SystemClock_Config+0xd0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a21      	ldr	r2, [pc, #132]	@ (8001300 <SystemClock_Config+0xd0>)
 800127a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <SystemClock_Config+0xd0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800128c:	2301      	movs	r3, #1
 800128e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001290:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001296:	2302      	movs	r3, #2
 8001298:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800129a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800129e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012a0:	2308      	movs	r3, #8
 80012a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012aa:	2302      	movs	r3, #2
 80012ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012ae:	2307      	movs	r3, #7
 80012b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b2:	f107 0320 	add.w	r3, r7, #32
 80012b6:	4618      	mov	r0, r3
 80012b8:	f003 f9b4 	bl	8004624 <HAL_RCC_OscConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012c2:	f000 fb55 	bl	8001970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c6:	230f      	movs	r3, #15
 80012c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ca:	2302      	movs	r3, #2
 80012cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	2105      	movs	r1, #5
 80012e4:	4618      	mov	r0, r3
 80012e6:	f003 fc15 	bl	8004b14 <HAL_RCC_ClockConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012f0:	f000 fb3e 	bl	8001970 <Error_Handler>
  }
}
 80012f4:	bf00      	nop
 80012f6:	3750      	adds	r7, #80	@ 0x50
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40023800 	.word	0x40023800
 8001300:	40007000 	.word	0x40007000

08001304 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001308:	4b1b      	ldr	r3, [pc, #108]	@ (8001378 <MX_I2C3_Init+0x74>)
 800130a:	4a1c      	ldr	r2, [pc, #112]	@ (800137c <MX_I2C3_Init+0x78>)
 800130c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800130e:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <MX_I2C3_Init+0x74>)
 8001310:	4a1b      	ldr	r2, [pc, #108]	@ (8001380 <MX_I2C3_Init+0x7c>)
 8001312:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001314:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <MX_I2C3_Init+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800131a:	4b17      	ldr	r3, [pc, #92]	@ (8001378 <MX_I2C3_Init+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001320:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <MX_I2C3_Init+0x74>)
 8001322:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001326:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001328:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <MX_I2C3_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800132e:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <MX_I2C3_Init+0x74>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001334:	4b10      	ldr	r3, [pc, #64]	@ (8001378 <MX_I2C3_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800133a:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <MX_I2C3_Init+0x74>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001340:	480d      	ldr	r0, [pc, #52]	@ (8001378 <MX_I2C3_Init+0x74>)
 8001342:	f001 fe29 	bl	8002f98 <HAL_I2C_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800134c:	f000 fb10 	bl	8001970 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001350:	2100      	movs	r1, #0
 8001352:	4809      	ldr	r0, [pc, #36]	@ (8001378 <MX_I2C3_Init+0x74>)
 8001354:	f002 fe44 	bl	8003fe0 <HAL_I2CEx_ConfigAnalogFilter>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800135e:	f000 fb07 	bl	8001970 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001362:	2100      	movs	r1, #0
 8001364:	4804      	ldr	r0, [pc, #16]	@ (8001378 <MX_I2C3_Init+0x74>)
 8001366:	f002 fe77 	bl	8004058 <HAL_I2CEx_ConfigDigitalFilter>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001370:	f000 fafe 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20025a1c 	.word	0x20025a1c
 800137c:	40005c00 	.word	0x40005c00
 8001380:	000186a0 	.word	0x000186a0

08001384 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b09a      	sub	sp, #104	@ 0x68
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800138a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800138e:	2234      	movs	r2, #52	@ 0x34
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f004 ff76 	bl	8006284 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001398:	463b      	mov	r3, r7
 800139a:	2234      	movs	r2, #52	@ 0x34
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f004 ff70 	bl	8006284 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80013a4:	4b4e      	ldr	r3, [pc, #312]	@ (80014e0 <MX_LTDC_Init+0x15c>)
 80013a6:	4a4f      	ldr	r2, [pc, #316]	@ (80014e4 <MX_LTDC_Init+0x160>)
 80013a8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80013aa:	4b4d      	ldr	r3, [pc, #308]	@ (80014e0 <MX_LTDC_Init+0x15c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80013b0:	4b4b      	ldr	r3, [pc, #300]	@ (80014e0 <MX_LTDC_Init+0x15c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80013b6:	4b4a      	ldr	r3, [pc, #296]	@ (80014e0 <MX_LTDC_Init+0x15c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80013bc:	4b48      	ldr	r3, [pc, #288]	@ (80014e0 <MX_LTDC_Init+0x15c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80013c2:	4b47      	ldr	r3, [pc, #284]	@ (80014e0 <MX_LTDC_Init+0x15c>)
 80013c4:	2207      	movs	r2, #7
 80013c6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80013c8:	4b45      	ldr	r3, [pc, #276]	@ (80014e0 <MX_LTDC_Init+0x15c>)
 80013ca:	2203      	movs	r2, #3
 80013cc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80013ce:	4b44      	ldr	r3, [pc, #272]	@ (80014e0 <MX_LTDC_Init+0x15c>)
 80013d0:	220e      	movs	r2, #14
 80013d2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80013d4:	4b42      	ldr	r3, [pc, #264]	@ (80014e0 <MX_LTDC_Init+0x15c>)
 80013d6:	2205      	movs	r2, #5
 80013d8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80013da:	4b41      	ldr	r3, [pc, #260]	@ (80014e0 <MX_LTDC_Init+0x15c>)
 80013dc:	f240 228e 	movw	r2, #654	@ 0x28e
 80013e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80013e2:	4b3f      	ldr	r3, [pc, #252]	@ (80014e0 <MX_LTDC_Init+0x15c>)
 80013e4:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80013e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80013ea:	4b3d      	ldr	r3, [pc, #244]	@ (80014e0 <MX_LTDC_Init+0x15c>)
 80013ec:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80013f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80013f2:	4b3b      	ldr	r3, [pc, #236]	@ (80014e0 <MX_LTDC_Init+0x15c>)
 80013f4:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80013f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80013fa:	4b39      	ldr	r3, [pc, #228]	@ (80014e0 <MX_LTDC_Init+0x15c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001402:	4b37      	ldr	r3, [pc, #220]	@ (80014e0 <MX_LTDC_Init+0x15c>)
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800140a:	4b35      	ldr	r3, [pc, #212]	@ (80014e0 <MX_LTDC_Init+0x15c>)
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001412:	4833      	ldr	r0, [pc, #204]	@ (80014e0 <MX_LTDC_Init+0x15c>)
 8001414:	f002 fe60 	bl	80040d8 <HAL_LTDC_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800141e:	f000 faa7 	bl	8001970 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001432:	2300      	movs	r3, #0
 8001434:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800143e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001442:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001444:	2305      	movs	r3, #5
 8001446:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001466:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800146a:	2200      	movs	r2, #0
 800146c:	4619      	mov	r1, r3
 800146e:	481c      	ldr	r0, [pc, #112]	@ (80014e0 <MX_LTDC_Init+0x15c>)
 8001470:	f002 ff02 	bl	8004278 <HAL_LTDC_ConfigLayer>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800147a:	f000 fa79 	bl	8001970 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800149a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800149e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80014a0:	2305      	movs	r3, #5
 80014a2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80014c2:	463b      	mov	r3, r7
 80014c4:	2201      	movs	r2, #1
 80014c6:	4619      	mov	r1, r3
 80014c8:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <MX_LTDC_Init+0x15c>)
 80014ca:	f002 fed5 	bl	8004278 <HAL_LTDC_ConfigLayer>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80014d4:	f000 fa4c 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	3768      	adds	r7, #104	@ 0x68
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20025a70 	.word	0x20025a70
 80014e4:	40016800 	.word	0x40016800

080014e8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <MX_RNG_Init+0x20>)
 80014ee:	4a07      	ldr	r2, [pc, #28]	@ (800150c <MX_RNG_Init+0x24>)
 80014f0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80014f2:	4805      	ldr	r0, [pc, #20]	@ (8001508 <MX_RNG_Init+0x20>)
 80014f4:	f003 feda 	bl	80052ac <HAL_RNG_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80014fe:	f000 fa37 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20025b18 	.word	0x20025b18
 800150c:	50060800 	.word	0x50060800

08001510 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001514:	4b17      	ldr	r3, [pc, #92]	@ (8001574 <MX_SPI5_Init+0x64>)
 8001516:	4a18      	ldr	r2, [pc, #96]	@ (8001578 <MX_SPI5_Init+0x68>)
 8001518:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800151a:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <MX_SPI5_Init+0x64>)
 800151c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001520:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001522:	4b14      	ldr	r3, [pc, #80]	@ (8001574 <MX_SPI5_Init+0x64>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001528:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <MX_SPI5_Init+0x64>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800152e:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <MX_SPI5_Init+0x64>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001534:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <MX_SPI5_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800153a:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <MX_SPI5_Init+0x64>)
 800153c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001540:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001542:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <MX_SPI5_Init+0x64>)
 8001544:	2200      	movs	r2, #0
 8001546:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001548:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <MX_SPI5_Init+0x64>)
 800154a:	2200      	movs	r2, #0
 800154c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <MX_SPI5_Init+0x64>)
 8001550:	2200      	movs	r2, #0
 8001552:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001554:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <MX_SPI5_Init+0x64>)
 8001556:	2200      	movs	r2, #0
 8001558:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <MX_SPI5_Init+0x64>)
 800155c:	220a      	movs	r2, #10
 800155e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001560:	4804      	ldr	r0, [pc, #16]	@ (8001574 <MX_SPI5_Init+0x64>)
 8001562:	f003 fecd 	bl	8005300 <HAL_SPI_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800156c:	f000 fa00 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20025b28 	.word	0x20025b28
 8001578:	40015000 	.word	0x40015000

0800157c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001582:	f107 0308 	add.w	r3, r7, #8
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001590:	463b      	mov	r3, r7
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001598:	4b1d      	ldr	r3, [pc, #116]	@ (8001610 <MX_TIM2_Init+0x94>)
 800159a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800159e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001610 <MX_TIM2_Init+0x94>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001610 <MX_TIM2_Init+0x94>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015ac:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <MX_TIM2_Init+0x94>)
 80015ae:	f04f 32ff 	mov.w	r2, #4294967295
 80015b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b4:	4b16      	ldr	r3, [pc, #88]	@ (8001610 <MX_TIM2_Init+0x94>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ba:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <MX_TIM2_Init+0x94>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015c0:	4813      	ldr	r0, [pc, #76]	@ (8001610 <MX_TIM2_Init+0x94>)
 80015c2:	f004 f97d 	bl	80058c0 <HAL_TIM_Base_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015cc:	f000 f9d0 	bl	8001970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	4619      	mov	r1, r3
 80015dc:	480c      	ldr	r0, [pc, #48]	@ (8001610 <MX_TIM2_Init+0x94>)
 80015de:	f004 f9be 	bl	800595e <HAL_TIM_ConfigClockSource>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015e8:	f000 f9c2 	bl	8001970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015f4:	463b      	mov	r3, r7
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	@ (8001610 <MX_TIM2_Init+0x94>)
 80015fa:	f004 fbbd 	bl	8005d78 <HAL_TIMEx_MasterConfigSynchronization>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001604:	f000 f9b4 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20025b80 	.word	0x20025b80

08001614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08e      	sub	sp, #56	@ 0x38
 8001618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
 8001628:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
 800162e:	4bb2      	ldr	r3, [pc, #712]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4ab1      	ldr	r2, [pc, #708]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 8001634:	f043 0304 	orr.w	r3, r3, #4
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4baf      	ldr	r3, [pc, #700]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	623b      	str	r3, [r7, #32]
 8001644:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
 800164a:	4bab      	ldr	r3, [pc, #684]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	4aaa      	ldr	r2, [pc, #680]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 8001650:	f043 0320 	orr.w	r3, r3, #32
 8001654:	6313      	str	r3, [r2, #48]	@ 0x30
 8001656:	4ba8      	ldr	r3, [pc, #672]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	f003 0320 	and.w	r3, r3, #32
 800165e:	61fb      	str	r3, [r7, #28]
 8001660:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	4ba4      	ldr	r3, [pc, #656]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4aa3      	ldr	r2, [pc, #652]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 800166c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4ba1      	ldr	r3, [pc, #644]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800167a:	61bb      	str	r3, [r7, #24]
 800167c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	4b9d      	ldr	r3, [pc, #628]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a9c      	ldr	r2, [pc, #624]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b9a      	ldr	r3, [pc, #616]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b96      	ldr	r3, [pc, #600]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	4a95      	ldr	r2, [pc, #596]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016aa:	4b93      	ldr	r3, [pc, #588]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	4b8f      	ldr	r3, [pc, #572]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	4a8e      	ldr	r2, [pc, #568]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 80016c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c6:	4b8c      	ldr	r3, [pc, #560]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	4b88      	ldr	r3, [pc, #544]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	4a87      	ldr	r2, [pc, #540]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 80016dc:	f043 0310 	orr.w	r3, r3, #16
 80016e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e2:	4b85      	ldr	r3, [pc, #532]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	4b81      	ldr	r3, [pc, #516]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	4a80      	ldr	r2, [pc, #512]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fe:	4b7e      	ldr	r3, [pc, #504]	@ (80018f8 <MX_GPIO_Init+0x2e4>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	2116      	movs	r1, #22
 800170e:	487b      	ldr	r0, [pc, #492]	@ (80018fc <MX_GPIO_Init+0x2e8>)
 8001710:	f001 fc28 	bl	8002f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	2180      	movs	r1, #128	@ 0x80
 8001718:	4879      	ldr	r0, [pc, #484]	@ (8001900 <MX_GPIO_Init+0x2ec>)
 800171a:	f001 fc23 	bl	8002f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001724:	4877      	ldr	r0, [pc, #476]	@ (8001904 <MX_GPIO_Init+0x2f0>)
 8001726:	f001 fc1d 	bl	8002f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001730:	4875      	ldr	r0, [pc, #468]	@ (8001908 <MX_GPIO_Init+0x2f4>)
 8001732:	f001 fc17 	bl	8002f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001736:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001744:	2303      	movs	r3, #3
 8001746:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001748:	230c      	movs	r3, #12
 800174a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800174c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001750:	4619      	mov	r1, r3
 8001752:	486e      	ldr	r0, [pc, #440]	@ (800190c <MX_GPIO_Init+0x2f8>)
 8001754:	f001 f94e 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001758:	2301      	movs	r3, #1
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001768:	230c      	movs	r3, #12
 800176a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800176c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001770:	4619      	mov	r1, r3
 8001772:	4862      	ldr	r0, [pc, #392]	@ (80018fc <MX_GPIO_Init+0x2e8>)
 8001774:	f001 f93e 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001778:	2316      	movs	r3, #22
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001788:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800178c:	4619      	mov	r1, r3
 800178e:	485b      	ldr	r0, [pc, #364]	@ (80018fc <MX_GPIO_Init+0x2e8>)
 8001790:	f001 f930 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001794:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800179a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800179e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a8:	4619      	mov	r1, r3
 80017aa:	4855      	ldr	r0, [pc, #340]	@ (8001900 <MX_GPIO_Init+0x2ec>)
 80017ac:	f001 f922 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80017b0:	2380      	movs	r3, #128	@ 0x80
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80017c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c4:	4619      	mov	r1, r3
 80017c6:	484e      	ldr	r0, [pc, #312]	@ (8001900 <MX_GPIO_Init+0x2ec>)
 80017c8:	f001 f914 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80017cc:	2320      	movs	r3, #32
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017d0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80017d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80017da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017de:	4619      	mov	r1, r3
 80017e0:	4846      	ldr	r0, [pc, #280]	@ (80018fc <MX_GPIO_Init+0x2e8>)
 80017e2:	f001 f907 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80017e6:	2304      	movs	r3, #4
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f6:	4619      	mov	r1, r3
 80017f8:	4845      	ldr	r0, [pc, #276]	@ (8001910 <MX_GPIO_Init+0x2fc>)
 80017fa:	f001 f8fb 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80017fe:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001810:	230c      	movs	r3, #12
 8001812:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001814:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001818:	4619      	mov	r1, r3
 800181a:	483b      	ldr	r0, [pc, #236]	@ (8001908 <MX_GPIO_Init+0x2f4>)
 800181c:	f001 f8ea 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001820:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182e:	2303      	movs	r3, #3
 8001830:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001832:	230c      	movs	r3, #12
 8001834:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800183a:	4619      	mov	r1, r3
 800183c:	4835      	ldr	r0, [pc, #212]	@ (8001914 <MX_GPIO_Init+0x300>)
 800183e:	f001 f8d9 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001842:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001846:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001854:	230c      	movs	r3, #12
 8001856:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800185c:	4619      	mov	r1, r3
 800185e:	482c      	ldr	r0, [pc, #176]	@ (8001910 <MX_GPIO_Init+0x2fc>)
 8001860:	f001 f8c8 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001864:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186a:	2300      	movs	r3, #0
 800186c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001876:	4619      	mov	r1, r3
 8001878:	4825      	ldr	r0, [pc, #148]	@ (8001910 <MX_GPIO_Init+0x2fc>)
 800187a:	f001 f8bb 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800187e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001890:	230c      	movs	r3, #12
 8001892:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001898:	4619      	mov	r1, r3
 800189a:	481a      	ldr	r0, [pc, #104]	@ (8001904 <MX_GPIO_Init+0x2f0>)
 800189c:	f001 f8aa 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80018a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b2:	4619      	mov	r1, r3
 80018b4:	4813      	ldr	r0, [pc, #76]	@ (8001904 <MX_GPIO_Init+0x2f0>)
 80018b6:	f001 f89d 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80018ba:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018d0:	4619      	mov	r1, r3
 80018d2:	480c      	ldr	r0, [pc, #48]	@ (8001904 <MX_GPIO_Init+0x2f0>)
 80018d4:	f001 f88e 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80018d8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018ea:	2307      	movs	r3, #7
 80018ec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f2:	4619      	mov	r1, r3
 80018f4:	e010      	b.n	8001918 <MX_GPIO_Init+0x304>
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020800 	.word	0x40020800
 8001900:	40020000 	.word	0x40020000
 8001904:	40020c00 	.word	0x40020c00
 8001908:	40021800 	.word	0x40021800
 800190c:	40021400 	.word	0x40021400
 8001910:	40020400 	.word	0x40020400
 8001914:	40021000 	.word	0x40021000
 8001918:	4812      	ldr	r0, [pc, #72]	@ (8001964 <MX_GPIO_Init+0x350>)
 800191a:	f001 f86b 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800191e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001922:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001924:	2301      	movs	r3, #1
 8001926:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001934:	4619      	mov	r1, r3
 8001936:	480c      	ldr	r0, [pc, #48]	@ (8001968 <MX_GPIO_Init+0x354>)
 8001938:	f001 f85c 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800193c:	2360      	movs	r3, #96	@ 0x60
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800194c:	230c      	movs	r3, #12
 800194e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001954:	4619      	mov	r1, r3
 8001956:	4805      	ldr	r0, [pc, #20]	@ (800196c <MX_GPIO_Init+0x358>)
 8001958:	f001 f84c 	bl	80029f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800195c:	bf00      	nop
 800195e:	3738      	adds	r7, #56	@ 0x38
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020000 	.word	0x40020000
 8001968:	40021800 	.word	0x40021800
 800196c:	40020400 	.word	0x40020400

08001970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001974:	b672      	cpsid	i
}
 8001976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <Error_Handler+0x8>

0800197c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <HAL_MspInit+0x4c>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198a:	4a0f      	ldr	r2, [pc, #60]	@ (80019c8 <HAL_MspInit+0x4c>)
 800198c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001990:	6453      	str	r3, [r2, #68]	@ 0x44
 8001992:	4b0d      	ldr	r3, [pc, #52]	@ (80019c8 <HAL_MspInit+0x4c>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	603b      	str	r3, [r7, #0]
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <HAL_MspInit+0x4c>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	4a08      	ldr	r2, [pc, #32]	@ (80019c8 <HAL_MspInit+0x4c>)
 80019a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ae:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <HAL_MspInit+0x4c>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019ba:	2007      	movs	r0, #7
 80019bc:	f000 ffe6 	bl	800298c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800

080019cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	@ 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a29      	ldr	r2, [pc, #164]	@ (8001a90 <HAL_I2C_MspInit+0xc4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d14b      	bne.n	8001a86 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	4b28      	ldr	r3, [pc, #160]	@ (8001a94 <HAL_I2C_MspInit+0xc8>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	4a27      	ldr	r2, [pc, #156]	@ (8001a94 <HAL_I2C_MspInit+0xc8>)
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fe:	4b25      	ldr	r3, [pc, #148]	@ (8001a94 <HAL_I2C_MspInit+0xc8>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <HAL_I2C_MspInit+0xc8>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	4a20      	ldr	r2, [pc, #128]	@ (8001a94 <HAL_I2C_MspInit+0xc8>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a94 <HAL_I2C_MspInit+0xc8>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001a26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a2c:	2312      	movs	r3, #18
 8001a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	4815      	ldr	r0, [pc, #84]	@ (8001a98 <HAL_I2C_MspInit+0xcc>)
 8001a44:	f000 ffd6 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001a48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a4e:	2312      	movs	r3, #18
 8001a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	480d      	ldr	r0, [pc, #52]	@ (8001a9c <HAL_I2C_MspInit+0xd0>)
 8001a66:	f000 ffc5 	bl	80029f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <HAL_I2C_MspInit+0xc8>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	4a08      	ldr	r2, [pc, #32]	@ (8001a94 <HAL_I2C_MspInit+0xc8>)
 8001a74:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a7a:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_I2C_MspInit+0xc8>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	@ 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40005c00 	.word	0x40005c00
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020800 	.word	0x40020800
 8001a9c:	40020000 	.word	0x40020000

08001aa0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b09a      	sub	sp, #104	@ 0x68
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001abc:	2230      	movs	r2, #48	@ 0x30
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f004 fbdf 	bl	8006284 <memset>
  if(hltdc->Instance==LTDC)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a81      	ldr	r2, [pc, #516]	@ (8001cd0 <HAL_LTDC_MspInit+0x230>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	f040 80fb 	bne.w	8001cc8 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001ad2:	2308      	movs	r3, #8
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8001ad6:	23c8      	movs	r3, #200	@ 0xc8
 8001ad8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001ada:	2302      	movs	r3, #2
 8001adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8001ade:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ae4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f003 fa1f 	bl	8004f2c <HAL_RCCEx_PeriphCLKConfig>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001af4:	f7ff ff3c 	bl	8001970 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001af8:	2300      	movs	r3, #0
 8001afa:	623b      	str	r3, [r7, #32]
 8001afc:	4b75      	ldr	r3, [pc, #468]	@ (8001cd4 <HAL_LTDC_MspInit+0x234>)
 8001afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b00:	4a74      	ldr	r2, [pc, #464]	@ (8001cd4 <HAL_LTDC_MspInit+0x234>)
 8001b02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001b06:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b08:	4b72      	ldr	r3, [pc, #456]	@ (8001cd4 <HAL_LTDC_MspInit+0x234>)
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b10:	623b      	str	r3, [r7, #32]
 8001b12:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
 8001b18:	4b6e      	ldr	r3, [pc, #440]	@ (8001cd4 <HAL_LTDC_MspInit+0x234>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1c:	4a6d      	ldr	r2, [pc, #436]	@ (8001cd4 <HAL_LTDC_MspInit+0x234>)
 8001b1e:	f043 0320 	orr.w	r3, r3, #32
 8001b22:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b24:	4b6b      	ldr	r3, [pc, #428]	@ (8001cd4 <HAL_LTDC_MspInit+0x234>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b28:	f003 0320 	and.w	r3, r3, #32
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	2300      	movs	r3, #0
 8001b32:	61bb      	str	r3, [r7, #24]
 8001b34:	4b67      	ldr	r3, [pc, #412]	@ (8001cd4 <HAL_LTDC_MspInit+0x234>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b38:	4a66      	ldr	r2, [pc, #408]	@ (8001cd4 <HAL_LTDC_MspInit+0x234>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b40:	4b64      	ldr	r3, [pc, #400]	@ (8001cd4 <HAL_LTDC_MspInit+0x234>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	61bb      	str	r3, [r7, #24]
 8001b4a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	4b60      	ldr	r3, [pc, #384]	@ (8001cd4 <HAL_LTDC_MspInit+0x234>)
 8001b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b54:	4a5f      	ldr	r2, [pc, #380]	@ (8001cd4 <HAL_LTDC_MspInit+0x234>)
 8001b56:	f043 0302 	orr.w	r3, r3, #2
 8001b5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5c:	4b5d      	ldr	r3, [pc, #372]	@ (8001cd4 <HAL_LTDC_MspInit+0x234>)
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	4b59      	ldr	r3, [pc, #356]	@ (8001cd4 <HAL_LTDC_MspInit+0x234>)
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b70:	4a58      	ldr	r2, [pc, #352]	@ (8001cd4 <HAL_LTDC_MspInit+0x234>)
 8001b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b76:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b78:	4b56      	ldr	r3, [pc, #344]	@ (8001cd4 <HAL_LTDC_MspInit+0x234>)
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	4b52      	ldr	r3, [pc, #328]	@ (8001cd4 <HAL_LTDC_MspInit+0x234>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8c:	4a51      	ldr	r2, [pc, #324]	@ (8001cd4 <HAL_LTDC_MspInit+0x234>)
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b94:	4b4f      	ldr	r3, [pc, #316]	@ (8001cd4 <HAL_LTDC_MspInit+0x234>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	4b4b      	ldr	r3, [pc, #300]	@ (8001cd4 <HAL_LTDC_MspInit+0x234>)
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba8:	4a4a      	ldr	r2, [pc, #296]	@ (8001cd4 <HAL_LTDC_MspInit+0x234>)
 8001baa:	f043 0308 	orr.w	r3, r3, #8
 8001bae:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb0:	4b48      	ldr	r3, [pc, #288]	@ (8001cd4 <HAL_LTDC_MspInit+0x234>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001bbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bc0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bce:	230e      	movs	r3, #14
 8001bd0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001bd2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	483f      	ldr	r0, [pc, #252]	@ (8001cd8 <HAL_LTDC_MspInit+0x238>)
 8001bda:	f000 ff0b 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001bde:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001be2:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bf0:	230e      	movs	r3, #14
 8001bf2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4838      	ldr	r0, [pc, #224]	@ (8001cdc <HAL_LTDC_MspInit+0x23c>)
 8001bfc:	f000 fefa 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001c00:	2303      	movs	r3, #3
 8001c02:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c10:	2309      	movs	r3, #9
 8001c12:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c14:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4831      	ldr	r0, [pc, #196]	@ (8001ce0 <HAL_LTDC_MspInit+0x240>)
 8001c1c:	f000 feea 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001c20:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001c24:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c32:	230e      	movs	r3, #14
 8001c34:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c36:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4828      	ldr	r0, [pc, #160]	@ (8001ce0 <HAL_LTDC_MspInit+0x240>)
 8001c3e:	f000 fed9 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001c42:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001c46:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c54:	230e      	movs	r3, #14
 8001c56:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c58:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4821      	ldr	r0, [pc, #132]	@ (8001ce4 <HAL_LTDC_MspInit+0x244>)
 8001c60:	f000 fec8 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001c64:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001c68:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c76:	230e      	movs	r3, #14
 8001c78:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4819      	ldr	r0, [pc, #100]	@ (8001ce8 <HAL_LTDC_MspInit+0x248>)
 8001c82:	f000 feb7 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001c86:	2348      	movs	r3, #72	@ 0x48
 8001c88:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c96:	230e      	movs	r3, #14
 8001c98:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c9a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4812      	ldr	r0, [pc, #72]	@ (8001cec <HAL_LTDC_MspInit+0x24c>)
 8001ca2:	f000 fea7 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001ca6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001caa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001cb8:	2309      	movs	r3, #9
 8001cba:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cbc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4808      	ldr	r0, [pc, #32]	@ (8001ce4 <HAL_LTDC_MspInit+0x244>)
 8001cc4:	f000 fe96 	bl	80029f4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001cc8:	bf00      	nop
 8001cca:	3768      	adds	r7, #104	@ 0x68
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40016800 	.word	0x40016800
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40021400 	.word	0x40021400
 8001cdc:	40020000 	.word	0x40020000
 8001ce0:	40020400 	.word	0x40020400
 8001ce4:	40021800 	.word	0x40021800
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	40020c00 	.word	0x40020c00

08001cf0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8001d2c <HAL_RNG_MspInit+0x3c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d10d      	bne.n	8001d1e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b0a      	ldr	r3, [pc, #40]	@ (8001d30 <HAL_RNG_MspInit+0x40>)
 8001d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d0a:	4a09      	ldr	r2, [pc, #36]	@ (8001d30 <HAL_RNG_MspInit+0x40>)
 8001d0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d10:	6353      	str	r3, [r2, #52]	@ 0x34
 8001d12:	4b07      	ldr	r3, [pc, #28]	@ (8001d30 <HAL_RNG_MspInit+0x40>)
 8001d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	50060800 	.word	0x50060800
 8001d30:	40023800 	.word	0x40023800

08001d34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	@ 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a19      	ldr	r2, [pc, #100]	@ (8001db8 <HAL_SPI_MspInit+0x84>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d12c      	bne.n	8001db0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b18      	ldr	r3, [pc, #96]	@ (8001dbc <HAL_SPI_MspInit+0x88>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	4a17      	ldr	r2, [pc, #92]	@ (8001dbc <HAL_SPI_MspInit+0x88>)
 8001d60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d66:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <HAL_SPI_MspInit+0x88>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <HAL_SPI_MspInit+0x88>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	4a10      	ldr	r2, [pc, #64]	@ (8001dbc <HAL_SPI_MspInit+0x88>)
 8001d7c:	f043 0320 	orr.w	r3, r3, #32
 8001d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d82:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <HAL_SPI_MspInit+0x88>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	f003 0320 	and.w	r3, r3, #32
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001d8e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001da0:	2305      	movs	r3, #5
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	4805      	ldr	r0, [pc, #20]	@ (8001dc0 <HAL_SPI_MspInit+0x8c>)
 8001dac:	f000 fe22 	bl	80029f4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001db0:	bf00      	nop
 8001db2:	3728      	adds	r7, #40	@ 0x28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40015000 	.word	0x40015000
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40021400 	.word	0x40021400

08001dc4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a08      	ldr	r2, [pc, #32]	@ (8001df4 <HAL_SPI_MspDeInit+0x30>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d10a      	bne.n	8001dec <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001dd6:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <HAL_SPI_MspDeInit+0x34>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dda:	4a07      	ldr	r2, [pc, #28]	@ (8001df8 <HAL_SPI_MspDeInit+0x34>)
 8001ddc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001de0:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001de2:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001de6:	4805      	ldr	r0, [pc, #20]	@ (8001dfc <HAL_SPI_MspDeInit+0x38>)
 8001de8:	f000 ffb0 	bl	8002d4c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40015000 	.word	0x40015000
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40021400 	.word	0x40021400

08001e00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e10:	d10d      	bne.n	8001e2e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <HAL_TIM_Base_MspInit+0x3c>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	4a08      	ldr	r2, [pc, #32]	@ (8001e3c <HAL_TIM_Base_MspInit+0x3c>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_TIM_Base_MspInit+0x3c>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800

08001e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <NMI_Handler+0x4>

08001e48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <HardFault_Handler+0x4>

08001e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <MemManage_Handler+0x4>

08001e58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <BusFault_Handler+0x4>

08001e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <UsageFault_Handler+0x4>

08001e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e96:	f000 fc83 	bl	80027a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8001ea4:	f000 f9ce 	bl	8002244 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8001ea8:	f000 f98e 	bl	80021c8 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001eac:	2202      	movs	r2, #2
 8001eae:	2103      	movs	r1, #3
 8001eb0:	2082      	movs	r0, #130	@ 0x82
 8001eb2:	f000 fa1b 	bl	80022ec <I2C3_Write>
    HAL_Delay(5);
 8001eb6:	2005      	movs	r0, #5
 8001eb8:	f000 fc92 	bl	80027e0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2103      	movs	r1, #3
 8001ec0:	2082      	movs	r0, #130	@ 0x82
 8001ec2:	f000 fa13 	bl	80022ec <I2C3_Write>
    HAL_Delay(2);
 8001ec6:	2002      	movs	r0, #2
 8001ec8:	f000 fc8a 	bl	80027e0 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8001ecc:	1cba      	adds	r2, r7, #2
 8001ece:	2302      	movs	r3, #2
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	2082      	movs	r0, #130	@ 0x82
 8001ed4:	f000 fa5a 	bl	800238c <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8001ed8:	887b      	ldrh	r3, [r7, #2]
 8001eda:	021b      	lsls	r3, r3, #8
 8001edc:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8001ede:	887b      	ldrh	r3, [r7, #2]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	f640 0211 	movw	r2, #2065	@ 0x811
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d001      	beq.n	8001ef8 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e075      	b.n	8001fe4 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001ef8:	2202      	movs	r2, #2
 8001efa:	2103      	movs	r1, #3
 8001efc:	2082      	movs	r0, #130	@ 0x82
 8001efe:	f000 f9f5 	bl	80022ec <I2C3_Write>
    HAL_Delay(5);
 8001f02:	2005      	movs	r0, #5
 8001f04:	f000 fc6c 	bl	80027e0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2103      	movs	r1, #3
 8001f0c:	2082      	movs	r0, #130	@ 0x82
 8001f0e:	f000 f9ed 	bl	80022ec <I2C3_Write>
    HAL_Delay(2);
 8001f12:	2002      	movs	r0, #2
 8001f14:	f000 fc64 	bl	80027e0 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8001f18:	2004      	movs	r0, #4
 8001f1a:	f000 f867 	bl	8001fec <STMPE811_Read>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8001f22:	797b      	ldrb	r3, [r7, #5]
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8001f2a:	797b      	ldrb	r3, [r7, #5]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	2104      	movs	r1, #4
 8001f30:	2082      	movs	r0, #130	@ 0x82
 8001f32:	f000 f9db 	bl	80022ec <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8001f36:	2004      	movs	r0, #4
 8001f38:	f000 f858 	bl	8001fec <STMPE811_Read>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8001f40:	797b      	ldrb	r3, [r7, #5]
 8001f42:	f023 0302 	bic.w	r3, r3, #2
 8001f46:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8001f48:	797b      	ldrb	r3, [r7, #5]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	2104      	movs	r1, #4
 8001f4e:	2082      	movs	r0, #130	@ 0x82
 8001f50:	f000 f9cc 	bl	80022ec <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8001f54:	2249      	movs	r2, #73	@ 0x49
 8001f56:	2120      	movs	r1, #32
 8001f58:	2082      	movs	r0, #130	@ 0x82
 8001f5a:	f000 f9c7 	bl	80022ec <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8001f5e:	2002      	movs	r0, #2
 8001f60:	f000 fc3e 	bl	80027e0 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8001f64:	2201      	movs	r2, #1
 8001f66:	2121      	movs	r1, #33	@ 0x21
 8001f68:	2082      	movs	r0, #130	@ 0x82
 8001f6a:	f000 f9bf 	bl	80022ec <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8001f6e:	2017      	movs	r0, #23
 8001f70:	f000 f83c 	bl	8001fec <STMPE811_Read>
 8001f74:	4603      	mov	r3, r0
 8001f76:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8001f78:	797b      	ldrb	r3, [r7, #5]
 8001f7a:	f043 031e 	orr.w	r3, r3, #30
 8001f7e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8001f80:	797b      	ldrb	r3, [r7, #5]
 8001f82:	461a      	mov	r2, r3
 8001f84:	2117      	movs	r1, #23
 8001f86:	2082      	movs	r0, #130	@ 0x82
 8001f88:	f000 f9b0 	bl	80022ec <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8001f8c:	229a      	movs	r2, #154	@ 0x9a
 8001f8e:	2141      	movs	r1, #65	@ 0x41
 8001f90:	2082      	movs	r0, #130	@ 0x82
 8001f92:	f000 f9ab 	bl	80022ec <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8001f96:	2201      	movs	r2, #1
 8001f98:	214a      	movs	r1, #74	@ 0x4a
 8001f9a:	2082      	movs	r0, #130	@ 0x82
 8001f9c:	f000 f9a6 	bl	80022ec <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	214b      	movs	r1, #75	@ 0x4b
 8001fa4:	2082      	movs	r0, #130	@ 0x82
 8001fa6:	f000 f9a1 	bl	80022ec <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8001faa:	2200      	movs	r2, #0
 8001fac:	214b      	movs	r1, #75	@ 0x4b
 8001fae:	2082      	movs	r0, #130	@ 0x82
 8001fb0:	f000 f99c 	bl	80022ec <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	2156      	movs	r1, #86	@ 0x56
 8001fb8:	2082      	movs	r0, #130	@ 0x82
 8001fba:	f000 f997 	bl	80022ec <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	2158      	movs	r1, #88	@ 0x58
 8001fc2:	2082      	movs	r0, #130	@ 0x82
 8001fc4:	f000 f992 	bl	80022ec <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8001fc8:	2203      	movs	r2, #3
 8001fca:	2140      	movs	r1, #64	@ 0x40
 8001fcc:	2082      	movs	r0, #130	@ 0x82
 8001fce:	f000 f98d 	bl	80022ec <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8001fd2:	22ff      	movs	r2, #255	@ 0xff
 8001fd4:	210b      	movs	r1, #11
 8001fd6:	2082      	movs	r0, #130	@ 0x82
 8001fd8:	f000 f988 	bl	80022ec <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8001fdc:	20c8      	movs	r0, #200	@ 0xc8
 8001fde:	f000 fbff 	bl	80027e0 <HAL_Delay>

    return STMPE811_State_Ok;
 8001fe2:	2302      	movs	r3, #2

}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8001ff6:	f107 020f 	add.w	r2, r7, #15
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	2082      	movs	r0, #130	@ 0x82
 8002000:	f000 f99e 	bl	8002340 <I2C3_Read>

    return readData;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	791a      	ldrb	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 800201e:	2040      	movs	r0, #64	@ 0x40
 8002020:	f7ff ffe4 	bl	8001fec <STMPE811_Read>
 8002024:	4603      	mov	r3, r0
 8002026:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202c:	2b00      	cmp	r3, #0
 800202e:	db0e      	blt.n	800204e <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002036:	2201      	movs	r2, #1
 8002038:	214b      	movs	r1, #75	@ 0x4b
 800203a:	2082      	movs	r0, #130	@ 0x82
 800203c:	f000 f956 	bl	80022ec <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002040:	2200      	movs	r2, #0
 8002042:	214b      	movs	r1, #75	@ 0x4b
 8002044:	2082      	movs	r0, #130	@ 0x82
 8002046:	f000 f951 	bl	80022ec <I2C3_Write>

        return STMPE811_State_Released;
 800204a:	2301      	movs	r3, #1
 800204c:	e0a7      	b.n	800219e <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	799b      	ldrb	r3, [r3, #6]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d117      	bne.n	8002086 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f9b8 	bl	80023d0 <TM_STMPE811_ReadX>
 8002060:	4603      	mov	r3, r0
 8002062:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002066:	b29a      	uxth	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	885b      	ldrh	r3, [r3, #2]
 8002070:	4618      	mov	r0, r3
 8002072:	f000 fa0b 	bl	800248c <TM_STMPE811_ReadY>
 8002076:	4603      	mov	r3, r0
 8002078:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800207c:	3301      	adds	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	805a      	strh	r2, [r3, #2]
 8002084:	e048      	b.n	8002118 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	799b      	ldrb	r3, [r3, #6]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d112      	bne.n	80020b4 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f99c 	bl	80023d0 <TM_STMPE811_ReadX>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	885b      	ldrh	r3, [r3, #2]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 f9f1 	bl	800248c <TM_STMPE811_ReadY>
 80020aa:	4603      	mov	r3, r0
 80020ac:	461a      	mov	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	805a      	strh	r2, [r3, #2]
 80020b2:	e031      	b.n	8002118 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	799b      	ldrb	r3, [r3, #6]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d115      	bne.n	80020e8 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	885b      	ldrh	r3, [r3, #2]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 f985 	bl	80023d0 <TM_STMPE811_ReadX>
 80020c6:	4603      	mov	r3, r0
 80020c8:	461a      	mov	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 f9da 	bl	800248c <TM_STMPE811_ReadY>
 80020d8:	4603      	mov	r3, r0
 80020da:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80020de:	3301      	adds	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	801a      	strh	r2, [r3, #0]
 80020e6:	e017      	b.n	8002118 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	799b      	ldrb	r3, [r3, #6]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d113      	bne.n	8002118 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 f96b 	bl	80023d0 <TM_STMPE811_ReadX>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002100:	b29a      	uxth	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f9be 	bl	800248c <TM_STMPE811_ReadY>
 8002110:	4603      	mov	r3, r0
 8002112:	461a      	mov	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002118:	2201      	movs	r2, #1
 800211a:	214b      	movs	r1, #75	@ 0x4b
 800211c:	2082      	movs	r0, #130	@ 0x82
 800211e:	f000 f8e5 	bl	80022ec <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002122:	2200      	movs	r2, #0
 8002124:	214b      	movs	r1, #75	@ 0x4b
 8002126:	2082      	movs	r0, #130	@ 0x82
 8002128:	f000 f8e0 	bl	80022ec <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	799b      	ldrb	r3, [r3, #6]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <STMPE811_ReadTouch+0x12e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	799b      	ldrb	r3, [r3, #6]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d115      	bne.n	8002168 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d027      	beq.n	8002194 <STMPE811_ReadTouch+0x186>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	2bee      	cmp	r3, #238	@ 0xee
 800214a:	d823      	bhi.n	8002194 <STMPE811_ReadTouch+0x186>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	885b      	ldrh	r3, [r3, #2]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d01f      	beq.n	8002194 <STMPE811_ReadTouch+0x186>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	885b      	ldrh	r3, [r3, #2]
 8002158:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 800215c:	d81a      	bhi.n	8002194 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002164:	2300      	movs	r3, #0
 8002166:	e01a      	b.n	800219e <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d012      	beq.n	8002196 <STMPE811_ReadTouch+0x188>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002178:	d80d      	bhi.n	8002196 <STMPE811_ReadTouch+0x188>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	885b      	ldrh	r3, [r3, #2]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d009      	beq.n	8002196 <STMPE811_ReadTouch+0x188>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	885b      	ldrh	r3, [r3, #2]
 8002186:	2bee      	cmp	r3, #238	@ 0xee
 8002188:	d805      	bhi.n	8002196 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002190:	2300      	movs	r3, #0
 8002192:	e004      	b.n	800219e <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002194:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 800219c:	2301      	movs	r3, #1
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80021ac:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <verifyHAL_I2C_IS_OKAY+0x1c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20025c1c 	.word	0x20025c1c

080021c8 <I2C3_Init>:

static void I2C3_Init()
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	603b      	str	r3, [r7, #0]
 80021d2:	4b18      	ldr	r3, [pc, #96]	@ (8002234 <I2C3_Init+0x6c>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	4a17      	ldr	r2, [pc, #92]	@ (8002234 <I2C3_Init+0x6c>)
 80021d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021de:	4b15      	ldr	r3, [pc, #84]	@ (8002234 <I2C3_Init+0x6c>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021e6:	603b      	str	r3, [r7, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80021ea:	4b13      	ldr	r3, [pc, #76]	@ (8002238 <I2C3_Init+0x70>)
 80021ec:	4a13      	ldr	r2, [pc, #76]	@ (800223c <I2C3_Init+0x74>)
 80021ee:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80021f0:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <I2C3_Init+0x70>)
 80021f2:	4a13      	ldr	r2, [pc, #76]	@ (8002240 <I2C3_Init+0x78>)
 80021f4:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021f6:	4b10      	ldr	r3, [pc, #64]	@ (8002238 <I2C3_Init+0x70>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80021fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <I2C3_Init+0x70>)
 80021fe:	2200      	movs	r2, #0
 8002200:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002202:	4b0d      	ldr	r3, [pc, #52]	@ (8002238 <I2C3_Init+0x70>)
 8002204:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002208:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800220a:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <I2C3_Init+0x70>)
 800220c:	2200      	movs	r2, #0
 800220e:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002210:	4b09      	ldr	r3, [pc, #36]	@ (8002238 <I2C3_Init+0x70>)
 8002212:	2200      	movs	r2, #0
 8002214:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002216:	4808      	ldr	r0, [pc, #32]	@ (8002238 <I2C3_Init+0x70>)
 8002218:	f000 febe 	bl	8002f98 <HAL_I2C_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002226:	bf00      	nop
 8002228:	e7fd      	b.n	8002226 <I2C3_Init+0x5e>
    }
    return;
 800222a:	bf00      	nop
}
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
 8002238:	20025bc8 	.word	0x20025bc8
 800223c:	40005c00 	.word	0x40005c00
 8002240:	000186a0 	.word	0x000186a0

08002244 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224a:	f107 030c 	add.w	r3, r7, #12
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	60da      	str	r2, [r3, #12]
 8002258:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	4b20      	ldr	r3, [pc, #128]	@ (80022e0 <I2C3_MspInit+0x9c>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	4a1f      	ldr	r2, [pc, #124]	@ (80022e0 <I2C3_MspInit+0x9c>)
 8002264:	f043 0304 	orr.w	r3, r3, #4
 8002268:	6313      	str	r3, [r2, #48]	@ 0x30
 800226a:	4b1d      	ldr	r3, [pc, #116]	@ (80022e0 <I2C3_MspInit+0x9c>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	4b19      	ldr	r3, [pc, #100]	@ (80022e0 <I2C3_MspInit+0x9c>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	4a18      	ldr	r2, [pc, #96]	@ (80022e0 <I2C3_MspInit+0x9c>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6313      	str	r3, [r2, #48]	@ 0x30
 8002286:	4b16      	ldr	r3, [pc, #88]	@ (80022e0 <I2C3_MspInit+0x9c>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002292:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002296:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002298:	2312      	movs	r3, #18
 800229a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80022a4:	2304      	movs	r3, #4
 80022a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	4619      	mov	r1, r3
 80022ae:	480d      	ldr	r0, [pc, #52]	@ (80022e4 <I2C3_MspInit+0xa0>)
 80022b0:	f000 fba0 	bl	80029f4 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80022b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ba:	2312      	movs	r3, #18
 80022bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80022c6:	2304      	movs	r3, #4
 80022c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80022ca:	f107 030c 	add.w	r3, r7, #12
 80022ce:	4619      	mov	r1, r3
 80022d0:	4805      	ldr	r0, [pc, #20]	@ (80022e8 <I2C3_MspInit+0xa4>)
 80022d2:	f000 fb8f 	bl	80029f4 <HAL_GPIO_Init>
    
}
 80022d6:	bf00      	nop
 80022d8:	3720      	adds	r7, #32
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40020800 	.word	0x40020800
 80022e8:	40020000 	.word	0x40020000

080022ec <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af04      	add	r7, sp, #16
 80022f2:	4603      	mov	r3, r0
 80022f4:	80fb      	strh	r3, [r7, #6]
 80022f6:	460b      	mov	r3, r1
 80022f8:	717b      	strb	r3, [r7, #5]
 80022fa:	4613      	mov	r3, r2
 80022fc:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80022fe:	793b      	ldrb	r3, [r7, #4]
 8002300:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002302:	797b      	ldrb	r3, [r7, #5]
 8002304:	b29a      	uxth	r2, r3
 8002306:	88f9      	ldrh	r1, [r7, #6]
 8002308:	4b0a      	ldr	r3, [pc, #40]	@ (8002334 <I2C3_Write+0x48>)
 800230a:	9302      	str	r3, [sp, #8]
 800230c:	2301      	movs	r3, #1
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	f107 030f 	add.w	r3, r7, #15
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	2301      	movs	r3, #1
 8002318:	4807      	ldr	r0, [pc, #28]	@ (8002338 <I2C3_Write+0x4c>)
 800231a:	f000 ff81 	bl	8003220 <HAL_I2C_Mem_Write>
 800231e:	4603      	mov	r3, r0
 8002320:	461a      	mov	r2, r3
 8002322:	4b06      	ldr	r3, [pc, #24]	@ (800233c <I2C3_Write+0x50>)
 8002324:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002326:	f7ff ff3f 	bl	80021a8 <verifyHAL_I2C_IS_OKAY>
}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	0003d090 	.word	0x0003d090
 8002338:	20025bc8 	.word	0x20025bc8
 800233c:	20025c1c 	.word	0x20025c1c

08002340 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af04      	add	r7, sp, #16
 8002346:	4603      	mov	r3, r0
 8002348:	603a      	str	r2, [r7, #0]
 800234a:	71fb      	strb	r3, [r7, #7]
 800234c:	460b      	mov	r3, r1
 800234e:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	b299      	uxth	r1, r3
 8002354:	79bb      	ldrb	r3, [r7, #6]
 8002356:	b29a      	uxth	r2, r3
 8002358:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <I2C3_Read+0x40>)
 800235a:	9302      	str	r3, [sp, #8]
 800235c:	2301      	movs	r3, #1
 800235e:	9301      	str	r3, [sp, #4]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	2301      	movs	r3, #1
 8002366:	4807      	ldr	r0, [pc, #28]	@ (8002384 <I2C3_Read+0x44>)
 8002368:	f001 f854 	bl	8003414 <HAL_I2C_Mem_Read>
 800236c:	4603      	mov	r3, r0
 800236e:	461a      	mov	r2, r3
 8002370:	4b05      	ldr	r3, [pc, #20]	@ (8002388 <I2C3_Read+0x48>)
 8002372:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002374:	f7ff ff18 	bl	80021a8 <verifyHAL_I2C_IS_OKAY>
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	0003d090 	.word	0x0003d090
 8002384:	20025bc8 	.word	0x20025bc8
 8002388:	20025c1c 	.word	0x20025c1c

0800238c <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af04      	add	r7, sp, #16
 8002392:	603a      	str	r2, [r7, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
 800239a:	460b      	mov	r3, r1
 800239c:	71bb      	strb	r3, [r7, #6]
 800239e:	4613      	mov	r3, r2
 80023a0:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	b299      	uxth	r1, r3
 80023a6:	79bb      	ldrb	r3, [r7, #6]
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	4b07      	ldr	r3, [pc, #28]	@ (80023c8 <I2C3_MulitByteRead+0x3c>)
 80023ac:	9302      	str	r3, [sp, #8]
 80023ae:	88bb      	ldrh	r3, [r7, #4]
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2301      	movs	r3, #1
 80023b8:	4804      	ldr	r0, [pc, #16]	@ (80023cc <I2C3_MulitByteRead+0x40>)
 80023ba:	f001 f82b 	bl	8003414 <HAL_I2C_Mem_Read>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	0003d090 	.word	0x0003d090
 80023cc:	20025bc8 	.word	0x20025bc8

080023d0 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80023da:	204d      	movs	r0, #77	@ 0x4d
 80023dc:	f7ff fe06 	bl	8001fec <STMPE811_Read>
 80023e0:	4603      	mov	r3, r0
 80023e2:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80023e4:	204e      	movs	r0, #78	@ 0x4e
 80023e6:	f7ff fe01 	bl	8001fec <STMPE811_Read>
 80023ea:	4603      	mov	r3, r0
 80023ec:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80023ee:	7a7b      	ldrb	r3, [r7, #9]
 80023f0:	021b      	lsls	r3, r3, #8
 80023f2:	b21a      	sxth	r2, r3
 80023f4:	7a3b      	ldrb	r3, [r7, #8]
 80023f6:	b21b      	sxth	r3, r3
 80023f8:	4313      	orrs	r3, r2
 80023fa:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80023fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002400:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002404:	4293      	cmp	r3, r2
 8002406:	dc06      	bgt.n	8002416 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002408:	89fb      	ldrh	r3, [r7, #14]
 800240a:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800240e:	330c      	adds	r3, #12
 8002410:	b29b      	uxth	r3, r3
 8002412:	81fb      	strh	r3, [r7, #14]
 8002414:	e005      	b.n	8002422 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002416:	89fb      	ldrh	r3, [r7, #14]
 8002418:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800241c:	3308      	adds	r3, #8
 800241e:	b29b      	uxth	r3, r3
 8002420:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002422:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002426:	4a18      	ldr	r2, [pc, #96]	@ (8002488 <TM_STMPE811_ReadX+0xb8>)
 8002428:	fb82 1203 	smull	r1, r2, r2, r3
 800242c:	441a      	add	r2, r3
 800242e:	10d2      	asrs	r2, r2, #3
 8002430:	17db      	asrs	r3, r3, #31
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002436:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800243a:	2bef      	cmp	r3, #239	@ 0xef
 800243c:	dd02      	ble.n	8002444 <TM_STMPE811_ReadX+0x74>
        val = 239;
 800243e:	23ef      	movs	r3, #239	@ 0xef
 8002440:	81fb      	strh	r3, [r7, #14]
 8002442:	e005      	b.n	8002450 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002444:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002448:	2b00      	cmp	r3, #0
 800244a:	da01      	bge.n	8002450 <TM_STMPE811_ReadX+0x80>
        val = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002450:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	429a      	cmp	r2, r3
 8002458:	dd05      	ble.n	8002466 <TM_STMPE811_ReadX+0x96>
 800245a:	89fa      	ldrh	r2, [r7, #14]
 800245c:	88fb      	ldrh	r3, [r7, #6]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	b29b      	uxth	r3, r3
 8002462:	b21b      	sxth	r3, r3
 8002464:	e004      	b.n	8002470 <TM_STMPE811_ReadX+0xa0>
 8002466:	89fb      	ldrh	r3, [r7, #14]
 8002468:	88fa      	ldrh	r2, [r7, #6]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	b29b      	uxth	r3, r3
 800246e:	b21b      	sxth	r3, r3
 8002470:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002472:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002476:	2b04      	cmp	r3, #4
 8002478:	dd01      	ble.n	800247e <TM_STMPE811_ReadX+0xae>
        return val;
 800247a:	89fb      	ldrh	r3, [r7, #14]
 800247c:	e000      	b.n	8002480 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 800247e:	88fb      	ldrh	r3, [r7, #6]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	88888889 	.word	0x88888889

0800248c <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002496:	204f      	movs	r0, #79	@ 0x4f
 8002498:	f7ff fda8 	bl	8001fec <STMPE811_Read>
 800249c:	4603      	mov	r3, r0
 800249e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80024a0:	2050      	movs	r0, #80	@ 0x50
 80024a2:	f7ff fda3 	bl	8001fec <STMPE811_Read>
 80024a6:	4603      	mov	r3, r0
 80024a8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80024aa:	7a7b      	ldrb	r3, [r7, #9]
 80024ac:	021b      	lsls	r3, r3, #8
 80024ae:	b21a      	sxth	r2, r3
 80024b0:	7a3b      	ldrb	r3, [r7, #8]
 80024b2:	b21b      	sxth	r3, r3
 80024b4:	4313      	orrs	r3, r2
 80024b6:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80024b8:	89fb      	ldrh	r3, [r7, #14]
 80024ba:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80024be:	b29b      	uxth	r3, r3
 80024c0:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80024c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024c6:	4a19      	ldr	r2, [pc, #100]	@ (800252c <TM_STMPE811_ReadY+0xa0>)
 80024c8:	fb82 1203 	smull	r1, r2, r2, r3
 80024cc:	1052      	asrs	r2, r2, #1
 80024ce:	17db      	asrs	r3, r3, #31
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80024d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	dc02      	bgt.n	80024e2 <TM_STMPE811_ReadY+0x56>
        val = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	81fb      	strh	r3, [r7, #14]
 80024e0:	e007      	b.n	80024f2 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 80024e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024e6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80024ea:	db02      	blt.n	80024f2 <TM_STMPE811_ReadY+0x66>
        val = 319;
 80024ec:	f240 133f 	movw	r3, #319	@ 0x13f
 80024f0:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80024f2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	dd05      	ble.n	8002508 <TM_STMPE811_ReadY+0x7c>
 80024fc:	89fa      	ldrh	r2, [r7, #14]
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	b29b      	uxth	r3, r3
 8002504:	b21b      	sxth	r3, r3
 8002506:	e004      	b.n	8002512 <TM_STMPE811_ReadY+0x86>
 8002508:	89fb      	ldrh	r3, [r7, #14]
 800250a:	88fa      	ldrh	r2, [r7, #6]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	b29b      	uxth	r3, r3
 8002510:	b21b      	sxth	r3, r3
 8002512:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002514:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002518:	2b04      	cmp	r3, #4
 800251a:	dd01      	ble.n	8002520 <TM_STMPE811_ReadY+0x94>
        return val;
 800251c:	89fb      	ldrh	r3, [r7, #14]
 800251e:	e000      	b.n	8002522 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002520:	88fb      	ldrh	r3, [r7, #6]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	2e8ba2e9 	.word	0x2e8ba2e9

08002530 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b086      	sub	sp, #24
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	e00a      	b.n	8002566 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002550:	f3af 8000 	nop.w
 8002554:	4601      	mov	r1, r0
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	60ba      	str	r2, [r7, #8]
 800255c:	b2ca      	uxtb	r2, r1
 800255e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	3301      	adds	r3, #1
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	429a      	cmp	r2, r3
 800256c:	dbf0      	blt.n	8002550 <_read+0x12>
  }

  return len;
 800256e:	687b      	ldr	r3, [r7, #4]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	e009      	b.n	800259e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	60ba      	str	r2, [r7, #8]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	3301      	adds	r3, #1
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	dbf1      	blt.n	800258a <_write+0x12>
  }
  return len;
 80025a6:	687b      	ldr	r3, [r7, #4]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_close>:

int _close(int file)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025d8:	605a      	str	r2, [r3, #4]
  return 0;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <_isatty>:

int _isatty(int file)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025f0:	2301      	movs	r3, #1
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025fe:	b480      	push	{r7}
 8002600:	b085      	sub	sp, #20
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002620:	4a14      	ldr	r2, [pc, #80]	@ (8002674 <_sbrk+0x5c>)
 8002622:	4b15      	ldr	r3, [pc, #84]	@ (8002678 <_sbrk+0x60>)
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800262c:	4b13      	ldr	r3, [pc, #76]	@ (800267c <_sbrk+0x64>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d102      	bne.n	800263a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002634:	4b11      	ldr	r3, [pc, #68]	@ (800267c <_sbrk+0x64>)
 8002636:	4a12      	ldr	r2, [pc, #72]	@ (8002680 <_sbrk+0x68>)
 8002638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800263a:	4b10      	ldr	r3, [pc, #64]	@ (800267c <_sbrk+0x64>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	429a      	cmp	r2, r3
 8002646:	d207      	bcs.n	8002658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002648:	f003 fe6a 	bl	8006320 <__errno>
 800264c:	4603      	mov	r3, r0
 800264e:	220c      	movs	r2, #12
 8002650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002652:	f04f 33ff 	mov.w	r3, #4294967295
 8002656:	e009      	b.n	800266c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002658:	4b08      	ldr	r3, [pc, #32]	@ (800267c <_sbrk+0x64>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800265e:	4b07      	ldr	r3, [pc, #28]	@ (800267c <_sbrk+0x64>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	4a05      	ldr	r2, [pc, #20]	@ (800267c <_sbrk+0x64>)
 8002668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800266a:	68fb      	ldr	r3, [r7, #12]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20030000 	.word	0x20030000
 8002678:	00000400 	.word	0x00000400
 800267c:	20025c20 	.word	0x20025c20
 8002680:	20025d78 	.word	0x20025d78

08002684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002688:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <SystemInit+0x20>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268e:	4a05      	ldr	r2, [pc, #20]	@ (80026a4 <SystemInit+0x20>)
 8002690:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002694:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80026a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026ac:	f7ff ffea 	bl	8002684 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026b0:	480c      	ldr	r0, [pc, #48]	@ (80026e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026b2:	490d      	ldr	r1, [pc, #52]	@ (80026e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026b4:	4a0d      	ldr	r2, [pc, #52]	@ (80026ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b8:	e002      	b.n	80026c0 <LoopCopyDataInit>

080026ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026be:	3304      	adds	r3, #4

080026c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c4:	d3f9      	bcc.n	80026ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026c6:	4a0a      	ldr	r2, [pc, #40]	@ (80026f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026c8:	4c0a      	ldr	r4, [pc, #40]	@ (80026f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026cc:	e001      	b.n	80026d2 <LoopFillZerobss>

080026ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d0:	3204      	adds	r2, #4

080026d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d4:	d3fb      	bcc.n	80026ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80026d6:	f003 fe29 	bl	800632c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026da:	f7fe fd8a 	bl	80011f2 <main>
  bx  lr    
 80026de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80026e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80026e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80026ec:	08006e24 	.word	0x08006e24
  ldr r2, =_sbss
 80026f0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80026f4:	20025d74 	.word	0x20025d74

080026f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f8:	e7fe      	b.n	80026f8 <ADC_IRQHandler>
	...

080026fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002700:	4b0e      	ldr	r3, [pc, #56]	@ (800273c <HAL_Init+0x40>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0d      	ldr	r2, [pc, #52]	@ (800273c <HAL_Init+0x40>)
 8002706:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800270a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800270c:	4b0b      	ldr	r3, [pc, #44]	@ (800273c <HAL_Init+0x40>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0a      	ldr	r2, [pc, #40]	@ (800273c <HAL_Init+0x40>)
 8002712:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002716:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002718:	4b08      	ldr	r3, [pc, #32]	@ (800273c <HAL_Init+0x40>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a07      	ldr	r2, [pc, #28]	@ (800273c <HAL_Init+0x40>)
 800271e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002722:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002724:	2003      	movs	r0, #3
 8002726:	f000 f931 	bl	800298c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800272a:	2000      	movs	r0, #0
 800272c:	f000 f808 	bl	8002740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002730:	f7ff f924 	bl	800197c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40023c00 	.word	0x40023c00

08002740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002748:	4b12      	ldr	r3, [pc, #72]	@ (8002794 <HAL_InitTick+0x54>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4b12      	ldr	r3, [pc, #72]	@ (8002798 <HAL_InitTick+0x58>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	4619      	mov	r1, r3
 8002752:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002756:	fbb3 f3f1 	udiv	r3, r3, r1
 800275a:	fbb2 f3f3 	udiv	r3, r2, r3
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f93b 	bl	80029da <HAL_SYSTICK_Config>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e00e      	b.n	800278c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b0f      	cmp	r3, #15
 8002772:	d80a      	bhi.n	800278a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002774:	2200      	movs	r2, #0
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	f04f 30ff 	mov.w	r0, #4294967295
 800277c:	f000 f911 	bl	80029a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002780:	4a06      	ldr	r2, [pc, #24]	@ (800279c <HAL_InitTick+0x5c>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	e000      	b.n	800278c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000004 	.word	0x20000004
 8002798:	2000000c 	.word	0x2000000c
 800279c:	20000008 	.word	0x20000008

080027a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027a4:	4b06      	ldr	r3, [pc, #24]	@ (80027c0 <HAL_IncTick+0x20>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <HAL_IncTick+0x24>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4413      	add	r3, r2
 80027b0:	4a04      	ldr	r2, [pc, #16]	@ (80027c4 <HAL_IncTick+0x24>)
 80027b2:	6013      	str	r3, [r2, #0]
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	2000000c 	.word	0x2000000c
 80027c4:	20025c24 	.word	0x20025c24

080027c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return uwTick;
 80027cc:	4b03      	ldr	r3, [pc, #12]	@ (80027dc <HAL_GetTick+0x14>)
 80027ce:	681b      	ldr	r3, [r3, #0]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20025c24 	.word	0x20025c24

080027e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e8:	f7ff ffee 	bl	80027c8 <HAL_GetTick>
 80027ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f8:	d005      	beq.n	8002806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002824 <HAL_Delay+0x44>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4413      	add	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002806:	bf00      	nop
 8002808:	f7ff ffde 	bl	80027c8 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	429a      	cmp	r2, r3
 8002816:	d8f7      	bhi.n	8002808 <HAL_Delay+0x28>
  {
  }
}
 8002818:	bf00      	nop
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	2000000c 	.word	0x2000000c

08002828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002838:	4b0c      	ldr	r3, [pc, #48]	@ (800286c <__NVIC_SetPriorityGrouping+0x44>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002844:	4013      	ands	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002850:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002854:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800285a:	4a04      	ldr	r2, [pc, #16]	@ (800286c <__NVIC_SetPriorityGrouping+0x44>)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	60d3      	str	r3, [r2, #12]
}
 8002860:	bf00      	nop
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002874:	4b04      	ldr	r3, [pc, #16]	@ (8002888 <__NVIC_GetPriorityGrouping+0x18>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	f003 0307 	and.w	r3, r3, #7
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	6039      	str	r1, [r7, #0]
 8002896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	2b00      	cmp	r3, #0
 800289e:	db0a      	blt.n	80028b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	490c      	ldr	r1, [pc, #48]	@ (80028d8 <__NVIC_SetPriority+0x4c>)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	0112      	lsls	r2, r2, #4
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	440b      	add	r3, r1
 80028b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b4:	e00a      	b.n	80028cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	4908      	ldr	r1, [pc, #32]	@ (80028dc <__NVIC_SetPriority+0x50>)
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	3b04      	subs	r3, #4
 80028c4:	0112      	lsls	r2, r2, #4
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	440b      	add	r3, r1
 80028ca:	761a      	strb	r2, [r3, #24]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000e100 	.word	0xe000e100
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	@ 0x24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f1c3 0307 	rsb	r3, r3, #7
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	bf28      	it	cs
 80028fe:	2304      	movcs	r3, #4
 8002900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3304      	adds	r3, #4
 8002906:	2b06      	cmp	r3, #6
 8002908:	d902      	bls.n	8002910 <NVIC_EncodePriority+0x30>
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3b03      	subs	r3, #3
 800290e:	e000      	b.n	8002912 <NVIC_EncodePriority+0x32>
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	f04f 32ff 	mov.w	r2, #4294967295
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43da      	mvns	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	401a      	ands	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002928:	f04f 31ff 	mov.w	r1, #4294967295
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	43d9      	mvns	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	4313      	orrs	r3, r2
         );
}
 800293a:	4618      	mov	r0, r3
 800293c:	3724      	adds	r7, #36	@ 0x24
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3b01      	subs	r3, #1
 8002954:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002958:	d301      	bcc.n	800295e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800295a:	2301      	movs	r3, #1
 800295c:	e00f      	b.n	800297e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800295e:	4a0a      	ldr	r2, [pc, #40]	@ (8002988 <SysTick_Config+0x40>)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3b01      	subs	r3, #1
 8002964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002966:	210f      	movs	r1, #15
 8002968:	f04f 30ff 	mov.w	r0, #4294967295
 800296c:	f7ff ff8e 	bl	800288c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002970:	4b05      	ldr	r3, [pc, #20]	@ (8002988 <SysTick_Config+0x40>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002976:	4b04      	ldr	r3, [pc, #16]	@ (8002988 <SysTick_Config+0x40>)
 8002978:	2207      	movs	r2, #7
 800297a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	e000e010 	.word	0xe000e010

0800298c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff ff47 	bl	8002828 <__NVIC_SetPriorityGrouping>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b086      	sub	sp, #24
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4603      	mov	r3, r0
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029b4:	f7ff ff5c 	bl	8002870 <__NVIC_GetPriorityGrouping>
 80029b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	6978      	ldr	r0, [r7, #20]
 80029c0:	f7ff ff8e 	bl	80028e0 <NVIC_EncodePriority>
 80029c4:	4602      	mov	r2, r0
 80029c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff5d 	bl	800288c <__NVIC_SetPriority>
}
 80029d2:	bf00      	nop
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff ffb0 	bl	8002948 <SysTick_Config>
 80029e8:	4603      	mov	r3, r0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	@ 0x24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	e177      	b.n	8002d00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a10:	2201      	movs	r2, #1
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	f040 8166 	bne.w	8002cfa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d005      	beq.n	8002a46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d130      	bne.n	8002aa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	2203      	movs	r2, #3
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 0201 	and.w	r2, r3, #1
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d017      	beq.n	8002ae4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	2203      	movs	r2, #3
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d123      	bne.n	8002b38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	08da      	lsrs	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3208      	adds	r2, #8
 8002af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	220f      	movs	r2, #15
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	08da      	lsrs	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3208      	adds	r2, #8
 8002b32:	69b9      	ldr	r1, [r7, #24]
 8002b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0203 	and.w	r2, r3, #3
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80c0 	beq.w	8002cfa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	4b66      	ldr	r3, [pc, #408]	@ (8002d18 <HAL_GPIO_Init+0x324>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b82:	4a65      	ldr	r2, [pc, #404]	@ (8002d18 <HAL_GPIO_Init+0x324>)
 8002b84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b8a:	4b63      	ldr	r3, [pc, #396]	@ (8002d18 <HAL_GPIO_Init+0x324>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b96:	4a61      	ldr	r2, [pc, #388]	@ (8002d1c <HAL_GPIO_Init+0x328>)
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	089b      	lsrs	r3, r3, #2
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	220f      	movs	r2, #15
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a58      	ldr	r2, [pc, #352]	@ (8002d20 <HAL_GPIO_Init+0x32c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d037      	beq.n	8002c32 <HAL_GPIO_Init+0x23e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a57      	ldr	r2, [pc, #348]	@ (8002d24 <HAL_GPIO_Init+0x330>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d031      	beq.n	8002c2e <HAL_GPIO_Init+0x23a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a56      	ldr	r2, [pc, #344]	@ (8002d28 <HAL_GPIO_Init+0x334>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d02b      	beq.n	8002c2a <HAL_GPIO_Init+0x236>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a55      	ldr	r2, [pc, #340]	@ (8002d2c <HAL_GPIO_Init+0x338>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d025      	beq.n	8002c26 <HAL_GPIO_Init+0x232>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a54      	ldr	r2, [pc, #336]	@ (8002d30 <HAL_GPIO_Init+0x33c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d01f      	beq.n	8002c22 <HAL_GPIO_Init+0x22e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a53      	ldr	r2, [pc, #332]	@ (8002d34 <HAL_GPIO_Init+0x340>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d019      	beq.n	8002c1e <HAL_GPIO_Init+0x22a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a52      	ldr	r2, [pc, #328]	@ (8002d38 <HAL_GPIO_Init+0x344>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <HAL_GPIO_Init+0x226>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a51      	ldr	r2, [pc, #324]	@ (8002d3c <HAL_GPIO_Init+0x348>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00d      	beq.n	8002c16 <HAL_GPIO_Init+0x222>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a50      	ldr	r2, [pc, #320]	@ (8002d40 <HAL_GPIO_Init+0x34c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d007      	beq.n	8002c12 <HAL_GPIO_Init+0x21e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a4f      	ldr	r2, [pc, #316]	@ (8002d44 <HAL_GPIO_Init+0x350>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d101      	bne.n	8002c0e <HAL_GPIO_Init+0x21a>
 8002c0a:	2309      	movs	r3, #9
 8002c0c:	e012      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c0e:	230a      	movs	r3, #10
 8002c10:	e010      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c12:	2308      	movs	r3, #8
 8002c14:	e00e      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c16:	2307      	movs	r3, #7
 8002c18:	e00c      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c1a:	2306      	movs	r3, #6
 8002c1c:	e00a      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c1e:	2305      	movs	r3, #5
 8002c20:	e008      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c22:	2304      	movs	r3, #4
 8002c24:	e006      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c26:	2303      	movs	r3, #3
 8002c28:	e004      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e002      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c32:	2300      	movs	r3, #0
 8002c34:	69fa      	ldr	r2, [r7, #28]
 8002c36:	f002 0203 	and.w	r2, r2, #3
 8002c3a:	0092      	lsls	r2, r2, #2
 8002c3c:	4093      	lsls	r3, r2
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c44:	4935      	ldr	r1, [pc, #212]	@ (8002d1c <HAL_GPIO_Init+0x328>)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	089b      	lsrs	r3, r3, #2
 8002c4a:	3302      	adds	r3, #2
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c52:	4b3d      	ldr	r3, [pc, #244]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c76:	4a34      	ldr	r2, [pc, #208]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c7c:	4b32      	ldr	r3, [pc, #200]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ca0:	4a29      	ldr	r2, [pc, #164]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ca6:	4b28      	ldr	r3, [pc, #160]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cca:	4a1f      	ldr	r2, [pc, #124]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cf4:	4a14      	ldr	r2, [pc, #80]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	61fb      	str	r3, [r7, #28]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	2b0f      	cmp	r3, #15
 8002d04:	f67f ae84 	bls.w	8002a10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
 8002d0c:	3724      	adds	r7, #36	@ 0x24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40013800 	.word	0x40013800
 8002d20:	40020000 	.word	0x40020000
 8002d24:	40020400 	.word	0x40020400
 8002d28:	40020800 	.word	0x40020800
 8002d2c:	40020c00 	.word	0x40020c00
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40021400 	.word	0x40021400
 8002d38:	40021800 	.word	0x40021800
 8002d3c:	40021c00 	.word	0x40021c00
 8002d40:	40022000 	.word	0x40022000
 8002d44:	40022400 	.word	0x40022400
 8002d48:	40013c00 	.word	0x40013c00

08002d4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	e0d9      	b.n	8002f1c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d68:	2201      	movs	r2, #1
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	f040 80c9 	bne.w	8002f16 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002d84:	4a6b      	ldr	r2, [pc, #428]	@ (8002f34 <HAL_GPIO_DeInit+0x1e8>)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	089b      	lsrs	r3, r3, #2
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d90:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	220f      	movs	r2, #15
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	4013      	ands	r3, r2
 8002da4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a63      	ldr	r2, [pc, #396]	@ (8002f38 <HAL_GPIO_DeInit+0x1ec>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d037      	beq.n	8002e1e <HAL_GPIO_DeInit+0xd2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a62      	ldr	r2, [pc, #392]	@ (8002f3c <HAL_GPIO_DeInit+0x1f0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d031      	beq.n	8002e1a <HAL_GPIO_DeInit+0xce>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a61      	ldr	r2, [pc, #388]	@ (8002f40 <HAL_GPIO_DeInit+0x1f4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d02b      	beq.n	8002e16 <HAL_GPIO_DeInit+0xca>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a60      	ldr	r2, [pc, #384]	@ (8002f44 <HAL_GPIO_DeInit+0x1f8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d025      	beq.n	8002e12 <HAL_GPIO_DeInit+0xc6>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a5f      	ldr	r2, [pc, #380]	@ (8002f48 <HAL_GPIO_DeInit+0x1fc>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01f      	beq.n	8002e0e <HAL_GPIO_DeInit+0xc2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a5e      	ldr	r2, [pc, #376]	@ (8002f4c <HAL_GPIO_DeInit+0x200>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d019      	beq.n	8002e0a <HAL_GPIO_DeInit+0xbe>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a5d      	ldr	r2, [pc, #372]	@ (8002f50 <HAL_GPIO_DeInit+0x204>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d013      	beq.n	8002e06 <HAL_GPIO_DeInit+0xba>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a5c      	ldr	r2, [pc, #368]	@ (8002f54 <HAL_GPIO_DeInit+0x208>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00d      	beq.n	8002e02 <HAL_GPIO_DeInit+0xb6>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a5b      	ldr	r2, [pc, #364]	@ (8002f58 <HAL_GPIO_DeInit+0x20c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d007      	beq.n	8002dfe <HAL_GPIO_DeInit+0xb2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a5a      	ldr	r2, [pc, #360]	@ (8002f5c <HAL_GPIO_DeInit+0x210>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d101      	bne.n	8002dfa <HAL_GPIO_DeInit+0xae>
 8002df6:	2309      	movs	r3, #9
 8002df8:	e012      	b.n	8002e20 <HAL_GPIO_DeInit+0xd4>
 8002dfa:	230a      	movs	r3, #10
 8002dfc:	e010      	b.n	8002e20 <HAL_GPIO_DeInit+0xd4>
 8002dfe:	2308      	movs	r3, #8
 8002e00:	e00e      	b.n	8002e20 <HAL_GPIO_DeInit+0xd4>
 8002e02:	2307      	movs	r3, #7
 8002e04:	e00c      	b.n	8002e20 <HAL_GPIO_DeInit+0xd4>
 8002e06:	2306      	movs	r3, #6
 8002e08:	e00a      	b.n	8002e20 <HAL_GPIO_DeInit+0xd4>
 8002e0a:	2305      	movs	r3, #5
 8002e0c:	e008      	b.n	8002e20 <HAL_GPIO_DeInit+0xd4>
 8002e0e:	2304      	movs	r3, #4
 8002e10:	e006      	b.n	8002e20 <HAL_GPIO_DeInit+0xd4>
 8002e12:	2303      	movs	r3, #3
 8002e14:	e004      	b.n	8002e20 <HAL_GPIO_DeInit+0xd4>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e002      	b.n	8002e20 <HAL_GPIO_DeInit+0xd4>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <HAL_GPIO_DeInit+0xd4>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	f002 0203 	and.w	r2, r2, #3
 8002e26:	0092      	lsls	r2, r2, #2
 8002e28:	4093      	lsls	r3, r2
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d132      	bne.n	8002e96 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002e30:	4b4b      	ldr	r3, [pc, #300]	@ (8002f60 <HAL_GPIO_DeInit+0x214>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	4949      	ldr	r1, [pc, #292]	@ (8002f60 <HAL_GPIO_DeInit+0x214>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002e3e:	4b48      	ldr	r3, [pc, #288]	@ (8002f60 <HAL_GPIO_DeInit+0x214>)
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	4946      	ldr	r1, [pc, #280]	@ (8002f60 <HAL_GPIO_DeInit+0x214>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002e4c:	4b44      	ldr	r3, [pc, #272]	@ (8002f60 <HAL_GPIO_DeInit+0x214>)
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	4942      	ldr	r1, [pc, #264]	@ (8002f60 <HAL_GPIO_DeInit+0x214>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002e5a:	4b41      	ldr	r3, [pc, #260]	@ (8002f60 <HAL_GPIO_DeInit+0x214>)
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	493f      	ldr	r1, [pc, #252]	@ (8002f60 <HAL_GPIO_DeInit+0x214>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	220f      	movs	r2, #15
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002e78:	4a2e      	ldr	r2, [pc, #184]	@ (8002f34 <HAL_GPIO_DeInit+0x1e8>)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	089b      	lsrs	r3, r3, #2
 8002e7e:	3302      	adds	r3, #2
 8002e80:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	43da      	mvns	r2, r3
 8002e88:	482a      	ldr	r0, [pc, #168]	@ (8002f34 <HAL_GPIO_DeInit+0x1e8>)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	089b      	lsrs	r3, r3, #2
 8002e8e:	400a      	ands	r2, r1
 8002e90:	3302      	adds	r3, #2
 8002e92:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	2103      	movs	r1, #3
 8002ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	08da      	lsrs	r2, r3, #3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3208      	adds	r2, #8
 8002eb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	220f      	movs	r2, #15
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	08d2      	lsrs	r2, r2, #3
 8002ecc:	4019      	ands	r1, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3208      	adds	r2, #8
 8002ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	2103      	movs	r1, #3
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	401a      	ands	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	2103      	movs	r1, #3
 8002f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	401a      	ands	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2b0f      	cmp	r3, #15
 8002f20:	f67f af22 	bls.w	8002d68 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop
 8002f28:	371c      	adds	r7, #28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40013800 	.word	0x40013800
 8002f38:	40020000 	.word	0x40020000
 8002f3c:	40020400 	.word	0x40020400
 8002f40:	40020800 	.word	0x40020800
 8002f44:	40020c00 	.word	0x40020c00
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40021400 	.word	0x40021400
 8002f50:	40021800 	.word	0x40021800
 8002f54:	40021c00 	.word	0x40021c00
 8002f58:	40022000 	.word	0x40022000
 8002f5c:	40022400 	.word	0x40022400
 8002f60:	40013c00 	.word	0x40013c00

08002f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	807b      	strh	r3, [r7, #2]
 8002f70:	4613      	mov	r3, r2
 8002f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f74:	787b      	ldrb	r3, [r7, #1]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f7a:	887a      	ldrh	r2, [r7, #2]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f80:	e003      	b.n	8002f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f82:	887b      	ldrh	r3, [r7, #2]
 8002f84:	041a      	lsls	r2, r3, #16
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	619a      	str	r2, [r3, #24]
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e12b      	b.n	8003202 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fe fd04 	bl	80019cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2224      	movs	r2, #36	@ 0x24
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ffc:	f001 ff82 	bl	8004f04 <HAL_RCC_GetPCLK1Freq>
 8003000:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4a81      	ldr	r2, [pc, #516]	@ (800320c <HAL_I2C_Init+0x274>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d807      	bhi.n	800301c <HAL_I2C_Init+0x84>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a80      	ldr	r2, [pc, #512]	@ (8003210 <HAL_I2C_Init+0x278>)
 8003010:	4293      	cmp	r3, r2
 8003012:	bf94      	ite	ls
 8003014:	2301      	movls	r3, #1
 8003016:	2300      	movhi	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	e006      	b.n	800302a <HAL_I2C_Init+0x92>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a7d      	ldr	r2, [pc, #500]	@ (8003214 <HAL_I2C_Init+0x27c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	bf94      	ite	ls
 8003024:	2301      	movls	r3, #1
 8003026:	2300      	movhi	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e0e7      	b.n	8003202 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4a78      	ldr	r2, [pc, #480]	@ (8003218 <HAL_I2C_Init+0x280>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	0c9b      	lsrs	r3, r3, #18
 800303c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	4a6a      	ldr	r2, [pc, #424]	@ (800320c <HAL_I2C_Init+0x274>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d802      	bhi.n	800306c <HAL_I2C_Init+0xd4>
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	3301      	adds	r3, #1
 800306a:	e009      	b.n	8003080 <HAL_I2C_Init+0xe8>
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	4a69      	ldr	r2, [pc, #420]	@ (800321c <HAL_I2C_Init+0x284>)
 8003078:	fba2 2303 	umull	r2, r3, r2, r3
 800307c:	099b      	lsrs	r3, r3, #6
 800307e:	3301      	adds	r3, #1
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	430b      	orrs	r3, r1
 8003086:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003092:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	495c      	ldr	r1, [pc, #368]	@ (800320c <HAL_I2C_Init+0x274>)
 800309c:	428b      	cmp	r3, r1
 800309e:	d819      	bhi.n	80030d4 <HAL_I2C_Init+0x13c>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1e59      	subs	r1, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ae:	1c59      	adds	r1, r3, #1
 80030b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030b4:	400b      	ands	r3, r1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_I2C_Init+0x138>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1e59      	subs	r1, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c8:	3301      	adds	r3, #1
 80030ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ce:	e051      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 80030d0:	2304      	movs	r3, #4
 80030d2:	e04f      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d111      	bne.n	8003100 <HAL_I2C_Init+0x168>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1e58      	subs	r0, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6859      	ldr	r1, [r3, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	440b      	add	r3, r1
 80030ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ee:	3301      	adds	r3, #1
 80030f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e012      	b.n	8003126 <HAL_I2C_Init+0x18e>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	1e58      	subs	r0, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	0099      	lsls	r1, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	fbb0 f3f3 	udiv	r3, r0, r3
 8003116:	3301      	adds	r3, #1
 8003118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Init+0x196>
 800312a:	2301      	movs	r3, #1
 800312c:	e022      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10e      	bne.n	8003154 <HAL_I2C_Init+0x1bc>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1e58      	subs	r0, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	440b      	add	r3, r1
 8003144:	fbb0 f3f3 	udiv	r3, r0, r3
 8003148:	3301      	adds	r3, #1
 800314a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003152:	e00f      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	1e58      	subs	r0, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	0099      	lsls	r1, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	fbb0 f3f3 	udiv	r3, r0, r3
 800316a:	3301      	adds	r3, #1
 800316c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003170:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	6809      	ldr	r1, [r1, #0]
 8003178:	4313      	orrs	r3, r2
 800317a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6911      	ldr	r1, [r2, #16]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	4311      	orrs	r1, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	430b      	orrs	r3, r1
 80031b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	000186a0 	.word	0x000186a0
 8003210:	001e847f 	.word	0x001e847f
 8003214:	003d08ff 	.word	0x003d08ff
 8003218:	431bde83 	.word	0x431bde83
 800321c:	10624dd3 	.word	0x10624dd3

08003220 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	4608      	mov	r0, r1
 800322a:	4611      	mov	r1, r2
 800322c:	461a      	mov	r2, r3
 800322e:	4603      	mov	r3, r0
 8003230:	817b      	strh	r3, [r7, #10]
 8003232:	460b      	mov	r3, r1
 8003234:	813b      	strh	r3, [r7, #8]
 8003236:	4613      	mov	r3, r2
 8003238:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800323a:	f7ff fac5 	bl	80027c8 <HAL_GetTick>
 800323e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b20      	cmp	r3, #32
 800324a:	f040 80d9 	bne.w	8003400 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	2319      	movs	r3, #25
 8003254:	2201      	movs	r2, #1
 8003256:	496d      	ldr	r1, [pc, #436]	@ (800340c <HAL_I2C_Mem_Write+0x1ec>)
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fc8b 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003264:	2302      	movs	r3, #2
 8003266:	e0cc      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_I2C_Mem_Write+0x56>
 8003272:	2302      	movs	r3, #2
 8003274:	e0c5      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d007      	beq.n	800329c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2221      	movs	r2, #33	@ 0x21
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2240      	movs	r2, #64	@ 0x40
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a3a      	ldr	r2, [r7, #32]
 80032c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4a4d      	ldr	r2, [pc, #308]	@ (8003410 <HAL_I2C_Mem_Write+0x1f0>)
 80032dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032de:	88f8      	ldrh	r0, [r7, #6]
 80032e0:	893a      	ldrh	r2, [r7, #8]
 80032e2:	8979      	ldrh	r1, [r7, #10]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	4603      	mov	r3, r0
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 fac2 	bl	8003878 <I2C_RequestMemoryWrite>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d052      	beq.n	80033a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e081      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fd50 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00d      	beq.n	800332a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	2b04      	cmp	r3, #4
 8003314:	d107      	bne.n	8003326 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003324:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e06b      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	781a      	ldrb	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003350:	b29b      	uxth	r3, r3
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b04      	cmp	r3, #4
 8003366:	d11b      	bne.n	80033a0 <HAL_I2C_Mem_Write+0x180>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	d017      	beq.n	80033a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	781a      	ldrb	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1aa      	bne.n	80032fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 fd43 	bl	8003e38 <I2C_WaitOnBTFFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00d      	beq.n	80033d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d107      	bne.n	80033d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e016      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e000      	b.n	8003402 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003400:	2302      	movs	r3, #2
  }
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	00100002 	.word	0x00100002
 8003410:	ffff0000 	.word	0xffff0000

08003414 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08c      	sub	sp, #48	@ 0x30
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	4608      	mov	r0, r1
 800341e:	4611      	mov	r1, r2
 8003420:	461a      	mov	r2, r3
 8003422:	4603      	mov	r3, r0
 8003424:	817b      	strh	r3, [r7, #10]
 8003426:	460b      	mov	r3, r1
 8003428:	813b      	strh	r3, [r7, #8]
 800342a:	4613      	mov	r3, r2
 800342c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800342e:	f7ff f9cb 	bl	80027c8 <HAL_GetTick>
 8003432:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b20      	cmp	r3, #32
 800343e:	f040 8214 	bne.w	800386a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	2319      	movs	r3, #25
 8003448:	2201      	movs	r2, #1
 800344a:	497b      	ldr	r1, [pc, #492]	@ (8003638 <HAL_I2C_Mem_Read+0x224>)
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 fb91 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003458:	2302      	movs	r3, #2
 800345a:	e207      	b.n	800386c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_I2C_Mem_Read+0x56>
 8003466:	2302      	movs	r3, #2
 8003468:	e200      	b.n	800386c <HAL_I2C_Mem_Read+0x458>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b01      	cmp	r3, #1
 800347e:	d007      	beq.n	8003490 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800349e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2222      	movs	r2, #34	@ 0x22
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2240      	movs	r2, #64	@ 0x40
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80034c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4a5b      	ldr	r2, [pc, #364]	@ (800363c <HAL_I2C_Mem_Read+0x228>)
 80034d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034d2:	88f8      	ldrh	r0, [r7, #6]
 80034d4:	893a      	ldrh	r2, [r7, #8]
 80034d6:	8979      	ldrh	r1, [r7, #10]
 80034d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	4603      	mov	r3, r0
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 fa5e 	bl	80039a4 <I2C_RequestMemoryRead>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e1bc      	b.n	800386c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d113      	bne.n	8003522 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fa:	2300      	movs	r3, #0
 80034fc:	623b      	str	r3, [r7, #32]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	623b      	str	r3, [r7, #32]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	623b      	str	r3, [r7, #32]
 800350e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	e190      	b.n	8003844 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003526:	2b01      	cmp	r3, #1
 8003528:	d11b      	bne.n	8003562 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003538:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	61fb      	str	r3, [r7, #28]
 800354e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e170      	b.n	8003844 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003566:	2b02      	cmp	r3, #2
 8003568:	d11b      	bne.n	80035a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003578:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003588:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358a:	2300      	movs	r3, #0
 800358c:	61bb      	str	r3, [r7, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	e150      	b.n	8003844 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035b8:	e144      	b.n	8003844 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035be:	2b03      	cmp	r3, #3
 80035c0:	f200 80f1 	bhi.w	80037a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d123      	bne.n	8003614 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 fc79 	bl	8003ec8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e145      	b.n	800386c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691a      	ldr	r2, [r3, #16]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003612:	e117      	b.n	8003844 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003618:	2b02      	cmp	r3, #2
 800361a:	d14e      	bne.n	80036ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003622:	2200      	movs	r2, #0
 8003624:	4906      	ldr	r1, [pc, #24]	@ (8003640 <HAL_I2C_Mem_Read+0x22c>)
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 faa4 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d008      	beq.n	8003644 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e11a      	b.n	800386c <HAL_I2C_Mem_Read+0x458>
 8003636:	bf00      	nop
 8003638:	00100002 	.word	0x00100002
 800363c:	ffff0000 	.word	0xffff0000
 8003640:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003652:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036b8:	e0c4      	b.n	8003844 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c0:	2200      	movs	r2, #0
 80036c2:	496c      	ldr	r1, [pc, #432]	@ (8003874 <HAL_I2C_Mem_Read+0x460>)
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fa55 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0cb      	b.n	800386c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800371c:	2200      	movs	r2, #0
 800371e:	4955      	ldr	r1, [pc, #340]	@ (8003874 <HAL_I2C_Mem_Read+0x460>)
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 fa27 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e09d      	b.n	800386c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800373e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037a4:	e04e      	b.n	8003844 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fb8c 	bl	8003ec8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e058      	b.n	800386c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d124      	bne.n	8003844 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d107      	bne.n	8003812 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003810:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382e:	3b01      	subs	r3, #1
 8003830:	b29a      	uxth	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003848:	2b00      	cmp	r3, #0
 800384a:	f47f aeb6 	bne.w	80035ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	e000      	b.n	800386c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800386a:	2302      	movs	r3, #2
  }
}
 800386c:	4618      	mov	r0, r3
 800386e:	3728      	adds	r7, #40	@ 0x28
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	00010004 	.word	0x00010004

08003878 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af02      	add	r7, sp, #8
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	4608      	mov	r0, r1
 8003882:	4611      	mov	r1, r2
 8003884:	461a      	mov	r2, r3
 8003886:	4603      	mov	r3, r0
 8003888:	817b      	strh	r3, [r7, #10]
 800388a:	460b      	mov	r3, r1
 800388c:	813b      	strh	r3, [r7, #8]
 800388e:	4613      	mov	r3, r2
 8003890:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f960 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00d      	beq.n	80038d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038c8:	d103      	bne.n	80038d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e05f      	b.n	8003996 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038d6:	897b      	ldrh	r3, [r7, #10]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	6a3a      	ldr	r2, [r7, #32]
 80038ea:	492d      	ldr	r1, [pc, #180]	@ (80039a0 <I2C_RequestMemoryWrite+0x128>)
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f9bb 	bl	8003c68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e04c      	b.n	8003996 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003914:	6a39      	ldr	r1, [r7, #32]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fa46 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00d      	beq.n	800393e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	2b04      	cmp	r3, #4
 8003928:	d107      	bne.n	800393a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003938:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e02b      	b.n	8003996 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d105      	bne.n	8003950 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003944:	893b      	ldrh	r3, [r7, #8]
 8003946:	b2da      	uxtb	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	611a      	str	r2, [r3, #16]
 800394e:	e021      	b.n	8003994 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003950:	893b      	ldrh	r3, [r7, #8]
 8003952:	0a1b      	lsrs	r3, r3, #8
 8003954:	b29b      	uxth	r3, r3
 8003956:	b2da      	uxtb	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800395e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003960:	6a39      	ldr	r1, [r7, #32]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 fa20 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00d      	beq.n	800398a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	2b04      	cmp	r3, #4
 8003974:	d107      	bne.n	8003986 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003984:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e005      	b.n	8003996 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800398a:	893b      	ldrh	r3, [r7, #8]
 800398c:	b2da      	uxtb	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	00010002 	.word	0x00010002

080039a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	4608      	mov	r0, r1
 80039ae:	4611      	mov	r1, r2
 80039b0:	461a      	mov	r2, r3
 80039b2:	4603      	mov	r3, r0
 80039b4:	817b      	strh	r3, [r7, #10]
 80039b6:	460b      	mov	r3, r1
 80039b8:	813b      	strh	r3, [r7, #8]
 80039ba:	4613      	mov	r3, r2
 80039bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f8c2 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00d      	beq.n	8003a12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a04:	d103      	bne.n	8003a0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e0aa      	b.n	8003b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a12:	897b      	ldrh	r3, [r7, #10]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	461a      	mov	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	6a3a      	ldr	r2, [r7, #32]
 8003a26:	4952      	ldr	r1, [pc, #328]	@ (8003b70 <I2C_RequestMemoryRead+0x1cc>)
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f91d 	bl	8003c68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e097      	b.n	8003b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a50:	6a39      	ldr	r1, [r7, #32]
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f9a8 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00d      	beq.n	8003a7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d107      	bne.n	8003a76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e076      	b.n	8003b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d105      	bne.n	8003a8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a80:	893b      	ldrh	r3, [r7, #8]
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	611a      	str	r2, [r3, #16]
 8003a8a:	e021      	b.n	8003ad0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a8c:	893b      	ldrh	r3, [r7, #8]
 8003a8e:	0a1b      	lsrs	r3, r3, #8
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a9c:	6a39      	ldr	r1, [r7, #32]
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f982 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00d      	beq.n	8003ac6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d107      	bne.n	8003ac2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ac0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e050      	b.n	8003b68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac6:	893b      	ldrh	r3, [r7, #8]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad2:	6a39      	ldr	r1, [r7, #32]
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f967 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00d      	beq.n	8003afc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d107      	bne.n	8003af8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e035      	b.n	8003b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f82b 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00d      	beq.n	8003b40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b32:	d103      	bne.n	8003b3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e013      	b.n	8003b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b40:	897b      	ldrh	r3, [r7, #10]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	6a3a      	ldr	r2, [r7, #32]
 8003b54:	4906      	ldr	r1, [pc, #24]	@ (8003b70 <I2C_RequestMemoryRead+0x1cc>)
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f886 	bl	8003c68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	00010002 	.word	0x00010002

08003b74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	4613      	mov	r3, r2
 8003b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b84:	e048      	b.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8c:	d044      	beq.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8e:	f7fe fe1b 	bl	80027c8 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d302      	bcc.n	8003ba4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d139      	bne.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	0c1b      	lsrs	r3, r3, #16
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d10d      	bne.n	8003bca <I2C_WaitOnFlagUntilTimeout+0x56>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	43da      	mvns	r2, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	e00c      	b.n	8003be4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	43da      	mvns	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d116      	bne.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c04:	f043 0220 	orr.w	r2, r3, #32
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e023      	b.n	8003c60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	0c1b      	lsrs	r3, r3, #16
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d10d      	bne.n	8003c3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	43da      	mvns	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	e00c      	b.n	8003c58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	43da      	mvns	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d093      	beq.n	8003b86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c76:	e071      	b.n	8003d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c86:	d123      	bne.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ca0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbc:	f043 0204 	orr.w	r2, r3, #4
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e067      	b.n	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd6:	d041      	beq.n	8003d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd8:	f7fe fd76 	bl	80027c8 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d302      	bcc.n	8003cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d136      	bne.n	8003d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	0c1b      	lsrs	r3, r3, #16
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d10c      	bne.n	8003d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	43da      	mvns	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4013      	ands	r3, r2
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	bf14      	ite	ne
 8003d0a:	2301      	movne	r3, #1
 8003d0c:	2300      	moveq	r3, #0
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	e00b      	b.n	8003d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	43da      	mvns	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bf14      	ite	ne
 8003d24:	2301      	movne	r3, #1
 8003d26:	2300      	moveq	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d016      	beq.n	8003d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d48:	f043 0220 	orr.w	r2, r3, #32
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e021      	b.n	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	0c1b      	lsrs	r3, r3, #16
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d10c      	bne.n	8003d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	43da      	mvns	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4013      	ands	r3, r2
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bf14      	ite	ne
 8003d78:	2301      	movne	r3, #1
 8003d7a:	2300      	moveq	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	e00b      	b.n	8003d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	43da      	mvns	r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	bf14      	ite	ne
 8003d92:	2301      	movne	r3, #1
 8003d94:	2300      	moveq	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f47f af6d 	bne.w	8003c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003db4:	e034      	b.n	8003e20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f8e3 	bl	8003f82 <I2C_IsAcknowledgeFailed>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e034      	b.n	8003e30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dcc:	d028      	beq.n	8003e20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dce:	f7fe fcfb 	bl	80027c8 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d302      	bcc.n	8003de4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d11d      	bne.n	8003e20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dee:	2b80      	cmp	r3, #128	@ 0x80
 8003df0:	d016      	beq.n	8003e20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0c:	f043 0220 	orr.w	r2, r3, #32
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e007      	b.n	8003e30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e2a:	2b80      	cmp	r3, #128	@ 0x80
 8003e2c:	d1c3      	bne.n	8003db6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e44:	e034      	b.n	8003eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f89b 	bl	8003f82 <I2C_IsAcknowledgeFailed>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e034      	b.n	8003ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d028      	beq.n	8003eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5e:	f7fe fcb3 	bl	80027c8 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d302      	bcc.n	8003e74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d11d      	bne.n	8003eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d016      	beq.n	8003eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	f043 0220 	orr.w	r2, r3, #32
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e007      	b.n	8003ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d1c3      	bne.n	8003e46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ed4:	e049      	b.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	d119      	bne.n	8003f18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0210 	mvn.w	r2, #16
 8003eec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e030      	b.n	8003f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f18:	f7fe fc56 	bl	80027c8 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d302      	bcc.n	8003f2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d11d      	bne.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f38:	2b40      	cmp	r3, #64	@ 0x40
 8003f3a:	d016      	beq.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f56:	f043 0220 	orr.w	r2, r3, #32
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e007      	b.n	8003f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f74:	2b40      	cmp	r3, #64	@ 0x40
 8003f76:	d1ae      	bne.n	8003ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f98:	d11b      	bne.n	8003fd2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fa2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbe:	f043 0204 	orr.w	r2, r3, #4
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	d129      	bne.n	800404a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2224      	movs	r2, #36	@ 0x24
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0210 	bic.w	r2, r2, #16
 800401c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	e000      	b.n	800404c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800404a:	2302      	movs	r3, #2
  }
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b20      	cmp	r3, #32
 8004070:	d12a      	bne.n	80040c8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2224      	movs	r2, #36	@ 0x24
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0201 	bic.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004092:	89fb      	ldrh	r3, [r7, #14]
 8004094:	f023 030f 	bic.w	r3, r3, #15
 8004098:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	b29a      	uxth	r2, r3
 800409e:	89fb      	ldrh	r3, [r7, #14]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	89fa      	ldrh	r2, [r7, #14]
 80040aa:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0201 	orr.w	r2, r2, #1
 80040ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	e000      	b.n	80040ca <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80040c8:	2302      	movs	r3, #2
  }
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
	...

080040d8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e0bf      	b.n	800426a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7fd fcce 	bl	8001aa0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800411a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6999      	ldr	r1, [r3, #24]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004130:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6899      	ldr	r1, [r3, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	4b4a      	ldr	r3, [pc, #296]	@ (8004274 <HAL_LTDC_Init+0x19c>)
 800414c:	400b      	ands	r3, r1
 800414e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	041b      	lsls	r3, r3, #16
 8004156:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6899      	ldr	r1, [r3, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	431a      	orrs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68d9      	ldr	r1, [r3, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	4b3e      	ldr	r3, [pc, #248]	@ (8004274 <HAL_LTDC_Init+0x19c>)
 800417a:	400b      	ands	r3, r1
 800417c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	041b      	lsls	r3, r3, #16
 8004184:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68d9      	ldr	r1, [r3, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1a      	ldr	r2, [r3, #32]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6919      	ldr	r1, [r3, #16]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	4b33      	ldr	r3, [pc, #204]	@ (8004274 <HAL_LTDC_Init+0x19c>)
 80041a8:	400b      	ands	r3, r1
 80041aa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b0:	041b      	lsls	r3, r3, #16
 80041b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6919      	ldr	r1, [r3, #16]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6959      	ldr	r1, [r3, #20]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4b27      	ldr	r3, [pc, #156]	@ (8004274 <HAL_LTDC_Init+0x19c>)
 80041d6:	400b      	ands	r3, r1
 80041d8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041de:	041b      	lsls	r3, r3, #16
 80041e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6959      	ldr	r1, [r3, #20]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041fe:	021b      	lsls	r3, r3, #8
 8004200:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004208:	041b      	lsls	r3, r3, #16
 800420a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800421a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0206 	orr.w	r2, r2, #6
 8004246:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	f000f800 	.word	0xf000f800

08004278 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004278:	b5b0      	push	{r4, r5, r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_LTDC_ConfigLayer+0x1a>
 800428e:	2302      	movs	r3, #2
 8004290:	e02c      	b.n	80042ec <HAL_LTDC_ConfigLayer+0x74>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2202      	movs	r2, #2
 800429e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2134      	movs	r1, #52	@ 0x34
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	4413      	add	r3, r2
 80042ae:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4614      	mov	r4, r2
 80042b6:	461d      	mov	r5, r3
 80042b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042c4:	682b      	ldr	r3, [r5, #0]
 80042c6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 f811 	bl	80042f4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2201      	movs	r2, #1
 80042d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bdb0      	pop	{r4, r5, r7, pc}

080042f4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b089      	sub	sp, #36	@ 0x24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	0c1b      	lsrs	r3, r3, #16
 800430c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004310:	4413      	add	r3, r2
 8004312:	041b      	lsls	r3, r3, #16
 8004314:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	01db      	lsls	r3, r3, #7
 8004320:	4413      	add	r3, r2
 8004322:	3384      	adds	r3, #132	@ 0x84
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	4611      	mov	r1, r2
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	01d2      	lsls	r2, r2, #7
 8004330:	440a      	add	r2, r1
 8004332:	3284      	adds	r2, #132	@ 0x84
 8004334:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004338:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	0c1b      	lsrs	r3, r3, #16
 8004346:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800434a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800434c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4619      	mov	r1, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	01db      	lsls	r3, r3, #7
 8004358:	440b      	add	r3, r1
 800435a:	3384      	adds	r3, #132	@ 0x84
 800435c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004362:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004372:	4413      	add	r3, r2
 8004374:	041b      	lsls	r3, r3, #16
 8004376:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	01db      	lsls	r3, r3, #7
 8004382:	4413      	add	r3, r2
 8004384:	3384      	adds	r3, #132	@ 0x84
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	6812      	ldr	r2, [r2, #0]
 800438c:	4611      	mov	r1, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	01d2      	lsls	r2, r2, #7
 8004392:	440a      	add	r2, r1
 8004394:	3284      	adds	r2, #132	@ 0x84
 8004396:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800439a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043aa:	4413      	add	r3, r2
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4619      	mov	r1, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	01db      	lsls	r3, r3, #7
 80043b8:	440b      	add	r3, r1
 80043ba:	3384      	adds	r3, #132	@ 0x84
 80043bc:	4619      	mov	r1, r3
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	01db      	lsls	r3, r3, #7
 80043ce:	4413      	add	r3, r2
 80043d0:	3384      	adds	r3, #132	@ 0x84
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	4611      	mov	r1, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	01d2      	lsls	r2, r2, #7
 80043de:	440a      	add	r2, r1
 80043e0:	3284      	adds	r2, #132	@ 0x84
 80043e2:	f023 0307 	bic.w	r3, r3, #7
 80043e6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	01db      	lsls	r3, r3, #7
 80043f2:	4413      	add	r3, r2
 80043f4:	3384      	adds	r3, #132	@ 0x84
 80043f6:	461a      	mov	r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004404:	021b      	lsls	r3, r3, #8
 8004406:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800440e:	041b      	lsls	r3, r3, #16
 8004410:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	061b      	lsls	r3, r3, #24
 8004418:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	01db      	lsls	r3, r3, #7
 8004424:	4413      	add	r3, r2
 8004426:	3384      	adds	r3, #132	@ 0x84
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	01db      	lsls	r3, r3, #7
 8004434:	4413      	add	r3, r2
 8004436:	3384      	adds	r3, #132	@ 0x84
 8004438:	461a      	mov	r2, r3
 800443a:	2300      	movs	r3, #0
 800443c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004444:	461a      	mov	r2, r3
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	431a      	orrs	r2, r3
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	431a      	orrs	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4619      	mov	r1, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	01db      	lsls	r3, r3, #7
 8004458:	440b      	add	r3, r1
 800445a:	3384      	adds	r3, #132	@ 0x84
 800445c:	4619      	mov	r1, r3
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	01db      	lsls	r3, r3, #7
 800446e:	4413      	add	r3, r2
 8004470:	3384      	adds	r3, #132	@ 0x84
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	4611      	mov	r1, r2
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	01d2      	lsls	r2, r2, #7
 800447e:	440a      	add	r2, r1
 8004480:	3284      	adds	r2, #132	@ 0x84
 8004482:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004486:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	461a      	mov	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	01db      	lsls	r3, r3, #7
 8004492:	4413      	add	r3, r2
 8004494:	3384      	adds	r3, #132	@ 0x84
 8004496:	461a      	mov	r2, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	01db      	lsls	r3, r3, #7
 80044a8:	4413      	add	r3, r2
 80044aa:	3384      	adds	r3, #132	@ 0x84
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	4611      	mov	r1, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	01d2      	lsls	r2, r2, #7
 80044b8:	440a      	add	r2, r1
 80044ba:	3284      	adds	r2, #132	@ 0x84
 80044bc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80044c0:	f023 0307 	bic.w	r3, r3, #7
 80044c4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	69da      	ldr	r2, [r3, #28]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	68f9      	ldr	r1, [r7, #12]
 80044d0:	6809      	ldr	r1, [r1, #0]
 80044d2:	4608      	mov	r0, r1
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	01c9      	lsls	r1, r1, #7
 80044d8:	4401      	add	r1, r0
 80044da:	3184      	adds	r1, #132	@ 0x84
 80044dc:	4313      	orrs	r3, r2
 80044de:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	01db      	lsls	r3, r3, #7
 80044ea:	4413      	add	r3, r2
 80044ec:	3384      	adds	r3, #132	@ 0x84
 80044ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	01db      	lsls	r3, r3, #7
 80044fa:	4413      	add	r3, r2
 80044fc:	3384      	adds	r3, #132	@ 0x84
 80044fe:	461a      	mov	r2, r3
 8004500:	2300      	movs	r3, #0
 8004502:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	461a      	mov	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	01db      	lsls	r3, r3, #7
 800450e:	4413      	add	r3, r2
 8004510:	3384      	adds	r3, #132	@ 0x84
 8004512:	461a      	mov	r2, r3
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004518:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d102      	bne.n	8004528 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004522:	2304      	movs	r3, #4
 8004524:	61fb      	str	r3, [r7, #28]
 8004526:	e01b      	b.n	8004560 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d102      	bne.n	8004536 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004530:	2303      	movs	r3, #3
 8004532:	61fb      	str	r3, [r7, #28]
 8004534:	e014      	b.n	8004560 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	2b04      	cmp	r3, #4
 800453c:	d00b      	beq.n	8004556 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004542:	2b02      	cmp	r3, #2
 8004544:	d007      	beq.n	8004556 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800454a:	2b03      	cmp	r3, #3
 800454c:	d003      	beq.n	8004556 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004552:	2b07      	cmp	r3, #7
 8004554:	d102      	bne.n	800455c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004556:	2302      	movs	r3, #2
 8004558:	61fb      	str	r3, [r7, #28]
 800455a:	e001      	b.n	8004560 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800455c:	2301      	movs	r3, #1
 800455e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	01db      	lsls	r3, r3, #7
 800456a:	4413      	add	r3, r2
 800456c:	3384      	adds	r3, #132	@ 0x84
 800456e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	6812      	ldr	r2, [r2, #0]
 8004574:	4611      	mov	r1, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	01d2      	lsls	r2, r2, #7
 800457a:	440a      	add	r2, r1
 800457c:	3284      	adds	r2, #132	@ 0x84
 800457e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004582:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004588:	69fa      	ldr	r2, [r7, #28]
 800458a:	fb02 f303 	mul.w	r3, r2, r3
 800458e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	6859      	ldr	r1, [r3, #4]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	1acb      	subs	r3, r1, r3
 800459a:	69f9      	ldr	r1, [r7, #28]
 800459c:	fb01 f303 	mul.w	r3, r1, r3
 80045a0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80045a2:	68f9      	ldr	r1, [r7, #12]
 80045a4:	6809      	ldr	r1, [r1, #0]
 80045a6:	4608      	mov	r0, r1
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	01c9      	lsls	r1, r1, #7
 80045ac:	4401      	add	r1, r0
 80045ae:	3184      	adds	r1, #132	@ 0x84
 80045b0:	4313      	orrs	r3, r2
 80045b2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	01db      	lsls	r3, r3, #7
 80045be:	4413      	add	r3, r2
 80045c0:	3384      	adds	r3, #132	@ 0x84
 80045c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	4611      	mov	r1, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	01d2      	lsls	r2, r2, #7
 80045ce:	440a      	add	r2, r1
 80045d0:	3284      	adds	r2, #132	@ 0x84
 80045d2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80045d6:	f023 0307 	bic.w	r3, r3, #7
 80045da:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	461a      	mov	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	01db      	lsls	r3, r3, #7
 80045e6:	4413      	add	r3, r2
 80045e8:	3384      	adds	r3, #132	@ 0x84
 80045ea:	461a      	mov	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	01db      	lsls	r3, r3, #7
 80045fc:	4413      	add	r3, r2
 80045fe:	3384      	adds	r3, #132	@ 0x84
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	6812      	ldr	r2, [r2, #0]
 8004606:	4611      	mov	r1, r2
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	01d2      	lsls	r2, r2, #7
 800460c:	440a      	add	r2, r1
 800460e:	3284      	adds	r2, #132	@ 0x84
 8004610:	f043 0301 	orr.w	r3, r3, #1
 8004614:	6013      	str	r3, [r2, #0]
}
 8004616:	bf00      	nop
 8004618:	3724      	adds	r7, #36	@ 0x24
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e267      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d075      	beq.n	800472e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004642:	4b88      	ldr	r3, [pc, #544]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	2b04      	cmp	r3, #4
 800464c:	d00c      	beq.n	8004668 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800464e:	4b85      	ldr	r3, [pc, #532]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004656:	2b08      	cmp	r3, #8
 8004658:	d112      	bne.n	8004680 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800465a:	4b82      	ldr	r3, [pc, #520]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004662:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004666:	d10b      	bne.n	8004680 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004668:	4b7e      	ldr	r3, [pc, #504]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d05b      	beq.n	800472c <HAL_RCC_OscConfig+0x108>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d157      	bne.n	800472c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e242      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004688:	d106      	bne.n	8004698 <HAL_RCC_OscConfig+0x74>
 800468a:	4b76      	ldr	r3, [pc, #472]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a75      	ldr	r2, [pc, #468]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 8004690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	e01d      	b.n	80046d4 <HAL_RCC_OscConfig+0xb0>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046a0:	d10c      	bne.n	80046bc <HAL_RCC_OscConfig+0x98>
 80046a2:	4b70      	ldr	r3, [pc, #448]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a6f      	ldr	r2, [pc, #444]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 80046a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a6c      	ldr	r2, [pc, #432]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 80046b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	e00b      	b.n	80046d4 <HAL_RCC_OscConfig+0xb0>
 80046bc:	4b69      	ldr	r3, [pc, #420]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a68      	ldr	r2, [pc, #416]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 80046c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	4b66      	ldr	r3, [pc, #408]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a65      	ldr	r2, [pc, #404]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 80046ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d013      	beq.n	8004704 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046dc:	f7fe f874 	bl	80027c8 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046e4:	f7fe f870 	bl	80027c8 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b64      	cmp	r3, #100	@ 0x64
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e207      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0f0      	beq.n	80046e4 <HAL_RCC_OscConfig+0xc0>
 8004702:	e014      	b.n	800472e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004704:	f7fe f860 	bl	80027c8 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800470c:	f7fe f85c 	bl	80027c8 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b64      	cmp	r3, #100	@ 0x64
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e1f3      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800471e:	4b51      	ldr	r3, [pc, #324]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f0      	bne.n	800470c <HAL_RCC_OscConfig+0xe8>
 800472a:	e000      	b.n	800472e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800472c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d063      	beq.n	8004802 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800473a:	4b4a      	ldr	r3, [pc, #296]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00b      	beq.n	800475e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004746:	4b47      	ldr	r3, [pc, #284]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800474e:	2b08      	cmp	r3, #8
 8004750:	d11c      	bne.n	800478c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004752:	4b44      	ldr	r3, [pc, #272]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d116      	bne.n	800478c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800475e:	4b41      	ldr	r3, [pc, #260]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <HAL_RCC_OscConfig+0x152>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d001      	beq.n	8004776 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e1c7      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004776:	4b3b      	ldr	r3, [pc, #236]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	4937      	ldr	r1, [pc, #220]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 8004786:	4313      	orrs	r3, r2
 8004788:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800478a:	e03a      	b.n	8004802 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d020      	beq.n	80047d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004794:	4b34      	ldr	r3, [pc, #208]	@ (8004868 <HAL_RCC_OscConfig+0x244>)
 8004796:	2201      	movs	r2, #1
 8004798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479a:	f7fe f815 	bl	80027c8 <HAL_GetTick>
 800479e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047a2:	f7fe f811 	bl	80027c8 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e1a8      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0f0      	beq.n	80047a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c0:	4b28      	ldr	r3, [pc, #160]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	4925      	ldr	r1, [pc, #148]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	600b      	str	r3, [r1, #0]
 80047d4:	e015      	b.n	8004802 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047d6:	4b24      	ldr	r3, [pc, #144]	@ (8004868 <HAL_RCC_OscConfig+0x244>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047dc:	f7fd fff4 	bl	80027c8 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047e4:	f7fd fff0 	bl	80027c8 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e187      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f0      	bne.n	80047e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d036      	beq.n	800487c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d016      	beq.n	8004844 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004816:	4b15      	ldr	r3, [pc, #84]	@ (800486c <HAL_RCC_OscConfig+0x248>)
 8004818:	2201      	movs	r2, #1
 800481a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481c:	f7fd ffd4 	bl	80027c8 <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004824:	f7fd ffd0 	bl	80027c8 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e167      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004836:	4b0b      	ldr	r3, [pc, #44]	@ (8004864 <HAL_RCC_OscConfig+0x240>)
 8004838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0f0      	beq.n	8004824 <HAL_RCC_OscConfig+0x200>
 8004842:	e01b      	b.n	800487c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004844:	4b09      	ldr	r3, [pc, #36]	@ (800486c <HAL_RCC_OscConfig+0x248>)
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800484a:	f7fd ffbd 	bl	80027c8 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004850:	e00e      	b.n	8004870 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004852:	f7fd ffb9 	bl	80027c8 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d907      	bls.n	8004870 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e150      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
 8004864:	40023800 	.word	0x40023800
 8004868:	42470000 	.word	0x42470000
 800486c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004870:	4b88      	ldr	r3, [pc, #544]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1ea      	bne.n	8004852 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 8097 	beq.w	80049b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800488a:	2300      	movs	r3, #0
 800488c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800488e:	4b81      	ldr	r3, [pc, #516]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10f      	bne.n	80048ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800489a:	2300      	movs	r3, #0
 800489c:	60bb      	str	r3, [r7, #8]
 800489e:	4b7d      	ldr	r3, [pc, #500]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a2:	4a7c      	ldr	r2, [pc, #496]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 80048a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80048aa:	4b7a      	ldr	r3, [pc, #488]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b6:	2301      	movs	r3, #1
 80048b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ba:	4b77      	ldr	r3, [pc, #476]	@ (8004a98 <HAL_RCC_OscConfig+0x474>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d118      	bne.n	80048f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048c6:	4b74      	ldr	r3, [pc, #464]	@ (8004a98 <HAL_RCC_OscConfig+0x474>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a73      	ldr	r2, [pc, #460]	@ (8004a98 <HAL_RCC_OscConfig+0x474>)
 80048cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048d2:	f7fd ff79 	bl	80027c8 <HAL_GetTick>
 80048d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d8:	e008      	b.n	80048ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048da:	f7fd ff75 	bl	80027c8 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e10c      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ec:	4b6a      	ldr	r3, [pc, #424]	@ (8004a98 <HAL_RCC_OscConfig+0x474>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0f0      	beq.n	80048da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d106      	bne.n	800490e <HAL_RCC_OscConfig+0x2ea>
 8004900:	4b64      	ldr	r3, [pc, #400]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004904:	4a63      	ldr	r2, [pc, #396]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	6713      	str	r3, [r2, #112]	@ 0x70
 800490c:	e01c      	b.n	8004948 <HAL_RCC_OscConfig+0x324>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b05      	cmp	r3, #5
 8004914:	d10c      	bne.n	8004930 <HAL_RCC_OscConfig+0x30c>
 8004916:	4b5f      	ldr	r3, [pc, #380]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491a:	4a5e      	ldr	r2, [pc, #376]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 800491c:	f043 0304 	orr.w	r3, r3, #4
 8004920:	6713      	str	r3, [r2, #112]	@ 0x70
 8004922:	4b5c      	ldr	r3, [pc, #368]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004926:	4a5b      	ldr	r2, [pc, #364]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004928:	f043 0301 	orr.w	r3, r3, #1
 800492c:	6713      	str	r3, [r2, #112]	@ 0x70
 800492e:	e00b      	b.n	8004948 <HAL_RCC_OscConfig+0x324>
 8004930:	4b58      	ldr	r3, [pc, #352]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004934:	4a57      	ldr	r2, [pc, #348]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004936:	f023 0301 	bic.w	r3, r3, #1
 800493a:	6713      	str	r3, [r2, #112]	@ 0x70
 800493c:	4b55      	ldr	r3, [pc, #340]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 800493e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004940:	4a54      	ldr	r2, [pc, #336]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004942:	f023 0304 	bic.w	r3, r3, #4
 8004946:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d015      	beq.n	800497c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004950:	f7fd ff3a 	bl	80027c8 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004956:	e00a      	b.n	800496e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004958:	f7fd ff36 	bl	80027c8 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004966:	4293      	cmp	r3, r2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e0cb      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800496e:	4b49      	ldr	r3, [pc, #292]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0ee      	beq.n	8004958 <HAL_RCC_OscConfig+0x334>
 800497a:	e014      	b.n	80049a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800497c:	f7fd ff24 	bl	80027c8 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004982:	e00a      	b.n	800499a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004984:	f7fd ff20 	bl	80027c8 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e0b5      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800499a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 800499c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1ee      	bne.n	8004984 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049a6:	7dfb      	ldrb	r3, [r7, #23]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d105      	bne.n	80049b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ac:	4b39      	ldr	r3, [pc, #228]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 80049ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b0:	4a38      	ldr	r2, [pc, #224]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 80049b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80a1 	beq.w	8004b04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049c2:	4b34      	ldr	r3, [pc, #208]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 030c 	and.w	r3, r3, #12
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d05c      	beq.n	8004a88 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d141      	bne.n	8004a5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049d6:	4b31      	ldr	r3, [pc, #196]	@ (8004a9c <HAL_RCC_OscConfig+0x478>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049dc:	f7fd fef4 	bl	80027c8 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e4:	f7fd fef0 	bl	80027c8 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e087      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f6:	4b27      	ldr	r3, [pc, #156]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f0      	bne.n	80049e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69da      	ldr	r2, [r3, #28]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a10:	019b      	lsls	r3, r3, #6
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a18:	085b      	lsrs	r3, r3, #1
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	041b      	lsls	r3, r3, #16
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a24:	061b      	lsls	r3, r3, #24
 8004a26:	491b      	ldr	r1, [pc, #108]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004a9c <HAL_RCC_OscConfig+0x478>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a32:	f7fd fec9 	bl	80027c8 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a3a:	f7fd fec5 	bl	80027c8 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e05c      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a4c:	4b11      	ldr	r3, [pc, #68]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCC_OscConfig+0x416>
 8004a58:	e054      	b.n	8004b04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a5a:	4b10      	ldr	r3, [pc, #64]	@ (8004a9c <HAL_RCC_OscConfig+0x478>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a60:	f7fd feb2 	bl	80027c8 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a68:	f7fd feae 	bl	80027c8 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e045      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a7a:	4b06      	ldr	r3, [pc, #24]	@ (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f0      	bne.n	8004a68 <HAL_RCC_OscConfig+0x444>
 8004a86:	e03d      	b.n	8004b04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d107      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e038      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
 8004a94:	40023800 	.word	0x40023800
 8004a98:	40007000 	.word	0x40007000
 8004a9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8004b10 <HAL_RCC_OscConfig+0x4ec>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d028      	beq.n	8004b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d121      	bne.n	8004b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d11a      	bne.n	8004b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ad6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d111      	bne.n	8004b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae6:	085b      	lsrs	r3, r3, #1
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d107      	bne.n	8004b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d001      	beq.n	8004b04 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e000      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40023800 	.word	0x40023800

08004b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0cc      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b28:	4b68      	ldr	r3, [pc, #416]	@ (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d90c      	bls.n	8004b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b36:	4b65      	ldr	r3, [pc, #404]	@ (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3e:	4b63      	ldr	r3, [pc, #396]	@ (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0b8      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d020      	beq.n	8004b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b68:	4b59      	ldr	r3, [pc, #356]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	4a58      	ldr	r2, [pc, #352]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b80:	4b53      	ldr	r3, [pc, #332]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	4a52      	ldr	r2, [pc, #328]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b8c:	4b50      	ldr	r3, [pc, #320]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	494d      	ldr	r1, [pc, #308]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d044      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d107      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb2:	4b47      	ldr	r3, [pc, #284]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d119      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e07f      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d003      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d107      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d109      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e06f      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be2:	4b3b      	ldr	r3, [pc, #236]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e067      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bf2:	4b37      	ldr	r3, [pc, #220]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f023 0203 	bic.w	r2, r3, #3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	4934      	ldr	r1, [pc, #208]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c04:	f7fd fde0 	bl	80027c8 <HAL_GetTick>
 8004c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0a:	e00a      	b.n	8004c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c0c:	f7fd fddc 	bl	80027c8 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e04f      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c22:	4b2b      	ldr	r3, [pc, #172]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 020c 	and.w	r2, r3, #12
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d1eb      	bne.n	8004c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c34:	4b25      	ldr	r3, [pc, #148]	@ (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 030f 	and.w	r3, r3, #15
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d20c      	bcs.n	8004c5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c42:	4b22      	ldr	r3, [pc, #136]	@ (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4a:	4b20      	ldr	r3, [pc, #128]	@ (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d001      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e032      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d008      	beq.n	8004c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c68:	4b19      	ldr	r3, [pc, #100]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	4916      	ldr	r1, [pc, #88]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d009      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c86:	4b12      	ldr	r3, [pc, #72]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	490e      	ldr	r1, [pc, #56]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c9a:	f000 f821 	bl	8004ce0 <HAL_RCC_GetSysClockFreq>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	091b      	lsrs	r3, r3, #4
 8004ca6:	f003 030f 	and.w	r3, r3, #15
 8004caa:	490a      	ldr	r1, [pc, #40]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004cac:	5ccb      	ldrb	r3, [r1, r3]
 8004cae:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb2:	4a09      	ldr	r2, [pc, #36]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004cb6:	4b09      	ldr	r3, [pc, #36]	@ (8004cdc <HAL_RCC_ClockConfig+0x1c8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fd fd40 	bl	8002740 <HAL_InitTick>

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40023c00 	.word	0x40023c00
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	08006dc8 	.word	0x08006dc8
 8004cd8:	20000004 	.word	0x20000004
 8004cdc:	20000008 	.word	0x20000008

08004ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ce4:	b094      	sub	sp, #80	@ 0x50
 8004ce6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cf8:	4b79      	ldr	r3, [pc, #484]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 030c 	and.w	r3, r3, #12
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d00d      	beq.n	8004d20 <HAL_RCC_GetSysClockFreq+0x40>
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	f200 80e1 	bhi.w	8004ecc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <HAL_RCC_GetSysClockFreq+0x34>
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d003      	beq.n	8004d1a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d12:	e0db      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d14:	4b73      	ldr	r3, [pc, #460]	@ (8004ee4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d18:	e0db      	b.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d1a:	4b73      	ldr	r3, [pc, #460]	@ (8004ee8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d1e:	e0d8      	b.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d20:	4b6f      	ldr	r3, [pc, #444]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d28:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d2a:	4b6d      	ldr	r3, [pc, #436]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d063      	beq.n	8004dfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d36:	4b6a      	ldr	r3, [pc, #424]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	099b      	lsrs	r3, r3, #6
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d48:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d52:	4622      	mov	r2, r4
 8004d54:	462b      	mov	r3, r5
 8004d56:	f04f 0000 	mov.w	r0, #0
 8004d5a:	f04f 0100 	mov.w	r1, #0
 8004d5e:	0159      	lsls	r1, r3, #5
 8004d60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d64:	0150      	lsls	r0, r2, #5
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4621      	mov	r1, r4
 8004d6c:	1a51      	subs	r1, r2, r1
 8004d6e:	6139      	str	r1, [r7, #16]
 8004d70:	4629      	mov	r1, r5
 8004d72:	eb63 0301 	sbc.w	r3, r3, r1
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d84:	4659      	mov	r1, fp
 8004d86:	018b      	lsls	r3, r1, #6
 8004d88:	4651      	mov	r1, sl
 8004d8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d8e:	4651      	mov	r1, sl
 8004d90:	018a      	lsls	r2, r1, #6
 8004d92:	4651      	mov	r1, sl
 8004d94:	ebb2 0801 	subs.w	r8, r2, r1
 8004d98:	4659      	mov	r1, fp
 8004d9a:	eb63 0901 	sbc.w	r9, r3, r1
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004db2:	4690      	mov	r8, r2
 8004db4:	4699      	mov	r9, r3
 8004db6:	4623      	mov	r3, r4
 8004db8:	eb18 0303 	adds.w	r3, r8, r3
 8004dbc:	60bb      	str	r3, [r7, #8]
 8004dbe:	462b      	mov	r3, r5
 8004dc0:	eb49 0303 	adc.w	r3, r9, r3
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	024b      	lsls	r3, r1, #9
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ddc:	4621      	mov	r1, r4
 8004dde:	024a      	lsls	r2, r1, #9
 8004de0:	4610      	mov	r0, r2
 8004de2:	4619      	mov	r1, r3
 8004de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004de6:	2200      	movs	r2, #0
 8004de8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004df0:	f7fb fa4e 	bl	8000290 <__aeabi_uldivmod>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4613      	mov	r3, r2
 8004dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dfc:	e058      	b.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dfe:	4b38      	ldr	r3, [pc, #224]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	099b      	lsrs	r3, r3, #6
 8004e04:	2200      	movs	r2, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	4611      	mov	r1, r2
 8004e0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e0e:	623b      	str	r3, [r7, #32]
 8004e10:	2300      	movs	r3, #0
 8004e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e18:	4642      	mov	r2, r8
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	f04f 0000 	mov.w	r0, #0
 8004e20:	f04f 0100 	mov.w	r1, #0
 8004e24:	0159      	lsls	r1, r3, #5
 8004e26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e2a:	0150      	lsls	r0, r2, #5
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	4641      	mov	r1, r8
 8004e32:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e36:	4649      	mov	r1, r9
 8004e38:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e50:	ebb2 040a 	subs.w	r4, r2, sl
 8004e54:	eb63 050b 	sbc.w	r5, r3, fp
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	00eb      	lsls	r3, r5, #3
 8004e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e66:	00e2      	lsls	r2, r4, #3
 8004e68:	4614      	mov	r4, r2
 8004e6a:	461d      	mov	r5, r3
 8004e6c:	4643      	mov	r3, r8
 8004e6e:	18e3      	adds	r3, r4, r3
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	464b      	mov	r3, r9
 8004e74:	eb45 0303 	adc.w	r3, r5, r3
 8004e78:	607b      	str	r3, [r7, #4]
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e86:	4629      	mov	r1, r5
 8004e88:	028b      	lsls	r3, r1, #10
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e90:	4621      	mov	r1, r4
 8004e92:	028a      	lsls	r2, r1, #10
 8004e94:	4610      	mov	r0, r2
 8004e96:	4619      	mov	r1, r3
 8004e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	61fa      	str	r2, [r7, #28]
 8004ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ea4:	f7fb f9f4 	bl	8000290 <__aeabi_uldivmod>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4613      	mov	r3, r2
 8004eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	0c1b      	lsrs	r3, r3, #16
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	3301      	adds	r3, #1
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004ec0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004eca:	e002      	b.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ecc:	4b05      	ldr	r3, [pc, #20]	@ (8004ee4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ece:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3750      	adds	r7, #80	@ 0x50
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ede:	bf00      	nop
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	00f42400 	.word	0x00f42400
 8004ee8:	007a1200 	.word	0x007a1200

08004eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ef0:	4b03      	ldr	r3, [pc, #12]	@ (8004f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	20000004 	.word	0x20000004

08004f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f08:	f7ff fff0 	bl	8004eec <HAL_RCC_GetHCLKFreq>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	4b05      	ldr	r3, [pc, #20]	@ (8004f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	0a9b      	lsrs	r3, r3, #10
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	4903      	ldr	r1, [pc, #12]	@ (8004f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f1a:	5ccb      	ldrb	r3, [r1, r3]
 8004f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40023800 	.word	0x40023800
 8004f28:	08006dd8 	.word	0x08006dd8

08004f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10b      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d105      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d075      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f60:	4b91      	ldr	r3, [pc, #580]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f66:	f7fd fc2f 	bl	80027c8 <HAL_GetTick>
 8004f6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f6e:	f7fd fc2b 	bl	80027c8 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e189      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f80:	4b8a      	ldr	r3, [pc, #552]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1f0      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d009      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	019a      	lsls	r2, r3, #6
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	071b      	lsls	r3, r3, #28
 8004fa4:	4981      	ldr	r1, [pc, #516]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01f      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fb8:	4b7c      	ldr	r3, [pc, #496]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fbe:	0f1b      	lsrs	r3, r3, #28
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	019a      	lsls	r2, r3, #6
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	061b      	lsls	r3, r3, #24
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	071b      	lsls	r3, r3, #28
 8004fd8:	4974      	ldr	r1, [pc, #464]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fe0:	4b72      	ldr	r3, [pc, #456]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fe6:	f023 021f 	bic.w	r2, r3, #31
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	496e      	ldr	r1, [pc, #440]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00d      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	019a      	lsls	r2, r3, #6
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	061b      	lsls	r3, r3, #24
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	071b      	lsls	r3, r3, #28
 8005018:	4964      	ldr	r1, [pc, #400]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005020:	4b61      	ldr	r3, [pc, #388]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005022:	2201      	movs	r2, #1
 8005024:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005026:	f7fd fbcf 	bl	80027c8 <HAL_GetTick>
 800502a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800502c:	e008      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800502e:	f7fd fbcb 	bl	80027c8 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e129      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005040:	4b5a      	ldr	r3, [pc, #360]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0f0      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d105      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005060:	2b00      	cmp	r3, #0
 8005062:	d079      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005064:	4b52      	ldr	r3, [pc, #328]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800506a:	f7fd fbad 	bl	80027c8 <HAL_GetTick>
 800506e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005070:	e008      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005072:	f7fd fba9 	bl	80027c8 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e107      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005084:	4b49      	ldr	r3, [pc, #292]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800508c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005090:	d0ef      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b00      	cmp	r3, #0
 800509c:	d020      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800509e:	4b43      	ldr	r3, [pc, #268]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a4:	0f1b      	lsrs	r3, r3, #28
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	019a      	lsls	r2, r3, #6
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	061b      	lsls	r3, r3, #24
 80050b8:	431a      	orrs	r2, r3
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	071b      	lsls	r3, r3, #28
 80050be:	493b      	ldr	r1, [pc, #236]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80050c6:	4b39      	ldr	r3, [pc, #228]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050cc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	3b01      	subs	r3, #1
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	4934      	ldr	r1, [pc, #208]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0308 	and.w	r3, r3, #8
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01e      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050ec:	4b2f      	ldr	r3, [pc, #188]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f2:	0e1b      	lsrs	r3, r3, #24
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	019a      	lsls	r2, r3, #6
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	061b      	lsls	r3, r3, #24
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	071b      	lsls	r3, r3, #28
 800510c:	4927      	ldr	r1, [pc, #156]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800510e:	4313      	orrs	r3, r2
 8005110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005114:	4b25      	ldr	r3, [pc, #148]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005116:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800511a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005122:	4922      	ldr	r1, [pc, #136]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800512a:	4b21      	ldr	r3, [pc, #132]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800512c:	2201      	movs	r2, #1
 800512e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005130:	f7fd fb4a 	bl	80027c8 <HAL_GetTick>
 8005134:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005136:	e008      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005138:	f7fd fb46 	bl	80027c8 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e0a4      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800514a:	4b18      	ldr	r3, [pc, #96]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005152:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005156:	d1ef      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0320 	and.w	r3, r3, #32
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 808b 	beq.w	800527c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	4b10      	ldr	r3, [pc, #64]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800516c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516e:	4a0f      	ldr	r2, [pc, #60]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005174:	6413      	str	r3, [r2, #64]	@ 0x40
 8005176:	4b0d      	ldr	r3, [pc, #52]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005182:	4b0c      	ldr	r3, [pc, #48]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a0b      	ldr	r2, [pc, #44]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800518c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800518e:	f7fd fb1b 	bl	80027c8 <HAL_GetTick>
 8005192:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005194:	e010      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005196:	f7fd fb17 	bl	80027c8 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d909      	bls.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e075      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80051a8:	42470068 	.word	0x42470068
 80051ac:	40023800 	.word	0x40023800
 80051b0:	42470070 	.word	0x42470070
 80051b4:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80051b8:	4b38      	ldr	r3, [pc, #224]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0e8      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051c4:	4b36      	ldr	r3, [pc, #216]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051cc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d02f      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d028      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051e2:	4b2f      	ldr	r3, [pc, #188]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051ec:	4b2d      	ldr	r3, [pc, #180]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80051ee:	2201      	movs	r2, #1
 80051f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051f2:	4b2c      	ldr	r3, [pc, #176]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80051f8:	4a29      	ldr	r2, [pc, #164]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80051fe:	4b28      	ldr	r3, [pc, #160]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b01      	cmp	r3, #1
 8005208:	d114      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800520a:	f7fd fadd 	bl	80027c8 <HAL_GetTick>
 800520e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005210:	e00a      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005212:	f7fd fad9 	bl	80027c8 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005220:	4293      	cmp	r3, r2
 8005222:	d901      	bls.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e035      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005228:	4b1d      	ldr	r3, [pc, #116]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800522a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0ee      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005238:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800523c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005240:	d10d      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005242:	4b17      	ldr	r3, [pc, #92]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005252:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005256:	4912      	ldr	r1, [pc, #72]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005258:	4313      	orrs	r3, r2
 800525a:	608b      	str	r3, [r1, #8]
 800525c:	e005      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800525e:	4b10      	ldr	r3, [pc, #64]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	4a0f      	ldr	r2, [pc, #60]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005264:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005268:	6093      	str	r3, [r2, #8]
 800526a:	4b0d      	ldr	r3, [pc, #52]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800526c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005276:	490a      	ldr	r1, [pc, #40]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005278:	4313      	orrs	r3, r2
 800527a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0310 	and.w	r3, r3, #16
 8005284:	2b00      	cmp	r3, #0
 8005286:	d004      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800528e:	4b06      	ldr	r3, [pc, #24]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005290:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	40007000 	.word	0x40007000
 80052a0:	40023800 	.word	0x40023800
 80052a4:	42470e40 	.word	0x42470e40
 80052a8:	424711e0 	.word	0x424711e0

080052ac <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e01c      	b.n	80052f8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	795b      	ldrb	r3, [r3, #5]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d105      	bne.n	80052d4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fc fd0e 	bl	8001cf0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0204 	orr.w	r2, r2, #4
 80052e8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e07b      	b.n	800540a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005316:	2b00      	cmp	r3, #0
 8005318:	d108      	bne.n	800532c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005322:	d009      	beq.n	8005338 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	61da      	str	r2, [r3, #28]
 800532a:	e005      	b.n	8005338 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d106      	bne.n	8005358 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7fc fcee 	bl	8001d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800536e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053a8:	431a      	orrs	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053bc:	ea42 0103 	orr.w	r1, r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	0c1b      	lsrs	r3, r3, #16
 80053d6:	f003 0104 	and.w	r1, r3, #4
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053de:	f003 0210 	and.w	r2, r3, #16
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69da      	ldr	r2, [r3, #28]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b082      	sub	sp, #8
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e01a      	b.n	800545a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800543a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f7fc fcc1 	bl	8001dc4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b088      	sub	sp, #32
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	603b      	str	r3, [r7, #0]
 800546e:	4613      	mov	r3, r2
 8005470:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005472:	f7fd f9a9 	bl	80027c8 <HAL_GetTick>
 8005476:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005478:	88fb      	ldrh	r3, [r7, #6]
 800547a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b01      	cmp	r3, #1
 8005486:	d001      	beq.n	800548c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005488:	2302      	movs	r3, #2
 800548a:	e12a      	b.n	80056e2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <HAL_SPI_Transmit+0x36>
 8005492:	88fb      	ldrh	r3, [r7, #6]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e122      	b.n	80056e2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d101      	bne.n	80054aa <HAL_SPI_Transmit+0x48>
 80054a6:	2302      	movs	r3, #2
 80054a8:	e11b      	b.n	80056e2 <HAL_SPI_Transmit+0x280>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2203      	movs	r2, #3
 80054b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	88fa      	ldrh	r2, [r7, #6]
 80054ca:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	88fa      	ldrh	r2, [r7, #6]
 80054d0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054f8:	d10f      	bne.n	800551a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005508:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005518:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005524:	2b40      	cmp	r3, #64	@ 0x40
 8005526:	d007      	beq.n	8005538 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005536:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005540:	d152      	bne.n	80055e8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <HAL_SPI_Transmit+0xee>
 800554a:	8b7b      	ldrh	r3, [r7, #26]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d145      	bne.n	80055dc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005554:	881a      	ldrh	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005560:	1c9a      	adds	r2, r3, #2
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29a      	uxth	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005574:	e032      	b.n	80055dc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b02      	cmp	r3, #2
 8005582:	d112      	bne.n	80055aa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005588:	881a      	ldrh	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005594:	1c9a      	adds	r2, r3, #2
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800559e:	b29b      	uxth	r3, r3
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80055a8:	e018      	b.n	80055dc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055aa:	f7fd f90d 	bl	80027c8 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d803      	bhi.n	80055c2 <HAL_SPI_Transmit+0x160>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c0:	d102      	bne.n	80055c8 <HAL_SPI_Transmit+0x166>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d109      	bne.n	80055dc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e082      	b.n	80056e2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1c7      	bne.n	8005576 <HAL_SPI_Transmit+0x114>
 80055e6:	e053      	b.n	8005690 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <HAL_SPI_Transmit+0x194>
 80055f0:	8b7b      	ldrh	r3, [r7, #26]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d147      	bne.n	8005686 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	330c      	adds	r3, #12
 8005600:	7812      	ldrb	r2, [r2, #0]
 8005602:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005612:	b29b      	uxth	r3, r3
 8005614:	3b01      	subs	r3, #1
 8005616:	b29a      	uxth	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800561c:	e033      	b.n	8005686 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b02      	cmp	r3, #2
 800562a:	d113      	bne.n	8005654 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	330c      	adds	r3, #12
 8005636:	7812      	ldrb	r2, [r2, #0]
 8005638:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005648:	b29b      	uxth	r3, r3
 800564a:	3b01      	subs	r3, #1
 800564c:	b29a      	uxth	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005652:	e018      	b.n	8005686 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005654:	f7fd f8b8 	bl	80027c8 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d803      	bhi.n	800566c <HAL_SPI_Transmit+0x20a>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566a:	d102      	bne.n	8005672 <HAL_SPI_Transmit+0x210>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d109      	bne.n	8005686 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e02d      	b.n	80056e2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800568a:	b29b      	uxth	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1c6      	bne.n	800561e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005690:	69fa      	ldr	r2, [r7, #28]
 8005692:	6839      	ldr	r1, [r7, #0]
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 f8bf 	bl	8005818 <SPI_EndRxTxTransaction>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2220      	movs	r2, #32
 80056a4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10a      	bne.n	80056c4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	617b      	str	r3, [r7, #20]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	617b      	str	r3, [r7, #20]
 80056c2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80056e0:	2300      	movs	r3, #0
  }
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3720      	adds	r7, #32
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056f8:	b2db      	uxtb	r3, r3
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
	...

08005708 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	603b      	str	r3, [r7, #0]
 8005714:	4613      	mov	r3, r2
 8005716:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005718:	f7fd f856 	bl	80027c8 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005720:	1a9b      	subs	r3, r3, r2
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	4413      	add	r3, r2
 8005726:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005728:	f7fd f84e 	bl	80027c8 <HAL_GetTick>
 800572c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800572e:	4b39      	ldr	r3, [pc, #228]	@ (8005814 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	015b      	lsls	r3, r3, #5
 8005734:	0d1b      	lsrs	r3, r3, #20
 8005736:	69fa      	ldr	r2, [r7, #28]
 8005738:	fb02 f303 	mul.w	r3, r2, r3
 800573c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800573e:	e054      	b.n	80057ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005746:	d050      	beq.n	80057ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005748:	f7fd f83e 	bl	80027c8 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	69fa      	ldr	r2, [r7, #28]
 8005754:	429a      	cmp	r2, r3
 8005756:	d902      	bls.n	800575e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d13d      	bne.n	80057da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800576c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005776:	d111      	bne.n	800579c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005780:	d004      	beq.n	800578c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800578a:	d107      	bne.n	800579c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800579a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057a4:	d10f      	bne.n	80057c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e017      	b.n	800580a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4013      	ands	r3, r2
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	bf0c      	ite	eq
 80057fa:	2301      	moveq	r3, #1
 80057fc:	2300      	movne	r3, #0
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	461a      	mov	r2, r3
 8005802:	79fb      	ldrb	r3, [r7, #7]
 8005804:	429a      	cmp	r2, r3
 8005806:	d19b      	bne.n	8005740 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3720      	adds	r7, #32
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20000004 	.word	0x20000004

08005818 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af02      	add	r7, sp, #8
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2201      	movs	r2, #1
 800582c:	2102      	movs	r1, #2
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f7ff ff6a 	bl	8005708 <SPI_WaitFlagStateUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d007      	beq.n	800584a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800583e:	f043 0220 	orr.w	r2, r3, #32
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e032      	b.n	80058b0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800584a:	4b1b      	ldr	r3, [pc, #108]	@ (80058b8 <SPI_EndRxTxTransaction+0xa0>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a1b      	ldr	r2, [pc, #108]	@ (80058bc <SPI_EndRxTxTransaction+0xa4>)
 8005850:	fba2 2303 	umull	r2, r3, r2, r3
 8005854:	0d5b      	lsrs	r3, r3, #21
 8005856:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800585a:	fb02 f303 	mul.w	r3, r2, r3
 800585e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005868:	d112      	bne.n	8005890 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2200      	movs	r2, #0
 8005872:	2180      	movs	r1, #128	@ 0x80
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f7ff ff47 	bl	8005708 <SPI_WaitFlagStateUntilTimeout>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d016      	beq.n	80058ae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005884:	f043 0220 	orr.w	r2, r3, #32
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e00f      	b.n	80058b0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	3b01      	subs	r3, #1
 800589a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a6:	2b80      	cmp	r3, #128	@ 0x80
 80058a8:	d0f2      	beq.n	8005890 <SPI_EndRxTxTransaction+0x78>
 80058aa:	e000      	b.n	80058ae <SPI_EndRxTxTransaction+0x96>
        break;
 80058ac:	bf00      	nop
  }

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	20000004 	.word	0x20000004
 80058bc:	165e9f81 	.word	0x165e9f81

080058c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e041      	b.n	8005956 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fc fa8a 	bl	8001e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4619      	mov	r1, r3
 80058fe:	4610      	mov	r0, r2
 8005900:	f000 f8f4 	bl	8005aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005972:	2b01      	cmp	r3, #1
 8005974:	d101      	bne.n	800597a <HAL_TIM_ConfigClockSource+0x1c>
 8005976:	2302      	movs	r3, #2
 8005978:	e0b4      	b.n	8005ae4 <HAL_TIM_ConfigClockSource+0x186>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2202      	movs	r2, #2
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005998:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059a0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059b2:	d03e      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0xd4>
 80059b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059b8:	f200 8087 	bhi.w	8005aca <HAL_TIM_ConfigClockSource+0x16c>
 80059bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059c0:	f000 8086 	beq.w	8005ad0 <HAL_TIM_ConfigClockSource+0x172>
 80059c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059c8:	d87f      	bhi.n	8005aca <HAL_TIM_ConfigClockSource+0x16c>
 80059ca:	2b70      	cmp	r3, #112	@ 0x70
 80059cc:	d01a      	beq.n	8005a04 <HAL_TIM_ConfigClockSource+0xa6>
 80059ce:	2b70      	cmp	r3, #112	@ 0x70
 80059d0:	d87b      	bhi.n	8005aca <HAL_TIM_ConfigClockSource+0x16c>
 80059d2:	2b60      	cmp	r3, #96	@ 0x60
 80059d4:	d050      	beq.n	8005a78 <HAL_TIM_ConfigClockSource+0x11a>
 80059d6:	2b60      	cmp	r3, #96	@ 0x60
 80059d8:	d877      	bhi.n	8005aca <HAL_TIM_ConfigClockSource+0x16c>
 80059da:	2b50      	cmp	r3, #80	@ 0x50
 80059dc:	d03c      	beq.n	8005a58 <HAL_TIM_ConfigClockSource+0xfa>
 80059de:	2b50      	cmp	r3, #80	@ 0x50
 80059e0:	d873      	bhi.n	8005aca <HAL_TIM_ConfigClockSource+0x16c>
 80059e2:	2b40      	cmp	r3, #64	@ 0x40
 80059e4:	d058      	beq.n	8005a98 <HAL_TIM_ConfigClockSource+0x13a>
 80059e6:	2b40      	cmp	r3, #64	@ 0x40
 80059e8:	d86f      	bhi.n	8005aca <HAL_TIM_ConfigClockSource+0x16c>
 80059ea:	2b30      	cmp	r3, #48	@ 0x30
 80059ec:	d064      	beq.n	8005ab8 <HAL_TIM_ConfigClockSource+0x15a>
 80059ee:	2b30      	cmp	r3, #48	@ 0x30
 80059f0:	d86b      	bhi.n	8005aca <HAL_TIM_ConfigClockSource+0x16c>
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	d060      	beq.n	8005ab8 <HAL_TIM_ConfigClockSource+0x15a>
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d867      	bhi.n	8005aca <HAL_TIM_ConfigClockSource+0x16c>
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d05c      	beq.n	8005ab8 <HAL_TIM_ConfigClockSource+0x15a>
 80059fe:	2b10      	cmp	r3, #16
 8005a00:	d05a      	beq.n	8005ab8 <HAL_TIM_ConfigClockSource+0x15a>
 8005a02:	e062      	b.n	8005aca <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a14:	f000 f990 	bl	8005d38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a26:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	609a      	str	r2, [r3, #8]
      break;
 8005a30:	e04f      	b.n	8005ad2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a42:	f000 f979 	bl	8005d38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a54:	609a      	str	r2, [r3, #8]
      break;
 8005a56:	e03c      	b.n	8005ad2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a64:	461a      	mov	r2, r3
 8005a66:	f000 f8ed 	bl	8005c44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2150      	movs	r1, #80	@ 0x50
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 f946 	bl	8005d02 <TIM_ITRx_SetConfig>
      break;
 8005a76:	e02c      	b.n	8005ad2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a84:	461a      	mov	r2, r3
 8005a86:	f000 f90c 	bl	8005ca2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2160      	movs	r1, #96	@ 0x60
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 f936 	bl	8005d02 <TIM_ITRx_SetConfig>
      break;
 8005a96:	e01c      	b.n	8005ad2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	f000 f8cd 	bl	8005c44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2140      	movs	r1, #64	@ 0x40
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 f926 	bl	8005d02 <TIM_ITRx_SetConfig>
      break;
 8005ab6:	e00c      	b.n	8005ad2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	f000 f91d 	bl	8005d02 <TIM_ITRx_SetConfig>
      break;
 8005ac8:	e003      	b.n	8005ad2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	73fb      	strb	r3, [r7, #15]
      break;
 8005ace:	e000      	b.n	8005ad2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ad0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a46      	ldr	r2, [pc, #280]	@ (8005c18 <TIM_Base_SetConfig+0x12c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d013      	beq.n	8005b2c <TIM_Base_SetConfig+0x40>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b0a:	d00f      	beq.n	8005b2c <TIM_Base_SetConfig+0x40>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a43      	ldr	r2, [pc, #268]	@ (8005c1c <TIM_Base_SetConfig+0x130>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00b      	beq.n	8005b2c <TIM_Base_SetConfig+0x40>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a42      	ldr	r2, [pc, #264]	@ (8005c20 <TIM_Base_SetConfig+0x134>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d007      	beq.n	8005b2c <TIM_Base_SetConfig+0x40>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a41      	ldr	r2, [pc, #260]	@ (8005c24 <TIM_Base_SetConfig+0x138>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d003      	beq.n	8005b2c <TIM_Base_SetConfig+0x40>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a40      	ldr	r2, [pc, #256]	@ (8005c28 <TIM_Base_SetConfig+0x13c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d108      	bne.n	8005b3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a35      	ldr	r2, [pc, #212]	@ (8005c18 <TIM_Base_SetConfig+0x12c>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d02b      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b4c:	d027      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a32      	ldr	r2, [pc, #200]	@ (8005c1c <TIM_Base_SetConfig+0x130>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d023      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a31      	ldr	r2, [pc, #196]	@ (8005c20 <TIM_Base_SetConfig+0x134>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d01f      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a30      	ldr	r2, [pc, #192]	@ (8005c24 <TIM_Base_SetConfig+0x138>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d01b      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a2f      	ldr	r2, [pc, #188]	@ (8005c28 <TIM_Base_SetConfig+0x13c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d017      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a2e      	ldr	r2, [pc, #184]	@ (8005c2c <TIM_Base_SetConfig+0x140>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d013      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a2d      	ldr	r2, [pc, #180]	@ (8005c30 <TIM_Base_SetConfig+0x144>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d00f      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a2c      	ldr	r2, [pc, #176]	@ (8005c34 <TIM_Base_SetConfig+0x148>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00b      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a2b      	ldr	r2, [pc, #172]	@ (8005c38 <TIM_Base_SetConfig+0x14c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d007      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a2a      	ldr	r2, [pc, #168]	@ (8005c3c <TIM_Base_SetConfig+0x150>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d003      	beq.n	8005b9e <TIM_Base_SetConfig+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a29      	ldr	r2, [pc, #164]	@ (8005c40 <TIM_Base_SetConfig+0x154>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d108      	bne.n	8005bb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a10      	ldr	r2, [pc, #64]	@ (8005c18 <TIM_Base_SetConfig+0x12c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d003      	beq.n	8005be4 <TIM_Base_SetConfig+0xf8>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a12      	ldr	r2, [pc, #72]	@ (8005c28 <TIM_Base_SetConfig+0x13c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d103      	bne.n	8005bec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	691a      	ldr	r2, [r3, #16]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d105      	bne.n	8005c0a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	f023 0201 	bic.w	r2, r3, #1
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	611a      	str	r2, [r3, #16]
  }
}
 8005c0a:	bf00      	nop
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40010000 	.word	0x40010000
 8005c1c:	40000400 	.word	0x40000400
 8005c20:	40000800 	.word	0x40000800
 8005c24:	40000c00 	.word	0x40000c00
 8005c28:	40010400 	.word	0x40010400
 8005c2c:	40014000 	.word	0x40014000
 8005c30:	40014400 	.word	0x40014400
 8005c34:	40014800 	.word	0x40014800
 8005c38:	40001800 	.word	0x40001800
 8005c3c:	40001c00 	.word	0x40001c00
 8005c40:	40002000 	.word	0x40002000

08005c44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	f023 0201 	bic.w	r2, r3, #1
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f023 030a 	bic.w	r3, r3, #10
 8005c80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	621a      	str	r2, [r3, #32]
}
 8005c96:	bf00      	nop
 8005c98:	371c      	adds	r7, #28
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b087      	sub	sp, #28
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	60f8      	str	r0, [r7, #12]
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f023 0210 	bic.w	r2, r3, #16
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ccc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	031b      	lsls	r3, r3, #12
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005cde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	621a      	str	r2, [r3, #32]
}
 8005cf6:	bf00      	nop
 8005cf8:	371c      	adds	r7, #28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b085      	sub	sp, #20
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f043 0307 	orr.w	r3, r3, #7
 8005d24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	609a      	str	r2, [r3, #8]
}
 8005d2c:	bf00      	nop
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
 8005d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	021a      	lsls	r2, r3, #8
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	609a      	str	r2, [r3, #8]
}
 8005d6c:	bf00      	nop
 8005d6e:	371c      	adds	r7, #28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d101      	bne.n	8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e05a      	b.n	8005e46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a21      	ldr	r2, [pc, #132]	@ (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d022      	beq.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ddc:	d01d      	beq.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a1d      	ldr	r2, [pc, #116]	@ (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d018      	beq.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a1b      	ldr	r2, [pc, #108]	@ (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d013      	beq.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a1a      	ldr	r2, [pc, #104]	@ (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00e      	beq.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a18      	ldr	r2, [pc, #96]	@ (8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d009      	beq.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a17      	ldr	r2, [pc, #92]	@ (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d004      	beq.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a15      	ldr	r2, [pc, #84]	@ (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d10c      	bne.n	8005e34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	40010000 	.word	0x40010000
 8005e58:	40000400 	.word	0x40000400
 8005e5c:	40000800 	.word	0x40000800
 8005e60:	40000c00 	.word	0x40000c00
 8005e64:	40010400 	.word	0x40010400
 8005e68:	40014000 	.word	0x40014000
 8005e6c:	40001800 	.word	0x40001800

08005e70 <std>:
 8005e70:	2300      	movs	r3, #0
 8005e72:	b510      	push	{r4, lr}
 8005e74:	4604      	mov	r4, r0
 8005e76:	e9c0 3300 	strd	r3, r3, [r0]
 8005e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e7e:	6083      	str	r3, [r0, #8]
 8005e80:	8181      	strh	r1, [r0, #12]
 8005e82:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e84:	81c2      	strh	r2, [r0, #14]
 8005e86:	6183      	str	r3, [r0, #24]
 8005e88:	4619      	mov	r1, r3
 8005e8a:	2208      	movs	r2, #8
 8005e8c:	305c      	adds	r0, #92	@ 0x5c
 8005e8e:	f000 f9f9 	bl	8006284 <memset>
 8005e92:	4b0d      	ldr	r3, [pc, #52]	@ (8005ec8 <std+0x58>)
 8005e94:	6263      	str	r3, [r4, #36]	@ 0x24
 8005e96:	4b0d      	ldr	r3, [pc, #52]	@ (8005ecc <std+0x5c>)
 8005e98:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed0 <std+0x60>)
 8005e9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed4 <std+0x64>)
 8005ea0:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed8 <std+0x68>)
 8005ea4:	6224      	str	r4, [r4, #32]
 8005ea6:	429c      	cmp	r4, r3
 8005ea8:	d006      	beq.n	8005eb8 <std+0x48>
 8005eaa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005eae:	4294      	cmp	r4, r2
 8005eb0:	d002      	beq.n	8005eb8 <std+0x48>
 8005eb2:	33d0      	adds	r3, #208	@ 0xd0
 8005eb4:	429c      	cmp	r4, r3
 8005eb6:	d105      	bne.n	8005ec4 <std+0x54>
 8005eb8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ec0:	f000 ba58 	b.w	8006374 <__retarget_lock_init_recursive>
 8005ec4:	bd10      	pop	{r4, pc}
 8005ec6:	bf00      	nop
 8005ec8:	080060d5 	.word	0x080060d5
 8005ecc:	080060f7 	.word	0x080060f7
 8005ed0:	0800612f 	.word	0x0800612f
 8005ed4:	08006153 	.word	0x08006153
 8005ed8:	20025c28 	.word	0x20025c28

08005edc <stdio_exit_handler>:
 8005edc:	4a02      	ldr	r2, [pc, #8]	@ (8005ee8 <stdio_exit_handler+0xc>)
 8005ede:	4903      	ldr	r1, [pc, #12]	@ (8005eec <stdio_exit_handler+0x10>)
 8005ee0:	4803      	ldr	r0, [pc, #12]	@ (8005ef0 <stdio_exit_handler+0x14>)
 8005ee2:	f000 b869 	b.w	8005fb8 <_fwalk_sglue>
 8005ee6:	bf00      	nop
 8005ee8:	20000010 	.word	0x20000010
 8005eec:	08006c15 	.word	0x08006c15
 8005ef0:	20000020 	.word	0x20000020

08005ef4 <cleanup_stdio>:
 8005ef4:	6841      	ldr	r1, [r0, #4]
 8005ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8005f28 <cleanup_stdio+0x34>)
 8005ef8:	4299      	cmp	r1, r3
 8005efa:	b510      	push	{r4, lr}
 8005efc:	4604      	mov	r4, r0
 8005efe:	d001      	beq.n	8005f04 <cleanup_stdio+0x10>
 8005f00:	f000 fe88 	bl	8006c14 <_fflush_r>
 8005f04:	68a1      	ldr	r1, [r4, #8]
 8005f06:	4b09      	ldr	r3, [pc, #36]	@ (8005f2c <cleanup_stdio+0x38>)
 8005f08:	4299      	cmp	r1, r3
 8005f0a:	d002      	beq.n	8005f12 <cleanup_stdio+0x1e>
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f000 fe81 	bl	8006c14 <_fflush_r>
 8005f12:	68e1      	ldr	r1, [r4, #12]
 8005f14:	4b06      	ldr	r3, [pc, #24]	@ (8005f30 <cleanup_stdio+0x3c>)
 8005f16:	4299      	cmp	r1, r3
 8005f18:	d004      	beq.n	8005f24 <cleanup_stdio+0x30>
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f20:	f000 be78 	b.w	8006c14 <_fflush_r>
 8005f24:	bd10      	pop	{r4, pc}
 8005f26:	bf00      	nop
 8005f28:	20025c28 	.word	0x20025c28
 8005f2c:	20025c90 	.word	0x20025c90
 8005f30:	20025cf8 	.word	0x20025cf8

08005f34 <global_stdio_init.part.0>:
 8005f34:	b510      	push	{r4, lr}
 8005f36:	4b0b      	ldr	r3, [pc, #44]	@ (8005f64 <global_stdio_init.part.0+0x30>)
 8005f38:	4c0b      	ldr	r4, [pc, #44]	@ (8005f68 <global_stdio_init.part.0+0x34>)
 8005f3a:	4a0c      	ldr	r2, [pc, #48]	@ (8005f6c <global_stdio_init.part.0+0x38>)
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	4620      	mov	r0, r4
 8005f40:	2200      	movs	r2, #0
 8005f42:	2104      	movs	r1, #4
 8005f44:	f7ff ff94 	bl	8005e70 <std>
 8005f48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	2109      	movs	r1, #9
 8005f50:	f7ff ff8e 	bl	8005e70 <std>
 8005f54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f58:	2202      	movs	r2, #2
 8005f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f5e:	2112      	movs	r1, #18
 8005f60:	f7ff bf86 	b.w	8005e70 <std>
 8005f64:	20025d60 	.word	0x20025d60
 8005f68:	20025c28 	.word	0x20025c28
 8005f6c:	08005edd 	.word	0x08005edd

08005f70 <__sfp_lock_acquire>:
 8005f70:	4801      	ldr	r0, [pc, #4]	@ (8005f78 <__sfp_lock_acquire+0x8>)
 8005f72:	f000 ba00 	b.w	8006376 <__retarget_lock_acquire_recursive>
 8005f76:	bf00      	nop
 8005f78:	20025d69 	.word	0x20025d69

08005f7c <__sfp_lock_release>:
 8005f7c:	4801      	ldr	r0, [pc, #4]	@ (8005f84 <__sfp_lock_release+0x8>)
 8005f7e:	f000 b9fb 	b.w	8006378 <__retarget_lock_release_recursive>
 8005f82:	bf00      	nop
 8005f84:	20025d69 	.word	0x20025d69

08005f88 <__sinit>:
 8005f88:	b510      	push	{r4, lr}
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	f7ff fff0 	bl	8005f70 <__sfp_lock_acquire>
 8005f90:	6a23      	ldr	r3, [r4, #32]
 8005f92:	b11b      	cbz	r3, 8005f9c <__sinit+0x14>
 8005f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f98:	f7ff bff0 	b.w	8005f7c <__sfp_lock_release>
 8005f9c:	4b04      	ldr	r3, [pc, #16]	@ (8005fb0 <__sinit+0x28>)
 8005f9e:	6223      	str	r3, [r4, #32]
 8005fa0:	4b04      	ldr	r3, [pc, #16]	@ (8005fb4 <__sinit+0x2c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1f5      	bne.n	8005f94 <__sinit+0xc>
 8005fa8:	f7ff ffc4 	bl	8005f34 <global_stdio_init.part.0>
 8005fac:	e7f2      	b.n	8005f94 <__sinit+0xc>
 8005fae:	bf00      	nop
 8005fb0:	08005ef5 	.word	0x08005ef5
 8005fb4:	20025d60 	.word	0x20025d60

08005fb8 <_fwalk_sglue>:
 8005fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fbc:	4607      	mov	r7, r0
 8005fbe:	4688      	mov	r8, r1
 8005fc0:	4614      	mov	r4, r2
 8005fc2:	2600      	movs	r6, #0
 8005fc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fc8:	f1b9 0901 	subs.w	r9, r9, #1
 8005fcc:	d505      	bpl.n	8005fda <_fwalk_sglue+0x22>
 8005fce:	6824      	ldr	r4, [r4, #0]
 8005fd0:	2c00      	cmp	r4, #0
 8005fd2:	d1f7      	bne.n	8005fc4 <_fwalk_sglue+0xc>
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fda:	89ab      	ldrh	r3, [r5, #12]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d907      	bls.n	8005ff0 <_fwalk_sglue+0x38>
 8005fe0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	d003      	beq.n	8005ff0 <_fwalk_sglue+0x38>
 8005fe8:	4629      	mov	r1, r5
 8005fea:	4638      	mov	r0, r7
 8005fec:	47c0      	blx	r8
 8005fee:	4306      	orrs	r6, r0
 8005ff0:	3568      	adds	r5, #104	@ 0x68
 8005ff2:	e7e9      	b.n	8005fc8 <_fwalk_sglue+0x10>

08005ff4 <iprintf>:
 8005ff4:	b40f      	push	{r0, r1, r2, r3}
 8005ff6:	b507      	push	{r0, r1, r2, lr}
 8005ff8:	4906      	ldr	r1, [pc, #24]	@ (8006014 <iprintf+0x20>)
 8005ffa:	ab04      	add	r3, sp, #16
 8005ffc:	6808      	ldr	r0, [r1, #0]
 8005ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006002:	6881      	ldr	r1, [r0, #8]
 8006004:	9301      	str	r3, [sp, #4]
 8006006:	f000 fadb 	bl	80065c0 <_vfiprintf_r>
 800600a:	b003      	add	sp, #12
 800600c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006010:	b004      	add	sp, #16
 8006012:	4770      	bx	lr
 8006014:	2000001c 	.word	0x2000001c

08006018 <_puts_r>:
 8006018:	6a03      	ldr	r3, [r0, #32]
 800601a:	b570      	push	{r4, r5, r6, lr}
 800601c:	6884      	ldr	r4, [r0, #8]
 800601e:	4605      	mov	r5, r0
 8006020:	460e      	mov	r6, r1
 8006022:	b90b      	cbnz	r3, 8006028 <_puts_r+0x10>
 8006024:	f7ff ffb0 	bl	8005f88 <__sinit>
 8006028:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800602a:	07db      	lsls	r3, r3, #31
 800602c:	d405      	bmi.n	800603a <_puts_r+0x22>
 800602e:	89a3      	ldrh	r3, [r4, #12]
 8006030:	0598      	lsls	r0, r3, #22
 8006032:	d402      	bmi.n	800603a <_puts_r+0x22>
 8006034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006036:	f000 f99e 	bl	8006376 <__retarget_lock_acquire_recursive>
 800603a:	89a3      	ldrh	r3, [r4, #12]
 800603c:	0719      	lsls	r1, r3, #28
 800603e:	d502      	bpl.n	8006046 <_puts_r+0x2e>
 8006040:	6923      	ldr	r3, [r4, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d135      	bne.n	80060b2 <_puts_r+0x9a>
 8006046:	4621      	mov	r1, r4
 8006048:	4628      	mov	r0, r5
 800604a:	f000 f8c5 	bl	80061d8 <__swsetup_r>
 800604e:	b380      	cbz	r0, 80060b2 <_puts_r+0x9a>
 8006050:	f04f 35ff 	mov.w	r5, #4294967295
 8006054:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006056:	07da      	lsls	r2, r3, #31
 8006058:	d405      	bmi.n	8006066 <_puts_r+0x4e>
 800605a:	89a3      	ldrh	r3, [r4, #12]
 800605c:	059b      	lsls	r3, r3, #22
 800605e:	d402      	bmi.n	8006066 <_puts_r+0x4e>
 8006060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006062:	f000 f989 	bl	8006378 <__retarget_lock_release_recursive>
 8006066:	4628      	mov	r0, r5
 8006068:	bd70      	pop	{r4, r5, r6, pc}
 800606a:	2b00      	cmp	r3, #0
 800606c:	da04      	bge.n	8006078 <_puts_r+0x60>
 800606e:	69a2      	ldr	r2, [r4, #24]
 8006070:	429a      	cmp	r2, r3
 8006072:	dc17      	bgt.n	80060a4 <_puts_r+0x8c>
 8006074:	290a      	cmp	r1, #10
 8006076:	d015      	beq.n	80060a4 <_puts_r+0x8c>
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	6022      	str	r2, [r4, #0]
 800607e:	7019      	strb	r1, [r3, #0]
 8006080:	68a3      	ldr	r3, [r4, #8]
 8006082:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006086:	3b01      	subs	r3, #1
 8006088:	60a3      	str	r3, [r4, #8]
 800608a:	2900      	cmp	r1, #0
 800608c:	d1ed      	bne.n	800606a <_puts_r+0x52>
 800608e:	2b00      	cmp	r3, #0
 8006090:	da11      	bge.n	80060b6 <_puts_r+0x9e>
 8006092:	4622      	mov	r2, r4
 8006094:	210a      	movs	r1, #10
 8006096:	4628      	mov	r0, r5
 8006098:	f000 f85f 	bl	800615a <__swbuf_r>
 800609c:	3001      	adds	r0, #1
 800609e:	d0d7      	beq.n	8006050 <_puts_r+0x38>
 80060a0:	250a      	movs	r5, #10
 80060a2:	e7d7      	b.n	8006054 <_puts_r+0x3c>
 80060a4:	4622      	mov	r2, r4
 80060a6:	4628      	mov	r0, r5
 80060a8:	f000 f857 	bl	800615a <__swbuf_r>
 80060ac:	3001      	adds	r0, #1
 80060ae:	d1e7      	bne.n	8006080 <_puts_r+0x68>
 80060b0:	e7ce      	b.n	8006050 <_puts_r+0x38>
 80060b2:	3e01      	subs	r6, #1
 80060b4:	e7e4      	b.n	8006080 <_puts_r+0x68>
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	6022      	str	r2, [r4, #0]
 80060bc:	220a      	movs	r2, #10
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	e7ee      	b.n	80060a0 <_puts_r+0x88>
	...

080060c4 <puts>:
 80060c4:	4b02      	ldr	r3, [pc, #8]	@ (80060d0 <puts+0xc>)
 80060c6:	4601      	mov	r1, r0
 80060c8:	6818      	ldr	r0, [r3, #0]
 80060ca:	f7ff bfa5 	b.w	8006018 <_puts_r>
 80060ce:	bf00      	nop
 80060d0:	2000001c 	.word	0x2000001c

080060d4 <__sread>:
 80060d4:	b510      	push	{r4, lr}
 80060d6:	460c      	mov	r4, r1
 80060d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060dc:	f000 f8fc 	bl	80062d8 <_read_r>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	bfab      	itete	ge
 80060e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80060e6:	89a3      	ldrhlt	r3, [r4, #12]
 80060e8:	181b      	addge	r3, r3, r0
 80060ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80060ee:	bfac      	ite	ge
 80060f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80060f2:	81a3      	strhlt	r3, [r4, #12]
 80060f4:	bd10      	pop	{r4, pc}

080060f6 <__swrite>:
 80060f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060fa:	461f      	mov	r7, r3
 80060fc:	898b      	ldrh	r3, [r1, #12]
 80060fe:	05db      	lsls	r3, r3, #23
 8006100:	4605      	mov	r5, r0
 8006102:	460c      	mov	r4, r1
 8006104:	4616      	mov	r6, r2
 8006106:	d505      	bpl.n	8006114 <__swrite+0x1e>
 8006108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800610c:	2302      	movs	r3, #2
 800610e:	2200      	movs	r2, #0
 8006110:	f000 f8d0 	bl	80062b4 <_lseek_r>
 8006114:	89a3      	ldrh	r3, [r4, #12]
 8006116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800611a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800611e:	81a3      	strh	r3, [r4, #12]
 8006120:	4632      	mov	r2, r6
 8006122:	463b      	mov	r3, r7
 8006124:	4628      	mov	r0, r5
 8006126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800612a:	f000 b8e7 	b.w	80062fc <_write_r>

0800612e <__sseek>:
 800612e:	b510      	push	{r4, lr}
 8006130:	460c      	mov	r4, r1
 8006132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006136:	f000 f8bd 	bl	80062b4 <_lseek_r>
 800613a:	1c43      	adds	r3, r0, #1
 800613c:	89a3      	ldrh	r3, [r4, #12]
 800613e:	bf15      	itete	ne
 8006140:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006142:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006146:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800614a:	81a3      	strheq	r3, [r4, #12]
 800614c:	bf18      	it	ne
 800614e:	81a3      	strhne	r3, [r4, #12]
 8006150:	bd10      	pop	{r4, pc}

08006152 <__sclose>:
 8006152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006156:	f000 b89d 	b.w	8006294 <_close_r>

0800615a <__swbuf_r>:
 800615a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615c:	460e      	mov	r6, r1
 800615e:	4614      	mov	r4, r2
 8006160:	4605      	mov	r5, r0
 8006162:	b118      	cbz	r0, 800616c <__swbuf_r+0x12>
 8006164:	6a03      	ldr	r3, [r0, #32]
 8006166:	b90b      	cbnz	r3, 800616c <__swbuf_r+0x12>
 8006168:	f7ff ff0e 	bl	8005f88 <__sinit>
 800616c:	69a3      	ldr	r3, [r4, #24]
 800616e:	60a3      	str	r3, [r4, #8]
 8006170:	89a3      	ldrh	r3, [r4, #12]
 8006172:	071a      	lsls	r2, r3, #28
 8006174:	d501      	bpl.n	800617a <__swbuf_r+0x20>
 8006176:	6923      	ldr	r3, [r4, #16]
 8006178:	b943      	cbnz	r3, 800618c <__swbuf_r+0x32>
 800617a:	4621      	mov	r1, r4
 800617c:	4628      	mov	r0, r5
 800617e:	f000 f82b 	bl	80061d8 <__swsetup_r>
 8006182:	b118      	cbz	r0, 800618c <__swbuf_r+0x32>
 8006184:	f04f 37ff 	mov.w	r7, #4294967295
 8006188:	4638      	mov	r0, r7
 800618a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	6922      	ldr	r2, [r4, #16]
 8006190:	1a98      	subs	r0, r3, r2
 8006192:	6963      	ldr	r3, [r4, #20]
 8006194:	b2f6      	uxtb	r6, r6
 8006196:	4283      	cmp	r3, r0
 8006198:	4637      	mov	r7, r6
 800619a:	dc05      	bgt.n	80061a8 <__swbuf_r+0x4e>
 800619c:	4621      	mov	r1, r4
 800619e:	4628      	mov	r0, r5
 80061a0:	f000 fd38 	bl	8006c14 <_fflush_r>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	d1ed      	bne.n	8006184 <__swbuf_r+0x2a>
 80061a8:	68a3      	ldr	r3, [r4, #8]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	60a3      	str	r3, [r4, #8]
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	1c5a      	adds	r2, r3, #1
 80061b2:	6022      	str	r2, [r4, #0]
 80061b4:	701e      	strb	r6, [r3, #0]
 80061b6:	6962      	ldr	r2, [r4, #20]
 80061b8:	1c43      	adds	r3, r0, #1
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d004      	beq.n	80061c8 <__swbuf_r+0x6e>
 80061be:	89a3      	ldrh	r3, [r4, #12]
 80061c0:	07db      	lsls	r3, r3, #31
 80061c2:	d5e1      	bpl.n	8006188 <__swbuf_r+0x2e>
 80061c4:	2e0a      	cmp	r6, #10
 80061c6:	d1df      	bne.n	8006188 <__swbuf_r+0x2e>
 80061c8:	4621      	mov	r1, r4
 80061ca:	4628      	mov	r0, r5
 80061cc:	f000 fd22 	bl	8006c14 <_fflush_r>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d0d9      	beq.n	8006188 <__swbuf_r+0x2e>
 80061d4:	e7d6      	b.n	8006184 <__swbuf_r+0x2a>
	...

080061d8 <__swsetup_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4b29      	ldr	r3, [pc, #164]	@ (8006280 <__swsetup_r+0xa8>)
 80061dc:	4605      	mov	r5, r0
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	460c      	mov	r4, r1
 80061e2:	b118      	cbz	r0, 80061ec <__swsetup_r+0x14>
 80061e4:	6a03      	ldr	r3, [r0, #32]
 80061e6:	b90b      	cbnz	r3, 80061ec <__swsetup_r+0x14>
 80061e8:	f7ff fece 	bl	8005f88 <__sinit>
 80061ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061f0:	0719      	lsls	r1, r3, #28
 80061f2:	d422      	bmi.n	800623a <__swsetup_r+0x62>
 80061f4:	06da      	lsls	r2, r3, #27
 80061f6:	d407      	bmi.n	8006208 <__swsetup_r+0x30>
 80061f8:	2209      	movs	r2, #9
 80061fa:	602a      	str	r2, [r5, #0]
 80061fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006200:	81a3      	strh	r3, [r4, #12]
 8006202:	f04f 30ff 	mov.w	r0, #4294967295
 8006206:	e033      	b.n	8006270 <__swsetup_r+0x98>
 8006208:	0758      	lsls	r0, r3, #29
 800620a:	d512      	bpl.n	8006232 <__swsetup_r+0x5a>
 800620c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800620e:	b141      	cbz	r1, 8006222 <__swsetup_r+0x4a>
 8006210:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006214:	4299      	cmp	r1, r3
 8006216:	d002      	beq.n	800621e <__swsetup_r+0x46>
 8006218:	4628      	mov	r0, r5
 800621a:	f000 f8af 	bl	800637c <_free_r>
 800621e:	2300      	movs	r3, #0
 8006220:	6363      	str	r3, [r4, #52]	@ 0x34
 8006222:	89a3      	ldrh	r3, [r4, #12]
 8006224:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006228:	81a3      	strh	r3, [r4, #12]
 800622a:	2300      	movs	r3, #0
 800622c:	6063      	str	r3, [r4, #4]
 800622e:	6923      	ldr	r3, [r4, #16]
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	89a3      	ldrh	r3, [r4, #12]
 8006234:	f043 0308 	orr.w	r3, r3, #8
 8006238:	81a3      	strh	r3, [r4, #12]
 800623a:	6923      	ldr	r3, [r4, #16]
 800623c:	b94b      	cbnz	r3, 8006252 <__swsetup_r+0x7a>
 800623e:	89a3      	ldrh	r3, [r4, #12]
 8006240:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006248:	d003      	beq.n	8006252 <__swsetup_r+0x7a>
 800624a:	4621      	mov	r1, r4
 800624c:	4628      	mov	r0, r5
 800624e:	f000 fd2f 	bl	8006cb0 <__smakebuf_r>
 8006252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006256:	f013 0201 	ands.w	r2, r3, #1
 800625a:	d00a      	beq.n	8006272 <__swsetup_r+0x9a>
 800625c:	2200      	movs	r2, #0
 800625e:	60a2      	str	r2, [r4, #8]
 8006260:	6962      	ldr	r2, [r4, #20]
 8006262:	4252      	negs	r2, r2
 8006264:	61a2      	str	r2, [r4, #24]
 8006266:	6922      	ldr	r2, [r4, #16]
 8006268:	b942      	cbnz	r2, 800627c <__swsetup_r+0xa4>
 800626a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800626e:	d1c5      	bne.n	80061fc <__swsetup_r+0x24>
 8006270:	bd38      	pop	{r3, r4, r5, pc}
 8006272:	0799      	lsls	r1, r3, #30
 8006274:	bf58      	it	pl
 8006276:	6962      	ldrpl	r2, [r4, #20]
 8006278:	60a2      	str	r2, [r4, #8]
 800627a:	e7f4      	b.n	8006266 <__swsetup_r+0x8e>
 800627c:	2000      	movs	r0, #0
 800627e:	e7f7      	b.n	8006270 <__swsetup_r+0x98>
 8006280:	2000001c 	.word	0x2000001c

08006284 <memset>:
 8006284:	4402      	add	r2, r0
 8006286:	4603      	mov	r3, r0
 8006288:	4293      	cmp	r3, r2
 800628a:	d100      	bne.n	800628e <memset+0xa>
 800628c:	4770      	bx	lr
 800628e:	f803 1b01 	strb.w	r1, [r3], #1
 8006292:	e7f9      	b.n	8006288 <memset+0x4>

08006294 <_close_r>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	4d06      	ldr	r5, [pc, #24]	@ (80062b0 <_close_r+0x1c>)
 8006298:	2300      	movs	r3, #0
 800629a:	4604      	mov	r4, r0
 800629c:	4608      	mov	r0, r1
 800629e:	602b      	str	r3, [r5, #0]
 80062a0:	f7fc f986 	bl	80025b0 <_close>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d102      	bne.n	80062ae <_close_r+0x1a>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	b103      	cbz	r3, 80062ae <_close_r+0x1a>
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	20025d64 	.word	0x20025d64

080062b4 <_lseek_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	4d07      	ldr	r5, [pc, #28]	@ (80062d4 <_lseek_r+0x20>)
 80062b8:	4604      	mov	r4, r0
 80062ba:	4608      	mov	r0, r1
 80062bc:	4611      	mov	r1, r2
 80062be:	2200      	movs	r2, #0
 80062c0:	602a      	str	r2, [r5, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	f7fc f99b 	bl	80025fe <_lseek>
 80062c8:	1c43      	adds	r3, r0, #1
 80062ca:	d102      	bne.n	80062d2 <_lseek_r+0x1e>
 80062cc:	682b      	ldr	r3, [r5, #0]
 80062ce:	b103      	cbz	r3, 80062d2 <_lseek_r+0x1e>
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	bd38      	pop	{r3, r4, r5, pc}
 80062d4:	20025d64 	.word	0x20025d64

080062d8 <_read_r>:
 80062d8:	b538      	push	{r3, r4, r5, lr}
 80062da:	4d07      	ldr	r5, [pc, #28]	@ (80062f8 <_read_r+0x20>)
 80062dc:	4604      	mov	r4, r0
 80062de:	4608      	mov	r0, r1
 80062e0:	4611      	mov	r1, r2
 80062e2:	2200      	movs	r2, #0
 80062e4:	602a      	str	r2, [r5, #0]
 80062e6:	461a      	mov	r2, r3
 80062e8:	f7fc f929 	bl	800253e <_read>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d102      	bne.n	80062f6 <_read_r+0x1e>
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	b103      	cbz	r3, 80062f6 <_read_r+0x1e>
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	bd38      	pop	{r3, r4, r5, pc}
 80062f8:	20025d64 	.word	0x20025d64

080062fc <_write_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4d07      	ldr	r5, [pc, #28]	@ (800631c <_write_r+0x20>)
 8006300:	4604      	mov	r4, r0
 8006302:	4608      	mov	r0, r1
 8006304:	4611      	mov	r1, r2
 8006306:	2200      	movs	r2, #0
 8006308:	602a      	str	r2, [r5, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	f7fc f934 	bl	8002578 <_write>
 8006310:	1c43      	adds	r3, r0, #1
 8006312:	d102      	bne.n	800631a <_write_r+0x1e>
 8006314:	682b      	ldr	r3, [r5, #0]
 8006316:	b103      	cbz	r3, 800631a <_write_r+0x1e>
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	bd38      	pop	{r3, r4, r5, pc}
 800631c:	20025d64 	.word	0x20025d64

08006320 <__errno>:
 8006320:	4b01      	ldr	r3, [pc, #4]	@ (8006328 <__errno+0x8>)
 8006322:	6818      	ldr	r0, [r3, #0]
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	2000001c 	.word	0x2000001c

0800632c <__libc_init_array>:
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	4d0d      	ldr	r5, [pc, #52]	@ (8006364 <__libc_init_array+0x38>)
 8006330:	4c0d      	ldr	r4, [pc, #52]	@ (8006368 <__libc_init_array+0x3c>)
 8006332:	1b64      	subs	r4, r4, r5
 8006334:	10a4      	asrs	r4, r4, #2
 8006336:	2600      	movs	r6, #0
 8006338:	42a6      	cmp	r6, r4
 800633a:	d109      	bne.n	8006350 <__libc_init_array+0x24>
 800633c:	4d0b      	ldr	r5, [pc, #44]	@ (800636c <__libc_init_array+0x40>)
 800633e:	4c0c      	ldr	r4, [pc, #48]	@ (8006370 <__libc_init_array+0x44>)
 8006340:	f000 fd24 	bl	8006d8c <_init>
 8006344:	1b64      	subs	r4, r4, r5
 8006346:	10a4      	asrs	r4, r4, #2
 8006348:	2600      	movs	r6, #0
 800634a:	42a6      	cmp	r6, r4
 800634c:	d105      	bne.n	800635a <__libc_init_array+0x2e>
 800634e:	bd70      	pop	{r4, r5, r6, pc}
 8006350:	f855 3b04 	ldr.w	r3, [r5], #4
 8006354:	4798      	blx	r3
 8006356:	3601      	adds	r6, #1
 8006358:	e7ee      	b.n	8006338 <__libc_init_array+0xc>
 800635a:	f855 3b04 	ldr.w	r3, [r5], #4
 800635e:	4798      	blx	r3
 8006360:	3601      	adds	r6, #1
 8006362:	e7f2      	b.n	800634a <__libc_init_array+0x1e>
 8006364:	08006e1c 	.word	0x08006e1c
 8006368:	08006e1c 	.word	0x08006e1c
 800636c:	08006e1c 	.word	0x08006e1c
 8006370:	08006e20 	.word	0x08006e20

08006374 <__retarget_lock_init_recursive>:
 8006374:	4770      	bx	lr

08006376 <__retarget_lock_acquire_recursive>:
 8006376:	4770      	bx	lr

08006378 <__retarget_lock_release_recursive>:
 8006378:	4770      	bx	lr
	...

0800637c <_free_r>:
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	4605      	mov	r5, r0
 8006380:	2900      	cmp	r1, #0
 8006382:	d041      	beq.n	8006408 <_free_r+0x8c>
 8006384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006388:	1f0c      	subs	r4, r1, #4
 800638a:	2b00      	cmp	r3, #0
 800638c:	bfb8      	it	lt
 800638e:	18e4      	addlt	r4, r4, r3
 8006390:	f000 f8e0 	bl	8006554 <__malloc_lock>
 8006394:	4a1d      	ldr	r2, [pc, #116]	@ (800640c <_free_r+0x90>)
 8006396:	6813      	ldr	r3, [r2, #0]
 8006398:	b933      	cbnz	r3, 80063a8 <_free_r+0x2c>
 800639a:	6063      	str	r3, [r4, #4]
 800639c:	6014      	str	r4, [r2, #0]
 800639e:	4628      	mov	r0, r5
 80063a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063a4:	f000 b8dc 	b.w	8006560 <__malloc_unlock>
 80063a8:	42a3      	cmp	r3, r4
 80063aa:	d908      	bls.n	80063be <_free_r+0x42>
 80063ac:	6820      	ldr	r0, [r4, #0]
 80063ae:	1821      	adds	r1, r4, r0
 80063b0:	428b      	cmp	r3, r1
 80063b2:	bf01      	itttt	eq
 80063b4:	6819      	ldreq	r1, [r3, #0]
 80063b6:	685b      	ldreq	r3, [r3, #4]
 80063b8:	1809      	addeq	r1, r1, r0
 80063ba:	6021      	streq	r1, [r4, #0]
 80063bc:	e7ed      	b.n	800639a <_free_r+0x1e>
 80063be:	461a      	mov	r2, r3
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	b10b      	cbz	r3, 80063c8 <_free_r+0x4c>
 80063c4:	42a3      	cmp	r3, r4
 80063c6:	d9fa      	bls.n	80063be <_free_r+0x42>
 80063c8:	6811      	ldr	r1, [r2, #0]
 80063ca:	1850      	adds	r0, r2, r1
 80063cc:	42a0      	cmp	r0, r4
 80063ce:	d10b      	bne.n	80063e8 <_free_r+0x6c>
 80063d0:	6820      	ldr	r0, [r4, #0]
 80063d2:	4401      	add	r1, r0
 80063d4:	1850      	adds	r0, r2, r1
 80063d6:	4283      	cmp	r3, r0
 80063d8:	6011      	str	r1, [r2, #0]
 80063da:	d1e0      	bne.n	800639e <_free_r+0x22>
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	6053      	str	r3, [r2, #4]
 80063e2:	4408      	add	r0, r1
 80063e4:	6010      	str	r0, [r2, #0]
 80063e6:	e7da      	b.n	800639e <_free_r+0x22>
 80063e8:	d902      	bls.n	80063f0 <_free_r+0x74>
 80063ea:	230c      	movs	r3, #12
 80063ec:	602b      	str	r3, [r5, #0]
 80063ee:	e7d6      	b.n	800639e <_free_r+0x22>
 80063f0:	6820      	ldr	r0, [r4, #0]
 80063f2:	1821      	adds	r1, r4, r0
 80063f4:	428b      	cmp	r3, r1
 80063f6:	bf04      	itt	eq
 80063f8:	6819      	ldreq	r1, [r3, #0]
 80063fa:	685b      	ldreq	r3, [r3, #4]
 80063fc:	6063      	str	r3, [r4, #4]
 80063fe:	bf04      	itt	eq
 8006400:	1809      	addeq	r1, r1, r0
 8006402:	6021      	streq	r1, [r4, #0]
 8006404:	6054      	str	r4, [r2, #4]
 8006406:	e7ca      	b.n	800639e <_free_r+0x22>
 8006408:	bd38      	pop	{r3, r4, r5, pc}
 800640a:	bf00      	nop
 800640c:	20025d70 	.word	0x20025d70

08006410 <sbrk_aligned>:
 8006410:	b570      	push	{r4, r5, r6, lr}
 8006412:	4e0f      	ldr	r6, [pc, #60]	@ (8006450 <sbrk_aligned+0x40>)
 8006414:	460c      	mov	r4, r1
 8006416:	6831      	ldr	r1, [r6, #0]
 8006418:	4605      	mov	r5, r0
 800641a:	b911      	cbnz	r1, 8006422 <sbrk_aligned+0x12>
 800641c:	f000 fca6 	bl	8006d6c <_sbrk_r>
 8006420:	6030      	str	r0, [r6, #0]
 8006422:	4621      	mov	r1, r4
 8006424:	4628      	mov	r0, r5
 8006426:	f000 fca1 	bl	8006d6c <_sbrk_r>
 800642a:	1c43      	adds	r3, r0, #1
 800642c:	d103      	bne.n	8006436 <sbrk_aligned+0x26>
 800642e:	f04f 34ff 	mov.w	r4, #4294967295
 8006432:	4620      	mov	r0, r4
 8006434:	bd70      	pop	{r4, r5, r6, pc}
 8006436:	1cc4      	adds	r4, r0, #3
 8006438:	f024 0403 	bic.w	r4, r4, #3
 800643c:	42a0      	cmp	r0, r4
 800643e:	d0f8      	beq.n	8006432 <sbrk_aligned+0x22>
 8006440:	1a21      	subs	r1, r4, r0
 8006442:	4628      	mov	r0, r5
 8006444:	f000 fc92 	bl	8006d6c <_sbrk_r>
 8006448:	3001      	adds	r0, #1
 800644a:	d1f2      	bne.n	8006432 <sbrk_aligned+0x22>
 800644c:	e7ef      	b.n	800642e <sbrk_aligned+0x1e>
 800644e:	bf00      	nop
 8006450:	20025d6c 	.word	0x20025d6c

08006454 <_malloc_r>:
 8006454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006458:	1ccd      	adds	r5, r1, #3
 800645a:	f025 0503 	bic.w	r5, r5, #3
 800645e:	3508      	adds	r5, #8
 8006460:	2d0c      	cmp	r5, #12
 8006462:	bf38      	it	cc
 8006464:	250c      	movcc	r5, #12
 8006466:	2d00      	cmp	r5, #0
 8006468:	4606      	mov	r6, r0
 800646a:	db01      	blt.n	8006470 <_malloc_r+0x1c>
 800646c:	42a9      	cmp	r1, r5
 800646e:	d904      	bls.n	800647a <_malloc_r+0x26>
 8006470:	230c      	movs	r3, #12
 8006472:	6033      	str	r3, [r6, #0]
 8006474:	2000      	movs	r0, #0
 8006476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800647a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006550 <_malloc_r+0xfc>
 800647e:	f000 f869 	bl	8006554 <__malloc_lock>
 8006482:	f8d8 3000 	ldr.w	r3, [r8]
 8006486:	461c      	mov	r4, r3
 8006488:	bb44      	cbnz	r4, 80064dc <_malloc_r+0x88>
 800648a:	4629      	mov	r1, r5
 800648c:	4630      	mov	r0, r6
 800648e:	f7ff ffbf 	bl	8006410 <sbrk_aligned>
 8006492:	1c43      	adds	r3, r0, #1
 8006494:	4604      	mov	r4, r0
 8006496:	d158      	bne.n	800654a <_malloc_r+0xf6>
 8006498:	f8d8 4000 	ldr.w	r4, [r8]
 800649c:	4627      	mov	r7, r4
 800649e:	2f00      	cmp	r7, #0
 80064a0:	d143      	bne.n	800652a <_malloc_r+0xd6>
 80064a2:	2c00      	cmp	r4, #0
 80064a4:	d04b      	beq.n	800653e <_malloc_r+0xea>
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	4639      	mov	r1, r7
 80064aa:	4630      	mov	r0, r6
 80064ac:	eb04 0903 	add.w	r9, r4, r3
 80064b0:	f000 fc5c 	bl	8006d6c <_sbrk_r>
 80064b4:	4581      	cmp	r9, r0
 80064b6:	d142      	bne.n	800653e <_malloc_r+0xea>
 80064b8:	6821      	ldr	r1, [r4, #0]
 80064ba:	1a6d      	subs	r5, r5, r1
 80064bc:	4629      	mov	r1, r5
 80064be:	4630      	mov	r0, r6
 80064c0:	f7ff ffa6 	bl	8006410 <sbrk_aligned>
 80064c4:	3001      	adds	r0, #1
 80064c6:	d03a      	beq.n	800653e <_malloc_r+0xea>
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	442b      	add	r3, r5
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	f8d8 3000 	ldr.w	r3, [r8]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	bb62      	cbnz	r2, 8006530 <_malloc_r+0xdc>
 80064d6:	f8c8 7000 	str.w	r7, [r8]
 80064da:	e00f      	b.n	80064fc <_malloc_r+0xa8>
 80064dc:	6822      	ldr	r2, [r4, #0]
 80064de:	1b52      	subs	r2, r2, r5
 80064e0:	d420      	bmi.n	8006524 <_malloc_r+0xd0>
 80064e2:	2a0b      	cmp	r2, #11
 80064e4:	d917      	bls.n	8006516 <_malloc_r+0xc2>
 80064e6:	1961      	adds	r1, r4, r5
 80064e8:	42a3      	cmp	r3, r4
 80064ea:	6025      	str	r5, [r4, #0]
 80064ec:	bf18      	it	ne
 80064ee:	6059      	strne	r1, [r3, #4]
 80064f0:	6863      	ldr	r3, [r4, #4]
 80064f2:	bf08      	it	eq
 80064f4:	f8c8 1000 	streq.w	r1, [r8]
 80064f8:	5162      	str	r2, [r4, r5]
 80064fa:	604b      	str	r3, [r1, #4]
 80064fc:	4630      	mov	r0, r6
 80064fe:	f000 f82f 	bl	8006560 <__malloc_unlock>
 8006502:	f104 000b 	add.w	r0, r4, #11
 8006506:	1d23      	adds	r3, r4, #4
 8006508:	f020 0007 	bic.w	r0, r0, #7
 800650c:	1ac2      	subs	r2, r0, r3
 800650e:	bf1c      	itt	ne
 8006510:	1a1b      	subne	r3, r3, r0
 8006512:	50a3      	strne	r3, [r4, r2]
 8006514:	e7af      	b.n	8006476 <_malloc_r+0x22>
 8006516:	6862      	ldr	r2, [r4, #4]
 8006518:	42a3      	cmp	r3, r4
 800651a:	bf0c      	ite	eq
 800651c:	f8c8 2000 	streq.w	r2, [r8]
 8006520:	605a      	strne	r2, [r3, #4]
 8006522:	e7eb      	b.n	80064fc <_malloc_r+0xa8>
 8006524:	4623      	mov	r3, r4
 8006526:	6864      	ldr	r4, [r4, #4]
 8006528:	e7ae      	b.n	8006488 <_malloc_r+0x34>
 800652a:	463c      	mov	r4, r7
 800652c:	687f      	ldr	r7, [r7, #4]
 800652e:	e7b6      	b.n	800649e <_malloc_r+0x4a>
 8006530:	461a      	mov	r2, r3
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	42a3      	cmp	r3, r4
 8006536:	d1fb      	bne.n	8006530 <_malloc_r+0xdc>
 8006538:	2300      	movs	r3, #0
 800653a:	6053      	str	r3, [r2, #4]
 800653c:	e7de      	b.n	80064fc <_malloc_r+0xa8>
 800653e:	230c      	movs	r3, #12
 8006540:	6033      	str	r3, [r6, #0]
 8006542:	4630      	mov	r0, r6
 8006544:	f000 f80c 	bl	8006560 <__malloc_unlock>
 8006548:	e794      	b.n	8006474 <_malloc_r+0x20>
 800654a:	6005      	str	r5, [r0, #0]
 800654c:	e7d6      	b.n	80064fc <_malloc_r+0xa8>
 800654e:	bf00      	nop
 8006550:	20025d70 	.word	0x20025d70

08006554 <__malloc_lock>:
 8006554:	4801      	ldr	r0, [pc, #4]	@ (800655c <__malloc_lock+0x8>)
 8006556:	f7ff bf0e 	b.w	8006376 <__retarget_lock_acquire_recursive>
 800655a:	bf00      	nop
 800655c:	20025d68 	.word	0x20025d68

08006560 <__malloc_unlock>:
 8006560:	4801      	ldr	r0, [pc, #4]	@ (8006568 <__malloc_unlock+0x8>)
 8006562:	f7ff bf09 	b.w	8006378 <__retarget_lock_release_recursive>
 8006566:	bf00      	nop
 8006568:	20025d68 	.word	0x20025d68

0800656c <__sfputc_r>:
 800656c:	6893      	ldr	r3, [r2, #8]
 800656e:	3b01      	subs	r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	b410      	push	{r4}
 8006574:	6093      	str	r3, [r2, #8]
 8006576:	da08      	bge.n	800658a <__sfputc_r+0x1e>
 8006578:	6994      	ldr	r4, [r2, #24]
 800657a:	42a3      	cmp	r3, r4
 800657c:	db01      	blt.n	8006582 <__sfputc_r+0x16>
 800657e:	290a      	cmp	r1, #10
 8006580:	d103      	bne.n	800658a <__sfputc_r+0x1e>
 8006582:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006586:	f7ff bde8 	b.w	800615a <__swbuf_r>
 800658a:	6813      	ldr	r3, [r2, #0]
 800658c:	1c58      	adds	r0, r3, #1
 800658e:	6010      	str	r0, [r2, #0]
 8006590:	7019      	strb	r1, [r3, #0]
 8006592:	4608      	mov	r0, r1
 8006594:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006598:	4770      	bx	lr

0800659a <__sfputs_r>:
 800659a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659c:	4606      	mov	r6, r0
 800659e:	460f      	mov	r7, r1
 80065a0:	4614      	mov	r4, r2
 80065a2:	18d5      	adds	r5, r2, r3
 80065a4:	42ac      	cmp	r4, r5
 80065a6:	d101      	bne.n	80065ac <__sfputs_r+0x12>
 80065a8:	2000      	movs	r0, #0
 80065aa:	e007      	b.n	80065bc <__sfputs_r+0x22>
 80065ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b0:	463a      	mov	r2, r7
 80065b2:	4630      	mov	r0, r6
 80065b4:	f7ff ffda 	bl	800656c <__sfputc_r>
 80065b8:	1c43      	adds	r3, r0, #1
 80065ba:	d1f3      	bne.n	80065a4 <__sfputs_r+0xa>
 80065bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065c0 <_vfiprintf_r>:
 80065c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c4:	460d      	mov	r5, r1
 80065c6:	b09d      	sub	sp, #116	@ 0x74
 80065c8:	4614      	mov	r4, r2
 80065ca:	4698      	mov	r8, r3
 80065cc:	4606      	mov	r6, r0
 80065ce:	b118      	cbz	r0, 80065d8 <_vfiprintf_r+0x18>
 80065d0:	6a03      	ldr	r3, [r0, #32]
 80065d2:	b90b      	cbnz	r3, 80065d8 <_vfiprintf_r+0x18>
 80065d4:	f7ff fcd8 	bl	8005f88 <__sinit>
 80065d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065da:	07d9      	lsls	r1, r3, #31
 80065dc:	d405      	bmi.n	80065ea <_vfiprintf_r+0x2a>
 80065de:	89ab      	ldrh	r3, [r5, #12]
 80065e0:	059a      	lsls	r2, r3, #22
 80065e2:	d402      	bmi.n	80065ea <_vfiprintf_r+0x2a>
 80065e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065e6:	f7ff fec6 	bl	8006376 <__retarget_lock_acquire_recursive>
 80065ea:	89ab      	ldrh	r3, [r5, #12]
 80065ec:	071b      	lsls	r3, r3, #28
 80065ee:	d501      	bpl.n	80065f4 <_vfiprintf_r+0x34>
 80065f0:	692b      	ldr	r3, [r5, #16]
 80065f2:	b99b      	cbnz	r3, 800661c <_vfiprintf_r+0x5c>
 80065f4:	4629      	mov	r1, r5
 80065f6:	4630      	mov	r0, r6
 80065f8:	f7ff fdee 	bl	80061d8 <__swsetup_r>
 80065fc:	b170      	cbz	r0, 800661c <_vfiprintf_r+0x5c>
 80065fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006600:	07dc      	lsls	r4, r3, #31
 8006602:	d504      	bpl.n	800660e <_vfiprintf_r+0x4e>
 8006604:	f04f 30ff 	mov.w	r0, #4294967295
 8006608:	b01d      	add	sp, #116	@ 0x74
 800660a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660e:	89ab      	ldrh	r3, [r5, #12]
 8006610:	0598      	lsls	r0, r3, #22
 8006612:	d4f7      	bmi.n	8006604 <_vfiprintf_r+0x44>
 8006614:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006616:	f7ff feaf 	bl	8006378 <__retarget_lock_release_recursive>
 800661a:	e7f3      	b.n	8006604 <_vfiprintf_r+0x44>
 800661c:	2300      	movs	r3, #0
 800661e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006620:	2320      	movs	r3, #32
 8006622:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006626:	f8cd 800c 	str.w	r8, [sp, #12]
 800662a:	2330      	movs	r3, #48	@ 0x30
 800662c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80067dc <_vfiprintf_r+0x21c>
 8006630:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006634:	f04f 0901 	mov.w	r9, #1
 8006638:	4623      	mov	r3, r4
 800663a:	469a      	mov	sl, r3
 800663c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006640:	b10a      	cbz	r2, 8006646 <_vfiprintf_r+0x86>
 8006642:	2a25      	cmp	r2, #37	@ 0x25
 8006644:	d1f9      	bne.n	800663a <_vfiprintf_r+0x7a>
 8006646:	ebba 0b04 	subs.w	fp, sl, r4
 800664a:	d00b      	beq.n	8006664 <_vfiprintf_r+0xa4>
 800664c:	465b      	mov	r3, fp
 800664e:	4622      	mov	r2, r4
 8006650:	4629      	mov	r1, r5
 8006652:	4630      	mov	r0, r6
 8006654:	f7ff ffa1 	bl	800659a <__sfputs_r>
 8006658:	3001      	adds	r0, #1
 800665a:	f000 80a7 	beq.w	80067ac <_vfiprintf_r+0x1ec>
 800665e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006660:	445a      	add	r2, fp
 8006662:	9209      	str	r2, [sp, #36]	@ 0x24
 8006664:	f89a 3000 	ldrb.w	r3, [sl]
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 809f 	beq.w	80067ac <_vfiprintf_r+0x1ec>
 800666e:	2300      	movs	r3, #0
 8006670:	f04f 32ff 	mov.w	r2, #4294967295
 8006674:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006678:	f10a 0a01 	add.w	sl, sl, #1
 800667c:	9304      	str	r3, [sp, #16]
 800667e:	9307      	str	r3, [sp, #28]
 8006680:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006684:	931a      	str	r3, [sp, #104]	@ 0x68
 8006686:	4654      	mov	r4, sl
 8006688:	2205      	movs	r2, #5
 800668a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800668e:	4853      	ldr	r0, [pc, #332]	@ (80067dc <_vfiprintf_r+0x21c>)
 8006690:	f7f9 fdae 	bl	80001f0 <memchr>
 8006694:	9a04      	ldr	r2, [sp, #16]
 8006696:	b9d8      	cbnz	r0, 80066d0 <_vfiprintf_r+0x110>
 8006698:	06d1      	lsls	r1, r2, #27
 800669a:	bf44      	itt	mi
 800669c:	2320      	movmi	r3, #32
 800669e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066a2:	0713      	lsls	r3, r2, #28
 80066a4:	bf44      	itt	mi
 80066a6:	232b      	movmi	r3, #43	@ 0x2b
 80066a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066ac:	f89a 3000 	ldrb.w	r3, [sl]
 80066b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80066b2:	d015      	beq.n	80066e0 <_vfiprintf_r+0x120>
 80066b4:	9a07      	ldr	r2, [sp, #28]
 80066b6:	4654      	mov	r4, sl
 80066b8:	2000      	movs	r0, #0
 80066ba:	f04f 0c0a 	mov.w	ip, #10
 80066be:	4621      	mov	r1, r4
 80066c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066c4:	3b30      	subs	r3, #48	@ 0x30
 80066c6:	2b09      	cmp	r3, #9
 80066c8:	d94b      	bls.n	8006762 <_vfiprintf_r+0x1a2>
 80066ca:	b1b0      	cbz	r0, 80066fa <_vfiprintf_r+0x13a>
 80066cc:	9207      	str	r2, [sp, #28]
 80066ce:	e014      	b.n	80066fa <_vfiprintf_r+0x13a>
 80066d0:	eba0 0308 	sub.w	r3, r0, r8
 80066d4:	fa09 f303 	lsl.w	r3, r9, r3
 80066d8:	4313      	orrs	r3, r2
 80066da:	9304      	str	r3, [sp, #16]
 80066dc:	46a2      	mov	sl, r4
 80066de:	e7d2      	b.n	8006686 <_vfiprintf_r+0xc6>
 80066e0:	9b03      	ldr	r3, [sp, #12]
 80066e2:	1d19      	adds	r1, r3, #4
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	9103      	str	r1, [sp, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	bfbb      	ittet	lt
 80066ec:	425b      	neglt	r3, r3
 80066ee:	f042 0202 	orrlt.w	r2, r2, #2
 80066f2:	9307      	strge	r3, [sp, #28]
 80066f4:	9307      	strlt	r3, [sp, #28]
 80066f6:	bfb8      	it	lt
 80066f8:	9204      	strlt	r2, [sp, #16]
 80066fa:	7823      	ldrb	r3, [r4, #0]
 80066fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80066fe:	d10a      	bne.n	8006716 <_vfiprintf_r+0x156>
 8006700:	7863      	ldrb	r3, [r4, #1]
 8006702:	2b2a      	cmp	r3, #42	@ 0x2a
 8006704:	d132      	bne.n	800676c <_vfiprintf_r+0x1ac>
 8006706:	9b03      	ldr	r3, [sp, #12]
 8006708:	1d1a      	adds	r2, r3, #4
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	9203      	str	r2, [sp, #12]
 800670e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006712:	3402      	adds	r4, #2
 8006714:	9305      	str	r3, [sp, #20]
 8006716:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80067ec <_vfiprintf_r+0x22c>
 800671a:	7821      	ldrb	r1, [r4, #0]
 800671c:	2203      	movs	r2, #3
 800671e:	4650      	mov	r0, sl
 8006720:	f7f9 fd66 	bl	80001f0 <memchr>
 8006724:	b138      	cbz	r0, 8006736 <_vfiprintf_r+0x176>
 8006726:	9b04      	ldr	r3, [sp, #16]
 8006728:	eba0 000a 	sub.w	r0, r0, sl
 800672c:	2240      	movs	r2, #64	@ 0x40
 800672e:	4082      	lsls	r2, r0
 8006730:	4313      	orrs	r3, r2
 8006732:	3401      	adds	r4, #1
 8006734:	9304      	str	r3, [sp, #16]
 8006736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800673a:	4829      	ldr	r0, [pc, #164]	@ (80067e0 <_vfiprintf_r+0x220>)
 800673c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006740:	2206      	movs	r2, #6
 8006742:	f7f9 fd55 	bl	80001f0 <memchr>
 8006746:	2800      	cmp	r0, #0
 8006748:	d03f      	beq.n	80067ca <_vfiprintf_r+0x20a>
 800674a:	4b26      	ldr	r3, [pc, #152]	@ (80067e4 <_vfiprintf_r+0x224>)
 800674c:	bb1b      	cbnz	r3, 8006796 <_vfiprintf_r+0x1d6>
 800674e:	9b03      	ldr	r3, [sp, #12]
 8006750:	3307      	adds	r3, #7
 8006752:	f023 0307 	bic.w	r3, r3, #7
 8006756:	3308      	adds	r3, #8
 8006758:	9303      	str	r3, [sp, #12]
 800675a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800675c:	443b      	add	r3, r7
 800675e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006760:	e76a      	b.n	8006638 <_vfiprintf_r+0x78>
 8006762:	fb0c 3202 	mla	r2, ip, r2, r3
 8006766:	460c      	mov	r4, r1
 8006768:	2001      	movs	r0, #1
 800676a:	e7a8      	b.n	80066be <_vfiprintf_r+0xfe>
 800676c:	2300      	movs	r3, #0
 800676e:	3401      	adds	r4, #1
 8006770:	9305      	str	r3, [sp, #20]
 8006772:	4619      	mov	r1, r3
 8006774:	f04f 0c0a 	mov.w	ip, #10
 8006778:	4620      	mov	r0, r4
 800677a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800677e:	3a30      	subs	r2, #48	@ 0x30
 8006780:	2a09      	cmp	r2, #9
 8006782:	d903      	bls.n	800678c <_vfiprintf_r+0x1cc>
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0c6      	beq.n	8006716 <_vfiprintf_r+0x156>
 8006788:	9105      	str	r1, [sp, #20]
 800678a:	e7c4      	b.n	8006716 <_vfiprintf_r+0x156>
 800678c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006790:	4604      	mov	r4, r0
 8006792:	2301      	movs	r3, #1
 8006794:	e7f0      	b.n	8006778 <_vfiprintf_r+0x1b8>
 8006796:	ab03      	add	r3, sp, #12
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	462a      	mov	r2, r5
 800679c:	4b12      	ldr	r3, [pc, #72]	@ (80067e8 <_vfiprintf_r+0x228>)
 800679e:	a904      	add	r1, sp, #16
 80067a0:	4630      	mov	r0, r6
 80067a2:	f3af 8000 	nop.w
 80067a6:	4607      	mov	r7, r0
 80067a8:	1c78      	adds	r0, r7, #1
 80067aa:	d1d6      	bne.n	800675a <_vfiprintf_r+0x19a>
 80067ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067ae:	07d9      	lsls	r1, r3, #31
 80067b0:	d405      	bmi.n	80067be <_vfiprintf_r+0x1fe>
 80067b2:	89ab      	ldrh	r3, [r5, #12]
 80067b4:	059a      	lsls	r2, r3, #22
 80067b6:	d402      	bmi.n	80067be <_vfiprintf_r+0x1fe>
 80067b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067ba:	f7ff fddd 	bl	8006378 <__retarget_lock_release_recursive>
 80067be:	89ab      	ldrh	r3, [r5, #12]
 80067c0:	065b      	lsls	r3, r3, #25
 80067c2:	f53f af1f 	bmi.w	8006604 <_vfiprintf_r+0x44>
 80067c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067c8:	e71e      	b.n	8006608 <_vfiprintf_r+0x48>
 80067ca:	ab03      	add	r3, sp, #12
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	462a      	mov	r2, r5
 80067d0:	4b05      	ldr	r3, [pc, #20]	@ (80067e8 <_vfiprintf_r+0x228>)
 80067d2:	a904      	add	r1, sp, #16
 80067d4:	4630      	mov	r0, r6
 80067d6:	f000 f879 	bl	80068cc <_printf_i>
 80067da:	e7e4      	b.n	80067a6 <_vfiprintf_r+0x1e6>
 80067dc:	08006de0 	.word	0x08006de0
 80067e0:	08006dea 	.word	0x08006dea
 80067e4:	00000000 	.word	0x00000000
 80067e8:	0800659b 	.word	0x0800659b
 80067ec:	08006de6 	.word	0x08006de6

080067f0 <_printf_common>:
 80067f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067f4:	4616      	mov	r6, r2
 80067f6:	4698      	mov	r8, r3
 80067f8:	688a      	ldr	r2, [r1, #8]
 80067fa:	690b      	ldr	r3, [r1, #16]
 80067fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006800:	4293      	cmp	r3, r2
 8006802:	bfb8      	it	lt
 8006804:	4613      	movlt	r3, r2
 8006806:	6033      	str	r3, [r6, #0]
 8006808:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800680c:	4607      	mov	r7, r0
 800680e:	460c      	mov	r4, r1
 8006810:	b10a      	cbz	r2, 8006816 <_printf_common+0x26>
 8006812:	3301      	adds	r3, #1
 8006814:	6033      	str	r3, [r6, #0]
 8006816:	6823      	ldr	r3, [r4, #0]
 8006818:	0699      	lsls	r1, r3, #26
 800681a:	bf42      	ittt	mi
 800681c:	6833      	ldrmi	r3, [r6, #0]
 800681e:	3302      	addmi	r3, #2
 8006820:	6033      	strmi	r3, [r6, #0]
 8006822:	6825      	ldr	r5, [r4, #0]
 8006824:	f015 0506 	ands.w	r5, r5, #6
 8006828:	d106      	bne.n	8006838 <_printf_common+0x48>
 800682a:	f104 0a19 	add.w	sl, r4, #25
 800682e:	68e3      	ldr	r3, [r4, #12]
 8006830:	6832      	ldr	r2, [r6, #0]
 8006832:	1a9b      	subs	r3, r3, r2
 8006834:	42ab      	cmp	r3, r5
 8006836:	dc26      	bgt.n	8006886 <_printf_common+0x96>
 8006838:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800683c:	6822      	ldr	r2, [r4, #0]
 800683e:	3b00      	subs	r3, #0
 8006840:	bf18      	it	ne
 8006842:	2301      	movne	r3, #1
 8006844:	0692      	lsls	r2, r2, #26
 8006846:	d42b      	bmi.n	80068a0 <_printf_common+0xb0>
 8006848:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800684c:	4641      	mov	r1, r8
 800684e:	4638      	mov	r0, r7
 8006850:	47c8      	blx	r9
 8006852:	3001      	adds	r0, #1
 8006854:	d01e      	beq.n	8006894 <_printf_common+0xa4>
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	6922      	ldr	r2, [r4, #16]
 800685a:	f003 0306 	and.w	r3, r3, #6
 800685e:	2b04      	cmp	r3, #4
 8006860:	bf02      	ittt	eq
 8006862:	68e5      	ldreq	r5, [r4, #12]
 8006864:	6833      	ldreq	r3, [r6, #0]
 8006866:	1aed      	subeq	r5, r5, r3
 8006868:	68a3      	ldr	r3, [r4, #8]
 800686a:	bf0c      	ite	eq
 800686c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006870:	2500      	movne	r5, #0
 8006872:	4293      	cmp	r3, r2
 8006874:	bfc4      	itt	gt
 8006876:	1a9b      	subgt	r3, r3, r2
 8006878:	18ed      	addgt	r5, r5, r3
 800687a:	2600      	movs	r6, #0
 800687c:	341a      	adds	r4, #26
 800687e:	42b5      	cmp	r5, r6
 8006880:	d11a      	bne.n	80068b8 <_printf_common+0xc8>
 8006882:	2000      	movs	r0, #0
 8006884:	e008      	b.n	8006898 <_printf_common+0xa8>
 8006886:	2301      	movs	r3, #1
 8006888:	4652      	mov	r2, sl
 800688a:	4641      	mov	r1, r8
 800688c:	4638      	mov	r0, r7
 800688e:	47c8      	blx	r9
 8006890:	3001      	adds	r0, #1
 8006892:	d103      	bne.n	800689c <_printf_common+0xac>
 8006894:	f04f 30ff 	mov.w	r0, #4294967295
 8006898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800689c:	3501      	adds	r5, #1
 800689e:	e7c6      	b.n	800682e <_printf_common+0x3e>
 80068a0:	18e1      	adds	r1, r4, r3
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	2030      	movs	r0, #48	@ 0x30
 80068a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068aa:	4422      	add	r2, r4
 80068ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068b4:	3302      	adds	r3, #2
 80068b6:	e7c7      	b.n	8006848 <_printf_common+0x58>
 80068b8:	2301      	movs	r3, #1
 80068ba:	4622      	mov	r2, r4
 80068bc:	4641      	mov	r1, r8
 80068be:	4638      	mov	r0, r7
 80068c0:	47c8      	blx	r9
 80068c2:	3001      	adds	r0, #1
 80068c4:	d0e6      	beq.n	8006894 <_printf_common+0xa4>
 80068c6:	3601      	adds	r6, #1
 80068c8:	e7d9      	b.n	800687e <_printf_common+0x8e>
	...

080068cc <_printf_i>:
 80068cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068d0:	7e0f      	ldrb	r7, [r1, #24]
 80068d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068d4:	2f78      	cmp	r7, #120	@ 0x78
 80068d6:	4691      	mov	r9, r2
 80068d8:	4680      	mov	r8, r0
 80068da:	460c      	mov	r4, r1
 80068dc:	469a      	mov	sl, r3
 80068de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068e2:	d807      	bhi.n	80068f4 <_printf_i+0x28>
 80068e4:	2f62      	cmp	r7, #98	@ 0x62
 80068e6:	d80a      	bhi.n	80068fe <_printf_i+0x32>
 80068e8:	2f00      	cmp	r7, #0
 80068ea:	f000 80d2 	beq.w	8006a92 <_printf_i+0x1c6>
 80068ee:	2f58      	cmp	r7, #88	@ 0x58
 80068f0:	f000 80b9 	beq.w	8006a66 <_printf_i+0x19a>
 80068f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068fc:	e03a      	b.n	8006974 <_printf_i+0xa8>
 80068fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006902:	2b15      	cmp	r3, #21
 8006904:	d8f6      	bhi.n	80068f4 <_printf_i+0x28>
 8006906:	a101      	add	r1, pc, #4	@ (adr r1, 800690c <_printf_i+0x40>)
 8006908:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800690c:	08006965 	.word	0x08006965
 8006910:	08006979 	.word	0x08006979
 8006914:	080068f5 	.word	0x080068f5
 8006918:	080068f5 	.word	0x080068f5
 800691c:	080068f5 	.word	0x080068f5
 8006920:	080068f5 	.word	0x080068f5
 8006924:	08006979 	.word	0x08006979
 8006928:	080068f5 	.word	0x080068f5
 800692c:	080068f5 	.word	0x080068f5
 8006930:	080068f5 	.word	0x080068f5
 8006934:	080068f5 	.word	0x080068f5
 8006938:	08006a79 	.word	0x08006a79
 800693c:	080069a3 	.word	0x080069a3
 8006940:	08006a33 	.word	0x08006a33
 8006944:	080068f5 	.word	0x080068f5
 8006948:	080068f5 	.word	0x080068f5
 800694c:	08006a9b 	.word	0x08006a9b
 8006950:	080068f5 	.word	0x080068f5
 8006954:	080069a3 	.word	0x080069a3
 8006958:	080068f5 	.word	0x080068f5
 800695c:	080068f5 	.word	0x080068f5
 8006960:	08006a3b 	.word	0x08006a3b
 8006964:	6833      	ldr	r3, [r6, #0]
 8006966:	1d1a      	adds	r2, r3, #4
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6032      	str	r2, [r6, #0]
 800696c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006970:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006974:	2301      	movs	r3, #1
 8006976:	e09d      	b.n	8006ab4 <_printf_i+0x1e8>
 8006978:	6833      	ldr	r3, [r6, #0]
 800697a:	6820      	ldr	r0, [r4, #0]
 800697c:	1d19      	adds	r1, r3, #4
 800697e:	6031      	str	r1, [r6, #0]
 8006980:	0606      	lsls	r6, r0, #24
 8006982:	d501      	bpl.n	8006988 <_printf_i+0xbc>
 8006984:	681d      	ldr	r5, [r3, #0]
 8006986:	e003      	b.n	8006990 <_printf_i+0xc4>
 8006988:	0645      	lsls	r5, r0, #25
 800698a:	d5fb      	bpl.n	8006984 <_printf_i+0xb8>
 800698c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006990:	2d00      	cmp	r5, #0
 8006992:	da03      	bge.n	800699c <_printf_i+0xd0>
 8006994:	232d      	movs	r3, #45	@ 0x2d
 8006996:	426d      	negs	r5, r5
 8006998:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800699c:	4859      	ldr	r0, [pc, #356]	@ (8006b04 <_printf_i+0x238>)
 800699e:	230a      	movs	r3, #10
 80069a0:	e011      	b.n	80069c6 <_printf_i+0xfa>
 80069a2:	6821      	ldr	r1, [r4, #0]
 80069a4:	6833      	ldr	r3, [r6, #0]
 80069a6:	0608      	lsls	r0, r1, #24
 80069a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80069ac:	d402      	bmi.n	80069b4 <_printf_i+0xe8>
 80069ae:	0649      	lsls	r1, r1, #25
 80069b0:	bf48      	it	mi
 80069b2:	b2ad      	uxthmi	r5, r5
 80069b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80069b6:	4853      	ldr	r0, [pc, #332]	@ (8006b04 <_printf_i+0x238>)
 80069b8:	6033      	str	r3, [r6, #0]
 80069ba:	bf14      	ite	ne
 80069bc:	230a      	movne	r3, #10
 80069be:	2308      	moveq	r3, #8
 80069c0:	2100      	movs	r1, #0
 80069c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069c6:	6866      	ldr	r6, [r4, #4]
 80069c8:	60a6      	str	r6, [r4, #8]
 80069ca:	2e00      	cmp	r6, #0
 80069cc:	bfa2      	ittt	ge
 80069ce:	6821      	ldrge	r1, [r4, #0]
 80069d0:	f021 0104 	bicge.w	r1, r1, #4
 80069d4:	6021      	strge	r1, [r4, #0]
 80069d6:	b90d      	cbnz	r5, 80069dc <_printf_i+0x110>
 80069d8:	2e00      	cmp	r6, #0
 80069da:	d04b      	beq.n	8006a74 <_printf_i+0x1a8>
 80069dc:	4616      	mov	r6, r2
 80069de:	fbb5 f1f3 	udiv	r1, r5, r3
 80069e2:	fb03 5711 	mls	r7, r3, r1, r5
 80069e6:	5dc7      	ldrb	r7, [r0, r7]
 80069e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069ec:	462f      	mov	r7, r5
 80069ee:	42bb      	cmp	r3, r7
 80069f0:	460d      	mov	r5, r1
 80069f2:	d9f4      	bls.n	80069de <_printf_i+0x112>
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	d10b      	bne.n	8006a10 <_printf_i+0x144>
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	07df      	lsls	r7, r3, #31
 80069fc:	d508      	bpl.n	8006a10 <_printf_i+0x144>
 80069fe:	6923      	ldr	r3, [r4, #16]
 8006a00:	6861      	ldr	r1, [r4, #4]
 8006a02:	4299      	cmp	r1, r3
 8006a04:	bfde      	ittt	le
 8006a06:	2330      	movle	r3, #48	@ 0x30
 8006a08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a10:	1b92      	subs	r2, r2, r6
 8006a12:	6122      	str	r2, [r4, #16]
 8006a14:	f8cd a000 	str.w	sl, [sp]
 8006a18:	464b      	mov	r3, r9
 8006a1a:	aa03      	add	r2, sp, #12
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	4640      	mov	r0, r8
 8006a20:	f7ff fee6 	bl	80067f0 <_printf_common>
 8006a24:	3001      	adds	r0, #1
 8006a26:	d14a      	bne.n	8006abe <_printf_i+0x1f2>
 8006a28:	f04f 30ff 	mov.w	r0, #4294967295
 8006a2c:	b004      	add	sp, #16
 8006a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	f043 0320 	orr.w	r3, r3, #32
 8006a38:	6023      	str	r3, [r4, #0]
 8006a3a:	4833      	ldr	r0, [pc, #204]	@ (8006b08 <_printf_i+0x23c>)
 8006a3c:	2778      	movs	r7, #120	@ 0x78
 8006a3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	6831      	ldr	r1, [r6, #0]
 8006a46:	061f      	lsls	r7, r3, #24
 8006a48:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a4c:	d402      	bmi.n	8006a54 <_printf_i+0x188>
 8006a4e:	065f      	lsls	r7, r3, #25
 8006a50:	bf48      	it	mi
 8006a52:	b2ad      	uxthmi	r5, r5
 8006a54:	6031      	str	r1, [r6, #0]
 8006a56:	07d9      	lsls	r1, r3, #31
 8006a58:	bf44      	itt	mi
 8006a5a:	f043 0320 	orrmi.w	r3, r3, #32
 8006a5e:	6023      	strmi	r3, [r4, #0]
 8006a60:	b11d      	cbz	r5, 8006a6a <_printf_i+0x19e>
 8006a62:	2310      	movs	r3, #16
 8006a64:	e7ac      	b.n	80069c0 <_printf_i+0xf4>
 8006a66:	4827      	ldr	r0, [pc, #156]	@ (8006b04 <_printf_i+0x238>)
 8006a68:	e7e9      	b.n	8006a3e <_printf_i+0x172>
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	f023 0320 	bic.w	r3, r3, #32
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	e7f6      	b.n	8006a62 <_printf_i+0x196>
 8006a74:	4616      	mov	r6, r2
 8006a76:	e7bd      	b.n	80069f4 <_printf_i+0x128>
 8006a78:	6833      	ldr	r3, [r6, #0]
 8006a7a:	6825      	ldr	r5, [r4, #0]
 8006a7c:	6961      	ldr	r1, [r4, #20]
 8006a7e:	1d18      	adds	r0, r3, #4
 8006a80:	6030      	str	r0, [r6, #0]
 8006a82:	062e      	lsls	r6, r5, #24
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	d501      	bpl.n	8006a8c <_printf_i+0x1c0>
 8006a88:	6019      	str	r1, [r3, #0]
 8006a8a:	e002      	b.n	8006a92 <_printf_i+0x1c6>
 8006a8c:	0668      	lsls	r0, r5, #25
 8006a8e:	d5fb      	bpl.n	8006a88 <_printf_i+0x1bc>
 8006a90:	8019      	strh	r1, [r3, #0]
 8006a92:	2300      	movs	r3, #0
 8006a94:	6123      	str	r3, [r4, #16]
 8006a96:	4616      	mov	r6, r2
 8006a98:	e7bc      	b.n	8006a14 <_printf_i+0x148>
 8006a9a:	6833      	ldr	r3, [r6, #0]
 8006a9c:	1d1a      	adds	r2, r3, #4
 8006a9e:	6032      	str	r2, [r6, #0]
 8006aa0:	681e      	ldr	r6, [r3, #0]
 8006aa2:	6862      	ldr	r2, [r4, #4]
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	f7f9 fba2 	bl	80001f0 <memchr>
 8006aac:	b108      	cbz	r0, 8006ab2 <_printf_i+0x1e6>
 8006aae:	1b80      	subs	r0, r0, r6
 8006ab0:	6060      	str	r0, [r4, #4]
 8006ab2:	6863      	ldr	r3, [r4, #4]
 8006ab4:	6123      	str	r3, [r4, #16]
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006abc:	e7aa      	b.n	8006a14 <_printf_i+0x148>
 8006abe:	6923      	ldr	r3, [r4, #16]
 8006ac0:	4632      	mov	r2, r6
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	4640      	mov	r0, r8
 8006ac6:	47d0      	blx	sl
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d0ad      	beq.n	8006a28 <_printf_i+0x15c>
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	079b      	lsls	r3, r3, #30
 8006ad0:	d413      	bmi.n	8006afa <_printf_i+0x22e>
 8006ad2:	68e0      	ldr	r0, [r4, #12]
 8006ad4:	9b03      	ldr	r3, [sp, #12]
 8006ad6:	4298      	cmp	r0, r3
 8006ad8:	bfb8      	it	lt
 8006ada:	4618      	movlt	r0, r3
 8006adc:	e7a6      	b.n	8006a2c <_printf_i+0x160>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	4632      	mov	r2, r6
 8006ae2:	4649      	mov	r1, r9
 8006ae4:	4640      	mov	r0, r8
 8006ae6:	47d0      	blx	sl
 8006ae8:	3001      	adds	r0, #1
 8006aea:	d09d      	beq.n	8006a28 <_printf_i+0x15c>
 8006aec:	3501      	adds	r5, #1
 8006aee:	68e3      	ldr	r3, [r4, #12]
 8006af0:	9903      	ldr	r1, [sp, #12]
 8006af2:	1a5b      	subs	r3, r3, r1
 8006af4:	42ab      	cmp	r3, r5
 8006af6:	dcf2      	bgt.n	8006ade <_printf_i+0x212>
 8006af8:	e7eb      	b.n	8006ad2 <_printf_i+0x206>
 8006afa:	2500      	movs	r5, #0
 8006afc:	f104 0619 	add.w	r6, r4, #25
 8006b00:	e7f5      	b.n	8006aee <_printf_i+0x222>
 8006b02:	bf00      	nop
 8006b04:	08006df1 	.word	0x08006df1
 8006b08:	08006e02 	.word	0x08006e02

08006b0c <__sflush_r>:
 8006b0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b14:	0716      	lsls	r6, r2, #28
 8006b16:	4605      	mov	r5, r0
 8006b18:	460c      	mov	r4, r1
 8006b1a:	d454      	bmi.n	8006bc6 <__sflush_r+0xba>
 8006b1c:	684b      	ldr	r3, [r1, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	dc02      	bgt.n	8006b28 <__sflush_r+0x1c>
 8006b22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	dd48      	ble.n	8006bba <__sflush_r+0xae>
 8006b28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b2a:	2e00      	cmp	r6, #0
 8006b2c:	d045      	beq.n	8006bba <__sflush_r+0xae>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b34:	682f      	ldr	r7, [r5, #0]
 8006b36:	6a21      	ldr	r1, [r4, #32]
 8006b38:	602b      	str	r3, [r5, #0]
 8006b3a:	d030      	beq.n	8006b9e <__sflush_r+0x92>
 8006b3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	0759      	lsls	r1, r3, #29
 8006b42:	d505      	bpl.n	8006b50 <__sflush_r+0x44>
 8006b44:	6863      	ldr	r3, [r4, #4]
 8006b46:	1ad2      	subs	r2, r2, r3
 8006b48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b4a:	b10b      	cbz	r3, 8006b50 <__sflush_r+0x44>
 8006b4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b4e:	1ad2      	subs	r2, r2, r3
 8006b50:	2300      	movs	r3, #0
 8006b52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b54:	6a21      	ldr	r1, [r4, #32]
 8006b56:	4628      	mov	r0, r5
 8006b58:	47b0      	blx	r6
 8006b5a:	1c43      	adds	r3, r0, #1
 8006b5c:	89a3      	ldrh	r3, [r4, #12]
 8006b5e:	d106      	bne.n	8006b6e <__sflush_r+0x62>
 8006b60:	6829      	ldr	r1, [r5, #0]
 8006b62:	291d      	cmp	r1, #29
 8006b64:	d82b      	bhi.n	8006bbe <__sflush_r+0xb2>
 8006b66:	4a2a      	ldr	r2, [pc, #168]	@ (8006c10 <__sflush_r+0x104>)
 8006b68:	410a      	asrs	r2, r1
 8006b6a:	07d6      	lsls	r6, r2, #31
 8006b6c:	d427      	bmi.n	8006bbe <__sflush_r+0xb2>
 8006b6e:	2200      	movs	r2, #0
 8006b70:	6062      	str	r2, [r4, #4]
 8006b72:	04d9      	lsls	r1, r3, #19
 8006b74:	6922      	ldr	r2, [r4, #16]
 8006b76:	6022      	str	r2, [r4, #0]
 8006b78:	d504      	bpl.n	8006b84 <__sflush_r+0x78>
 8006b7a:	1c42      	adds	r2, r0, #1
 8006b7c:	d101      	bne.n	8006b82 <__sflush_r+0x76>
 8006b7e:	682b      	ldr	r3, [r5, #0]
 8006b80:	b903      	cbnz	r3, 8006b84 <__sflush_r+0x78>
 8006b82:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b86:	602f      	str	r7, [r5, #0]
 8006b88:	b1b9      	cbz	r1, 8006bba <__sflush_r+0xae>
 8006b8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b8e:	4299      	cmp	r1, r3
 8006b90:	d002      	beq.n	8006b98 <__sflush_r+0x8c>
 8006b92:	4628      	mov	r0, r5
 8006b94:	f7ff fbf2 	bl	800637c <_free_r>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b9c:	e00d      	b.n	8006bba <__sflush_r+0xae>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	47b0      	blx	r6
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	1c50      	adds	r0, r2, #1
 8006ba8:	d1c9      	bne.n	8006b3e <__sflush_r+0x32>
 8006baa:	682b      	ldr	r3, [r5, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d0c6      	beq.n	8006b3e <__sflush_r+0x32>
 8006bb0:	2b1d      	cmp	r3, #29
 8006bb2:	d001      	beq.n	8006bb8 <__sflush_r+0xac>
 8006bb4:	2b16      	cmp	r3, #22
 8006bb6:	d11e      	bne.n	8006bf6 <__sflush_r+0xea>
 8006bb8:	602f      	str	r7, [r5, #0]
 8006bba:	2000      	movs	r0, #0
 8006bbc:	e022      	b.n	8006c04 <__sflush_r+0xf8>
 8006bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bc2:	b21b      	sxth	r3, r3
 8006bc4:	e01b      	b.n	8006bfe <__sflush_r+0xf2>
 8006bc6:	690f      	ldr	r7, [r1, #16]
 8006bc8:	2f00      	cmp	r7, #0
 8006bca:	d0f6      	beq.n	8006bba <__sflush_r+0xae>
 8006bcc:	0793      	lsls	r3, r2, #30
 8006bce:	680e      	ldr	r6, [r1, #0]
 8006bd0:	bf08      	it	eq
 8006bd2:	694b      	ldreq	r3, [r1, #20]
 8006bd4:	600f      	str	r7, [r1, #0]
 8006bd6:	bf18      	it	ne
 8006bd8:	2300      	movne	r3, #0
 8006bda:	eba6 0807 	sub.w	r8, r6, r7
 8006bde:	608b      	str	r3, [r1, #8]
 8006be0:	f1b8 0f00 	cmp.w	r8, #0
 8006be4:	dde9      	ble.n	8006bba <__sflush_r+0xae>
 8006be6:	6a21      	ldr	r1, [r4, #32]
 8006be8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006bea:	4643      	mov	r3, r8
 8006bec:	463a      	mov	r2, r7
 8006bee:	4628      	mov	r0, r5
 8006bf0:	47b0      	blx	r6
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	dc08      	bgt.n	8006c08 <__sflush_r+0xfc>
 8006bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bfe:	81a3      	strh	r3, [r4, #12]
 8006c00:	f04f 30ff 	mov.w	r0, #4294967295
 8006c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c08:	4407      	add	r7, r0
 8006c0a:	eba8 0800 	sub.w	r8, r8, r0
 8006c0e:	e7e7      	b.n	8006be0 <__sflush_r+0xd4>
 8006c10:	dfbffffe 	.word	0xdfbffffe

08006c14 <_fflush_r>:
 8006c14:	b538      	push	{r3, r4, r5, lr}
 8006c16:	690b      	ldr	r3, [r1, #16]
 8006c18:	4605      	mov	r5, r0
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	b913      	cbnz	r3, 8006c24 <_fflush_r+0x10>
 8006c1e:	2500      	movs	r5, #0
 8006c20:	4628      	mov	r0, r5
 8006c22:	bd38      	pop	{r3, r4, r5, pc}
 8006c24:	b118      	cbz	r0, 8006c2e <_fflush_r+0x1a>
 8006c26:	6a03      	ldr	r3, [r0, #32]
 8006c28:	b90b      	cbnz	r3, 8006c2e <_fflush_r+0x1a>
 8006c2a:	f7ff f9ad 	bl	8005f88 <__sinit>
 8006c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d0f3      	beq.n	8006c1e <_fflush_r+0xa>
 8006c36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c38:	07d0      	lsls	r0, r2, #31
 8006c3a:	d404      	bmi.n	8006c46 <_fflush_r+0x32>
 8006c3c:	0599      	lsls	r1, r3, #22
 8006c3e:	d402      	bmi.n	8006c46 <_fflush_r+0x32>
 8006c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c42:	f7ff fb98 	bl	8006376 <__retarget_lock_acquire_recursive>
 8006c46:	4628      	mov	r0, r5
 8006c48:	4621      	mov	r1, r4
 8006c4a:	f7ff ff5f 	bl	8006b0c <__sflush_r>
 8006c4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c50:	07da      	lsls	r2, r3, #31
 8006c52:	4605      	mov	r5, r0
 8006c54:	d4e4      	bmi.n	8006c20 <_fflush_r+0xc>
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	059b      	lsls	r3, r3, #22
 8006c5a:	d4e1      	bmi.n	8006c20 <_fflush_r+0xc>
 8006c5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c5e:	f7ff fb8b 	bl	8006378 <__retarget_lock_release_recursive>
 8006c62:	e7dd      	b.n	8006c20 <_fflush_r+0xc>

08006c64 <__swhatbuf_r>:
 8006c64:	b570      	push	{r4, r5, r6, lr}
 8006c66:	460c      	mov	r4, r1
 8006c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c6c:	2900      	cmp	r1, #0
 8006c6e:	b096      	sub	sp, #88	@ 0x58
 8006c70:	4615      	mov	r5, r2
 8006c72:	461e      	mov	r6, r3
 8006c74:	da0d      	bge.n	8006c92 <__swhatbuf_r+0x2e>
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006c7c:	f04f 0100 	mov.w	r1, #0
 8006c80:	bf14      	ite	ne
 8006c82:	2340      	movne	r3, #64	@ 0x40
 8006c84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006c88:	2000      	movs	r0, #0
 8006c8a:	6031      	str	r1, [r6, #0]
 8006c8c:	602b      	str	r3, [r5, #0]
 8006c8e:	b016      	add	sp, #88	@ 0x58
 8006c90:	bd70      	pop	{r4, r5, r6, pc}
 8006c92:	466a      	mov	r2, sp
 8006c94:	f000 f848 	bl	8006d28 <_fstat_r>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	dbec      	blt.n	8006c76 <__swhatbuf_r+0x12>
 8006c9c:	9901      	ldr	r1, [sp, #4]
 8006c9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ca2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006ca6:	4259      	negs	r1, r3
 8006ca8:	4159      	adcs	r1, r3
 8006caa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cae:	e7eb      	b.n	8006c88 <__swhatbuf_r+0x24>

08006cb0 <__smakebuf_r>:
 8006cb0:	898b      	ldrh	r3, [r1, #12]
 8006cb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cb4:	079d      	lsls	r5, r3, #30
 8006cb6:	4606      	mov	r6, r0
 8006cb8:	460c      	mov	r4, r1
 8006cba:	d507      	bpl.n	8006ccc <__smakebuf_r+0x1c>
 8006cbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	6123      	str	r3, [r4, #16]
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	6163      	str	r3, [r4, #20]
 8006cc8:	b003      	add	sp, #12
 8006cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ccc:	ab01      	add	r3, sp, #4
 8006cce:	466a      	mov	r2, sp
 8006cd0:	f7ff ffc8 	bl	8006c64 <__swhatbuf_r>
 8006cd4:	9f00      	ldr	r7, [sp, #0]
 8006cd6:	4605      	mov	r5, r0
 8006cd8:	4639      	mov	r1, r7
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f7ff fbba 	bl	8006454 <_malloc_r>
 8006ce0:	b948      	cbnz	r0, 8006cf6 <__smakebuf_r+0x46>
 8006ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ce6:	059a      	lsls	r2, r3, #22
 8006ce8:	d4ee      	bmi.n	8006cc8 <__smakebuf_r+0x18>
 8006cea:	f023 0303 	bic.w	r3, r3, #3
 8006cee:	f043 0302 	orr.w	r3, r3, #2
 8006cf2:	81a3      	strh	r3, [r4, #12]
 8006cf4:	e7e2      	b.n	8006cbc <__smakebuf_r+0xc>
 8006cf6:	89a3      	ldrh	r3, [r4, #12]
 8006cf8:	6020      	str	r0, [r4, #0]
 8006cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cfe:	81a3      	strh	r3, [r4, #12]
 8006d00:	9b01      	ldr	r3, [sp, #4]
 8006d02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d06:	b15b      	cbz	r3, 8006d20 <__smakebuf_r+0x70>
 8006d08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	f000 f81d 	bl	8006d4c <_isatty_r>
 8006d12:	b128      	cbz	r0, 8006d20 <__smakebuf_r+0x70>
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	f023 0303 	bic.w	r3, r3, #3
 8006d1a:	f043 0301 	orr.w	r3, r3, #1
 8006d1e:	81a3      	strh	r3, [r4, #12]
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	431d      	orrs	r5, r3
 8006d24:	81a5      	strh	r5, [r4, #12]
 8006d26:	e7cf      	b.n	8006cc8 <__smakebuf_r+0x18>

08006d28 <_fstat_r>:
 8006d28:	b538      	push	{r3, r4, r5, lr}
 8006d2a:	4d07      	ldr	r5, [pc, #28]	@ (8006d48 <_fstat_r+0x20>)
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	4604      	mov	r4, r0
 8006d30:	4608      	mov	r0, r1
 8006d32:	4611      	mov	r1, r2
 8006d34:	602b      	str	r3, [r5, #0]
 8006d36:	f7fb fc47 	bl	80025c8 <_fstat>
 8006d3a:	1c43      	adds	r3, r0, #1
 8006d3c:	d102      	bne.n	8006d44 <_fstat_r+0x1c>
 8006d3e:	682b      	ldr	r3, [r5, #0]
 8006d40:	b103      	cbz	r3, 8006d44 <_fstat_r+0x1c>
 8006d42:	6023      	str	r3, [r4, #0]
 8006d44:	bd38      	pop	{r3, r4, r5, pc}
 8006d46:	bf00      	nop
 8006d48:	20025d64 	.word	0x20025d64

08006d4c <_isatty_r>:
 8006d4c:	b538      	push	{r3, r4, r5, lr}
 8006d4e:	4d06      	ldr	r5, [pc, #24]	@ (8006d68 <_isatty_r+0x1c>)
 8006d50:	2300      	movs	r3, #0
 8006d52:	4604      	mov	r4, r0
 8006d54:	4608      	mov	r0, r1
 8006d56:	602b      	str	r3, [r5, #0]
 8006d58:	f7fb fc46 	bl	80025e8 <_isatty>
 8006d5c:	1c43      	adds	r3, r0, #1
 8006d5e:	d102      	bne.n	8006d66 <_isatty_r+0x1a>
 8006d60:	682b      	ldr	r3, [r5, #0]
 8006d62:	b103      	cbz	r3, 8006d66 <_isatty_r+0x1a>
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	bd38      	pop	{r3, r4, r5, pc}
 8006d68:	20025d64 	.word	0x20025d64

08006d6c <_sbrk_r>:
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	4d06      	ldr	r5, [pc, #24]	@ (8006d88 <_sbrk_r+0x1c>)
 8006d70:	2300      	movs	r3, #0
 8006d72:	4604      	mov	r4, r0
 8006d74:	4608      	mov	r0, r1
 8006d76:	602b      	str	r3, [r5, #0]
 8006d78:	f7fb fc4e 	bl	8002618 <_sbrk>
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	d102      	bne.n	8006d86 <_sbrk_r+0x1a>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	b103      	cbz	r3, 8006d86 <_sbrk_r+0x1a>
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	bd38      	pop	{r3, r4, r5, pc}
 8006d88:	20025d64 	.word	0x20025d64

08006d8c <_init>:
 8006d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8e:	bf00      	nop
 8006d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d92:	bc08      	pop	{r3}
 8006d94:	469e      	mov	lr, r3
 8006d96:	4770      	bx	lr

08006d98 <_fini>:
 8006d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9a:	bf00      	nop
 8006d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d9e:	bc08      	pop	{r3}
 8006da0:	469e      	mov	lr, r3
 8006da2:	4770      	bx	lr
